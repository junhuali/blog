{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wechat_qrcode.jpg","path":"uploads/wechat_qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/googleb85119e82958b681.html","hash":"a2834452b4f535256e4ffdb8302bb872ca97a399","modified":1571798296263},{"_id":"source/robots.txt","hash":"4e874d40f1759a10b72be7117a61074cf9ee454c","modified":1571798290681},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1571544964839},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1571544964839},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1571544964839},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1571544964841},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1571544964841},{"_id":"themes/next/README.md","hash":"2b54a384b207d64ae407793949dc8eec3f136701","modified":1571544964842},{"_id":"themes/next/.travis.yml","hash":"3a69594e562f42c04b137093c61c9f2f10adf714","modified":1571544964841},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1571544964841},{"_id":"themes/next/_config.yml","hash":"70485bffc4cdaa1a4c292ec9dcaec0b4445be6f8","modified":1587004380024},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1571544964842},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1571544964845},{"_id":"themes/next/package.json","hash":"5e218373ff6e676a54fe5f903a04e49324029908","modified":1571544964861},{"_id":"source/favicon.ico","hash":"4fd8444112d0d7207ac0f05f84f29347707ab995","modified":1571798302965},{"_id":"source/_posts/.DS_Store","hash":"739aaf471bbece02eb790423c78d730100f8a2f9","modified":1571547287352},{"_id":"source/_posts/BTC-Tutorial.md","hash":"3bb0c9de8c0e940f53bb7517f548ff1e7bdf8900","modified":1571547287353},{"_id":"source/_posts/Could-not-get-a-resource-from-the-pool.md","hash":"883ae69b1caeb61118687f8c8fbbb27c12ca54d9","modified":1571547287354},{"_id":"source/_posts/Java-constant-string-is-too-long.md","hash":"3cd30e1d34211e8abc4cf26d6ea789389a3304f4","modified":1571547287355},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name.md","hash":"79af511fd9cdaa49d651bc99520d1d6d50906ab8","modified":1571547287358},{"_id":"source/_posts/Machine-Learning-in-Java-1.md","hash":"268b56c5f54b806be8d98ff49b48e6969cbcb6dc","modified":1571547287359},{"_id":"source/_posts/Nginx-504-GateWay-Time-Out.md","hash":"9cf36b8e737788c4e1038db9328d5ec767171fad","modified":1571547287359},{"_id":"source/_posts/Spring-singleton-and-prototype.md","hash":"6de2cc5025b9bb870f8bad1c7b474f5de3693364","modified":1571547287360},{"_id":"source/_posts/apollo-eagerload.md","hash":"cac6021d84a975c85936f29086152e4f61b54db0","modified":1571547287361},{"_id":"source/_posts/ark-server.md","hash":"50253eb703a5a22ef2a4d765c6c33188a80c6744","modified":1586842822153},{"_id":"source/_posts/brew-upgrade-error.md","hash":"5b628bb1b9785c2588d6ccaea02a3a929329a3fd","modified":1571547287362},{"_id":"source/_posts/build-an-app-distribution-platform.md","hash":"90689a8b3629b45ef917e4931997890ab9d75cf6","modified":1571547287363},{"_id":"source/_posts/centos-install-git.md","hash":"30ebaba9105b2e4ce6bd649e2922113dcdfba1a9","modified":1571547287363},{"_id":"source/_posts/centos-install-redis5-x.md","hash":"1d06a7dae8d8fea41b248a05387a1ea0ec10a168","modified":1571547287364},{"_id":"source/_posts/centos7-docker-install-tutorial.md","hash":"76b8275d7b0e4608dce68b842f28a68a6a8bfc09","modified":1571547287366},{"_id":"source/_posts/cnetos-install-pyenv.md","hash":"251e406a8e9aca47f93ddcc23c432ca7a24d6591","modified":1571547287366},{"_id":"source/_posts/common-commonds.md","hash":"f1451ecf7f79e7e88affb3a56f7e594afd35ded2","modified":1571547287367},{"_id":"source/_posts/config-npm-registry.md","hash":"5ea5b9d5e2e999e20271ac8ba88c054eb7bfef52","modified":1571547287368},{"_id":"source/_posts/devops-1-environmental-configuration.md","hash":"2db0c954fc40fbfd38f5fde86cc2e6d99d43c19b","modified":1571547287373},{"_id":"source/_posts/devops-2-springboot-docker-integrated.md","hash":"9864e231b07919acd529d7e0cbd726359006e72b","modified":1571547287378},{"_id":"source/_posts/docker-create-mysql.md","hash":"62e356874a60287af2a5c31d2c5c65fc4552a3c9","modified":1571547287379},{"_id":"source/_posts/docker-install-MongoDB.md","hash":"726119787bf7cfb4493830774b22e7f10ea7cebc","modified":1571547287379},{"_id":"source/_posts/docker-install-nexus.md","hash":"7e9ac2715f9209b58666c77ee95ec6f3f957008f","modified":1571547287380},{"_id":"source/_posts/docker-install-rabbitmq-cluster.md","hash":"324affde9f7e1d4ca03af1671063ad498e109f5e","modified":1571547287380},{"_id":"source/_posts/feign-post-form-data.md","hash":"e3e48e55d8dde15dfba40b85a86e3e525e254ac8","modified":1571547287381},{"_id":"source/_posts/first-flutter-app.md","hash":"c525e04bee4feb6e204cba2ca2b24f6eedf16dfe","modified":1571547287390},{"_id":"source/_posts/gitee-with-webhook.md","hash":"97e3e07f766cfa4f93ba5b1da8a52752b4ab5988","modified":1571547287394},{"_id":"source/_posts/hexo-can't-find-module.md","hash":"2f56d1cf9f12d93c40aa272026d977f9a819ee58","modified":1571547287395},{"_id":"source/_posts/interview-experience.md","hash":"05bc7cc91946d3c414bee9673839ac60c7b2d895","modified":1571547287395},{"_id":"source/_posts/java-concurrency-study.md","hash":"63474387c8c19eed0bcb4b5b8257e0efd3bad2c5","modified":1571547287396},{"_id":"source/_posts/kubeadm-install-kubernetes.md","hash":"7cc12036ccceb0e7a6b57866b55c43daeb7f8d96","modified":1571547287397},{"_id":"source/_posts/life.md","hash":"5f0da4af9d8025c6dcbfc9fb4111367fb9713c20","modified":1571547287397},{"_id":"source/_posts/lightsail-use-root-logn.md","hash":"167229f0e1299390d524f2dad4cc65c8e501e8f9","modified":1574390909880},{"_id":"source/_posts/md5-and-salt-encryption.md","hash":"00c08adcfbae9e94404c866488610ae68a6deee4","modified":1571547287398},{"_id":"source/_posts/netty-study.md","hash":"3d11c3109ac37130814f00942727a477f8f5ac64","modified":1571547287399},{"_id":"source/_posts/nginx-load-balance-strategy.md","hash":"768d4f58a812d2c00a446f916fd28cce8545f5b9","modified":1571547287399},{"_id":"source/_posts/nginx-study-1.md","hash":"ebaffa549e7752824e0f772985eaaeead677c0e1","modified":1591756351933},{"_id":"source/_posts/nginx-study-2.md","hash":"4581061b60f453fd5898cf815ba7c00f5b0543ac","modified":1591759647706},{"_id":"source/_posts/node-install.md","hash":"f21cca3c2f8b1937b1760551bf8d8cb9353c27ed","modified":1571547287400},{"_id":"source/_posts/node-project-summary.md","hash":"5a11d8f532a534f59a198db72907358d81857c43","modified":1571547287400},{"_id":"source/_posts/okhttp3-proxy-auth.md","hash":"a99693aa0d50ca6c53a470d0b4937637272d661c","modified":1571547287401},{"_id":"source/_posts/pthon-tutorial.md","hash":"5bf6e65055c42b22f42346059bfce84a426fc9a6","modified":1571547287402},{"_id":"source/_posts/python-requirements.md","hash":"574e281387466b5b17fe3865c8980b1e89bcb133","modified":1571547287404},{"_id":"source/_posts/raise-github-clone-speed.md","hash":"075da8467046726c3a4fbaa9dbabf24e7e1a59b7","modified":1571547287406},{"_id":"source/_posts/regular-expression-basic.md","hash":"d329cd0ea4d65039c5adc40f63a90faf7fe0b4ea","modified":1571547287407},{"_id":"source/_posts/server-over-the-wall.md","hash":"872c027fa148b9aa7cb9226c2a5aaea36691187d","modified":1571547287407},{"_id":"source/_posts/socks5-server.md","hash":"73c6ef5e32dfda218276387b21509555e151184b","modified":1571547287408},{"_id":"source/_posts/some-pressure-measuring-tools.md","hash":"92ba2136531c82d3b5db9db503bcfade4d24a5de","modified":1571547287415},{"_id":"source/_posts/spring-seluth-zipkin.md","hash":"c886783edad07ed1a5638de305b4b5b09a37343d","modified":1584590118174},{"_id":"source/_posts/study-dart-1.md","hash":"37c3726df8b6aa6eca5e413a28a5e962ded4b48b","modified":1571547287416},{"_id":"source/_posts/study-elastic-stack-1.md","hash":"c72ec5f1f3e3195238969473262c33a0fa7a76fa","modified":1571547287418},{"_id":"source/_posts/study-elastic-stack-2.md","hash":"c0ea583f84c8b8c46993d784838b976c3bcff13d","modified":1571548784007},{"_id":"source/_posts/study-pandas-notes-2.md","hash":"0e37c5b9b46894cd9ccce64c4f28ec12862760f5","modified":1571547287420},{"_id":"source/_posts/study-pandas-notes-3.md","hash":"e261dd58650bb41453d515759ef99005941be0af","modified":1571547287421},{"_id":"source/_posts/study-pandas-notes.md","hash":"3702f76dc969f2b3136a9bf5fe5290321f5e90af","modified":1571547287421},{"_id":"source/_posts/study-shell.md","hash":"2ebded2fda21d8eebef02baae3869e779f9e5937","modified":1571547287422},{"_id":"source/_posts/swagger-2.9.2-NumberFormatException.md","hash":"7894f978fdc10d2170162794cebc38cbbbd01ef4","modified":1571547287423},{"_id":"source/_posts/ubuntu-install-lamp.md","hash":"9bbd284268c261dc0540043398c0b6d8206eb5f2","modified":1571547287423},{"_id":"source/_posts/use-a-fake-system-clock-with-docker.md","hash":"68e3cd84fc044b20a0a18a2e308c45ef7a2b6a0a","modified":1571547287424},{"_id":"source/_posts/use-frp.md","hash":"6ccdb6dd2bfb89e5957ddc915e054776cf4f398d","modified":1571547287425},{"_id":"source/_posts/what-is-libra.md","hash":"76ace0f2f3647d744f8476e1bd3fd8e8ab87855d","modified":1571547287426},{"_id":"source/_posts/yum-install-nginx-add-modules.md","hash":"f64d9101fdc48ee7372aa4829ecef9ba646b28de","modified":1571547287427},{"_id":"source/categories/index.md","hash":"634b044ed66071664ef9485f1fd78f868503fc30","modified":1571796874383},{"_id":"source/about/index.md","hash":"6d7da449680d00acd9753a950906c9e1ef8a7583","modified":1571796874382},{"_id":"source/tags/index.md","hash":"3517dc6dfe54d62bf2f22e037b652c9ebcee9b97","modified":1571796874383},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1571544964839},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"0928b4db7eabac1e41c82e297f16f217774bea25","modified":1571544964839},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1571544964840},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1571544964840},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1571544964840},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1571544964840},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1571544964840},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1571544964840},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1571544964841},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1571544964841},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1571544964841},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1571544964841},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1571544964842},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1571544964843},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1571544964843},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1571544964843},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1571544964843},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1571544964843},{"_id":"themes/next/docs/MATH.md","hash":"58a961498c55cf4f0c69cf3668c810b602a17529","modified":1571544964843},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1571544964843},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1571544964845},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1571544964846},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1571544964846},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1571544964846},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1571544964846},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1571544964846},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1571544964846},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1571544964846},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1571544964846},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1571544964846},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1571544964846},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1571544964847},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1571544964847},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1571544964847},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1571544964847},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1571544964847},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1571544964847},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1571544964847},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1571544964847},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1571544964848},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1571544964849},{"_id":"themes/next/layout/_layout.swig","hash":"254194c005b75c5a0e6cd2769f3e4b3a9e16ea7f","modified":1571544964849},{"_id":"themes/next/layout/archive.swig","hash":"59155648f6306888077d1f1d635f63177b36148d","modified":1571544964860},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1571544964861},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1571544964861},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1571544964861},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1571544964861},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1571544964861},{"_id":"themes/next/scripts/renderer.js","hash":"09bc459acab93e5ff9e2636d2b9d2a99025aa16f","modified":1571544964863},{"_id":"source/_posts/what-is-libra.pdf","hash":"d060952f3a8431849c77f64042166735940acacf","modified":1571547287426},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1571544964842},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1571547287356},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","hash":"76a26a5afb52b2c543239b8eaf1f94cc848690e0","modified":1571547287357},{"_id":"source/_posts/devops-1-environmental-configuration/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1571547287369},{"_id":"source/_posts/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","hash":"bf8253b3b123ad8d1a31477279c81d5d3656ae44","modified":1571547287369},{"_id":"source/_posts/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","hash":"7e153fb751346f4885dde3221d5d90b4a86e7f32","modified":1571547287370},{"_id":"source/_posts/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","hash":"350a21551ae37433ca465e3bfa65292f98e6ef0f","modified":1571547287371},{"_id":"source/_posts/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","hash":"2cf2d5dc049895e1d637585c5fddade524cb5242","modified":1571547287372},{"_id":"source/_posts/devops-1-environmental-configuration/191b000762026287366b.jpeg","hash":"b5a2e2b35c0668f64642ba3c87a0774ccc94b000","modified":1571547287372},{"_id":"source/_posts/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","hash":"6a85f547b4dc2ee3773b60da5eac28ae66dbfb92","modified":1571547287373},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174208.png","hash":"1b942b703548a1dec40863a7b49d8ea2cc9fb83f","modified":1571547287375},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174110.png","hash":"7eedb7da5e2fdd8b3015c3112abbe86fa9331fa2","modified":1571547287375},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203234.png","hash":"c93c1a9404d7e4ad17675f4c4aa57b9b2f3892f1","modified":1571547287376},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-204116.png","hash":"5355b4ab2dc62f73f63276874a1f4081e149568d","modified":1571547287378},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203815.png","hash":"b08a4c9f5b810d91dbec8edb04beaed6741c551e","modified":1571547287377},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163439@2x.png","hash":"0b4e62dda96e20e22f40558bdd4aab5c3aaf22e0","modified":1571547287391},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-113942.png","hash":"392554f3c7c29badcae1a5afc4e98d5b0303ead2","modified":1571547287404},{"_id":"source/_posts/spring-seluth-zipkin/WX20200319-113846.png","hash":"0156aa158828e134ebbba23af6c37995a8cb9abd","modified":1584589195781},{"_id":"source/_posts/study-elastic-stack-1/elk-stack-elkb-diagram.png","hash":"df1b5d8eedcbd20a8bfbff09de6b0047bc5ec003","modified":1571547287417},{"_id":"source/_posts/study-elastic-stack-1/elk-stack-elkb-diagram.svg","hash":"ef346754b3e3a521b9ecc3d053e6a5db129c7f3e","modified":1571547287418},{"_id":"source/_posts/study-pandas-notes/pandas.png","hash":"d66541879a5350bf2ba26000d4d114aab15315f7","modified":1571547287420},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"12b7bc6dd248bb6ca6c837b05b3be5ab150d6e07","modified":1571544964840},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"3dabc7effd99d2de0e1a0fae853679a3a4f5e0ce","modified":1571544964840},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ada85c07483f50b288fdbcca4d099c85adf3d719","modified":1571544964840},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"7c567f6496c81746d916f81137a03e8e59f48d7f","modified":1571544964840},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1571544964843},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1571544964844},{"_id":"themes/next/docs/ru/README.md","hash":"f36644786d3ac30dea8fc456d54bbe3e1db6a7d6","modified":1571544964844},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1571544964844},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1571544964844},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1571544964844},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1571544964844},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"41c06240e349a885b640c6ba4a982e3b8e7762fe","modified":1571544964844},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1571544964844},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1571544964845},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"c7df75363851f31ae7a3e7b93798070c5d8a3053","modified":1571544964845},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7a2f600df2b6efd679bedf6b8da2b180adcc5fdf","modified":1571544964845},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1571544964845},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1571544964849},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1116597ae81c391981f3a8b80fa6febe5796583d","modified":1571544964850},{"_id":"themes/next/layout/_macro/post.swig","hash":"49286525140edeb79ba5aaf3162df38a1ebd3a44","modified":1571544964850},{"_id":"themes/next/layout/_partials/comments.swig","hash":"479286b378b027224c600f6bdd9ed51126086993","modified":1571544964851},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1c1a0b2b0f793ad2424f5a76aef4478e3c67157b","modified":1585537387294},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"b9d3f6534efb9e637ac46318fa07c2e5607bf830","modified":1571544964853},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1571544964855},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1571544964855},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1571544964855},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1571544964856},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1571544964857},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"597a8ea77dfcb1a74922b37ad50d8027c6e7d454","modified":1571544964857},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1571544964858},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"c6bfa6f00703d483af741b0de3e2cbc6a874fa75","modified":1571544964859},{"_id":"themes/next/layout/_third-party/index.swig","hash":"5affd16974528a1065d8b4aa799282d861db5362","modified":1571544964859},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"4abfcb5dae0e6dec5e288baa3a9fe4065829b392","modified":1571544964860},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1571544964860},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1571544964860},{"_id":"themes/next/scripts/events/index.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1571544964861},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1571544964863},{"_id":"themes/next/scripts/filters/locals.js","hash":"ffa0e122c1cdf9c86ddca104ddb2dfbaccaa1bb5","modified":1571544964863},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1571544964863},{"_id":"themes/next/scripts/filters/post.js","hash":"3c1e483c2c4a1c5a2f9a99b81ce0fda5fd21926b","modified":1571544964863},{"_id":"themes/next/scripts/helpers/engine.js","hash":"e21e57edf0506a9d84ea24a8f17e81e922f1a206","modified":1571544964863},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1571544964863},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"e60e6c0aaa979d42b01685ba2a03a76fa6e059e2","modified":1571544964863},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1571544964864},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1571544964864},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1571544964864},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1571544964864},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"fad54f0e9e225a70390209f63d9b3cc566a5ebcb","modified":1571544964864},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1571544964864},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1571544964864},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1571544964864},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1571544964864},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1571544964865},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1571544964865},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1571544964877},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1571544964877},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1571544964877},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1571544964878},{"_id":"themes/next/source/images/avatar.jpg","hash":"33d81e502d7e39220ede500f480c1025b852e6cb","modified":1571796378909},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1571544964878},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1571544964878},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1571544964878},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1571544964878},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1571544964878},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1571544964878},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1571544964879},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1571544964879},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1571544964879},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1571544964879},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1571544964879},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1571544964879},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1571544964879},{"_id":"themes/next/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1571544964879},{"_id":"themes/next/source/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1571544964879},{"_id":"themes/next/source/js/motion.js","hash":"71e5caff1d87b1b7256f61e6b318bedf495f9e75","modified":1571544964880},{"_id":"themes/next/source/js/next-boot.js","hash":"a6a82905c6abb8e0ec418ef6b0509b946b955807","modified":1571544964880},{"_id":"themes/next/source/js/utils.js","hash":"a2984bf0631756a904cd43f8e3a8f6fb15b9ceb5","modified":1571544964880},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1571544964880},{"_id":"themes/next/source/uploads/wechat_qrcode.jpg","hash":"a27b8433792cafcf1fb1fc12a633bc26d8c0ffc1","modified":1561191362000},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163748@2x.png","hash":"f62a3bc80769f86084993ecba84ee959a7635288","modified":1571547287392},{"_id":"source/_posts/gitee-with-webhook/image-2018-153940@2x.png","hash":"f659353b32bf59165db6f55fd74d4b37a65dcf25","modified":1571547287393},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-114759@2x.png","hash":"d6f9d7c37608b15e42c339429f0184169d494586","modified":1571547287405},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-115544@2x.png","hash":"01b343692972469db6ec65954cc8e477d731c623","modified":1571547287406},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571544964874},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571544964874},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","hash":"b36ff8cc4b64172122bf00c0abbd715361d0176c","modified":1571547287357},{"_id":"source/_posts/nginx-study-1/WX20200605-151113@2x.png","hash":"b143256f61dc30ae9fcb7057afe3e3b2d72926ec","modified":1591345235267},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1571544964850},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1571544964850},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1571544964850},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1571544964850},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"fb7729b69ef443db1f3f2755506ee998cfe4b973","modified":1571544964851},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1571544964851},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1571544964851},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1571544964851},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"5e2c2ca062eb7838bf181bfefffd4cb786bc923a","modified":1571544964851},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1571544964852},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1571544964852},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1571544964852},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1571544964852},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1571544964853},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1571544964853},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1571544964853},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"becfa683c3e5409e20cdb7b1dc8a6db331bddefe","modified":1571544964853},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1571544964854},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1571544964854},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"bebf630963c1c65fd152859a1ba316b03be17cce","modified":1571544964854},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1571544964854},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1571544964854},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1571544964854},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1571544964854},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"2afd85181eaefcd68c4db71b0526ee26e2146477","modified":1571544964855},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"246ff123cbaa507f23514c0c51c6cc006685898e","modified":1571544964855},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1571544964856},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1571544964856},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1571544964856},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1571544964856},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1571544964857},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1571544964857},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1571544964858},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1571544964858},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"194201cce870c1af6f5123a62cb766cd24e46217","modified":1571544964858},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1571544964858},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1571544964858},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1571544964858},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1571544964858},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"4e240e6877afc7c6fd4374edd5059a294b7f618e","modified":1571544964859},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1571544964859},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1571544964859},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1571544964859},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"fc84b53b690399ca8e0f5395f0dc9f96eb559350","modified":1571544964859},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1571544964859},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1571544964859},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1571544964860},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1571544964860},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1571544964860},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1571544964860},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1571544964860},{"_id":"themes/next/scripts/events/lib/config.js","hash":"4d16ca2852db7a3719d935b5da5e32f08d6cefc1","modified":1571544964861},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1571544964861},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"311a54c0a0b6192502e68ce8c0b20e77aed3b996","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"6e3f84d561d61f1be7248860049655b89c8825e2","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1571544964862},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1571544964863},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1571544964863},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1571544964874},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1571544964874},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1571544964874},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1571544964877},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1571544964877},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1571544964877},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1571544964877},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e76e0e411c9892004e73e1bb7b3c1cca2191eedc","modified":1571544964877},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1571544964880},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1571544964880},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1571544964880},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1571544964881},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1571544964881},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1571544964881},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1571544964881},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1571544964883},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1571544964884},{"_id":"source/_posts/first-flutter-app/WX20190711-203810@2x.png","hash":"c805a07d85e7055108267610d24ff7af6689e43a","modified":1571547287386},{"_id":"source/_posts/first-flutter-app/WX20190711-204747@2x.png","hash":"452e54ebc29f9f08ad37e59c0089e8830507d69c","modified":1571547287387},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1571544964865},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"65a38b8a443c7da0f9492d10b3d9c9bf1e82c649","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"b6cd686e4a9848252fb73262c6a21a9bd25c3179","modified":1571544964868},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1571544964870},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2067e15799a3a3cda8bfe7782d67a4dc42f1ef79","modified":1571544964871},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1571544964872},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1571544964872},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f3c5f1dadc01042381444102d35174dacc6f079a","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1571544964874},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"08c2679a31f195940fe1e6c76e64799fb21cda99","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4341f0e057b42e8c47629bb3196fca3b49f0cc19","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1571544964875},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c59226767164285d6708d8762f937f93bab264ca","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1571544964876},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1571544964877},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1571544964881},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1571544964881},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1571544964882},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1571544964883},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1571544964883},{"_id":"source/_posts/first-flutter-app/WX20190711-212257@2x.png","hash":"2a307e8ec71c0fd82e1f7b4213c2f1f6bdef8291","modified":1571547287388},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1571544964866},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1571544964867},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1571544964867},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1571544964867},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1571544964867},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1571544964867},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"3566136c06d96b34e1e7a3eca72fb0f40a63af80","modified":1571544964867},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f8ba308231cf81453e41457796e94f1ce886d855","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"265e6fd7b3a76616ef00f3e3c0feeb93e70ee27c","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"5248880398c1318624bdab95109c1c9fdb8eec02","modified":1571544964868},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1571544964869},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1571544964869},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1571544964869},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1571544964869},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1571544964869},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1571544964869},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1571544964869},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1571544964869},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1571544964870},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"cc4beedb56c37246d9e0f74e4b2cc34231dabc65","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"eaa62b5de4ddb18378c1a4049a172d4fa4b655d8","modified":1571544964871},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1571544964871},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"2b536832cfc81667dadd9603c8c700e44d458261","modified":1571544964872},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1571544964872},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"4b980363822c24b3ad85c271719210a8ad2b646e","modified":1571544964872},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1571544964872},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"879f9cec9c88d65b2e31af4346b2bc0f6941f05d","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"068b304be305fbfd0220276d56b93cefd968f0b6","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1571544964873},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"419fa6cfc103d08dfd6a385ab7f24468c644d581","modified":1571544964874},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1571544964874},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1571544964883},{"_id":"source/_posts/gitee-with-webhook/WX20180225-164721@2x.png","hash":"b1668d2cc7395c1fc87e14b093abcb2a64cdef16","modified":1571547287393},{"_id":"source/_posts/first-flutter-app/WX20190711-212915@2x.png","hash":"9890caa729d854bee4ad9e54f40859915da965f4","modified":1571547287389},{"_id":"source/_posts/first-flutter-app/WX20190711-203332@2x.png","hash":"3ba252b67e99e4271c270ce18a67df536aac8213","modified":1571547287385},{"_id":"source/_posts/some-pressure-measuring-tools/WX20190628-171039@2x.png","hash":"fe65fe17cb19561ab2a7bf67f9c137b4b71299f1","modified":1571547287415}],"Category":[{"name":"数字货币","_id":"ckb8sn9c80005eos61in8dimn"},{"name":"Java","_id":"ckb8sn9cc000aeos6df1z92ts"},{"name":"Shell","_id":"ckb8sn9ci000leos6hb4z5nwm"},{"name":"Machine Learning","_id":"ckb8sn9ck000teos6fanhgkug"},{"name":"Linux","_id":"ckb8sn9cm0010eos68rh367k3"},{"name":"Game","_id":"ckb8sn9cq0019eos620d1di8w"},{"name":"DevOps","_id":"ckb8sn9cy0027eos6fzwo4q63"},{"name":"flutter","_id":"ckb8sn9d2002keos69itl5l3j"},{"name":"面试","_id":"ckb8sn9d4002seos69iybanac"},{"name":"Other","_id":"ckb8sn9d70031eos6036ydic1"},{"name":"Node","_id":"ckb8sn9db003keos6b70z851q"},{"name":"Python","_id":"ckb8sn9df003ueos69hxh23ps"},{"name":"Regular","_id":"ckb8sn9dj0049eos62d97247h"},{"name":"Dart","_id":"ckb8sn9dn004keos60i5x7b3z"},{"name":"Cryptocurrency","_id":"ckb8sn9dw005jeos6hnovhtnt"}],"Data":[],"Page":[{"layout":"false","_content":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","source":"googleb85119e82958b681.html","raw":"layout: false\n---\ngoogle-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","date":"2019-10-23T02:38:16.263Z","updated":"2019-10-23T02:38:16.263Z","path":"googleb85119e82958b681.html","title":"","comments":1,"_id":"ckb8sn9ao0000eos62f1b6dgh","content":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","site":{"data":{}},"excerpt":"","more":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n"},{"title":"分类","date":"2018-02-08T08:12:56.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-08 16:12:56\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-10-23T02:14:34.383Z","path":"categories/index.html","layout":"page","_id":"ckb8sn9c60002eos6ey1bhhg1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2017-09-23T05:57:23.000Z","comments":0,"_content":"\n\n### 关于我\n\n- 目前就职于一家物联网公司，从事供应链金融开发工作。\n- Java 开发工程师（5年工作经验）\n- 技能：熟悉Java开发、Java Web开发、Linux、分布式服务开发、Docker、Elastic Stack\n\n### 关于博客\n博客创建于2017年9月，博客的目的是记录自己在开发和生活中的问题，希望自己能坚持下去，不要荒废。\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-09-23 13:57:23\ncomments: false\n---\n\n\n### 关于我\n\n- 目前就职于一家物联网公司，从事供应链金融开发工作。\n- Java 开发工程师（5年工作经验）\n- 技能：熟悉Java开发、Java Web开发、Linux、分布式服务开发、Docker、Elastic Stack\n\n### 关于博客\n博客创建于2017年9月，博客的目的是记录自己在开发和生活中的问题，希望自己能坚持下去，不要荒废。\n","updated":"2019-10-23T02:14:34.382Z","path":"about/index.html","layout":"page","_id":"ckb8sn9c80004eos6aro0454w","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li>目前就职于一家物联网公司，从事供应链金融开发工作。</li>\n<li>Java 开发工程师（5年工作经验）</li>\n<li>技能：熟悉Java开发、Java Web开发、Linux、分布式服务开发、Docker、Elastic Stack</li>\n</ul>\n<h3 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h3><p>博客创建于2017年9月，博客的目的是记录自己在开发和生活中的问题，希望自己能坚持下去，不要荒废。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li>目前就职于一家物联网公司，从事供应链金融开发工作。</li>\n<li>Java 开发工程师（5年工作经验）</li>\n<li>技能：熟悉Java开发、Java Web开发、Linux、分布式服务开发、Docker、Elastic Stack</li>\n</ul>\n<h3 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h3><p>博客创建于2017年9月，博客的目的是记录自己在开发和生活中的问题，希望自己能坚持下去，不要荒废。</p>\n"},{"title":"标签","date":"2018-02-08T08:15:54.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-08 16:15:54\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-10-23T02:14:34.383Z","path":"tags/index.html","layout":"page","_id":"ckb8sn9en0078eos63r253qak","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"数字货币入门","date":"2018-01-04T02:45:41.000Z","_content":"### 前言\n最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<!-- more -->\n### 怎么入场\n交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要\n进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所\n平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。\n我主要是在火币进行兑换，也叫OTC（场外交易）\n\nhttps://www.huobipro.pro\n如果请求不到，可以使用\nhttps://www.huobi.br.com/zh-cn/\n\n\n2018年04月20日11:38:10\n市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。\n","source":"_posts/BTC-Tutorial.md","raw":"---\ntitle: 数字货币入门\ndate: 2018-01-04 10:45:41\ncategories: 数字货币\ntag: 数字货币\n---\n### 前言\n最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<!-- more -->\n### 怎么入场\n交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要\n进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所\n平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。\n我主要是在火币进行兑换，也叫OTC（场外交易）\n\nhttps://www.huobipro.pro\n如果请求不到，可以使用\nhttps://www.huobi.br.com/zh-cn/\n\n\n2018年04月20日11:38:10\n市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。\n","slug":"BTC-Tutorial","published":1,"updated":"2019-10-20T04:54:47.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9c50001eos6bm324il4","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<a id=\"more\"></a></p>\n<h3 id=\"怎么入场\"><a href=\"#怎么入场\" class=\"headerlink\" title=\"怎么入场\"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>\n<p><a href=\"https://www.huobipro.pro\" target=\"_blank\" rel=\"noopener\">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href=\"https://www.huobi.br.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/</a></p>\n<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。","more":"</p>\n<h3 id=\"怎么入场\"><a href=\"#怎么入场\" class=\"headerlink\" title=\"怎么入场\"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>\n<p><a href=\"https://www.huobipro.pro\" target=\"_blank\" rel=\"noopener\">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href=\"https://www.huobi.br.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/</a></p>\n<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>"},{"title":"Redis连接池连接没有正常释放报错","date":"2017-09-23T07:56:45.000Z","_content":"\n\n``` log\n Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool\n\tat redis.clients.util.Pool.getResource(Pool.java:51)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)\n\tat org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)\n\t... 71 common frames omitted\n\n\n```\n\n前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源\n\n### redisTemplate 和 jedis 不同\n\nredisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放\n\n``` Java\npublic boolean setNX(final String key, final String value) throws RedisException {\n        return redisTemplate.execute(new RedisCallback<Boolean>() {\n            @Override\n            public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                return redisConnection.setNX(key.getBytes(), value.getBytes());\n            }\n        });\n    }\n\n```\n所以实现分布式锁的时候需要调用`redisTemplate.execute` 让 `redisTemplate` 帮我们释放资源，具体的可以看redisTemplate 的源码。\n","source":"_posts/Could-not-get-a-resource-from-the-pool.md","raw":"---\ntitle: Redis连接池连接没有正常释放报错\ndate: 2017-09-23 15:56:45\ncategories: Java\ntag: Redis\n---\n\n\n``` log\n Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool\n\tat redis.clients.util.Pool.getResource(Pool.java:51)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)\n\tat org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)\n\t... 71 common frames omitted\n\n\n```\n\n前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源\n\n### redisTemplate 和 jedis 不同\n\nredisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放\n\n``` Java\npublic boolean setNX(final String key, final String value) throws RedisException {\n        return redisTemplate.execute(new RedisCallback<Boolean>() {\n            @Override\n            public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                return redisConnection.setNX(key.getBytes(), value.getBytes());\n            }\n        });\n    }\n\n```\n所以实现分布式锁的时候需要调用`redisTemplate.execute` 让 `redisTemplate` 帮我们释放资源，具体的可以看redisTemplate 的源码。\n","slug":"Could-not-get-a-resource-from-the-pool","published":1,"updated":"2019-10-20T04:54:47.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9c70003eos67vc1dmam","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class=\"line\">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class=\"line\">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class=\"line\">... 71 common frames omitted</span><br></pre></td></tr></table></figure>\n\n<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>\n<h3 id=\"redisTemplate-和-jedis-不同\"><a href=\"#redisTemplate-和-jedis-不同\" class=\"headerlink\" title=\"redisTemplate 和 jedis 不同\"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setNX</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String value)</span> <span class=\"keyword\">throws</span> RedisException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection redisConnection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class=\"line\">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class=\"line\">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class=\"line\">... 71 common frames omitted</span><br></pre></td></tr></table></figure>\n\n<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>\n<h3 id=\"redisTemplate-和-jedis-不同\"><a href=\"#redisTemplate-和-jedis-不同\" class=\"headerlink\" title=\"redisTemplate 和 jedis 不同\"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setNX</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String value)</span> <span class=\"keyword\">throws</span> RedisException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection redisConnection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>\n"},{"title":"Java 常量字符串过长","date":"2019-04-29T12:44:56.000Z","_content":"### 问题出现\n  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示`java: 常量字符串过长`。使用javac 进行编译也会有类似的提示 <!-- more -->\n### 解决办法\n#### 使用StringBuilder\n``` Java\nStringBuilder sb = new StringBuilder();\nsb.append(\"String\");\nsb.append(\"String\");\nString str = sb.toString();\nString[] parts = str.split(\",\");\nSystem.out.println(parts.length);\n```\n创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制\n通过使用StringBuilder解析大文本和大JSON\n","source":"_posts/Java-constant-string-is-too-long.md","raw":"---\ntitle: Java 常量字符串过长\ndate: 2019-04-29 20:44:56\ncategories: Java\ntag: String\n---\n### 问题出现\n  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示`java: 常量字符串过长`。使用javac 进行编译也会有类似的提示 <!-- more -->\n### 解决办法\n#### 使用StringBuilder\n``` Java\nStringBuilder sb = new StringBuilder();\nsb.append(\"String\");\nsb.append(\"String\");\nString str = sb.toString();\nString[] parts = str.split(\",\");\nSystem.out.println(parts.length);\n```\n创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制\n通过使用StringBuilder解析大文本和大JSON\n","slug":"Java-constant-string-is-too-long","published":1,"updated":"2019-10-20T04:54:47.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ca0007eos6485vde23","content":"<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示<code>java: 常量字符串过长</code>。使用javac 进行编译也会有类似的提示 <a id=\"more\"></a></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><h4 id=\"使用StringBuilder\"><a href=\"#使用StringBuilder\" class=\"headerlink\" title=\"使用StringBuilder\"></a>使用StringBuilder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">String str = sb.toString();</span><br><span class=\"line\">String[] parts = str.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">System.out.println(parts.length);</span><br></pre></td></tr></table></figure>\n<p>创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制<br>通过使用StringBuilder解析大文本和大JSON</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示<code>java: 常量字符串过长</code>。使用javac 进行编译也会有类似的提示","more":"</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><h4 id=\"使用StringBuilder\"><a href=\"#使用StringBuilder\" class=\"headerlink\" title=\"使用StringBuilder\"></a>使用StringBuilder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">String str = sb.toString();</span><br><span class=\"line\">String[] parts = str.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">System.out.println(parts.length);</span><br></pre></td></tr></table></figure>\n<p>创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制<br>通过使用StringBuilder解析大文本和大JSON</p>"},{"title":"使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）","date":"2018-03-17T09:38:33.000Z","_content":"网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL\n证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let's Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<!-- more -->\n\n### 申请域名\n为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。\n\n免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。\n\n我申请的域名是`rubys.ml`,可以免费使用一年，续费的话不到10刀/年。\n\n### 配置Let's Encrypt 单域名\n首先访问[Let's Cncrypt官网](https://letsencrypt.org/)，`Get Started`，然后会提供两种方式，`With Shell Access`和`Without Shell Access`，\n\n- With Shell Access(官方推荐通过shell进行部署)\n使用`Certbot ACME`客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png)\n访问[certbot](https://certbot.eff.org/),选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。\n- 安装系统扩展包\n``` bash\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -ivh epel-release-latest-7.noarch.rpm\nyum -y install yum-utils\nyum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n```\n- 安装certbot\n``` bash\nsudo yum install certbot-nginx\n```\n- 运行certbot插件生成证书\n``` bash\nsudo certbot --nginx\n```\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png)\n\n- 重启nginx\n``` bash\nsystemctl restart nginx\n```\n访问[www.rubys.ml](www.rubys.ml),发现链接自动定向到https://www.rubys.ml\n\n增加自动续期\n``` bash\ncrontab -e\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew\n```\n\n上面的方法是单域名证书的创建\n### 配置Let's Encrypt 泛域名\n如果配置泛域名，还需要安装一个 `Certbot's DNS plugins` 插件\n目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持\n- certbot-dns-cloudflare\n- certbot-dns-cloudxns\n- certbot-dns-digitalocean\n- certbot-dns-dnsimple\n- certbot-dns-dnsmadeeasy\n- certbot-dns-google\n- certbot-dns-luadns\n- certbot-dns-nsone\n- certbot-dns-rfc2136\n- certbot-dns-route53\n\n目前支持的云服务商还不多\n阿里云的话可以使用如下脚本\nhttps://github.com/Neilpang/acme.sh\n从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。\n\n未完待续。。。\n","source":"_posts/Lets-Encrypt-free-wildcard-domain-name.md","raw":"---\ntitle: 使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）\ndate: 2018-03-17 17:38:33\ncategories: Shell\ntag: Domain\n---\n网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL\n证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let's Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<!-- more -->\n\n### 申请域名\n为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。\n\n免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。\n\n我申请的域名是`rubys.ml`,可以免费使用一年，续费的话不到10刀/年。\n\n### 配置Let's Encrypt 单域名\n首先访问[Let's Cncrypt官网](https://letsencrypt.org/)，`Get Started`，然后会提供两种方式，`With Shell Access`和`Without Shell Access`，\n\n- With Shell Access(官方推荐通过shell进行部署)\n使用`Certbot ACME`客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png)\n访问[certbot](https://certbot.eff.org/),选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。\n- 安装系统扩展包\n``` bash\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -ivh epel-release-latest-7.noarch.rpm\nyum -y install yum-utils\nyum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n```\n- 安装certbot\n``` bash\nsudo yum install certbot-nginx\n```\n- 运行certbot插件生成证书\n``` bash\nsudo certbot --nginx\n```\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png)\n\n- 重启nginx\n``` bash\nsystemctl restart nginx\n```\n访问[www.rubys.ml](www.rubys.ml),发现链接自动定向到https://www.rubys.ml\n\n增加自动续期\n``` bash\ncrontab -e\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew\n```\n\n上面的方法是单域名证书的创建\n### 配置Let's Encrypt 泛域名\n如果配置泛域名，还需要安装一个 `Certbot's DNS plugins` 插件\n目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持\n- certbot-dns-cloudflare\n- certbot-dns-cloudxns\n- certbot-dns-digitalocean\n- certbot-dns-dnsimple\n- certbot-dns-dnsmadeeasy\n- certbot-dns-google\n- certbot-dns-luadns\n- certbot-dns-nsone\n- certbot-dns-rfc2136\n- certbot-dns-route53\n\n目前支持的云服务商还不多\n阿里云的话可以使用如下脚本\nhttps://github.com/Neilpang/acme.sh\n从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。\n\n未完待续。。。\n","slug":"Lets-Encrypt-free-wildcard-domain-name","published":1,"updated":"2019-10-20T04:54:47.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ca0008eos6gfn8ech2","content":"<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<a id=\"more\"></a></p>\n<h3 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>\n<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>\n<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>\n<h3 id=\"配置Let’s-Encrypt-单域名\"><a href=\"#配置Let’s-Encrypt-单域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 单域名\"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>\n<ul>\n<li><p>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src=\"Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png\" alt=\"certbot\"><br>访问<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</p>\n</li>\n<li><p>安装系统扩展包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">yum -y install yum-utils</span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure></li>\n<li><p>安装certbot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>运行certbot插件生成证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png\" alt=\"certbot\"></p>\n</li>\n<li><p>重启nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"www.rubys.ml\">www.rubys.ml</a>,发现链接自动定向到<a href=\"https://www.rubys.ml\" target=\"_blank\" rel=\"noopener\">https://www.rubys.ml</a></p>\n</li>\n</ul>\n<p>增加自动续期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0 0,12 * * * python -c <span class=\"string\">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure>\n\n<p>上面的方法是单域名证书的创建</p>\n<h3 id=\"配置Let’s-Encrypt-泛域名\"><a href=\"#配置Let’s-Encrypt-泛域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 泛域名\"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>\n<ul>\n<li>certbot-dns-cloudflare</li>\n<li>certbot-dns-cloudxns</li>\n<li>certbot-dns-digitalocean</li>\n<li>certbot-dns-dnsimple</li>\n<li>certbot-dns-dnsmadeeasy</li>\n<li>certbot-dns-google</li>\n<li>certbot-dns-luadns</li>\n<li>certbot-dns-nsone</li>\n<li>certbot-dns-rfc2136</li>\n<li>certbot-dns-route53</li>\n</ul>\n<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>\n<p>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。","more":"</p>\n<h3 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>\n<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>\n<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>\n<h3 id=\"配置Let’s-Encrypt-单域名\"><a href=\"#配置Let’s-Encrypt-单域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 单域名\"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>\n<ul>\n<li><p>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src=\"Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png\" alt=\"certbot\"><br>访问<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</p>\n</li>\n<li><p>安装系统扩展包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">yum -y install yum-utils</span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure></li>\n<li><p>安装certbot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>运行certbot插件生成证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png\" alt=\"certbot\"></p>\n</li>\n<li><p>重启nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"www.rubys.ml\">www.rubys.ml</a>,发现链接自动定向到<a href=\"https://www.rubys.ml\" target=\"_blank\" rel=\"noopener\">https://www.rubys.ml</a></p>\n</li>\n</ul>\n<p>增加自动续期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0 0,12 * * * python -c <span class=\"string\">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure>\n\n<p>上面的方法是单域名证书的创建</p>\n<h3 id=\"配置Let’s-Encrypt-泛域名\"><a href=\"#配置Let’s-Encrypt-泛域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 泛域名\"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>\n<ul>\n<li>certbot-dns-cloudflare</li>\n<li>certbot-dns-cloudxns</li>\n<li>certbot-dns-digitalocean</li>\n<li>certbot-dns-dnsimple</li>\n<li>certbot-dns-dnsmadeeasy</li>\n<li>certbot-dns-google</li>\n<li>certbot-dns-luadns</li>\n<li>certbot-dns-nsone</li>\n<li>certbot-dns-rfc2136</li>\n<li>certbot-dns-route53</li>\n</ul>\n<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>\n<p>未完待续。。。</p>"},{"title":"Machine-Learning-in-Java-1","date":"2017-11-20T09:00:53.000Z","_content":"### 机器学习的主要方法\n- 监督学习\n- 无监督学习\n- 强化学习\n<!-- more -->\n####  监督学习\n检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。\n####  无监督学习\n无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。\n#### 强化学习\n强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n### 机器学习应用流程\n（1） 数据与问题定义\n（2）数据收集\n（3）数据预处理\n（4）利用无监督学习与监督学习进行数据分析与建模\n（5）模型评价\n\n特性 | 称名 | 顺序 | 等距 | 等比 |\n\n| 特性 | 称名 | 顺序 | 等距 | 等比 |\n| :- | :-: | :-: | :-: | :-: |\n| 频率分布 | √| √ | √ | √ |\n| 中位数和众数 |  | √ | √ | √ |\n| 值顺序已知 |   | √ | √ | √ |\n| 每个值之间的不同可以量化 | | √ | √ | √ |\n| 值可以加减 |  |  | √ | √ |\n| 值可以乘除 |  |  |  | √ |\n| 拥有真0点 |  |  |  | √ |\n\n### 获取数据的方式\n- 维基百科\n- 网页抓取\n- IMDb\n- Million Song Dataset\n\n### 数据采集\n陷阱 幸存者偏差\n数据清洗\n填充缺失值\n剔除异常值\n数据转换\n## 数据归纳\n奇异值分解（SVD）\n主成分分析（PCA）\n神经网络自动编码器（Neural nets auto encoders）\n\n\n### 无监督学习\nn维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。\n\nL2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。\n它是两个元素在每个维度上差的平方和的平方根，计算公式如下:\n\n\n\n\n\n\n\n\n\n注： 以上数据来自 Machine Learning in Java\n","source":"_posts/Machine-Learning-in-Java-1.md","raw":"---\ntitle: Machine-Learning-in-Java-1\ndate: 2017-11-20 17:00:53\ncategories: Machine Learning\ntag: Machine Learning\n---\n### 机器学习的主要方法\n- 监督学习\n- 无监督学习\n- 强化学习\n<!-- more -->\n####  监督学习\n检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。\n####  无监督学习\n无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。\n#### 强化学习\n强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n### 机器学习应用流程\n（1） 数据与问题定义\n（2）数据收集\n（3）数据预处理\n（4）利用无监督学习与监督学习进行数据分析与建模\n（5）模型评价\n\n特性 | 称名 | 顺序 | 等距 | 等比 |\n\n| 特性 | 称名 | 顺序 | 等距 | 等比 |\n| :- | :-: | :-: | :-: | :-: |\n| 频率分布 | √| √ | √ | √ |\n| 中位数和众数 |  | √ | √ | √ |\n| 值顺序已知 |   | √ | √ | √ |\n| 每个值之间的不同可以量化 | | √ | √ | √ |\n| 值可以加减 |  |  | √ | √ |\n| 值可以乘除 |  |  |  | √ |\n| 拥有真0点 |  |  |  | √ |\n\n### 获取数据的方式\n- 维基百科\n- 网页抓取\n- IMDb\n- Million Song Dataset\n\n### 数据采集\n陷阱 幸存者偏差\n数据清洗\n填充缺失值\n剔除异常值\n数据转换\n## 数据归纳\n奇异值分解（SVD）\n主成分分析（PCA）\n神经网络自动编码器（Neural nets auto encoders）\n\n\n### 无监督学习\nn维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。\n\nL2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。\n它是两个元素在每个维度上差的平方和的平方根，计算公式如下:\n\n\n\n\n\n\n\n\n\n注： 以上数据来自 Machine Learning in Java\n","slug":"Machine-Learning-in-Java-1","published":1,"updated":"2019-10-20T04:54:47.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cb0009eos6hatugsu2","content":"<h3 id=\"机器学习的主要方法\"><a href=\"#机器学习的主要方法\" class=\"headerlink\" title=\"机器学习的主要方法\"></a>机器学习的主要方法</h3><ul>\n<li>监督学习</li>\n<li>无监督学习</li>\n<li>强化学习<a id=\"more\"></a>\n<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。<h4 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h4>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。</li>\n</ul>\n<h3 id=\"机器学习应用流程\"><a href=\"#机器学习应用流程\" class=\"headerlink\" title=\"机器学习应用流程\"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>\n<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"center\">称名</th>\n<th align=\"center\">顺序</th>\n<th align=\"center\">等距</th>\n<th align=\"center\">等比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">频率分布</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">中位数和众数</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值顺序已知</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">每个值之间的不同可以量化</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以加减</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以乘除</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">拥有真0点</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取数据的方式\"><a href=\"#获取数据的方式\" class=\"headerlink\" title=\"获取数据的方式\"></a>获取数据的方式</h3><ul>\n<li>维基百科</li>\n<li>网页抓取</li>\n<li>IMDb</li>\n<li>Million Song Dataset</li>\n</ul>\n<h3 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>\n<h2 id=\"数据归纳\"><a href=\"#数据归纳\" class=\"headerlink\" title=\"数据归纳\"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>\n<h3 id=\"无监督学习-1\"><a href=\"#无监督学习-1\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>\n<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>\n<p>注： 以上数据来自 Machine Learning in Java</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"机器学习的主要方法\"><a href=\"#机器学习的主要方法\" class=\"headerlink\" title=\"机器学习的主要方法\"></a>机器学习的主要方法</h3><ul>\n<li>监督学习</li>\n<li>无监督学习</li>\n<li>强化学习","more":"<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。<h4 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h4>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。</li>\n</ul>\n<h3 id=\"机器学习应用流程\"><a href=\"#机器学习应用流程\" class=\"headerlink\" title=\"机器学习应用流程\"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>\n<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"center\">称名</th>\n<th align=\"center\">顺序</th>\n<th align=\"center\">等距</th>\n<th align=\"center\">等比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">频率分布</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">中位数和众数</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值顺序已知</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">每个值之间的不同可以量化</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以加减</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以乘除</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">拥有真0点</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取数据的方式\"><a href=\"#获取数据的方式\" class=\"headerlink\" title=\"获取数据的方式\"></a>获取数据的方式</h3><ul>\n<li>维基百科</li>\n<li>网页抓取</li>\n<li>IMDb</li>\n<li>Million Song Dataset</li>\n</ul>\n<h3 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>\n<h2 id=\"数据归纳\"><a href=\"#数据归纳\" class=\"headerlink\" title=\"数据归纳\"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>\n<h3 id=\"无监督学习-1\"><a href=\"#无监督学习-1\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>\n<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>\n<p>注： 以上数据来自 Machine Learning in Java</p>"},{"title":"Nginx 504 Gateway Time-out","date":"2017-09-22T12:49:29.000Z","_content":"\n\n今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <!-- more -->\n``` Shell\n\tproxy_connect_timeout = 3;\n```\n时间过小导致的，最好用默认参数\n","source":"_posts/Nginx-504-GateWay-Time-Out.md","raw":"---\ntitle: Nginx 504 Gateway Time-out\ndate: 2017-09-22 20:49:29\ncategories: Linux\ntag: Nginx\n\n---\n\n\n今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <!-- more -->\n``` Shell\n\tproxy_connect_timeout = 3;\n```\n时间过小导致的，最好用默认参数\n","slug":"Nginx-504-GateWay-Time-Out","published":1,"updated":"2019-10-20T04:54:47.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ce000deos6d9nifz33","content":"<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <a id=\"more\"></a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure>\n<p>时间过小导致的，最好用默认参数</p>\n","site":{"data":{}},"excerpt":"<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置","more":"</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure>\n<p>时间过小导致的，最好用默认参数</p>"},{"title":"Spring单例和多例","date":"2019-03-25T03:10:00.000Z","_content":"在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是`singleton`。这篇文章主要讨论Spring 单例和多例。<!-- more -->\n### Spring bean 的作用域(Spring Bean scopes)\n作用域 | 描述\n:----: | :---:\nsingleton | 根据Spring IoC容器将单个bean定义范围限定为单个对象实例。\nprototype |  将单个bean定义范围限定为任意数量的对象实例。\nrequest |  将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。\nsession | 将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。\nglobal-session | 将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。\n`>` 具体可以查看Spring官方文档 [Spring Doc](https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html),有更详细的说明。\n####The singleton scope(单例作用域)\n默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。\n```Java\nimport lombok.Data;\n\n@Data\npublic class TestBean {\n\n    private String name;\n\n    public TestBean(String name) {\n        this.name = name;\n    }\n}\n\n\n```\n可以在Application中进行注入\n``` Java\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n   @Bean\n   public TestBean getBean() {\n       return new TestBean(\"Hello,singleton!\");\n   }\n\n}\n\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTest {\n\n    @Autowired\n    private TestBean testBean;\n\n    @Test\n    public void getBean() throws Exception {\n        System.out.println(testBean.getName());\n    }\n}\n```\n还可以使用 `@Component` 的方式，可以自行实践。\n\n#### The prototype scope(多例作用域)\n>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.\n\n描述了什么时候使用单例、什么时候使用多例。\n`@Resource`和`@Autowired`都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。\n\n`@Autowired`为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n\n`@Resource`默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。`@Resource`有两个重要的属性：name和type，而Spring将`@Resource`注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n\n最常用的是一个接口有多个实现。\n``` Java\npublic interface IPrintService {\n\n    /**\n     * 打印字符串\n     *\n     * @return\n     */\n    void print();\n}\n\n```\n打印数字\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class NumberPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(1);\n\n    }\n}\n```\n打印字符串\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StringPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(\"String\");\n\n    }\n}\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n    @Resource(name = \"numberPrintServiceImpl\")\n    private IPrintService numPrintService;\n\n    @Resource(name = \"stringPrintServiceImpl\")\n    private IPrintService strPrintService;\n\n\n    @Test\n    public void print() throws Exception {\n        numPrintService.print();\n        strPrintService.print();\n    }\n\n}\n```\n通过name来区分`IPrintService`,进行注入。\n面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。\n","source":"_posts/Spring-singleton-and-prototype.md","raw":"---\ntitle: Spring单例和多例\ndate: 2019-03-25 11:10:00\ncategories: Java\ntags: Spring\n---\n在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是`singleton`。这篇文章主要讨论Spring 单例和多例。<!-- more -->\n### Spring bean 的作用域(Spring Bean scopes)\n作用域 | 描述\n:----: | :---:\nsingleton | 根据Spring IoC容器将单个bean定义范围限定为单个对象实例。\nprototype |  将单个bean定义范围限定为任意数量的对象实例。\nrequest |  将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。\nsession | 将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。\nglobal-session | 将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。\n`>` 具体可以查看Spring官方文档 [Spring Doc](https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html),有更详细的说明。\n####The singleton scope(单例作用域)\n默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。\n```Java\nimport lombok.Data;\n\n@Data\npublic class TestBean {\n\n    private String name;\n\n    public TestBean(String name) {\n        this.name = name;\n    }\n}\n\n\n```\n可以在Application中进行注入\n``` Java\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n   @Bean\n   public TestBean getBean() {\n       return new TestBean(\"Hello,singleton!\");\n   }\n\n}\n\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTest {\n\n    @Autowired\n    private TestBean testBean;\n\n    @Test\n    public void getBean() throws Exception {\n        System.out.println(testBean.getName());\n    }\n}\n```\n还可以使用 `@Component` 的方式，可以自行实践。\n\n#### The prototype scope(多例作用域)\n>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.\n\n描述了什么时候使用单例、什么时候使用多例。\n`@Resource`和`@Autowired`都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。\n\n`@Autowired`为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n\n`@Resource`默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。`@Resource`有两个重要的属性：name和type，而Spring将`@Resource`注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n\n最常用的是一个接口有多个实现。\n``` Java\npublic interface IPrintService {\n\n    /**\n     * 打印字符串\n     *\n     * @return\n     */\n    void print();\n}\n\n```\n打印数字\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class NumberPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(1);\n\n    }\n}\n```\n打印字符串\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StringPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(\"String\");\n\n    }\n}\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n    @Resource(name = \"numberPrintServiceImpl\")\n    private IPrintService numPrintService;\n\n    @Resource(name = \"stringPrintServiceImpl\")\n    private IPrintService strPrintService;\n\n\n    @Test\n    public void print() throws Exception {\n        numPrintService.print();\n        strPrintService.print();\n    }\n\n}\n```\n通过name来区分`IPrintService`,进行注入。\n面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。\n","slug":"Spring-singleton-and-prototype","published":1,"updated":"2019-10-20T04:54:47.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cf000eeos61g1d9kte","content":"<p>在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是<code>singleton</code>。这篇文章主要讨论Spring 单例和多例。<a id=\"more\"></a></p>\n<h3 id=\"Spring-bean-的作用域-Spring-Bean-scopes\"><a href=\"#Spring-bean-的作用域-Spring-Bean-scopes\" class=\"headerlink\" title=\"Spring bean 的作用域(Spring Bean scopes)\"></a>Spring bean 的作用域(Spring Bean scopes)</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用域</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">singleton</td>\n<td align=\"center\">根据Spring IoC容器将单个bean定义范围限定为单个对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">prototype</td>\n<td align=\"center\">将单个bean定义范围限定为任意数量的对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">request</td>\n<td align=\"center\">将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">global-session</td>\n<td align=\"center\">将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;</code> 具体可以查看Spring官方文档 <a href=\"https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html\" target=\"_blank\" rel=\"noopener\">Spring Doc</a>,有更详细的说明。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">####The singleton scope(单例作用域)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">可以在Application中进行注入</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> TestBean <span class=\"title\">getBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestBean(<span class=\"string\">\"Hello,singleton!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">测试</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestBean testBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(testBean.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">还可以使用 <code>@Component</code> 的方式，可以自行实践。</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"The-prototype-scope-多例作用域\"><a href=\"#The-prototype-scope-多例作用域\" class=\"headerlink\" title=\"The prototype scope(多例作用域)\"></a>The prototype scope(多例作用域)</h4><blockquote>\n<p>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p>\n</blockquote>\n<p>描述了什么时候使用单例、什么时候使用多例。<br><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>\n<p><code>@Autowired</code>为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>\n<p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>\n<p>最常用的是一个接口有多个实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印数字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"numberPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService numPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"stringPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService strPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        numPrintService.print();</span><br><span class=\"line\">        strPrintService.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过name来区分<code>IPrintService</code>,进行注入。<br>面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。</p>\n","site":{"data":{}},"excerpt":"<p>在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是<code>singleton</code>。这篇文章主要讨论Spring 单例和多例。","more":"</p>\n<h3 id=\"Spring-bean-的作用域-Spring-Bean-scopes\"><a href=\"#Spring-bean-的作用域-Spring-Bean-scopes\" class=\"headerlink\" title=\"Spring bean 的作用域(Spring Bean scopes)\"></a>Spring bean 的作用域(Spring Bean scopes)</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用域</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">singleton</td>\n<td align=\"center\">根据Spring IoC容器将单个bean定义范围限定为单个对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">prototype</td>\n<td align=\"center\">将单个bean定义范围限定为任意数量的对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">request</td>\n<td align=\"center\">将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">global-session</td>\n<td align=\"center\">将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;</code> 具体可以查看Spring官方文档 <a href=\"https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html\" target=\"_blank\" rel=\"noopener\">Spring Doc</a>,有更详细的说明。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">####The singleton scope(单例作用域)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">可以在Application中进行注入</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> TestBean <span class=\"title\">getBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestBean(<span class=\"string\">\"Hello,singleton!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">测试</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestBean testBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(testBean.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">还可以使用 <code>@Component</code> 的方式，可以自行实践。</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"The-prototype-scope-多例作用域\"><a href=\"#The-prototype-scope-多例作用域\" class=\"headerlink\" title=\"The prototype scope(多例作用域)\"></a>The prototype scope(多例作用域)</h4><blockquote>\n<p>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p>\n</blockquote>\n<p>描述了什么时候使用单例、什么时候使用多例。<br><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>\n<p><code>@Autowired</code>为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>\n<p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>\n<p>最常用的是一个接口有多个实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印数字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"numberPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService numPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"stringPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService strPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        numPrintService.print();</span><br><span class=\"line\">        strPrintService.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过name来区分<code>IPrintService</code>,进行注入。<br>面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。</p>"},{"title":"apollo 配置提前加载","date":"2019-05-18T02:00:11.000Z","_content":"#### 碰到的问题\n项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现`${}`没有生效。\n导致请求调用的时候出错。<!-- more -->\n#### 解决过程\n首先是检查配置是否正确，请求的代码示例如下：\n``` Java\n@FeignClient(name = \"xxx\", url = \"${xxx}\")\npublic interface FeignClientService {\n    /**\n     * 获取实体列表\n     *\n     * @param xxx xxx\n     * @return\n     * @throws Exception\n     */\n    @GetMapping(\"/xxx/xxx/xxx\")\n    FeignResp<EntityListVO> getEntityList(@RequestParam(value = \"xxx\") String xxx) throws Exception;\n```\n当url使用固定时，可以正常的解析出请求的url，使用`${}`没有生效。\n这个时候查询了Apollo的文档[Java客户端使用指南3.2.1.3SpringBoot集成方式](\"https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90\")\n\n>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。\n从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：\n     # will inject 'application' namespace in bootstrap phase\n     apollo.bootstrap.enabled = true\n     # put apollo initialization before logging system initialization\n     apollo.bootstrap.eagerLoad.enabled=true\n\n增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的`1.1.0`，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。\n#### 解决方式\n没办法在Springboot启动前加载，可以尝试手动加载。\n``` Java\nimport com.ctrip.framework.apollo.ConfigService;\n\npublic class ClientUrlConfig {\n    public void init() {\n        this.initSet(\"此处写你需要提前初始化的key\");\n    }\n    private void initSet(String... keys) {\n        for (String key : keys) {\n            String val = ConfigService.getAppConfig().getProperty(key, null);\n            System.setProperty(key, val);\n        }\n    }\n}\n```\n\n然后在`SpringApplication.run()` 之前加载\n``` java\npublic static void main(String[] args) {\n       new ClientUrlConfig().init();\n       SpringApplication.run(Application.class, args);\n   }\n```\n通过在启动前将配置注入，`${}` 就可以获取到正确的链接了。\n","source":"_posts/apollo-eagerload.md","raw":"---\ntitle: apollo 配置提前加载\ndate: 2019-05-18 10:00:11\ncategories: Java\ntag: Apollo、Feign\n---\n#### 碰到的问题\n项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现`${}`没有生效。\n导致请求调用的时候出错。<!-- more -->\n#### 解决过程\n首先是检查配置是否正确，请求的代码示例如下：\n``` Java\n@FeignClient(name = \"xxx\", url = \"${xxx}\")\npublic interface FeignClientService {\n    /**\n     * 获取实体列表\n     *\n     * @param xxx xxx\n     * @return\n     * @throws Exception\n     */\n    @GetMapping(\"/xxx/xxx/xxx\")\n    FeignResp<EntityListVO> getEntityList(@RequestParam(value = \"xxx\") String xxx) throws Exception;\n```\n当url使用固定时，可以正常的解析出请求的url，使用`${}`没有生效。\n这个时候查询了Apollo的文档[Java客户端使用指南3.2.1.3SpringBoot集成方式](\"https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90\")\n\n>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。\n从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：\n     # will inject 'application' namespace in bootstrap phase\n     apollo.bootstrap.enabled = true\n     # put apollo initialization before logging system initialization\n     apollo.bootstrap.eagerLoad.enabled=true\n\n增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的`1.1.0`，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。\n#### 解决方式\n没办法在Springboot启动前加载，可以尝试手动加载。\n``` Java\nimport com.ctrip.framework.apollo.ConfigService;\n\npublic class ClientUrlConfig {\n    public void init() {\n        this.initSet(\"此处写你需要提前初始化的key\");\n    }\n    private void initSet(String... keys) {\n        for (String key : keys) {\n            String val = ConfigService.getAppConfig().getProperty(key, null);\n            System.setProperty(key, val);\n        }\n    }\n}\n```\n\n然后在`SpringApplication.run()` 之前加载\n``` java\npublic static void main(String[] args) {\n       new ClientUrlConfig().init();\n       SpringApplication.run(Application.class, args);\n   }\n```\n通过在启动前将配置注入，`${}` 就可以获取到正确的链接了。\n","slug":"apollo-eagerload","published":1,"updated":"2019-10-20T04:54:47.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ch000ieos6dmqi347z","content":"<h4 id=\"碰到的问题\"><a href=\"#碰到的问题\" class=\"headerlink\" title=\"碰到的问题\"></a>碰到的问题</h4><p>项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现<code>${}</code>没有生效。<br>导致请求调用的时候出错。<a id=\"more\"></a></p>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p>首先是检查配置是否正确，请求的代码示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClientService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/xxx/xxx/xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">FeignResp&lt;EntityListVO&gt; <span class=\"title\">getEntityList</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"xxx\"</span>)</span> String xxx) <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>当url使用固定时，可以正常的解析出请求的url，使用<code>${}</code>没有生效。<br>这个时候查询了Apollo的文档<a href=\"\"https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90\"\">Java客户端使用指南3.2.1.3SpringBoot集成方式</a></p>\n<blockquote>\n<p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br>从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：<br>     # will inject ‘application’ namespace in bootstrap phase<br>     apollo.bootstrap.enabled = true<br>     # put apollo initialization before logging system initialization<br>     apollo.bootstrap.eagerLoad.enabled=true</p>\n</blockquote>\n<p>增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的<code>1.1.0</code>，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。</p>\n<h4 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h4><p>没办法在Springboot启动前加载，可以尝试手动加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientUrlConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSet(<span class=\"string\">\"此处写你需要提前初始化的key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSet</span><span class=\"params\">(String... keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            String val = ConfigService.getAppConfig().getProperty(key, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            System.setProperty(key, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>SpringApplication.run()</code> 之前加载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">new</span> ClientUrlConfig().init();</span><br><span class=\"line\">       SpringApplication.run(Application.class, args);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>通过在启动前将配置注入，<code>${}</code> 就可以获取到正确的链接了。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"碰到的问题\"><a href=\"#碰到的问题\" class=\"headerlink\" title=\"碰到的问题\"></a>碰到的问题</h4><p>项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现<code>${}</code>没有生效。<br>导致请求调用的时候出错。","more":"</p>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p>首先是检查配置是否正确，请求的代码示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClientService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/xxx/xxx/xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">FeignResp&lt;EntityListVO&gt; <span class=\"title\">getEntityList</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"xxx\"</span>)</span> String xxx) <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>当url使用固定时，可以正常的解析出请求的url，使用<code>${}</code>没有生效。<br>这个时候查询了Apollo的文档<a href=\"\"https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90\"\">Java客户端使用指南3.2.1.3SpringBoot集成方式</a></p>\n<blockquote>\n<p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br>从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：<br>     # will inject ‘application’ namespace in bootstrap phase<br>     apollo.bootstrap.enabled = true<br>     # put apollo initialization before logging system initialization<br>     apollo.bootstrap.eagerLoad.enabled=true</p>\n</blockquote>\n<p>增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的<code>1.1.0</code>，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。</p>\n<h4 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h4><p>没办法在Springboot启动前加载，可以尝试手动加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientUrlConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSet(<span class=\"string\">\"此处写你需要提前初始化的key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSet</span><span class=\"params\">(String... keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            String val = ConfigService.getAppConfig().getProperty(key, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            System.setProperty(key, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>SpringApplication.run()</code> 之前加载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">new</span> ClientUrlConfig().init();</span><br><span class=\"line\">       SpringApplication.run(Application.class, args);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>通过在启动前将配置注入，<code>${}</code> 就可以获取到正确的链接了。</p>"},{"title":"方舟服务器搭建 Ark-Server-Build","date":"2020-04-14T13:28:48.000Z","_content":"最近被朋友拉着入了`方舟:进化生存`的坑，但是朋友家的网络有点炸裂，导致我疯狂掉线，所以查了一下教程，搭建一个非专用服务器，并做一下记录。<!-- more -->\n### 搭建准备\n因为玩的人不是很多，所以服务器选的是阿里云4C16G,200Mbps带宽按流量付费(根据这几天玩下来，流量一般稳定在100kb/s左右)，弹性ip，系统选择的是CentOS7.8 64 bit，基于LinuxGSM 方案，阿里云入网是不收费的，200Mbps 带宽有利于下载游戏。\n### 配置服务器\n#### 增加Hosts\n因为国内的关系，服务器访问github拉取代码容易出现失败的情况，所以需要修改一下hosts。\n``` shell\nvi /etc/hosts\n#增加下面的配置，保存 这样可以避免脚本下载的时候失败\n199.232.4.133 raw.githubusercontent.com\n```\n\n#### 设置安全组\n游戏需要用到几个端口，默认的阿里云服务器只开了80，443 ，打开服务器的安全组配置\n``` shell\n# 打开对应的UDP端口, 0.0.0.0/0\n7777\n27015\n```\n#### 安装依赖\n\n``` shell\n# root 权限下执行,还可能会缺少，但是后面脚本会自行安装\nyum install epel-release -y\nyum install mailx postfix curl wget tar bzip2 gzip unzip python3 binutils bc jq tmux glibc.i686 libstdc++ libstdc++.i686 -y\n```\n#### 增加用户\n创建非root用户\n``` shell\n# 增加用户\nadduser arkserver\n# 设置密码，可以根据自己的需求设置\npasswd 1234546\n```\n#### 安装脚本\n\n``` shell\n# 切换用户、安装\nsu - arkserver\ncd ~\n# 下载linuxgsm.sh 脚本\nwget -O linuxgsm.sh https://linuxgsm.sh && chmod +x linuxgsm.sh && bash linuxgsm.sh arkserver\n# 安装、如果下载失败，多执行几次\n./arkserver install\n```\n\n#### 常用命令\n``` shell\n# 可以通过键入找到命令的完整列表。\n./arkserver\n# 启动\n./arkserver start\n# 停止\n./arkserver stop\n# 重启\n./arkserver restart\n# 更新\n./arkserver update\n# 强制更新\n./arkserver force-update\n```\n\n\n##### [参考LinuxGSM](https://linuxgsm.com/lgsm/arkserver/)\n\n\n\n\n\n","source":"_posts/ark-server.md","raw":"---\ntitle: 方舟服务器搭建 Ark-Server-Build\ndate: 2020-04-14 21:28:48\ntags: Ark\ncategories: Game\n---\n最近被朋友拉着入了`方舟:进化生存`的坑，但是朋友家的网络有点炸裂，导致我疯狂掉线，所以查了一下教程，搭建一个非专用服务器，并做一下记录。<!-- more -->\n### 搭建准备\n因为玩的人不是很多，所以服务器选的是阿里云4C16G,200Mbps带宽按流量付费(根据这几天玩下来，流量一般稳定在100kb/s左右)，弹性ip，系统选择的是CentOS7.8 64 bit，基于LinuxGSM 方案，阿里云入网是不收费的，200Mbps 带宽有利于下载游戏。\n### 配置服务器\n#### 增加Hosts\n因为国内的关系，服务器访问github拉取代码容易出现失败的情况，所以需要修改一下hosts。\n``` shell\nvi /etc/hosts\n#增加下面的配置，保存 这样可以避免脚本下载的时候失败\n199.232.4.133 raw.githubusercontent.com\n```\n\n#### 设置安全组\n游戏需要用到几个端口，默认的阿里云服务器只开了80，443 ，打开服务器的安全组配置\n``` shell\n# 打开对应的UDP端口, 0.0.0.0/0\n7777\n27015\n```\n#### 安装依赖\n\n``` shell\n# root 权限下执行,还可能会缺少，但是后面脚本会自行安装\nyum install epel-release -y\nyum install mailx postfix curl wget tar bzip2 gzip unzip python3 binutils bc jq tmux glibc.i686 libstdc++ libstdc++.i686 -y\n```\n#### 增加用户\n创建非root用户\n``` shell\n# 增加用户\nadduser arkserver\n# 设置密码，可以根据自己的需求设置\npasswd 1234546\n```\n#### 安装脚本\n\n``` shell\n# 切换用户、安装\nsu - arkserver\ncd ~\n# 下载linuxgsm.sh 脚本\nwget -O linuxgsm.sh https://linuxgsm.sh && chmod +x linuxgsm.sh && bash linuxgsm.sh arkserver\n# 安装、如果下载失败，多执行几次\n./arkserver install\n```\n\n#### 常用命令\n``` shell\n# 可以通过键入找到命令的完整列表。\n./arkserver\n# 启动\n./arkserver start\n# 停止\n./arkserver stop\n# 重启\n./arkserver restart\n# 更新\n./arkserver update\n# 强制更新\n./arkserver force-update\n```\n\n\n##### [参考LinuxGSM](https://linuxgsm.com/lgsm/arkserver/)\n\n\n\n\n\n","slug":"ark-server","published":1,"updated":"2020-04-14T05:40:22.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ci000keos68z9ldjvg","content":"<p>最近被朋友拉着入了<code>方舟:进化生存</code>的坑，但是朋友家的网络有点炸裂，导致我疯狂掉线，所以查了一下教程，搭建一个非专用服务器，并做一下记录。<a id=\"more\"></a></p>\n<h3 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h3><p>因为玩的人不是很多，所以服务器选的是阿里云4C16G,200Mbps带宽按流量付费(根据这几天玩下来，流量一般稳定在100kb/s左右)，弹性ip，系统选择的是CentOS7.8 64 bit，基于LinuxGSM 方案，阿里云入网是不收费的，200Mbps 带宽有利于下载游戏。</p>\n<h3 id=\"配置服务器\"><a href=\"#配置服务器\" class=\"headerlink\" title=\"配置服务器\"></a>配置服务器</h3><h4 id=\"增加Hosts\"><a href=\"#增加Hosts\" class=\"headerlink\" title=\"增加Hosts\"></a>增加Hosts</h4><p>因为国内的关系，服务器访问github拉取代码容易出现失败的情况，所以需要修改一下hosts。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加下面的配置，保存 这样可以避免脚本下载的时候失败</span></span><br><span class=\"line\">199.232.4.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置安全组\"><a href=\"#设置安全组\" class=\"headerlink\" title=\"设置安全组\"></a>设置安全组</h4><p>游戏需要用到几个端口，默认的阿里云服务器只开了80，443 ，打开服务器的安全组配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开对应的UDP端口, 0.0.0.0/0</span></span><br><span class=\"line\">7777</span><br><span class=\"line\">27015</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> root 权限下执行,还可能会缺少，但是后面脚本会自行安装</span></span><br><span class=\"line\">yum install epel-release -y</span><br><span class=\"line\">yum install mailx postfix curl wget tar bzip2 gzip unzip python3 binutils bc jq tmux glibc.i686 libstdc++ libstdc++.i686 -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加用户\"><a href=\"#增加用户\" class=\"headerlink\" title=\"增加用户\"></a>增加用户</h4><p>创建非root用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 增加用户</span></span><br><span class=\"line\">adduser arkserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置密码，可以根据自己的需求设置</span></span><br><span class=\"line\">passwd 1234546</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换用户、安装</span></span><br><span class=\"line\">su - arkserver</span><br><span class=\"line\">cd ~</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载linuxgsm.sh 脚本</span></span><br><span class=\"line\">wget -O linuxgsm.sh https://linuxgsm.sh &amp;&amp; chmod +x linuxgsm.sh &amp;&amp; bash linuxgsm.sh arkserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装、如果下载失败，多执行几次</span></span><br><span class=\"line\">./arkserver install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可以通过键入找到命令的完整列表。</span></span><br><span class=\"line\">./arkserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">./arkserver start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止</span></span><br><span class=\"line\">./arkserver stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启</span></span><br><span class=\"line\">./arkserver restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更新</span></span><br><span class=\"line\">./arkserver update</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 强制更新</span></span><br><span class=\"line\">./arkserver force-update</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"参考LinuxGSM\"><a href=\"#参考LinuxGSM\" class=\"headerlink\" title=\"参考LinuxGSM\"></a><a href=\"https://linuxgsm.com/lgsm/arkserver/\" target=\"_blank\" rel=\"noopener\">参考LinuxGSM</a></h5>","site":{"data":{}},"excerpt":"<p>最近被朋友拉着入了<code>方舟:进化生存</code>的坑，但是朋友家的网络有点炸裂，导致我疯狂掉线，所以查了一下教程，搭建一个非专用服务器，并做一下记录。","more":"</p>\n<h3 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h3><p>因为玩的人不是很多，所以服务器选的是阿里云4C16G,200Mbps带宽按流量付费(根据这几天玩下来，流量一般稳定在100kb/s左右)，弹性ip，系统选择的是CentOS7.8 64 bit，基于LinuxGSM 方案，阿里云入网是不收费的，200Mbps 带宽有利于下载游戏。</p>\n<h3 id=\"配置服务器\"><a href=\"#配置服务器\" class=\"headerlink\" title=\"配置服务器\"></a>配置服务器</h3><h4 id=\"增加Hosts\"><a href=\"#增加Hosts\" class=\"headerlink\" title=\"增加Hosts\"></a>增加Hosts</h4><p>因为国内的关系，服务器访问github拉取代码容易出现失败的情况，所以需要修改一下hosts。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加下面的配置，保存 这样可以避免脚本下载的时候失败</span></span><br><span class=\"line\">199.232.4.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置安全组\"><a href=\"#设置安全组\" class=\"headerlink\" title=\"设置安全组\"></a>设置安全组</h4><p>游戏需要用到几个端口，默认的阿里云服务器只开了80，443 ，打开服务器的安全组配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开对应的UDP端口, 0.0.0.0/0</span></span><br><span class=\"line\">7777</span><br><span class=\"line\">27015</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> root 权限下执行,还可能会缺少，但是后面脚本会自行安装</span></span><br><span class=\"line\">yum install epel-release -y</span><br><span class=\"line\">yum install mailx postfix curl wget tar bzip2 gzip unzip python3 binutils bc jq tmux glibc.i686 libstdc++ libstdc++.i686 -y</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加用户\"><a href=\"#增加用户\" class=\"headerlink\" title=\"增加用户\"></a>增加用户</h4><p>创建非root用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 增加用户</span></span><br><span class=\"line\">adduser arkserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置密码，可以根据自己的需求设置</span></span><br><span class=\"line\">passwd 1234546</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换用户、安装</span></span><br><span class=\"line\">su - arkserver</span><br><span class=\"line\">cd ~</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载linuxgsm.sh 脚本</span></span><br><span class=\"line\">wget -O linuxgsm.sh https://linuxgsm.sh &amp;&amp; chmod +x linuxgsm.sh &amp;&amp; bash linuxgsm.sh arkserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装、如果下载失败，多执行几次</span></span><br><span class=\"line\">./arkserver install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可以通过键入找到命令的完整列表。</span></span><br><span class=\"line\">./arkserver</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">./arkserver start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止</span></span><br><span class=\"line\">./arkserver stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启</span></span><br><span class=\"line\">./arkserver restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更新</span></span><br><span class=\"line\">./arkserver update</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 强制更新</span></span><br><span class=\"line\">./arkserver force-update</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"参考LinuxGSM\"><a href=\"#参考LinuxGSM\" class=\"headerlink\" title=\"参考LinuxGSM\"></a><a href=\"https://linuxgsm.com/lgsm/arkserver/\" target=\"_blank\" rel=\"noopener\">参考LinuxGSM</a></h5>"},{"title":"brew 升级应用错误","date":"2018-05-03T03:01:00.000Z","_content":"定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<!-- more -->\n### brew 升级\n最近在使用`brew upgrade` 的过程中，碰到了一个问题记录一下。\n``` shell\nError: An unexpected error occurred during the `brew link` step\nThe formula built, but is not symlinked into /usr/local\nPermission denied @ dir_s_mkdir - /usr/local/Frameworks\nError: Permission denied @ dir_s_mkdir - /usr/local/Frameworks\n```\n如上所示，需要创建`/usr/local/Frameworks` 目录，但是没有对应的权限\n\n### 解决方法\n``` Shell\n sudo mkdir /usr/local/Frameworks\n sudo chown $(whoami):admin /usr/local/Frameworks\n```\n手动创建，赋权，之后就可以愉快的` brew upgrade` 了。\n\n\n最后`brew cleanup` 清理废弃的文件，释放空间。\n","source":"_posts/brew-upgrade-error.md","raw":"---\ntitle: brew 升级应用错误\ndate: 2018-05-03 11:01:00\ncategories: Shell\ntags: Brew\n---\n定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<!-- more -->\n### brew 升级\n最近在使用`brew upgrade` 的过程中，碰到了一个问题记录一下。\n``` shell\nError: An unexpected error occurred during the `brew link` step\nThe formula built, but is not symlinked into /usr/local\nPermission denied @ dir_s_mkdir - /usr/local/Frameworks\nError: Permission denied @ dir_s_mkdir - /usr/local/Frameworks\n```\n如上所示，需要创建`/usr/local/Frameworks` 目录，但是没有对应的权限\n\n### 解决方法\n``` Shell\n sudo mkdir /usr/local/Frameworks\n sudo chown $(whoami):admin /usr/local/Frameworks\n```\n手动创建，赋权，之后就可以愉快的` brew upgrade` 了。\n\n\n最后`brew cleanup` 清理废弃的文件，释放空间。\n","slug":"brew-upgrade-error","published":1,"updated":"2019-10-20T04:54:47.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cj000oeos6ffyp0j6w","content":"<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<a id=\"more\"></a></p>\n<h3 id=\"brew-升级\"><a href=\"#brew-升级\" class=\"headerlink\" title=\"brew 升级\"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，碰到了一个问题记录一下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: An unexpected error occurred during the `brew link` step</span><br><span class=\"line\">The formula built, but is not symlinked into /usr/local</span><br><span class=\"line\">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class=\"line\">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/local/Frameworks</span><br><span class=\"line\">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>\n<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>\n","site":{"data":{}},"excerpt":"<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。","more":"</p>\n<h3 id=\"brew-升级\"><a href=\"#brew-升级\" class=\"headerlink\" title=\"brew 升级\"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，碰到了一个问题记录一下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: An unexpected error occurred during the `brew link` step</span><br><span class=\"line\">The formula built, but is not symlinked into /usr/local</span><br><span class=\"line\">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class=\"line\">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/local/Frameworks</span><br><span class=\"line\">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>\n<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>"},{"title":"搭建一个简单的app分发平台","date":"2019-03-01T05:39:58.000Z","_content":"#### 需求\n   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk\n比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<!-- more -->\n#### 准备\n   - 企业签名过后的ipa包、apk\n   - 一个域名\n   - 一台服务器\n   - 一个https证书\n#### 搭建环境\n### 搭建一个nginx web 环境\n    首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。\n大家一般都是使用微信的扫一扫\n### 获取apk、ipa、plist、iOS app icon文件公网地址\n    配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。\n    `https://xxxx.xxxx.com/xxx.apk`\n    `https://xxxx.xxxx.com/xxx.ipa`\n    `https://xxxx.xxxx.com/xxx.plist`\n    `https://xxxx.xxxx.com/xxx.png`\n\n### 配置plist文件的内容\n``` plist 文件\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>items</key>\n  <array>\n    <dict>\n      <key>assets</key>\n      <array>\n        <dict>\n          <key>kind</key>\n          <string>software-package</string>\n          <key>url</key>\n          <string>https://xxx.xxx.com/download/xxx.ipa</string>\n        </dict>\n        <dict>\n          <key>kind</key>\n          <string>display-image</string>\n          <key>needs-shine</key>\n          <true/>\n          <key>url</key>\n          <string>https://xxx.xxx.com/img/xxx.png</string>\n        </dict>\n      </array>\n      <key>metadata</key>\n      <dict>\n        <key>bundle-identifier</key>\n        <string>io.xxx.xxx</string>\n        <key>bundle-version</key>\n        <string>1.0</string>\n        <key>kind</key>\n        <string>software</string>\n        <key>subtitle</key>\n        <string>xxx</string>\n        <key>title</key>\n        <string>xxx</string>\n      </dict>\n    </dict>\n  </array>\n</dict>\n</plist>\n\n```\n需要修改`software-package`、`display-image` 、`subtitle`、`title`\n`software-package` 使用 `https://xxxx.xxxx.com/xxx.ipa` 的地址\n### 配置地址\n在下载页面配置`apk`下载地址以及`plist`地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。\n### 总结\n主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。\n","source":"_posts/build-an-app-distribution-platform.md","raw":"---\ntitle: 搭建一个简单的app分发平台\ndate: 2019-03-01 13:39:58\ncategories: Linux\ntag: app 分发\n---\n#### 需求\n   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk\n比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<!-- more -->\n#### 准备\n   - 企业签名过后的ipa包、apk\n   - 一个域名\n   - 一台服务器\n   - 一个https证书\n#### 搭建环境\n### 搭建一个nginx web 环境\n    首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。\n大家一般都是使用微信的扫一扫\n### 获取apk、ipa、plist、iOS app icon文件公网地址\n    配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。\n    `https://xxxx.xxxx.com/xxx.apk`\n    `https://xxxx.xxxx.com/xxx.ipa`\n    `https://xxxx.xxxx.com/xxx.plist`\n    `https://xxxx.xxxx.com/xxx.png`\n\n### 配置plist文件的内容\n``` plist 文件\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>items</key>\n  <array>\n    <dict>\n      <key>assets</key>\n      <array>\n        <dict>\n          <key>kind</key>\n          <string>software-package</string>\n          <key>url</key>\n          <string>https://xxx.xxx.com/download/xxx.ipa</string>\n        </dict>\n        <dict>\n          <key>kind</key>\n          <string>display-image</string>\n          <key>needs-shine</key>\n          <true/>\n          <key>url</key>\n          <string>https://xxx.xxx.com/img/xxx.png</string>\n        </dict>\n      </array>\n      <key>metadata</key>\n      <dict>\n        <key>bundle-identifier</key>\n        <string>io.xxx.xxx</string>\n        <key>bundle-version</key>\n        <string>1.0</string>\n        <key>kind</key>\n        <string>software</string>\n        <key>subtitle</key>\n        <string>xxx</string>\n        <key>title</key>\n        <string>xxx</string>\n      </dict>\n    </dict>\n  </array>\n</dict>\n</plist>\n\n```\n需要修改`software-package`、`display-image` 、`subtitle`、`title`\n`software-package` 使用 `https://xxxx.xxxx.com/xxx.ipa` 的地址\n### 配置地址\n在下载页面配置`apk`下载地址以及`plist`地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。\n### 总结\n主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。\n","slug":"build-an-app-distribution-platform","published":1,"updated":"2019-10-20T04:54:47.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ck000reos61gkf7cej","content":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk<br>比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<a id=\"more\"></a></p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li>企业签名过后的ipa包、apk</li>\n<li>一个域名</li>\n<li>一台服务器</li>\n<li>一个https证书<h4 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h4><h3 id=\"搭建一个nginx-web-环境\"><a href=\"#搭建一个nginx-web-环境\" class=\"headerlink\" title=\"搭建一个nginx web 环境\"></a>搭建一个nginx web 环境</h3>首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。<br>大家一般都是使用微信的扫一扫<h3 id=\"获取apk、ipa、plist、iOS-app-icon文件公网地址\"><a href=\"#获取apk、ipa、plist、iOS-app-icon文件公网地址\" class=\"headerlink\" title=\"获取apk、ipa、plist、iOS app icon文件公网地址\"></a>获取apk、ipa、plist、iOS app icon文件公网地址</h3>配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。<br><code>https://xxxx.xxxx.com/xxx.apk</code><br><code>https://xxxx.xxxx.com/xxx.ipa</code><br><code>https://xxxx.xxxx.com/xxx.plist</code><br><code>https://xxxx.xxxx.com/xxx.png</code></li>\n</ul>\n<h3 id=\"配置plist文件的内容\"><a href=\"#配置plist文件的内容\" class=\"headerlink\" title=\"配置plist文件的内容\"></a>配置plist文件的内容</h3><figure class=\"highlight plist\"><figcaption><span>文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>items<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>assets<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software-package<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/download/xxx.ipa<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>display-image<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>needs-shine<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/img/xxx.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>metadata<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-identifier<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>io.xxx.xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-version<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>subtitle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要修改<code>software-package</code>、<code>display-image</code> 、<code>subtitle</code>、<code>title</code><br><code>software-package</code> 使用 <code>https://xxxx.xxxx.com/xxx.ipa</code> 的地址</p>\n<h3 id=\"配置地址\"><a href=\"#配置地址\" class=\"headerlink\" title=\"配置地址\"></a>配置地址</h3><p>在下载页面配置<code>apk</code>下载地址以及<code>plist</code>地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk<br>比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。","more":"</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li>企业签名过后的ipa包、apk</li>\n<li>一个域名</li>\n<li>一台服务器</li>\n<li>一个https证书<h4 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h4><h3 id=\"搭建一个nginx-web-环境\"><a href=\"#搭建一个nginx-web-环境\" class=\"headerlink\" title=\"搭建一个nginx web 环境\"></a>搭建一个nginx web 环境</h3>首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。<br>大家一般都是使用微信的扫一扫<h3 id=\"获取apk、ipa、plist、iOS-app-icon文件公网地址\"><a href=\"#获取apk、ipa、plist、iOS-app-icon文件公网地址\" class=\"headerlink\" title=\"获取apk、ipa、plist、iOS app icon文件公网地址\"></a>获取apk、ipa、plist、iOS app icon文件公网地址</h3>配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。<br><code>https://xxxx.xxxx.com/xxx.apk</code><br><code>https://xxxx.xxxx.com/xxx.ipa</code><br><code>https://xxxx.xxxx.com/xxx.plist</code><br><code>https://xxxx.xxxx.com/xxx.png</code></li>\n</ul>\n<h3 id=\"配置plist文件的内容\"><a href=\"#配置plist文件的内容\" class=\"headerlink\" title=\"配置plist文件的内容\"></a>配置plist文件的内容</h3><figure class=\"highlight plist\"><figcaption><span>文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>items<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>assets<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software-package<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/download/xxx.ipa<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>display-image<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>needs-shine<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/img/xxx.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>metadata<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-identifier<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>io.xxx.xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-version<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>subtitle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要修改<code>software-package</code>、<code>display-image</code> 、<code>subtitle</code>、<code>title</code><br><code>software-package</code> 使用 <code>https://xxxx.xxxx.com/xxx.ipa</code> 的地址</p>\n<h3 id=\"配置地址\"><a href=\"#配置地址\" class=\"headerlink\" title=\"配置地址\"></a>配置地址</h3><p>在下载页面配置<code>apk</code>下载地址以及<code>plist</code>地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。</p>"},{"title":"CentOS 安装 git","date":"2017-11-06T07:11:35.000Z","_content":"CentOS 7 上安装git 的几种方法。 <!-- more -->\n### 源码安装\n- 安装对应的依赖\n``` bash\nyum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install -y gcc perl-ExtUtils-MakeMaker\n```\n- 下载源码编译安装\n#### 确保系统git 已经被卸载\n``` bash\nyum remove -y git(先执行本选项，确保卸载掉git)\n```\n\n``` bash\ncd /usr/src\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz\ntar xzf git-2.9.3.tar.gz\ncd git-2.9.3\nmake prefix=/usr/bin/git all\nmake prefix=/usr/bin/git install\necho \"export PATH=$PATH:/usr/bin/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\ngit --version (查看是否安装完成)\n```\n### rpm 安装（基于CentOS7）\n``` bash\nyum install -y epel-release （#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）\nrpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm\nyum install git2u\ngit --version\n```\n","source":"_posts/centos-install-git.md","raw":"---\ntitle: CentOS 安装 git\ndate: 2017-11-06 15:11:35\ncategories: Linux\ntag: Git\n---\nCentOS 7 上安装git 的几种方法。 <!-- more -->\n### 源码安装\n- 安装对应的依赖\n``` bash\nyum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install -y gcc perl-ExtUtils-MakeMaker\n```\n- 下载源码编译安装\n#### 确保系统git 已经被卸载\n``` bash\nyum remove -y git(先执行本选项，确保卸载掉git)\n```\n\n``` bash\ncd /usr/src\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz\ntar xzf git-2.9.3.tar.gz\ncd git-2.9.3\nmake prefix=/usr/bin/git all\nmake prefix=/usr/bin/git install\necho \"export PATH=$PATH:/usr/bin/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\ngit --version (查看是否安装完成)\n```\n### rpm 安装（基于CentOS7）\n``` bash\nyum install -y epel-release （#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）\nrpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm\nyum install git2u\ngit --version\n```\n","slug":"centos-install-git","published":1,"updated":"2019-10-20T04:54:47.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cl000veos66xs27b4h","content":"<p>CentOS 7 上安装git 的几种方法。 <a id=\"more\"></a></p>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ul>\n<li>安装对应的依赖<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install -y gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li>\n<li>下载源码编译安装<h4 id=\"确保系统git-已经被卸载\"><a href=\"#确保系统git-已经被卸载\" class=\"headerlink\" title=\"确保系统git 已经被卸载\"></a>确保系统git 已经被卸载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove -y git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class=\"line\">tar xzf git-2.9.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.9.3</span><br><span class=\"line\">make prefix=/usr/bin/git all</span><br><span class=\"line\">make prefix=/usr/bin/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/bin/git/bin\"</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br><span class=\"line\">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>\n<h3 id=\"rpm-安装（基于CentOS7）\"><a href=\"#rpm-安装（基于CentOS7）\" class=\"headerlink\" title=\"rpm 安装（基于CentOS7）\"></a>rpm 安装（基于CentOS7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release （<span class=\"comment\">#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）</span></span><br><span class=\"line\">rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">yum install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>CentOS 7 上安装git 的几种方法。","more":"</p>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ul>\n<li>安装对应的依赖<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install -y gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li>\n<li>下载源码编译安装<h4 id=\"确保系统git-已经被卸载\"><a href=\"#确保系统git-已经被卸载\" class=\"headerlink\" title=\"确保系统git 已经被卸载\"></a>确保系统git 已经被卸载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove -y git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class=\"line\">tar xzf git-2.9.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.9.3</span><br><span class=\"line\">make prefix=/usr/bin/git all</span><br><span class=\"line\">make prefix=/usr/bin/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/bin/git/bin\"</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br><span class=\"line\">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>\n<h3 id=\"rpm-安装（基于CentOS7）\"><a href=\"#rpm-安装（基于CentOS7）\" class=\"headerlink\" title=\"rpm 安装（基于CentOS7）\"></a>rpm 安装（基于CentOS7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release （<span class=\"comment\">#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）</span></span><br><span class=\"line\">rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">yum install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>"},{"title":"centos安装redis5.x","date":"2018-12-14T02:35:35.000Z","_content":"### Redis\n>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<!-- more -->\n\n我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，\n第一件事就是安装Redis。\n\n#### 安装Redis（默认CentOS 7）\n- 下载Redis\n``` shell\nwget http://download.redis.io/releases/redis-5.0.3.tar.gz\n```\n- 解压编译\n```\ntar xzf redis-5.0.3.tar.gz\ncd redis-5.0.3\nmake install\n#安装redis-server（默认配置）\nsh ./utils/install_server.sh\n\nWelcome to the redis service installer\nThis script will help you easily set up a running redis server\n\nPlease select the redis port for this instance: [6379]\nSelecting default: 6379\nPlease select the redis config file name [/etc/redis/6379.conf]\nSelected default - /etc/redis/6379.conf\nPlease select the redis log file name [/var/log/redis_6379.log]\nSelected default - /var/log/redis_6379.log\nPlease select the data directory for this instance [/var/lib/redis/6379]\nSelected default - /var/lib/redis/6379\nPlease select the redis executable path [/usr/local/bin/redis-server]\nSelected config:\nPort           : 6379\nConfig file    : /etc/redis/6379.conf\nLog file       : /var/log/redis_6379.log\nData dir       : /var/lib/redis/6379\nExecutable     : /usr/local/bin/redis-server\nCli Executable : /usr/local/bin/redis-cli\nIs this ok? Then press ENTER to go on or Ctrl-C to abort.\nCopied /tmp/6379.conf => /etc/init.d/redis_6379\nInstalling service...\nSuccessfully added to chkconfig!\nSuccessfully added to runlevels 345!\nStarting Redis server...\nInstallation successful!\n```\n#### 修改配置文件\n``` shell\nvim /etc/redis/6379.config\n#设置后台启动\ndaemonize yes\n#设置数据持久化\nappendonly yes\n#设置ip 默认最好不修改\n#bind 127.0.0.1\n#设置密码\n#requirepass 123456\n```\n#### 创建服务脚本\n```\n#启动\nsystemctl start /etc/init.d/redis_6379\n```\n","source":"_posts/centos-install-redis5-x.md","raw":"---\ntitle: centos安装redis5.x\ndate: 2018-12-14 10:35:35\ncategories: Linux\ntags: Redis\n---\n### Redis\n>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<!-- more -->\n\n我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，\n第一件事就是安装Redis。\n\n#### 安装Redis（默认CentOS 7）\n- 下载Redis\n``` shell\nwget http://download.redis.io/releases/redis-5.0.3.tar.gz\n```\n- 解压编译\n```\ntar xzf redis-5.0.3.tar.gz\ncd redis-5.0.3\nmake install\n#安装redis-server（默认配置）\nsh ./utils/install_server.sh\n\nWelcome to the redis service installer\nThis script will help you easily set up a running redis server\n\nPlease select the redis port for this instance: [6379]\nSelecting default: 6379\nPlease select the redis config file name [/etc/redis/6379.conf]\nSelected default - /etc/redis/6379.conf\nPlease select the redis log file name [/var/log/redis_6379.log]\nSelected default - /var/log/redis_6379.log\nPlease select the data directory for this instance [/var/lib/redis/6379]\nSelected default - /var/lib/redis/6379\nPlease select the redis executable path [/usr/local/bin/redis-server]\nSelected config:\nPort           : 6379\nConfig file    : /etc/redis/6379.conf\nLog file       : /var/log/redis_6379.log\nData dir       : /var/lib/redis/6379\nExecutable     : /usr/local/bin/redis-server\nCli Executable : /usr/local/bin/redis-cli\nIs this ok? Then press ENTER to go on or Ctrl-C to abort.\nCopied /tmp/6379.conf => /etc/init.d/redis_6379\nInstalling service...\nSuccessfully added to chkconfig!\nSuccessfully added to runlevels 345!\nStarting Redis server...\nInstallation successful!\n```\n#### 修改配置文件\n``` shell\nvim /etc/redis/6379.config\n#设置后台启动\ndaemonize yes\n#设置数据持久化\nappendonly yes\n#设置ip 默认最好不修改\n#bind 127.0.0.1\n#设置密码\n#requirepass 123456\n```\n#### 创建服务脚本\n```\n#启动\nsystemctl start /etc/init.d/redis_6379\n```\n","slug":"centos-install-redis5-x","published":1,"updated":"2019-10-20T04:54:47.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cl000yeos65rtuerjn","content":"<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><blockquote>\n<p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<a id=\"more\"></a></p>\n</blockquote>\n<p>我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，<br>第一件事就是安装Redis。</p>\n<h4 id=\"安装Redis（默认CentOS-7）\"><a href=\"#安装Redis（默认CentOS-7）\" class=\"headerlink\" title=\"安装Redis（默认CentOS 7）\"></a>安装Redis（默认CentOS 7）</h4><ul>\n<li>下载Redis<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>解压编译<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-5.0.3.tar.gz</span><br><span class=\"line\">cd redis-5.0.3</span><br><span class=\"line\">make install</span><br><span class=\"line\">#安装redis-server（默认配置）</span><br><span class=\"line\">sh .&#x2F;utils&#x2F;install_server.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the redis service installer</span><br><span class=\"line\">This script will help you easily set up a running redis server</span><br><span class=\"line\"></span><br><span class=\"line\">Please select the redis port for this instance: [6379]</span><br><span class=\"line\">Selecting default: 6379</span><br><span class=\"line\">Please select the redis config file name [&#x2F;etc&#x2F;redis&#x2F;6379.conf]</span><br><span class=\"line\">Selected default - &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br><span class=\"line\">Please select the redis log file name [&#x2F;var&#x2F;log&#x2F;redis_6379.log]</span><br><span class=\"line\">Selected default - &#x2F;var&#x2F;log&#x2F;redis_6379.log</span><br><span class=\"line\">Please select the data directory for this instance [&#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379]</span><br><span class=\"line\">Selected default - &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379</span><br><span class=\"line\">Please select the redis executable path [&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server]</span><br><span class=\"line\">Selected config:</span><br><span class=\"line\">Port           : 6379</span><br><span class=\"line\">Config file    : &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br><span class=\"line\">Log file       : &#x2F;var&#x2F;log&#x2F;redis_6379.log</span><br><span class=\"line\">Data dir       : &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379</span><br><span class=\"line\">Executable     : &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server</span><br><span class=\"line\">Cli Executable : &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-cli</span><br><span class=\"line\">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class=\"line\">Copied &#x2F;tmp&#x2F;6379.conf &#x3D;&gt; &#x2F;etc&#x2F;init.d&#x2F;redis_6379</span><br><span class=\"line\">Installing service...</span><br><span class=\"line\">Successfully added to chkconfig!</span><br><span class=\"line\">Successfully added to runlevels 345!</span><br><span class=\"line\">Starting Redis server...</span><br><span class=\"line\">Installation successful!</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置后台启动</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置数据持久化</span></span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置ip 默认最好不修改</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">bind</span> 127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">requirepass 123456</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建服务脚本\"><a href=\"#创建服务脚本\" class=\"headerlink\" title=\"创建服务脚本\"></a>创建服务脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动</span><br><span class=\"line\">systemctl start &#x2F;etc&#x2F;init.d&#x2F;redis_6379</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><blockquote>\n<p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。","more":"</p>\n</blockquote>\n<p>我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，<br>第一件事就是安装Redis。</p>\n<h4 id=\"安装Redis（默认CentOS-7）\"><a href=\"#安装Redis（默认CentOS-7）\" class=\"headerlink\" title=\"安装Redis（默认CentOS 7）\"></a>安装Redis（默认CentOS 7）</h4><ul>\n<li>下载Redis<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>解压编译<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-5.0.3.tar.gz</span><br><span class=\"line\">cd redis-5.0.3</span><br><span class=\"line\">make install</span><br><span class=\"line\">#安装redis-server（默认配置）</span><br><span class=\"line\">sh .&#x2F;utils&#x2F;install_server.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the redis service installer</span><br><span class=\"line\">This script will help you easily set up a running redis server</span><br><span class=\"line\"></span><br><span class=\"line\">Please select the redis port for this instance: [6379]</span><br><span class=\"line\">Selecting default: 6379</span><br><span class=\"line\">Please select the redis config file name [&#x2F;etc&#x2F;redis&#x2F;6379.conf]</span><br><span class=\"line\">Selected default - &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br><span class=\"line\">Please select the redis log file name [&#x2F;var&#x2F;log&#x2F;redis_6379.log]</span><br><span class=\"line\">Selected default - &#x2F;var&#x2F;log&#x2F;redis_6379.log</span><br><span class=\"line\">Please select the data directory for this instance [&#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379]</span><br><span class=\"line\">Selected default - &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379</span><br><span class=\"line\">Please select the redis executable path [&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server]</span><br><span class=\"line\">Selected config:</span><br><span class=\"line\">Port           : 6379</span><br><span class=\"line\">Config file    : &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br><span class=\"line\">Log file       : &#x2F;var&#x2F;log&#x2F;redis_6379.log</span><br><span class=\"line\">Data dir       : &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379</span><br><span class=\"line\">Executable     : &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server</span><br><span class=\"line\">Cli Executable : &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-cli</span><br><span class=\"line\">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class=\"line\">Copied &#x2F;tmp&#x2F;6379.conf &#x3D;&gt; &#x2F;etc&#x2F;init.d&#x2F;redis_6379</span><br><span class=\"line\">Installing service...</span><br><span class=\"line\">Successfully added to chkconfig!</span><br><span class=\"line\">Successfully added to runlevels 345!</span><br><span class=\"line\">Starting Redis server...</span><br><span class=\"line\">Installation successful!</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置后台启动</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置数据持久化</span></span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置ip 默认最好不修改</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">bind</span> 127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">requirepass 123456</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建服务脚本\"><a href=\"#创建服务脚本\" class=\"headerlink\" title=\"创建服务脚本\"></a>创建服务脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动</span><br><span class=\"line\">systemctl start &#x2F;etc&#x2F;init.d&#x2F;redis_6379</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"CentOS7 安装Docker","date":"2019-06-25T01:42:40.000Z","_content":"Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于[Docker官方文档](https://docs.docker.com/install/linux/docker-ce/centos/)<!-- more -->\n\n### 准备\n#### 操作系统需求\n基于CentOS7发行版进行安装，需要启用`centos-extras`，默认是开启的，如果关闭了的话，需要打开\n``` shell\n[root@ip-172-26-13-79 centos]# yum repolist                                                                              \n已加载插件：fastestmirror\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nLoading mirror speeds from cached hostfile\n * base: centos.usonyx.net\n * epel: download.nus.edu.sg\n * extras: centos.usonyx.net\n * updates: centos.usonyx.net\n源标识                                     源名称                                                                  状态\n!base/7/x86_64                             CentOS-7 - Base                                                         10,019\n!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221\n!extras/7/x86_64                           CentOS-7 - Extras                                                          409\n!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982\nrepolist: 25,631\n[root@ip-172-26-13-79 centos]#\n```\n开启的话，可以执行下面的命令,[参考](https://fedoraproject.org/wiki/EPEL)\n``` shell\n[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n# on RHEL 7 it is recommended to also enable the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie\n[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"\n```\n建议使用`overlay2` storage driver。\n#### 卸载旧的版本\n``` shell\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n如果没有提示，说明上面的包没有被安装。\n\n### 安装\n可以通过多种方式安装Docker CE：\n- 大多数用户通过设置 `Dokcer's repositories` 的方式安装，方便安装和进行升级，这种方法比较推荐。\n- 有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。\n- 在开发和测试环境，使用自动脚本进行Dokcer安装\n\n#### 使用repository 进行安装\n##### 设置 REPOSITORY\n1.安装所需要的包，提供对应的存储支持\n``` shell\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n2.使用下面推荐的稳定repository\n``` shell\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n##### 可选：开启nightly或test repositories\n1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们\n``` shell\n$ sudo yum-config-manager --enable docker-ce-nightly\n```\n2.开启test channel\n``` shell\nsudo yum-config-manager --enable docker-ce-test\n```\n3.关闭\n``` shell\nsudo yum-config-manager --disable docker-ce-nightly\n```\n[了解更多关于 nightly 和 test channels。](https://docs.docker.com/install/)\n\n##### 安装Docker CE\n安装最新版本，或者转到下一步安装特定版本\n``` shell\n$ sudo yum install docker-ce docker-ce-cli containerd.io\n```\n如果提示接受GPG key，请验证指纹是否匹配: `060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`\n``\n需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。\n###### 安装特定的版本\n``` shell\n$ yum list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n```\n返回的列表取决于启动的repositories。安装特定的版本\n- 例子，`docker-ce-18.09.1`\n``` shell\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n```\nDocker 已安装未启动，`docker` 组被创建，但是没有user添加进组。\n###### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n###### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过rpm包进行安装\n如果无法使用Docker's repository 安装Docker ,可以使用`.rpm`进行安装\n##### 下载rpm包\n可以到[https://download.docker.com/linux/centos/7/x86_64/stable/Packages/](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)下载`.rpm`文件选择版本进行安装。\n>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。\n\n##### 安装Docker CE\n切换到对应的目录进行下载和安装\n``` shell\n$ sudo yum install /path/to/package.rpm\n```\n##### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n##### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过使用便捷脚本安装\nDocker 提供了便捷脚本在[get.docker.com](https://get.docker.com/)和[test.docker.com](https://test.docker.com/),使用脚本安装可能会存在安全风险，建议不要在生产环境中使用\n","source":"_posts/centos7-docker-install-tutorial.md","raw":"---\ntitle: CentOS7 安装Docker\ndate: 2019-06-25 09:42:40\ncategories: Linux\ntags: Docker\n---\nDocker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于[Docker官方文档](https://docs.docker.com/install/linux/docker-ce/centos/)<!-- more -->\n\n### 准备\n#### 操作系统需求\n基于CentOS7发行版进行安装，需要启用`centos-extras`，默认是开启的，如果关闭了的话，需要打开\n``` shell\n[root@ip-172-26-13-79 centos]# yum repolist                                                                              \n已加载插件：fastestmirror\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nLoading mirror speeds from cached hostfile\n * base: centos.usonyx.net\n * epel: download.nus.edu.sg\n * extras: centos.usonyx.net\n * updates: centos.usonyx.net\n源标识                                     源名称                                                                  状态\n!base/7/x86_64                             CentOS-7 - Base                                                         10,019\n!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221\n!extras/7/x86_64                           CentOS-7 - Extras                                                          409\n!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982\nrepolist: 25,631\n[root@ip-172-26-13-79 centos]#\n```\n开启的话，可以执行下面的命令,[参考](https://fedoraproject.org/wiki/EPEL)\n``` shell\n[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n# on RHEL 7 it is recommended to also enable the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie\n[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"\n```\n建议使用`overlay2` storage driver。\n#### 卸载旧的版本\n``` shell\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n如果没有提示，说明上面的包没有被安装。\n\n### 安装\n可以通过多种方式安装Docker CE：\n- 大多数用户通过设置 `Dokcer's repositories` 的方式安装，方便安装和进行升级，这种方法比较推荐。\n- 有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。\n- 在开发和测试环境，使用自动脚本进行Dokcer安装\n\n#### 使用repository 进行安装\n##### 设置 REPOSITORY\n1.安装所需要的包，提供对应的存储支持\n``` shell\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n2.使用下面推荐的稳定repository\n``` shell\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n##### 可选：开启nightly或test repositories\n1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们\n``` shell\n$ sudo yum-config-manager --enable docker-ce-nightly\n```\n2.开启test channel\n``` shell\nsudo yum-config-manager --enable docker-ce-test\n```\n3.关闭\n``` shell\nsudo yum-config-manager --disable docker-ce-nightly\n```\n[了解更多关于 nightly 和 test channels。](https://docs.docker.com/install/)\n\n##### 安装Docker CE\n安装最新版本，或者转到下一步安装特定版本\n``` shell\n$ sudo yum install docker-ce docker-ce-cli containerd.io\n```\n如果提示接受GPG key，请验证指纹是否匹配: `060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`\n``\n需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。\n###### 安装特定的版本\n``` shell\n$ yum list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n```\n返回的列表取决于启动的repositories。安装特定的版本\n- 例子，`docker-ce-18.09.1`\n``` shell\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n```\nDocker 已安装未启动，`docker` 组被创建，但是没有user添加进组。\n###### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n###### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过rpm包进行安装\n如果无法使用Docker's repository 安装Docker ,可以使用`.rpm`进行安装\n##### 下载rpm包\n可以到[https://download.docker.com/linux/centos/7/x86_64/stable/Packages/](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)下载`.rpm`文件选择版本进行安装。\n>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。\n\n##### 安装Docker CE\n切换到对应的目录进行下载和安装\n``` shell\n$ sudo yum install /path/to/package.rpm\n```\n##### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n##### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过使用便捷脚本安装\nDocker 提供了便捷脚本在[get.docker.com](https://get.docker.com/)和[test.docker.com](https://test.docker.com/),使用脚本安装可能会存在安全风险，建议不要在生产环境中使用\n","slug":"centos7-docker-install-tutorial","published":1,"updated":"2019-10-20T04:54:47.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cm0011eos6c6zv0kdr","content":"<p>Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">Docker官方文档</a><a id=\"more\"></a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"操作系统需求\"><a href=\"#操作系统需求\" class=\"headerlink\" title=\"操作系统需求\"></a>操作系统需求</h4><p>基于CentOS7发行版进行安装，需要启用<code>centos-extras</code>，默认是开启的，如果关闭了的话，需要打开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum repolist                                                                              </span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: centos.usonyx.net</span><br><span class=\"line\"> * epel: download.nus.edu.sg</span><br><span class=\"line\"> * extras: centos.usonyx.net</span><br><span class=\"line\"> * updates: centos.usonyx.net</span><br><span class=\"line\">源标识                                     源名称                                                                  状态</span><br><span class=\"line\">!base/7/x86_64                             CentOS-7 - Base                                                         10,019</span><br><span class=\"line\">!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221</span><br><span class=\"line\">!extras/7/x86_64                           CentOS-7 - Extras                                                          409</span><br><span class=\"line\">!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982</span><br><span class=\"line\">repolist: 25,631</span><br><span class=\"line\">[root@ip-172-26-13-79 centos]#</span><br></pre></td></tr></table></figure>\n<p>开启的话，可以执行下面的命令,<a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> on RHEL 7 it is recommended to also <span class=\"built_in\">enable</span> the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie</span></span><br><span class=\"line\">[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"</span><br></pre></td></tr></table></figure>\n<p>建议使用<code>overlay2</code> storage driver。</p>\n<h4 id=\"卸载旧的版本\"><a href=\"#卸载旧的版本\" class=\"headerlink\" title=\"卸载旧的版本\"></a>卸载旧的版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>如果没有提示，说明上面的包没有被安装。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>可以通过多种方式安装Docker CE：</p>\n<ul>\n<li>大多数用户通过设置 <code>Dokcer&#39;s repositories</code> 的方式安装，方便安装和进行升级，这种方法比较推荐。</li>\n<li>有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。</li>\n<li>在开发和测试环境，使用自动脚本进行Dokcer安装</li>\n</ul>\n<h4 id=\"使用repository-进行安装\"><a href=\"#使用repository-进行安装\" class=\"headerlink\" title=\"使用repository 进行安装\"></a>使用repository 进行安装</h4><h5 id=\"设置-REPOSITORY\"><a href=\"#设置-REPOSITORY\" class=\"headerlink\" title=\"设置 REPOSITORY\"></a>设置 REPOSITORY</h5><p>1.安装所需要的包，提供对应的存储支持</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install -y yum-utils \\</span></span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n<p>2.使用下面推荐的稳定repository</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"可选：开启nightly或test-repositories\"><a href=\"#可选：开启nightly或test-repositories\" class=\"headerlink\" title=\"可选：开启nightly或test repositories\"></a>可选：开启nightly或test repositories</h5><p>1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum-config-manager --<span class=\"built_in\">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure>\n<p>2.开启test channel</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n<p>3.关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --disable docker-ce-nightly</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">了解更多关于 nightly 和 test channels。</a></p>\n<h5 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>安装最新版本，或者转到下一步安装特定版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>\n<p>如果提示接受GPG key，请验证指纹是否匹配: <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code><br>``<br>需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。</p>\n<h6 id=\"安装特定的版本\"><a href=\"#安装特定的版本\" class=\"headerlink\" title=\"安装特定的版本\"></a>安装特定的版本</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>\n<p>返回的列表取决于启动的repositories。安装特定的版本</p>\n<ul>\n<li>例子，<code>docker-ce-18.09.1</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>\nDocker 已安装未启动，<code>docker</code> 组被创建，但是没有user添加进组。<h6 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"通过运行hello-world-验证Docker-CE-安装正确\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"通过rpm包进行安装\"><a href=\"#通过rpm包进行安装\" class=\"headerlink\" title=\"通过rpm包进行安装\"></a>通过rpm包进行安装</h4>如果无法使用Docker’s repository 安装Docker ,可以使用<code>.rpm</code>进行安装<h5 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h5>可以到<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>下载<code>.rpm</code>文件选择版本进行安装。<blockquote>\n<p>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"安装Docker-CE-1\"><a href=\"#安装Docker-CE-1\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>切换到对应的目录进行下载和安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install /path/to/package.rpm</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动Docker-1\"><a href=\"#启动Docker-1\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"通过运行hello-world-验证Docker-CE-安装正确-1\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确-1\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"通过使用便捷脚本安装\"><a href=\"#通过使用便捷脚本安装\" class=\"headerlink\" title=\"通过使用便捷脚本安装\"></a>通过使用便捷脚本安装</h4><p>Docker 提供了便捷脚本在<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>和<a href=\"https://test.docker.com/\" target=\"_blank\" rel=\"noopener\">test.docker.com</a>,使用脚本安装可能会存在安全风险，建议不要在生产环境中使用</p>\n","site":{"data":{}},"excerpt":"<p>Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">Docker官方文档</a>","more":"</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"操作系统需求\"><a href=\"#操作系统需求\" class=\"headerlink\" title=\"操作系统需求\"></a>操作系统需求</h4><p>基于CentOS7发行版进行安装，需要启用<code>centos-extras</code>，默认是开启的，如果关闭了的话，需要打开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum repolist                                                                              </span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: centos.usonyx.net</span><br><span class=\"line\"> * epel: download.nus.edu.sg</span><br><span class=\"line\"> * extras: centos.usonyx.net</span><br><span class=\"line\"> * updates: centos.usonyx.net</span><br><span class=\"line\">源标识                                     源名称                                                                  状态</span><br><span class=\"line\">!base/7/x86_64                             CentOS-7 - Base                                                         10,019</span><br><span class=\"line\">!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221</span><br><span class=\"line\">!extras/7/x86_64                           CentOS-7 - Extras                                                          409</span><br><span class=\"line\">!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982</span><br><span class=\"line\">repolist: 25,631</span><br><span class=\"line\">[root@ip-172-26-13-79 centos]#</span><br></pre></td></tr></table></figure>\n<p>开启的话，可以执行下面的命令,<a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> on RHEL 7 it is recommended to also <span class=\"built_in\">enable</span> the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie</span></span><br><span class=\"line\">[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"</span><br></pre></td></tr></table></figure>\n<p>建议使用<code>overlay2</code> storage driver。</p>\n<h4 id=\"卸载旧的版本\"><a href=\"#卸载旧的版本\" class=\"headerlink\" title=\"卸载旧的版本\"></a>卸载旧的版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>如果没有提示，说明上面的包没有被安装。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>可以通过多种方式安装Docker CE：</p>\n<ul>\n<li>大多数用户通过设置 <code>Dokcer&#39;s repositories</code> 的方式安装，方便安装和进行升级，这种方法比较推荐。</li>\n<li>有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。</li>\n<li>在开发和测试环境，使用自动脚本进行Dokcer安装</li>\n</ul>\n<h4 id=\"使用repository-进行安装\"><a href=\"#使用repository-进行安装\" class=\"headerlink\" title=\"使用repository 进行安装\"></a>使用repository 进行安装</h4><h5 id=\"设置-REPOSITORY\"><a href=\"#设置-REPOSITORY\" class=\"headerlink\" title=\"设置 REPOSITORY\"></a>设置 REPOSITORY</h5><p>1.安装所需要的包，提供对应的存储支持</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install -y yum-utils \\</span></span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n<p>2.使用下面推荐的稳定repository</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"可选：开启nightly或test-repositories\"><a href=\"#可选：开启nightly或test-repositories\" class=\"headerlink\" title=\"可选：开启nightly或test repositories\"></a>可选：开启nightly或test repositories</h5><p>1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum-config-manager --<span class=\"built_in\">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure>\n<p>2.开启test channel</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n<p>3.关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --disable docker-ce-nightly</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">了解更多关于 nightly 和 test channels。</a></p>\n<h5 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>安装最新版本，或者转到下一步安装特定版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>\n<p>如果提示接受GPG key，请验证指纹是否匹配: <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code><br>``<br>需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。</p>\n<h6 id=\"安装特定的版本\"><a href=\"#安装特定的版本\" class=\"headerlink\" title=\"安装特定的版本\"></a>安装特定的版本</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>\n<p>返回的列表取决于启动的repositories。安装特定的版本</p>\n<ul>\n<li>例子，<code>docker-ce-18.09.1</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>\nDocker 已安装未启动，<code>docker</code> 组被创建，但是没有user添加进组。<h6 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"通过运行hello-world-验证Docker-CE-安装正确\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"通过rpm包进行安装\"><a href=\"#通过rpm包进行安装\" class=\"headerlink\" title=\"通过rpm包进行安装\"></a>通过rpm包进行安装</h4>如果无法使用Docker’s repository 安装Docker ,可以使用<code>.rpm</code>进行安装<h5 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h5>可以到<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>下载<code>.rpm</code>文件选择版本进行安装。<blockquote>\n<p>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"安装Docker-CE-1\"><a href=\"#安装Docker-CE-1\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>切换到对应的目录进行下载和安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install /path/to/package.rpm</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"启动Docker-1\"><a href=\"#启动Docker-1\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"通过运行hello-world-验证Docker-CE-安装正确-1\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确-1\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"通过使用便捷脚本安装\"><a href=\"#通过使用便捷脚本安装\" class=\"headerlink\" title=\"通过使用便捷脚本安装\"></a>通过使用便捷脚本安装</h4><p>Docker 提供了便捷脚本在<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>和<a href=\"https://test.docker.com/\" target=\"_blank\" rel=\"noopener\">test.docker.com</a>,使用脚本安装可能会存在安全风险，建议不要在生产环境中使用</p>"},{"title":"Centos7 安装 pyenv","date":"2018-02-27T03:38:38.000Z","_content":"> 人生苦短，我用Python\n\nPython 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<!-- more -->\n\n### 安装Pyenv\n``` bash\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  #安装所需的包\n```\n\n\n``` bash\n#创建目录、安装\nmkdir ~/.pyenv\ngit clone git://github.com/yyuu/pyenv.git ~/.pyenv  \n#配置环境变量\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc  \necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc  \necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc  \nexec $SHELL -l\n```\n```\n\n``` bash\n#列出所有版本\npyenv install --list\n\n#安装python 3.5.2\npyenv install 3.5.2\n\n#全局使用\npyenv global 3.5.2\n\n#检查版本\npython --version\n```\n\n通过环境管理，一台服务器上可以存在多个环境，方便部署。\n","source":"_posts/cnetos-install-pyenv.md","raw":"---\ntitle: Centos7 安装 pyenv\ndate: 2018-02-27 11:38:38\ncategories: Linux\ntags: Python\n---\n> 人生苦短，我用Python\n\nPython 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<!-- more -->\n\n### 安装Pyenv\n``` bash\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  #安装所需的包\n```\n\n\n``` bash\n#创建目录、安装\nmkdir ~/.pyenv\ngit clone git://github.com/yyuu/pyenv.git ~/.pyenv  \n#配置环境变量\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc  \necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc  \necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc  \nexec $SHELL -l\n```\n```\n\n``` bash\n#列出所有版本\npyenv install --list\n\n#安装python 3.5.2\npyenv install 3.5.2\n\n#全局使用\npyenv global 3.5.2\n\n#检查版本\npython --version\n```\n\n通过环境管理，一台服务器上可以存在多个环境，方便部署。\n","slug":"cnetos-install-pyenv","published":1,"updated":"2019-10-20T04:54:47.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cn0015eos61avlhxdj","content":"<blockquote>\n<p>人生苦短，我用Python</p>\n</blockquote>\n<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<a id=\"more\"></a></p>\n<h3 id=\"安装Pyenv\"><a href=\"#安装Pyenv\" class=\"headerlink\" title=\"安装Pyenv\"></a>安装Pyenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class=\"comment\">#安装所需的包</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建目录、安装</span></span><br><span class=\"line\">mkdir ~/.pyenv</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class=\"line\"><span class=\"comment\">#配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span> -l</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96; bash</span><br><span class=\"line\">#列出所有版本</span><br><span class=\"line\">pyenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\">#安装python 3.5.2</span><br><span class=\"line\">pyenv install 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#全局使用</span><br><span class=\"line\">pyenv global 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#检查版本</span><br><span class=\"line\">python --version</span><br></pre></td></tr></table></figure>\n\n<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>人生苦短，我用Python</p>\n</blockquote>\n<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。","more":"</p>\n<h3 id=\"安装Pyenv\"><a href=\"#安装Pyenv\" class=\"headerlink\" title=\"安装Pyenv\"></a>安装Pyenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class=\"comment\">#安装所需的包</span></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建目录、安装</span></span><br><span class=\"line\">mkdir ~/.pyenv</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class=\"line\"><span class=\"comment\">#配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span> -l</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96; bash</span><br><span class=\"line\">#列出所有版本</span><br><span class=\"line\">pyenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\">#安装python 3.5.2</span><br><span class=\"line\">pyenv install 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#全局使用</span><br><span class=\"line\">pyenv global 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#检查版本</span><br><span class=\"line\">python --version</span><br></pre></td></tr></table></figure>\n\n<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>"},{"title":"Docker 常用命令(待完善)","date":"2017-11-30T07:32:29.000Z","_content":"#### 列出所有并删除已停止容器\n``` bash\n$ docker rm -v $(docker ps -aq -f status=exited)\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\n#### 创建数据卷\n``` bash\n$ docker volume create --name data\n```\n","source":"_posts/common-commonds.md","raw":"---\ntitle: Docker 常用命令(待完善)\ndate: 2017-11-30 15:32:29\ncategories: Linux\ntag: Docker\n---\n#### 列出所有并删除已停止容器\n``` bash\n$ docker rm -v $(docker ps -aq -f status=exited)\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\n#### 创建数据卷\n``` bash\n$ docker volume create --name data\n```\n","slug":"common-commonds","published":1,"updated":"2019-10-20T04:54:47.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9co0018eos63bdt7lyp","content":"<h4 id=\"列出所有并删除已停止容器\"><a href=\"#列出所有并删除已停止容器\" class=\"headerlink\" title=\"列出所有并删除已停止容器\"></a>列出所有并删除已停止容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\">$ docker volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create --name data</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"列出所有并删除已停止容器\"><a href=\"#列出所有并删除已停止容器\" class=\"headerlink\" title=\"列出所有并删除已停止容器\"></a>列出所有并删除已停止容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\">$ docker volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create --name data</span><br></pre></td></tr></table></figure>\n"},{"title":"npm 更换源","date":"2018-05-03T02:17:09.000Z","_content":"由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<!-- more -->\n\n### 换源\n- 临时使用\n``` bash\nnpm --registry https://registry.npm.taobao.org install express --save\n```\n- 持久使用\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n- 验证\n``` bash\nnpm config get registry\n```\n- 官方源\n``` bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n### 通过 nrm 更换源\n最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了`nrm -- NPM registry manager`，它可以帮你快速的帮你在不同的源之间切换，现在包括`npm`、`cnpm`、`taobao`、`nj(nodejitsu)`、`rednpm`，还可以加入你自己的私有源。\n\n- 安装\n``` shell\nnpm install -g nrm\n```\n- 例子\n``` bash\n$ nrm ls\n* npm -----  https://registry.npmjs.org/\n  cnpm ----  http://r.cnpmjs.org/\n  taobao --  https://registry.npm.taobao.org/\n  nj ------  https://registry.nodejitsu.com/\n  rednpm -- http://registry.mirror.cqupt.edu.cn\n  skimdb -- https://skimdb.npmjs.com/registry\n# 使用\n$ nrm use cnpm  #switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/\n```\n\n通过nrm换源，体验一下就提升了很多，工作更有效率了。\n","source":"_posts/config-npm-registry.md","raw":"---\ntitle: npm 更换源\ndate: 2018-05-03 10:17:09\ncategories: Linux\ntags: Node\n---\n由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<!-- more -->\n\n### 换源\n- 临时使用\n``` bash\nnpm --registry https://registry.npm.taobao.org install express --save\n```\n- 持久使用\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n- 验证\n``` bash\nnpm config get registry\n```\n- 官方源\n``` bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n### 通过 nrm 更换源\n最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了`nrm -- NPM registry manager`，它可以帮你快速的帮你在不同的源之间切换，现在包括`npm`、`cnpm`、`taobao`、`nj(nodejitsu)`、`rednpm`，还可以加入你自己的私有源。\n\n- 安装\n``` shell\nnpm install -g nrm\n```\n- 例子\n``` bash\n$ nrm ls\n* npm -----  https://registry.npmjs.org/\n  cnpm ----  http://r.cnpmjs.org/\n  taobao --  https://registry.npm.taobao.org/\n  nj ------  https://registry.nodejitsu.com/\n  rednpm -- http://registry.mirror.cqupt.edu.cn\n  skimdb -- https://skimdb.npmjs.com/registry\n# 使用\n$ nrm use cnpm  #switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/\n```\n\n通过nrm换源，体验一下就提升了很多，工作更有效率了。\n","slug":"config-npm-registry","published":1,"updated":"2019-10-20T04:54:47.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cq001beos6hmv71wgo","content":"<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<a id=\"more\"></a></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><ul>\n<li>临时使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure></li>\n<li>持久使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li>验证<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure></li>\n<li>官方源<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"通过-nrm-更换源\"><a href=\"#通过-nrm-更换源\" class=\"headerlink\" title=\"通过 nrm 更换源\"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>\n<ul>\n<li>安装<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure></li>\n<li>例子<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nrm ls</span><br><span class=\"line\">* npm -----  https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm ----  http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao --  https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ------  https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class=\"line\">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ nrm use cnpm  <span class=\"comment\">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>\n","site":{"data":{}},"excerpt":"<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。","more":"</p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><ul>\n<li>临时使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure></li>\n<li>持久使用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li>验证<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure></li>\n<li>官方源<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"通过-nrm-更换源\"><a href=\"#通过-nrm-更换源\" class=\"headerlink\" title=\"通过 nrm 更换源\"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>\n<ul>\n<li>安装<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure></li>\n<li>例子<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nrm ls</span><br><span class=\"line\">* npm -----  https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm ----  http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao --  https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ------  https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class=\"line\">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ nrm use cnpm  <span class=\"comment\">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>"},{"title":"DevOps实践1:基本概念和环境配置","date":"2018-02-26T07:14:03.000Z","_content":"### 什么是DevOps\n> DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<!-- more -->\n\n![](devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg)\n我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。\n\n### DevOps各个阶段\n1. 第一阶段：流程化\n基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。\n2. 第二阶段：自动化服务（部分）\n基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。\n3. 第三阶段：智能化\n根据实际的业务情况，通过DevOps提升开发、测试、运维效率\n\n![如何一步步实现DevOps](devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg)\n![CI/CD](devops-1-environmental-configuration/191500078c0b39a29f95.jpeg)\n![自动化测试](devops-1-environmental-configuration/1916000764d774a3eee4.jpeg)\n![持续集成](devops-1-environmental-configuration/191700078c8d4238617c.jpeg)\n![微服务最佳实践](devops-1-environmental-configuration/191b000762026287366b.jpeg)\n\n### 工具说明\n目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。\n所需要用到的软件和工具:\n- Jenkins\n- Dokcer\n- IDEA\n- Git\n主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。\n\n### Docker 环境配置\n因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。\n- Windows 环境\n\nDocker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。\n`https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi`\n参考'http://www.widuu.com/docker/installation/windows.html'\n\n\n- Mac 环境\n\nDocker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。\n`https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg`\n可参考：`http://blog.csdn.net/jiang_xinxing/article/details/58025417`\n\n- Linux 环境\n\n```\n#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。\n`https://get.daocloud.io/toolbox/` (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)\n\n### Docker 常用命令\n```\ndocker search XXX  #查询docker镜像\n```\n\n```\ndocker pull XXX #拉取docker 镜像\n```\n\n```\ndocker images #查看已下载的docker镜像\n```\n\n```\ndocker run XXX #运行docker容器\n```\n\n```\ndocker ps #查看正在运行的docker容器\n```\n\n```\ndocker stop XXX #停止正在运行的容器\n```\n\n```\ndocker rm -f XXX #删除容器\n```\n要想更好的使用Docker和各种技术需要不断充电和探索。\n\n部分图片来自 `http://blog.csdn.net/ghostcloud2016/article/details/62426612`\n","source":"_posts/devops-1-environmental-configuration.md","raw":"---\ntitle: DevOps实践1:基本概念和环境配置\ndate: 2018-02-26 15:14:03\ncategories: DevOps\ntag: Docker\n---\n### 什么是DevOps\n> DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<!-- more -->\n\n![](devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg)\n我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。\n\n### DevOps各个阶段\n1. 第一阶段：流程化\n基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。\n2. 第二阶段：自动化服务（部分）\n基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。\n3. 第三阶段：智能化\n根据实际的业务情况，通过DevOps提升开发、测试、运维效率\n\n![如何一步步实现DevOps](devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg)\n![CI/CD](devops-1-environmental-configuration/191500078c0b39a29f95.jpeg)\n![自动化测试](devops-1-environmental-configuration/1916000764d774a3eee4.jpeg)\n![持续集成](devops-1-environmental-configuration/191700078c8d4238617c.jpeg)\n![微服务最佳实践](devops-1-environmental-configuration/191b000762026287366b.jpeg)\n\n### 工具说明\n目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。\n所需要用到的软件和工具:\n- Jenkins\n- Dokcer\n- IDEA\n- Git\n主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。\n\n### Docker 环境配置\n因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。\n- Windows 环境\n\nDocker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。\n`https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi`\n参考'http://www.widuu.com/docker/installation/windows.html'\n\n\n- Mac 环境\n\nDocker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。\n`https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg`\n可参考：`http://blog.csdn.net/jiang_xinxing/article/details/58025417`\n\n- Linux 环境\n\n```\n#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。\n`https://get.daocloud.io/toolbox/` (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)\n\n### Docker 常用命令\n```\ndocker search XXX  #查询docker镜像\n```\n\n```\ndocker pull XXX #拉取docker 镜像\n```\n\n```\ndocker images #查看已下载的docker镜像\n```\n\n```\ndocker run XXX #运行docker容器\n```\n\n```\ndocker ps #查看正在运行的docker容器\n```\n\n```\ndocker stop XXX #停止正在运行的容器\n```\n\n```\ndocker rm -f XXX #删除容器\n```\n要想更好的使用Docker和各种技术需要不断充电和探索。\n\n部分图片来自 `http://blog.csdn.net/ghostcloud2016/article/details/62426612`\n","slug":"devops-1-environmental-configuration","published":1,"updated":"2019-10-20T04:54:47.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cr001deos6cr1q1hzc","content":"<h3 id=\"什么是DevOps\"><a href=\"#什么是DevOps\" class=\"headerlink\" title=\"什么是DevOps\"></a>什么是DevOps</h3><blockquote>\n<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<a id=\"more\"></a></p>\n</blockquote>\n<p><img src=\"devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg\" alt=\"\"><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>\n<h3 id=\"DevOps各个阶段\"><a href=\"#DevOps各个阶段\" class=\"headerlink\" title=\"DevOps各个阶段\"></a>DevOps各个阶段</h3><ol>\n<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>\n<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>\n<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>\n</ol>\n<p><img src=\"devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg\" alt=\"如何一步步实现DevOps\"><br><img src=\"devops-1-environmental-configuration/191500078c0b39a29f95.jpeg\" alt=\"CI/CD\"><br><img src=\"devops-1-environmental-configuration/1916000764d774a3eee4.jpeg\" alt=\"自动化测试\"><br><img src=\"devops-1-environmental-configuration/191700078c8d4238617c.jpeg\" alt=\"持续集成\"><br><img src=\"devops-1-environmental-configuration/191b000762026287366b.jpeg\" alt=\"微服务最佳实践\"></p>\n<h3 id=\"工具说明\"><a href=\"#工具说明\" class=\"headerlink\" title=\"工具说明\"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>\n<ul>\n<li>Jenkins</li>\n<li>Dokcer</li>\n<li>IDEA</li>\n<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>\n</ul>\n<h3 id=\"Docker-环境配置\"><a href=\"#Docker-环境配置\" class=\"headerlink\" title=\"Docker 环境配置\"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>\n<ul>\n<li>Windows 环境</li>\n</ul>\n<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href=\"http://www.widuu.com/docker/installation/windows.html&#39;\" target=\"_blank\" rel=\"noopener\">http://www.widuu.com/docker/installation/windows.html&#39;</a></p>\n<ul>\n<li>Mac 环境</li>\n</ul>\n<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>\n<ul>\n<li>Linux 环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>\n\n<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>\n<h3 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>\n<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>\n<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是DevOps\"><a href=\"#什么是DevOps\" class=\"headerlink\" title=\"什么是DevOps\"></a>什么是DevOps</h3><blockquote>\n<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。","more":"</p>\n</blockquote>\n<p><img src=\"devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg\" alt=\"\"><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>\n<h3 id=\"DevOps各个阶段\"><a href=\"#DevOps各个阶段\" class=\"headerlink\" title=\"DevOps各个阶段\"></a>DevOps各个阶段</h3><ol>\n<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>\n<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>\n<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>\n</ol>\n<p><img src=\"devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg\" alt=\"如何一步步实现DevOps\"><br><img src=\"devops-1-environmental-configuration/191500078c0b39a29f95.jpeg\" alt=\"CI/CD\"><br><img src=\"devops-1-environmental-configuration/1916000764d774a3eee4.jpeg\" alt=\"自动化测试\"><br><img src=\"devops-1-environmental-configuration/191700078c8d4238617c.jpeg\" alt=\"持续集成\"><br><img src=\"devops-1-environmental-configuration/191b000762026287366b.jpeg\" alt=\"微服务最佳实践\"></p>\n<h3 id=\"工具说明\"><a href=\"#工具说明\" class=\"headerlink\" title=\"工具说明\"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>\n<ul>\n<li>Jenkins</li>\n<li>Dokcer</li>\n<li>IDEA</li>\n<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>\n</ul>\n<h3 id=\"Docker-环境配置\"><a href=\"#Docker-环境配置\" class=\"headerlink\" title=\"Docker 环境配置\"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>\n<ul>\n<li>Windows 环境</li>\n</ul>\n<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href=\"http://www.widuu.com/docker/installation/windows.html&#39;\" target=\"_blank\" rel=\"noopener\">http://www.widuu.com/docker/installation/windows.html&#39;</a></p>\n<ul>\n<li>Mac 环境</li>\n</ul>\n<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>\n<ul>\n<li>Linux 环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>\n\n<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>\n<h3 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>\n<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>\n<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>"},{"title":"DevOps实践2:Spring Boot集成Docker环境","date":"2018-02-27T06:56:50.000Z","_content":"> 知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）\n\n我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <!-- more -->\n\n### 创建项目进行集成\n创建一个Spring Boot 项目\n\n![名称](devops-2-springboot-docker-integrated/WX20180227-174110.png)\n\n![web服务](devops-2-springboot-docker-integrated/WX20180227-174208.png)\n\n### 增加项目对Docker的支持\n1. 修改pom.xml配置，增加对应的插件，可以使用Maven进行打包\n``` bash\n#Docker 镜像前缀，放在<properties> 标签中\n <docker.image.prefix>devops</docker.image.prefix>\n```\n2. 添加视图模板支持\n``` xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n3. 增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId>\n``` xml\n<build>\n  <finalName>devops</finalName>  \n  <plugins>\n    <plugin>\n      <groupId>org.springframework.boot</groupId>  \n      <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>  \n    <!-- docker打包 -->  \n    <plugin>\n      <groupId>com.spotify</groupId>  \n      <artifactId>docker-maven-plugin</artifactId>  \n      <version>1.0.0</version>  \n      <configuration>\n        <serverId>docker-hosted</serverId>  \n        <!-- docker仓库地址，用于推送镜像 -->  \n        <registryUrl>${docker.repository}</registryUrl>\n        <!-- 设置为false，避免自动推送镜像 -->\n        <pushImage>false</pushImage>  \n        <!-- Dockerfile路径 -->  \n        <dockerDirectory>src/main/docker</dockerDirectory>  \n        <!-- 构建的镜像名称 -->  \n        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>  \n        <imageTags>\n          <imageTag>latest</imageTag>\n        </imageTags>  \n        <resources>\n          <resource>\n            <targetPath>/</targetPath>  \n            <directory>${project.build.directory}</directory>  \n            <include>${project.build.finalName}.jar</include>\n          </resource>\n        </resources>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n4. 修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）\n``` xml\n<pluginGroups>\n  <pluginGroup>com.spotify</pluginGroup>\n</pluginGroups>\n\n#本地私服的配置\n</profiles>\n <profile>    \n   <id>nexus</id>    \n   <properties>\n   <docker.repository>http://192.168.100.77:8081/repository/docker</docker.repository>\n   </properties>\n </profile>\n</profiles>\n#激活私服配置\n<activeProfiles>    \n  <activeProfile>nexus</activeProfile>    \n</activeProfiles>\n```\n\n上面基本的pom配置就完成了，之后开始配置Docker相关的脚本\n\n### Docker脚本配置\n在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径\n创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本\n``` shell\nFROM java:8  #基本镜像\nVOLUME /tmp  #挂载文件位置，/tmp 为临时目录\nADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口\n```\n\n### 打包、运行镜像\n创建对应的测试文件，打包\n``` shell\nmvn clean package docker:build  # 一气呵成O(∩_∩)O~~\n```\n在运行docker命令前，先确认电脑上的docker环境是否配置成\n``` shell\ndocker version\n# 会有如下显示\nClient:\n Version:\t17.12.0-ce\n API version:\t1.35\n Go version:\tgo1.9.2\n Git commit:\tc97c6d6\n Built:\tWed Dec 27 20:03:51 2017\n OS/Arch:\tdarwin/amd64\n\nServer:\n Engine:\n  Version:\t17.12.0-ce\n  API version:\t1.35 (minimum version 1.12)\n  Go version:\tgo1.9.2\n  Git commit:\tc97c6d6\n  Built:\tWed Dec 27 20:12:29 2017\n  OS/Arch:\tlinux/amd64\n  Experimental:\ttrue\n```\n上面说明Docker是正常启动的\n\n然后查看镜像\n``` shell\ndocker images\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203234.png)\n上图说明我们的镜像打包成功\n然后运行一下，检查镜像是否能够正常启动\n``` shell\n#启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像\ndocker run -d  -p 8080:8080 --name devops devops/devops:latest\n#执行docker ps 查看镜像是否运行\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203815.png)\n如果，说明服务是正常启动了，之后请求\n[http://localhost:8080/index?name=World](http://localhost:8080/index?name=World)\n![web服务](devops-2-springboot-docker-integrated/WX20180227-204116.png)\n能够请求成功，说明镜像部署成功\n\n### 停止释放镜像\n``` shell\n# 养成好习惯，停止释放镜像\ndocker stop 2026e45bc2ce\ndocker rm 2026e45bc2ce\n```\n\n代码可在[https://github.com/junhuali/devops-springboot](https://github.com/junhuali/devops-springboot) 下载\n","source":"_posts/devops-2-springboot-docker-integrated.md","raw":"---\ntitle: DevOps实践2:Spring Boot集成Docker环境\ndate: 2018-02-27 14:56:50\ncategories: DevOps\ntag:\n   - Docker\n   - SpringBoot\n   - Maven\n---\n> 知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）\n\n我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <!-- more -->\n\n### 创建项目进行集成\n创建一个Spring Boot 项目\n\n![名称](devops-2-springboot-docker-integrated/WX20180227-174110.png)\n\n![web服务](devops-2-springboot-docker-integrated/WX20180227-174208.png)\n\n### 增加项目对Docker的支持\n1. 修改pom.xml配置，增加对应的插件，可以使用Maven进行打包\n``` bash\n#Docker 镜像前缀，放在<properties> 标签中\n <docker.image.prefix>devops</docker.image.prefix>\n```\n2. 添加视图模板支持\n``` xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n3. 增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId>\n``` xml\n<build>\n  <finalName>devops</finalName>  \n  <plugins>\n    <plugin>\n      <groupId>org.springframework.boot</groupId>  \n      <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>  \n    <!-- docker打包 -->  \n    <plugin>\n      <groupId>com.spotify</groupId>  \n      <artifactId>docker-maven-plugin</artifactId>  \n      <version>1.0.0</version>  \n      <configuration>\n        <serverId>docker-hosted</serverId>  \n        <!-- docker仓库地址，用于推送镜像 -->  \n        <registryUrl>${docker.repository}</registryUrl>\n        <!-- 设置为false，避免自动推送镜像 -->\n        <pushImage>false</pushImage>  \n        <!-- Dockerfile路径 -->  \n        <dockerDirectory>src/main/docker</dockerDirectory>  \n        <!-- 构建的镜像名称 -->  \n        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>  \n        <imageTags>\n          <imageTag>latest</imageTag>\n        </imageTags>  \n        <resources>\n          <resource>\n            <targetPath>/</targetPath>  \n            <directory>${project.build.directory}</directory>  \n            <include>${project.build.finalName}.jar</include>\n          </resource>\n        </resources>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n4. 修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）\n``` xml\n<pluginGroups>\n  <pluginGroup>com.spotify</pluginGroup>\n</pluginGroups>\n\n#本地私服的配置\n</profiles>\n <profile>    \n   <id>nexus</id>    \n   <properties>\n   <docker.repository>http://192.168.100.77:8081/repository/docker</docker.repository>\n   </properties>\n </profile>\n</profiles>\n#激活私服配置\n<activeProfiles>    \n  <activeProfile>nexus</activeProfile>    \n</activeProfiles>\n```\n\n上面基本的pom配置就完成了，之后开始配置Docker相关的脚本\n\n### Docker脚本配置\n在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径\n创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本\n``` shell\nFROM java:8  #基本镜像\nVOLUME /tmp  #挂载文件位置，/tmp 为临时目录\nADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口\n```\n\n### 打包、运行镜像\n创建对应的测试文件，打包\n``` shell\nmvn clean package docker:build  # 一气呵成O(∩_∩)O~~\n```\n在运行docker命令前，先确认电脑上的docker环境是否配置成\n``` shell\ndocker version\n# 会有如下显示\nClient:\n Version:\t17.12.0-ce\n API version:\t1.35\n Go version:\tgo1.9.2\n Git commit:\tc97c6d6\n Built:\tWed Dec 27 20:03:51 2017\n OS/Arch:\tdarwin/amd64\n\nServer:\n Engine:\n  Version:\t17.12.0-ce\n  API version:\t1.35 (minimum version 1.12)\n  Go version:\tgo1.9.2\n  Git commit:\tc97c6d6\n  Built:\tWed Dec 27 20:12:29 2017\n  OS/Arch:\tlinux/amd64\n  Experimental:\ttrue\n```\n上面说明Docker是正常启动的\n\n然后查看镜像\n``` shell\ndocker images\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203234.png)\n上图说明我们的镜像打包成功\n然后运行一下，检查镜像是否能够正常启动\n``` shell\n#启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像\ndocker run -d  -p 8080:8080 --name devops devops/devops:latest\n#执行docker ps 查看镜像是否运行\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203815.png)\n如果，说明服务是正常启动了，之后请求\n[http://localhost:8080/index?name=World](http://localhost:8080/index?name=World)\n![web服务](devops-2-springboot-docker-integrated/WX20180227-204116.png)\n能够请求成功，说明镜像部署成功\n\n### 停止释放镜像\n``` shell\n# 养成好习惯，停止释放镜像\ndocker stop 2026e45bc2ce\ndocker rm 2026e45bc2ce\n```\n\n代码可在[https://github.com/junhuali/devops-springboot](https://github.com/junhuali/devops-springboot) 下载\n","slug":"devops-2-springboot-docker-integrated","published":1,"updated":"2019-10-20T04:54:47.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cs001heos6el5j5b5p","content":"<blockquote>\n<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>\n</blockquote>\n<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <a id=\"more\"></a></p>\n<h3 id=\"创建项目进行集成\"><a href=\"#创建项目进行集成\" class=\"headerlink\" title=\"创建项目进行集成\"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-174110.png\" alt=\"名称\"></p>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-174208.png\" alt=\"web服务\"></p>\n<h3 id=\"增加项目对Docker的支持\"><a href=\"#增加项目对Docker的支持\" class=\"headerlink\" title=\"增加项目对Docker的支持\"></a>增加项目对Docker的支持</h3><ol>\n<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class=\"line\"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加视图模板支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>devops<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- docker打包 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serverId</span>&gt;</span>docker-hosted<span class=\"tag\">&lt;/<span class=\"name\">serverId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class=\"tag\">&lt;/<span class=\"name\">registryUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pushImage</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">pushImage</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroup</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">pluginGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#本地私服的配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class=\"tag\">&lt;/<span class=\"name\">docker.repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">#激活私服配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>\n<h3 id=\"Docker脚本配置\"><a href=\"#Docker脚本配置\" class=\"headerlink\" title=\"Docker脚本配置\"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8  #基本镜像</span><br><span class=\"line\">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class=\"line\">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class=\"line\">ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包、运行镜像\"><a href=\"#打包、运行镜像\" class=\"headerlink\" title=\"打包、运行镜像\"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure>\n<p>在运行docker命令前，先确认电脑上的docker环境是否配置成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 会有如下显示</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:\t17.12.0-ce</span><br><span class=\"line\"> API version:\t1.35</span><br><span class=\"line\"> Go version:\tgo1.9.2</span><br><span class=\"line\"> Git commit:\tc97c6d6</span><br><span class=\"line\"> Built:\tWed Dec 27 20:03:51 2017</span><br><span class=\"line\"> OS/Arch:\tdarwin/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:\t17.12.0-ce</span><br><span class=\"line\">  API version:\t1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:\tgo1.9.2</span><br><span class=\"line\">  Git commit:\tc97c6d6</span><br><span class=\"line\">  Built:\tWed Dec 27 20:12:29 2017</span><br><span class=\"line\">  OS/Arch:\tlinux/amd64</span><br><span class=\"line\">  Experimental:\ttrue</span><br></pre></td></tr></table></figure>\n<p>上面说明Docker是正常启动的</p>\n<p>然后查看镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-203234.png\" alt=\"web服务\"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class=\"line\">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-203815.png\" alt=\"web服务\"><br>如果，说明服务是正常启动了，之后请求<br><a href=\"http://localhost:8080/index?name=World\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index?name=World</a><br><img src=\"devops-2-springboot-docker-integrated/WX20180227-204116.png\" alt=\"web服务\"><br>能够请求成功，说明镜像部署成功</p>\n<h3 id=\"停止释放镜像\"><a href=\"#停止释放镜像\" class=\"headerlink\" title=\"停止释放镜像\"></a>停止释放镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 养成好习惯，停止释放镜像</span></span><br><span class=\"line\">docker stop 2026e45bc2ce</span><br><span class=\"line\">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>\n\n<p>代码可在<a href=\"https://github.com/junhuali/devops-springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/junhuali/devops-springboot</a> 下载</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>\n</blockquote>\n<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。","more":"</p>\n<h3 id=\"创建项目进行集成\"><a href=\"#创建项目进行集成\" class=\"headerlink\" title=\"创建项目进行集成\"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-174110.png\" alt=\"名称\"></p>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-174208.png\" alt=\"web服务\"></p>\n<h3 id=\"增加项目对Docker的支持\"><a href=\"#增加项目对Docker的支持\" class=\"headerlink\" title=\"增加项目对Docker的支持\"></a>增加项目对Docker的支持</h3><ol>\n<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class=\"line\"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>添加视图模板支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>devops<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- docker打包 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serverId</span>&gt;</span>docker-hosted<span class=\"tag\">&lt;/<span class=\"name\">serverId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class=\"tag\">&lt;/<span class=\"name\">registryUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pushImage</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">pushImage</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroup</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">pluginGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#本地私服的配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class=\"tag\">&lt;/<span class=\"name\">docker.repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">#激活私服配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>\n<h3 id=\"Docker脚本配置\"><a href=\"#Docker脚本配置\" class=\"headerlink\" title=\"Docker脚本配置\"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8  #基本镜像</span><br><span class=\"line\">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class=\"line\">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class=\"line\">ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包、运行镜像\"><a href=\"#打包、运行镜像\" class=\"headerlink\" title=\"打包、运行镜像\"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure>\n<p>在运行docker命令前，先确认电脑上的docker环境是否配置成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 会有如下显示</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:\t17.12.0-ce</span><br><span class=\"line\"> API version:\t1.35</span><br><span class=\"line\"> Go version:\tgo1.9.2</span><br><span class=\"line\"> Git commit:\tc97c6d6</span><br><span class=\"line\"> Built:\tWed Dec 27 20:03:51 2017</span><br><span class=\"line\"> OS/Arch:\tdarwin/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:\t17.12.0-ce</span><br><span class=\"line\">  API version:\t1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:\tgo1.9.2</span><br><span class=\"line\">  Git commit:\tc97c6d6</span><br><span class=\"line\">  Built:\tWed Dec 27 20:12:29 2017</span><br><span class=\"line\">  OS/Arch:\tlinux/amd64</span><br><span class=\"line\">  Experimental:\ttrue</span><br></pre></td></tr></table></figure>\n<p>上面说明Docker是正常启动的</p>\n<p>然后查看镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-203234.png\" alt=\"web服务\"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class=\"line\">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"devops-2-springboot-docker-integrated/WX20180227-203815.png\" alt=\"web服务\"><br>如果，说明服务是正常启动了，之后请求<br><a href=\"http://localhost:8080/index?name=World\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index?name=World</a><br><img src=\"devops-2-springboot-docker-integrated/WX20180227-204116.png\" alt=\"web服务\"><br>能够请求成功，说明镜像部署成功</p>\n<h3 id=\"停止释放镜像\"><a href=\"#停止释放镜像\" class=\"headerlink\" title=\"停止释放镜像\"></a>停止释放镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 养成好习惯，停止释放镜像</span></span><br><span class=\"line\">docker stop 2026e45bc2ce</span><br><span class=\"line\">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>\n\n<p>代码可在<a href=\"https://github.com/junhuali/devops-springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/junhuali/devops-springboot</a> 下载</p>"},{"title":"Docker 创建MySQL","date":"2018-01-17T05:24:31.000Z","_content":"### 不要在生产环境中使用，在开发和测试阶段使用比较方便<!-- more -->\n\n### 拉取镜像\n``` shell\ndocker pull mysql\n```\n### 创建volume （比较方便，用完方便删除）\n``` shell\ndocker volume create --name mysql-data\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/localtime:/etc/localtime \\\n  -p 0.0.0.0:3306:3306 --name mysql \\\n  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\\n  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n`restart=\"always\"` docker 重启后自动启动\n` /etc/localtime:/etc/localtime` 解决mysql 时区问题\n`MYSQL_ROOT_PASSWORD` 设置你自己的密码，默认用户名root\n`--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci` 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定\n","source":"_posts/docker-create-mysql.md","raw":"---\ntitle: Docker 创建MySQL\ndate: 2018-01-17 13:24:31\ncategories: Linux\ntags: Docker\n---\n### 不要在生产环境中使用，在开发和测试阶段使用比较方便<!-- more -->\n\n### 拉取镜像\n``` shell\ndocker pull mysql\n```\n### 创建volume （比较方便，用完方便删除）\n``` shell\ndocker volume create --name mysql-data\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/localtime:/etc/localtime \\\n  -p 0.0.0.0:3306:3306 --name mysql \\\n  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\\n  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n`restart=\"always\"` docker 重启后自动启动\n` /etc/localtime:/etc/localtime` 解决mysql 时区问题\n`MYSQL_ROOT_PASSWORD` 设置你自己的密码，默认用户名root\n`--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci` 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定\n","slug":"docker-create-mysql","published":1,"updated":"2019-10-20T04:54:47.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9ct001keos64qilcb7w","content":"<h3 id=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"><a href=\"#不要在生产环境中使用，在开发和测试阶段使用比较方便\" class=\"headerlink\" title=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便<a id=\"more\"></a></h3><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建volume-（比较方便，用完方便删除）\"><a href=\"#创建volume-（比较方便，用完方便删除）\" class=\"headerlink\" title=\"创建volume （比较方便，用完方便删除）\"></a>创建volume （比较方便，用完方便删除）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">  -p 0.0.0.0:3306:3306 --name mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\</span><br><span class=\"line\">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"><a href=\"#不要在生产环境中使用，在开发和测试阶段使用比较方便\" class=\"headerlink\" title=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便","more":"</h3><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建volume-（比较方便，用完方便删除）\"><a href=\"#创建volume-（比较方便，用完方便删除）\" class=\"headerlink\" title=\"创建volume （比较方便，用完方便删除）\"></a>创建volume （比较方便，用完方便删除）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">  -p 0.0.0.0:3306:3306 --name mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\</span><br><span class=\"line\">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>"},{"title":"Docker安装MongoDB(Mongo3.x)","date":"2017-09-23T08:04:51.000Z","_content":"\n### 使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<!-- more -->\n\n#### 创建Volume 命名为mongo-data\n``` Shell\ndocker volume create --name mongo-data\n```\n\n#### 拉取镜像\n```\ndocker pull mongo\n```\n\n#### 运行\n```\ndocker run --restart=\"always\" \\\n          -d \\\n          --name mongo\\\n          -p 17017:27017\\\n          -v mongo-data:/data/db\\\n          -v /etc/localtime:/etc/localtime\\\n          mongo:latest --storageEngine wiredTiger -auth\n```\n\n` --storageEngine` MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘\n`-auth` 设置Mongo的权限\n\n#### 进入mongo镜像\n```\ndocker exec -it mongo mongo admin\n```\n\n### 创建用户 user123 密码:123456\n```\ndb.createUser({user: \"user123\",pwd: \"123456\",roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]})\n```\n\n至此，MongDB 安装完成\n","source":"_posts/docker-install-MongoDB.md","raw":"---\ntitle: Docker安装MongoDB(Mongo3.x)\ndate: 2017-09-23 16:04:51\ncategories: Linux\ntag: Docker\n---\n\n### 使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<!-- more -->\n\n#### 创建Volume 命名为mongo-data\n``` Shell\ndocker volume create --name mongo-data\n```\n\n#### 拉取镜像\n```\ndocker pull mongo\n```\n\n#### 运行\n```\ndocker run --restart=\"always\" \\\n          -d \\\n          --name mongo\\\n          -p 17017:27017\\\n          -v mongo-data:/data/db\\\n          -v /etc/localtime:/etc/localtime\\\n          mongo:latest --storageEngine wiredTiger -auth\n```\n\n` --storageEngine` MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘\n`-auth` 设置Mongo的权限\n\n#### 进入mongo镜像\n```\ndocker exec -it mongo mongo admin\n```\n\n### 创建用户 user123 密码:123456\n```\ndb.createUser({user: \"user123\",pwd: \"123456\",roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]})\n```\n\n至此，MongDB 安装完成\n","slug":"docker-install-MongoDB","published":1,"updated":"2019-10-20T04:54:47.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cu001oeos6ccbt4ua8","content":"<h3 id=\"使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\"><a href=\"#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\" class=\"headerlink\" title=\"使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<a id=\"more\"></a></h3><h4 id=\"创建Volume-命名为mongo-data\"><a href=\"#创建Volume-命名为mongo-data\" class=\"headerlink\" title=\"创建Volume 命名为mongo-data\"></a>创建Volume 命名为mongo-data</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart&#x3D;&quot;always&quot; \\</span><br><span class=\"line\">          -d \\</span><br><span class=\"line\">          --name mongo\\</span><br><span class=\"line\">          -p 17017:27017\\</span><br><span class=\"line\">          -v mongo-data:&#x2F;data&#x2F;db\\</span><br><span class=\"line\">          -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime\\</span><br><span class=\"line\">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>\n\n<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>\n<h4 id=\"进入mongo镜像\"><a href=\"#进入mongo镜像\" class=\"headerlink\" title=\"进入mongo镜像\"></a>进入mongo镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户-user123-密码-123456\"><a href=\"#创建用户-user123-密码-123456\" class=\"headerlink\" title=\"创建用户 user123 密码:123456\"></a>创建用户 user123 密码:123456</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>至此，MongDB 安装完成</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\"><a href=\"#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\" class=\"headerlink\" title=\"使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)","more":"</h3><h4 id=\"创建Volume-命名为mongo-data\"><a href=\"#创建Volume-命名为mongo-data\" class=\"headerlink\" title=\"创建Volume 命名为mongo-data\"></a>创建Volume 命名为mongo-data</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart&#x3D;&quot;always&quot; \\</span><br><span class=\"line\">          -d \\</span><br><span class=\"line\">          --name mongo\\</span><br><span class=\"line\">          -p 17017:27017\\</span><br><span class=\"line\">          -v mongo-data:&#x2F;data&#x2F;db\\</span><br><span class=\"line\">          -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime\\</span><br><span class=\"line\">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>\n\n<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>\n<h4 id=\"进入mongo镜像\"><a href=\"#进入mongo镜像\" class=\"headerlink\" title=\"进入mongo镜像\"></a>进入mongo镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户-user123-密码-123456\"><a href=\"#创建用户-user123-密码-123456\" class=\"headerlink\" title=\"创建用户 user123 密码:123456\"></a>创建用户 user123 密码:123456</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>至此，MongDB 安装完成</p>"},{"title":"Docker 搭建Nexus 私服","date":"2017-09-30T05:46:02.000Z","_content":"### 创建数据卷\n``` shell\ndocker volume create --name nexus-data\n```\n### 拉取Nexus 镜像\n``` shell\ndocker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n### 访问网址打开(账号/密码   admin/admin123)\nhttp://localhost:8081\n\n参考https://hub.docker.com/r/sonatype/nexus3/\n","source":"_posts/docker-install-nexus.md","raw":"---\ntitle: Docker 搭建Nexus 私服\ndate: 2017-09-30 13:46:02\ncategories: Linux\ntag: Docker\n---\n### 创建数据卷\n``` shell\ndocker volume create --name nexus-data\n```\n### 拉取Nexus 镜像\n``` shell\ndocker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n### 访问网址打开(账号/密码   admin/admin123)\nhttp://localhost:8081\n\n参考https://hub.docker.com/r/sonatype/nexus3/\n","slug":"docker-install-nexus","published":1,"updated":"2019-10-20T04:54:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cu001reos64ck288gd","content":"<h3 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取Nexus-镜像\"><a href=\"#拉取Nexus-镜像\" class=\"headerlink\" title=\"拉取Nexus 镜像\"></a>拉取Nexus 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问网址打开-账号-密码-admin-admin123\"><a href=\"#访问网址打开-账号-密码-admin-admin123\" class=\"headerlink\" title=\"访问网址打开(账号/密码   admin/admin123)\"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></p>\n<p>参考<a href=\"https://hub.docker.com/r/sonatype/nexus3/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus3/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取Nexus-镜像\"><a href=\"#拉取Nexus-镜像\" class=\"headerlink\" title=\"拉取Nexus 镜像\"></a>拉取Nexus 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问网址打开-账号-密码-admin-admin123\"><a href=\"#访问网址打开-账号-密码-admin-admin123\" class=\"headerlink\" title=\"访问网址打开(账号/密码   admin/admin123)\"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></p>\n<p>参考<a href=\"https://hub.docker.com/r/sonatype/nexus3/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus3/</a></p>\n"},{"title":"Docker 安装 RabbitMQ 集群","date":"2017-12-04T02:31:55.000Z","_content":"Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<!-- more -->\n### 安装docker-compose\n- 检查是否安装过docker-compose\n``` bash\n$ docker-compose -v #出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功\n```\n- 如果没有安装docker-compose，进行安装\n``` bash\n#服务器安装\n$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n- 在windows 和 Mac 下载对应的安装包进行安装\n[Windows下载地址](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)\n[Mac下载地址](https://download.docker.com/mac/stable/Docker.dmg)\n\n### 下载对应的脚本\n``` bash\n$ git clone https://github.com/bijukunjummen/docker-rabbitmq-cluster.git\n```\n### 启动\n``` bash\n$ cd docker-rabbitmq-cluster/cluster/\n$ docker-compose up -d #启动\n```\n### 备注\n- 登录的账号密码（可以自行在脚本里面修改）\nuser: myuser\npassword: mypass\n然后访问`localhost:15672`进行访问\n\n以上使用bijukunjummen 的脚本，可参见[github](https://github.com/bijukunjummen/docker-rabbitmq-cluster)\n以及[daocloud](http://get.daocloud.io/#install-docker) docker-compose脚本\n","source":"_posts/docker-install-rabbitmq-cluster.md","raw":"---\ntitle: Docker 安装 RabbitMQ 集群\ndate: 2017-12-04 10:31:55\ncategories: Linux\ntag: Docker\n---\nDocker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<!-- more -->\n### 安装docker-compose\n- 检查是否安装过docker-compose\n``` bash\n$ docker-compose -v #出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功\n```\n- 如果没有安装docker-compose，进行安装\n``` bash\n#服务器安装\n$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n- 在windows 和 Mac 下载对应的安装包进行安装\n[Windows下载地址](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)\n[Mac下载地址](https://download.docker.com/mac/stable/Docker.dmg)\n\n### 下载对应的脚本\n``` bash\n$ git clone https://github.com/bijukunjummen/docker-rabbitmq-cluster.git\n```\n### 启动\n``` bash\n$ cd docker-rabbitmq-cluster/cluster/\n$ docker-compose up -d #启动\n```\n### 备注\n- 登录的账号密码（可以自行在脚本里面修改）\nuser: myuser\npassword: mypass\n然后访问`localhost:15672`进行访问\n\n以上使用bijukunjummen 的脚本，可参见[github](https://github.com/bijukunjummen/docker-rabbitmq-cluster)\n以及[daocloud](http://get.daocloud.io/#install-docker) docker-compose脚本\n","slug":"docker-install-rabbitmq-cluster","published":1,"updated":"2019-10-20T04:54:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cv001ueos6f2dnezus","content":"<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<a id=\"more\"></a></p>\n<h3 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h3><ul>\n<li>检查是否安装过docker-compose<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose -v <span class=\"comment\">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure></li>\n<li>如果没有安装docker-compose，进行安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#服务器安装</span></span><br><span class=\"line\">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li>\n<li>在windows 和 Mac 下载对应的安装包进行安装<br><a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a><br><a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">Mac下载地址</a></li>\n</ul>\n<h3 id=\"下载对应的脚本\"><a href=\"#下载对应的脚本\" class=\"headerlink\" title=\"下载对应的脚本\"></a>下载对应的脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class=\"line\">$ docker-compose up -d <span class=\"comment\">#启动</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>\n</ul>\n<p>以上使用bijukunjummen 的脚本，可参见<a href=\"https://github.com/bijukunjummen/docker-rabbitmq-cluster\" target=\"_blank\" rel=\"noopener\">github</a><br>以及<a href=\"http://get.daocloud.io/#install-docker\" target=\"_blank\" rel=\"noopener\">daocloud</a> docker-compose脚本</p>\n","site":{"data":{}},"excerpt":"<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。","more":"</p>\n<h3 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h3><ul>\n<li>检查是否安装过docker-compose<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose -v <span class=\"comment\">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure></li>\n<li>如果没有安装docker-compose，进行安装<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#服务器安装</span></span><br><span class=\"line\">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li>\n<li>在windows 和 Mac 下载对应的安装包进行安装<br><a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a><br><a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">Mac下载地址</a></li>\n</ul>\n<h3 id=\"下载对应的脚本\"><a href=\"#下载对应的脚本\" class=\"headerlink\" title=\"下载对应的脚本\"></a>下载对应的脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class=\"line\">$ docker-compose up -d <span class=\"comment\">#启动</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>\n</ul>\n<p>以上使用bijukunjummen 的脚本，可参见<a href=\"https://github.com/bijukunjummen/docker-rabbitmq-cluster\" target=\"_blank\" rel=\"noopener\">github</a><br>以及<a href=\"http://get.daocloud.io/#install-docker\" target=\"_blank\" rel=\"noopener\">daocloud</a> docker-compose脚本</p>"},{"title":"Feign表单提交","date":"2019-06-12T08:29:26.000Z","_content":"\nFeign在正常调用的时候，一般都是基于`application/json`的方式进行传输数据的，但是有时候我们内部调用的服务是基于`表单提交`的，默认使用的`JSON`提交。所以就需要对请求进行改造。<!-- more -->\n\n#### 默认JSON 提交\n``` java\n@FeignClient(name = \"xxx\", url = \"xxx\")\npublic interface FeignClient {\n\n    /**\n     * xxx\n     *\n     * @param xxx\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value =\"xxx\")\n    Object getXxxInfo(@RequestBody xxxReq xxxReq) throws Exception;\n}\n\n\n```\n上面的就是默认的方式\n#### 表单提交\n使用表单的情况下，需要引入两个jar，使用maven 进行添加\n``` xml\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form-spring</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n```\n定义表单解码器\n``` java\n\n\nimport feign.Logger;\nimport feign.codec.Encoder;\nimport feign.form.spring.SpringFormEncoder;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.cloud.openfeign.support.SpringEncoder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author\n * @date 2019-06-11 15:48\n */\n@Component\npublic class FormSupportConfig {\n    @Autowired\n    private ObjectFactory<HttpMessageConverters> messageConverters;\n\n    /**\n     * new一个form编码器，实现支持form表单提交\n     *\n     * @return\n     */\n    @Bean\n    public Encoder feignFormEncoder() {\n        return new SpringFormEncoder(new SpringEncoder(messageConverters));\n    }\n\n\n    /**\n     * 开启Feign的日志\n     *\n     * @return\n     */\n    @Bean\n    public Logger.Level logger() {\n        return Logger.Level.FULL;\n    }\n}\n```\n使用\n``` java\nimport feign.Response;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Map;\n\n/**\n * @author xxx\n * @date 2019-05-25 19:35\n */\n\n@FeignClient(name = \"ucd\", url = \"${xxx}\", configuration = FormSupportConfig.class)\npublic interface PayClient {\n\n\n    /**\n     * xxx\n     *\n     * @param queryParam\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \"/xxx/xxx\", consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE}, produces = {MediaType.ALL_VALUE})\n    @ResponseBody\n    Response payRequest(Map<String, ?> queryParam) throws Exception;\n\n\n}\n```\n上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过`response.body().asReader() `方法取出body中的内容再进行处理。\n","source":"_posts/feign-post-form-data.md","raw":"---\ntitle: Feign表单提交\ndate: 2019-06-12 16:29:26\ncategories: Java\ntags: Feign\n---\n\nFeign在正常调用的时候，一般都是基于`application/json`的方式进行传输数据的，但是有时候我们内部调用的服务是基于`表单提交`的，默认使用的`JSON`提交。所以就需要对请求进行改造。<!-- more -->\n\n#### 默认JSON 提交\n``` java\n@FeignClient(name = \"xxx\", url = \"xxx\")\npublic interface FeignClient {\n\n    /**\n     * xxx\n     *\n     * @param xxx\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value =\"xxx\")\n    Object getXxxInfo(@RequestBody xxxReq xxxReq) throws Exception;\n}\n\n\n```\n上面的就是默认的方式\n#### 表单提交\n使用表单的情况下，需要引入两个jar，使用maven 进行添加\n``` xml\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form-spring</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n```\n定义表单解码器\n``` java\n\n\nimport feign.Logger;\nimport feign.codec.Encoder;\nimport feign.form.spring.SpringFormEncoder;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.cloud.openfeign.support.SpringEncoder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author\n * @date 2019-06-11 15:48\n */\n@Component\npublic class FormSupportConfig {\n    @Autowired\n    private ObjectFactory<HttpMessageConverters> messageConverters;\n\n    /**\n     * new一个form编码器，实现支持form表单提交\n     *\n     * @return\n     */\n    @Bean\n    public Encoder feignFormEncoder() {\n        return new SpringFormEncoder(new SpringEncoder(messageConverters));\n    }\n\n\n    /**\n     * 开启Feign的日志\n     *\n     * @return\n     */\n    @Bean\n    public Logger.Level logger() {\n        return Logger.Level.FULL;\n    }\n}\n```\n使用\n``` java\nimport feign.Response;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Map;\n\n/**\n * @author xxx\n * @date 2019-05-25 19:35\n */\n\n@FeignClient(name = \"ucd\", url = \"${xxx}\", configuration = FormSupportConfig.class)\npublic interface PayClient {\n\n\n    /**\n     * xxx\n     *\n     * @param queryParam\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \"/xxx/xxx\", consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE}, produces = {MediaType.ALL_VALUE})\n    @ResponseBody\n    Response payRequest(Map<String, ?> queryParam) throws Exception;\n\n\n}\n```\n上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过`response.body().asReader() `方法取出body中的内容再进行处理。\n","slug":"feign-post-form-data","published":1,"updated":"2019-10-20T04:54:47.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cw001yeos65q0ablq9","content":"<p>Feign在正常调用的时候，一般都是基于<code>application/json</code>的方式进行传输数据的，但是有时候我们内部调用的服务是基于<code>表单提交</code>的，默认使用的<code>JSON</code>提交。所以就需要对请求进行改造。<a id=\"more\"></a></p>\n<h4 id=\"默认JSON-提交\"><a href=\"#默认JSON-提交\" class=\"headerlink\" title=\"默认JSON 提交\"></a>默认JSON 提交</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value =<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getXxxInfo</span><span class=\"params\">(@RequestBody xxxReq xxxReq)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的就是默认的方式</p>\n<h4 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h4><p>使用表单的情况下，需要引入两个jar，使用maven 进行添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>定义表单解码器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.Encoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.form.spring.SpringFormEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-06-11 15:48</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormSupportConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * new一个form编码器，实现支持form表单提交</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Encoder <span class=\"title\">feignFormEncoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringFormEncoder(<span class=\"keyword\">new</span> SpringEncoder(messageConverters));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启Feign的日志</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger.<span class=\"function\">Level <span class=\"title\">logger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.FULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.Response;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-05-25 19:35</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"ucd\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>, configuration = FormSupportConfig.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PayClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> queryParam</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/xxx/xxx\"</span>, consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;, produces = &#123;MediaType.ALL_VALUE&#125;)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\">Response <span class=\"title\">payRequest</span><span class=\"params\">(Map&lt;String, ?&gt; queryParam)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过<code>response.body().asReader()</code>方法取出body中的内容再进行处理。</p>\n","site":{"data":{}},"excerpt":"<p>Feign在正常调用的时候，一般都是基于<code>application/json</code>的方式进行传输数据的，但是有时候我们内部调用的服务是基于<code>表单提交</code>的，默认使用的<code>JSON</code>提交。所以就需要对请求进行改造。","more":"</p>\n<h4 id=\"默认JSON-提交\"><a href=\"#默认JSON-提交\" class=\"headerlink\" title=\"默认JSON 提交\"></a>默认JSON 提交</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value =<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getXxxInfo</span><span class=\"params\">(@RequestBody xxxReq xxxReq)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的就是默认的方式</p>\n<h4 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h4><p>使用表单的情况下，需要引入两个jar，使用maven 进行添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>定义表单解码器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.Encoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.form.spring.SpringFormEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-06-11 15:48</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormSupportConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * new一个form编码器，实现支持form表单提交</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Encoder <span class=\"title\">feignFormEncoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringFormEncoder(<span class=\"keyword\">new</span> SpringEncoder(messageConverters));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启Feign的日志</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger.<span class=\"function\">Level <span class=\"title\">logger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.FULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.Response;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-05-25 19:35</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"ucd\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>, configuration = FormSupportConfig.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PayClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> queryParam</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/xxx/xxx\"</span>, consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;, produces = &#123;MediaType.ALL_VALUE&#125;)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\">Response <span class=\"title\">payRequest</span><span class=\"params\">(Map&lt;String, ?&gt; queryParam)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过<code>response.body().asReader()</code>方法取出body中的内容再进行处理。</p>"},{"title":"第一个flutter","date":"2019-07-11T12:16:53.000Z","_content":"[Flutter](https://flutter.dev/) is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.<!--more-->\n>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具\n\n最近看到很多的技术网站都在发Flutter相关的技术文章，所以自己也花时间了解了一下，写了个简单的HelloWorld体验了一下，感觉很不错。简单的记录一下。\n\n###安装\n安装环境基于MAC，Windows上也没有太大的区别。\n####安装Xcode、Android Stuido\n#####Xcode 安装\nXocde 的安装比较简单，直接去App Store搜索就可以了，![示例](first-flutter-app/WX20190711-203332@2x.png)之后需要打开，会自动的进行相应的配置。\n#####Android Studio 安装\n[Android Studio官网下载](https://developer.android.com/studio)\n![示例](first-flutter-app/WX20190711-203810@2x.png)\n当前版本为3.4.2\n配合相关的SDK，然后增加虚拟机![示例](first-flutter-app/WX20190711-204747@2x.png)\n需要注意的是，建议使用API28,28的版本flutter会报错\n\n##### 安装flutter\nFlutter在国内访问的速度不太好，访问[Flutter](https://flutter.dev/docs/get-started/install)，进行下载配置，建议使用梯子，推荐使用喵帕斯，可以联系我获取邀请码。\n\n- 增加源站镜像环境变量(使用第三方的包的时候需要用到)\n\nWindows\n``` shell\n#我的电脑->属性->高级系统设置->高级->环境变量，新建用户环境变量,增加下面两个变量\nPUB_HOSTED_URL https://pub.flutter-io.cn \nFLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn\n```\n\nMac OS\n``` shell\n~ cd ~/.bash_profile\n#增加下面两个环境变量\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn  \nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n#保存 ,激活生效\nsource ~/.bash_profile\n```\n将下载的安装包解压，当前的版本为`1.7`，然后配置环境变量\n``` bash\n~ vi ~/.bash_profile\n#增加如下,根据你实际的位置进行配置\n#flutter\nexport PATH=/Users/xxx/develop/flutter/bin:$PATH\nsource ~/.bash_profile\n#验证\nflutter --version\n  ╔════════════════════════════════════════════════════════════════════════════╗\n  ║ A new version of Flutter is available!                                     ║\n  ║                                                                            ║\n  ║ To update to the latest version, run \"flutter upgrade\".                    ║\n  ╚════════════════════════════════════════════════════════════════════════════╝\n\n\nFlutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.git\nFramework • revision 7a4c33425d (2 months ago) • 2019-04-29 11:05:24 -0700\nEngine • revision 52c7a1e849\nTools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5)\n#提示我更新，我当时安装的是1.5.4,更新完成再次验证，更新会花点时间，使用下面的命令行走代理，或者全局也可以，根据实际情况配置\nexport https_proxy=http://127.0.0.1:1087;\nexport http_proxy=http://127.0.0.1:1087;\nexport all_proxy=socks5://127.0.0.1:1086\n#运行doctor 检测配置，第一次安装需要安装额外的几个包，按照提示安装即可\nRunning flutter doctor...\nDoctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, v1.7.8+hotfix.3, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)\n[!] Android toolchain - develop for Android devices (Android SDK version 28.0.3)\n    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses\n[!] Xcode - develop for iOS and macOS (Xcode 10.2.1)\n    ! CocoaPods out of date (1.6.0 is recommended).\n        CocoaPods is used to retrieve the iOS and macOS platform side's plugin code that responds to your plugin usage on the Dart side.\n        Without CocoaPods, plugins will not work on iOS or macOS.\n        For more info, see https://flutter.dev/platform-plugins\n      To upgrade:\n        brew upgrade cocoapods\n        pod setup\n[!] iOS tools - develop for iOS devices\n    ✗ ios-deploy not installed. To install:\n        brew install ios-deploy\n[✓] Android Studio (version 3.4)\n[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3)\n    ✗ Flutter plugin not installed; this adds Flutter specific functionality.\n    ✗ Dart plugin not installed; this adds Dart specific functionality.\n[!] VS Code (version 1.35.1)\n    ✗ Flutter extension not installed; install from\n      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter\n[!] Proxy Configuration\n    ! NO_PROXY is not set\n[!] Connected device\n    ! No devices available\n\n! Doctor found issues in 7 categories.\n\n#第一次安装，需要安装下面的包，brew 的使用可用搜我之前发的文章\nbrew update\nbrew install --HEAD usbmuxd\nbrew link usbmuxd\nbrew install --HEAD libimobiledevice\nbrew install ideviceinstaller\n\n\n\n```\n\n进入flutter的目录\n``` shell\n~ tree -L 1 \n.\n├── AUTHORS\n├── CODE_OF_CONDUCT.md\n├── CONTRIBUTING.md\n├── LICENSE\n├── PATENTS\n├── README.md\n├── analysis_options.yaml\n├── bin\n├── dartdoc_options.yaml\n├── dev\n├── examples\n├── flutter_console.bat\n├── flutter_root.iml\n├── packages\n└── version\n```\n在目录中看到有个`examples-helloworld` 里面有对应的示例，使用Android Studio 打开：\n![示例](first-flutter-app/WX20190711-212257@2x.png),选择对应的模拟器，Android 的和iOS 都可以，也可以使用真机，然后点击右上角运行即可\n使用29的API会出现如下错误：\n``` log\nError connecting to the service protocol: HttpException: Connection closed before full header was received, uri = http://127.0.0.1:53668/CCQP0ed9oCM=/ws\n```\n运行后的效果：\n![效果](first-flutter-app/WX20190711-212915@2x.png)\n\ndemo比较简单，但是感觉非常的方便，后面有空继续深入学习。\n\n\n","source":"_posts/first-flutter-app.md","raw":"---\ntitle: 第一个flutter\ndate: 2019-07-11 20:16:53\ncategories: flutter\ntags: flutter\n---\n[Flutter](https://flutter.dev/) is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.<!--more-->\n>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具\n\n最近看到很多的技术网站都在发Flutter相关的技术文章，所以自己也花时间了解了一下，写了个简单的HelloWorld体验了一下，感觉很不错。简单的记录一下。\n\n###安装\n安装环境基于MAC，Windows上也没有太大的区别。\n####安装Xcode、Android Stuido\n#####Xcode 安装\nXocde 的安装比较简单，直接去App Store搜索就可以了，![示例](first-flutter-app/WX20190711-203332@2x.png)之后需要打开，会自动的进行相应的配置。\n#####Android Studio 安装\n[Android Studio官网下载](https://developer.android.com/studio)\n![示例](first-flutter-app/WX20190711-203810@2x.png)\n当前版本为3.4.2\n配合相关的SDK，然后增加虚拟机![示例](first-flutter-app/WX20190711-204747@2x.png)\n需要注意的是，建议使用API28,28的版本flutter会报错\n\n##### 安装flutter\nFlutter在国内访问的速度不太好，访问[Flutter](https://flutter.dev/docs/get-started/install)，进行下载配置，建议使用梯子，推荐使用喵帕斯，可以联系我获取邀请码。\n\n- 增加源站镜像环境变量(使用第三方的包的时候需要用到)\n\nWindows\n``` shell\n#我的电脑->属性->高级系统设置->高级->环境变量，新建用户环境变量,增加下面两个变量\nPUB_HOSTED_URL https://pub.flutter-io.cn \nFLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn\n```\n\nMac OS\n``` shell\n~ cd ~/.bash_profile\n#增加下面两个环境变量\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn  \nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n#保存 ,激活生效\nsource ~/.bash_profile\n```\n将下载的安装包解压，当前的版本为`1.7`，然后配置环境变量\n``` bash\n~ vi ~/.bash_profile\n#增加如下,根据你实际的位置进行配置\n#flutter\nexport PATH=/Users/xxx/develop/flutter/bin:$PATH\nsource ~/.bash_profile\n#验证\nflutter --version\n  ╔════════════════════════════════════════════════════════════════════════════╗\n  ║ A new version of Flutter is available!                                     ║\n  ║                                                                            ║\n  ║ To update to the latest version, run \"flutter upgrade\".                    ║\n  ╚════════════════════════════════════════════════════════════════════════════╝\n\n\nFlutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.git\nFramework • revision 7a4c33425d (2 months ago) • 2019-04-29 11:05:24 -0700\nEngine • revision 52c7a1e849\nTools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5)\n#提示我更新，我当时安装的是1.5.4,更新完成再次验证，更新会花点时间，使用下面的命令行走代理，或者全局也可以，根据实际情况配置\nexport https_proxy=http://127.0.0.1:1087;\nexport http_proxy=http://127.0.0.1:1087;\nexport all_proxy=socks5://127.0.0.1:1086\n#运行doctor 检测配置，第一次安装需要安装额外的几个包，按照提示安装即可\nRunning flutter doctor...\nDoctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, v1.7.8+hotfix.3, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)\n[!] Android toolchain - develop for Android devices (Android SDK version 28.0.3)\n    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses\n[!] Xcode - develop for iOS and macOS (Xcode 10.2.1)\n    ! CocoaPods out of date (1.6.0 is recommended).\n        CocoaPods is used to retrieve the iOS and macOS platform side's plugin code that responds to your plugin usage on the Dart side.\n        Without CocoaPods, plugins will not work on iOS or macOS.\n        For more info, see https://flutter.dev/platform-plugins\n      To upgrade:\n        brew upgrade cocoapods\n        pod setup\n[!] iOS tools - develop for iOS devices\n    ✗ ios-deploy not installed. To install:\n        brew install ios-deploy\n[✓] Android Studio (version 3.4)\n[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3)\n    ✗ Flutter plugin not installed; this adds Flutter specific functionality.\n    ✗ Dart plugin not installed; this adds Dart specific functionality.\n[!] VS Code (version 1.35.1)\n    ✗ Flutter extension not installed; install from\n      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter\n[!] Proxy Configuration\n    ! NO_PROXY is not set\n[!] Connected device\n    ! No devices available\n\n! Doctor found issues in 7 categories.\n\n#第一次安装，需要安装下面的包，brew 的使用可用搜我之前发的文章\nbrew update\nbrew install --HEAD usbmuxd\nbrew link usbmuxd\nbrew install --HEAD libimobiledevice\nbrew install ideviceinstaller\n\n\n\n```\n\n进入flutter的目录\n``` shell\n~ tree -L 1 \n.\n├── AUTHORS\n├── CODE_OF_CONDUCT.md\n├── CONTRIBUTING.md\n├── LICENSE\n├── PATENTS\n├── README.md\n├── analysis_options.yaml\n├── bin\n├── dartdoc_options.yaml\n├── dev\n├── examples\n├── flutter_console.bat\n├── flutter_root.iml\n├── packages\n└── version\n```\n在目录中看到有个`examples-helloworld` 里面有对应的示例，使用Android Studio 打开：\n![示例](first-flutter-app/WX20190711-212257@2x.png),选择对应的模拟器，Android 的和iOS 都可以，也可以使用真机，然后点击右上角运行即可\n使用29的API会出现如下错误：\n``` log\nError connecting to the service protocol: HttpException: Connection closed before full header was received, uri = http://127.0.0.1:53668/CCQP0ed9oCM=/ws\n```\n运行后的效果：\n![效果](first-flutter-app/WX20190711-212915@2x.png)\n\ndemo比较简单，但是感觉非常的方便，后面有空继续深入学习。\n\n\n","slug":"first-flutter-app","published":1,"updated":"2019-10-20T04:54:47.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cx0021eos65z47fxk4","content":"<p><a href=\"https://flutter.dev/\" target=\"_blank\" rel=\"noopener\">Flutter</a> is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.<a id=\"more\"></a></p>\n<blockquote>\n<p>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具</p>\n</blockquote>\n<p>最近看到很多的技术网站都在发Flutter相关的技术文章，所以自己也花时间了解了一下，写了个简单的HelloWorld体验了一下，感觉很不错。简单的记录一下。</p>\n<p>###安装<br>安装环境基于MAC，Windows上也没有太大的区别。<br>####安装Xcode、Android Stuido<br>#####Xcode 安装<br>Xocde 的安装比较简单，直接去App Store搜索就可以了，<img src=\"first-flutter-app/WX20190711-203332@2x.png\" alt=\"示例\">之后需要打开，会自动的进行相应的配置。<br>#####Android Studio 安装<br><a href=\"https://developer.android.com/studio\" target=\"_blank\" rel=\"noopener\">Android Studio官网下载</a><br><img src=\"first-flutter-app/WX20190711-203810@2x.png\" alt=\"示例\"><br>当前版本为3.4.2<br>配合相关的SDK，然后增加虚拟机<img src=\"first-flutter-app/WX20190711-204747@2x.png\" alt=\"示例\"><br>需要注意的是，建议使用API28,28的版本flutter会报错</p>\n<h5 id=\"安装flutter\"><a href=\"#安装flutter\" class=\"headerlink\" title=\"安装flutter\"></a>安装flutter</h5><p>Flutter在国内访问的速度不太好，访问<a href=\"https://flutter.dev/docs/get-started/install\" target=\"_blank\" rel=\"noopener\">Flutter</a>，进行下载配置，建议使用梯子，推荐使用喵帕斯，可以联系我获取邀请码。</p>\n<ul>\n<li>增加源站镜像环境变量(使用第三方的包的时候需要用到)</li>\n</ul>\n<p>Windows</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量，新建用户环境变量,增加下面两个变量</span></span><br><span class=\"line\">PUB_HOSTED_URL https://pub.flutter-io.cn </span><br><span class=\"line\">FLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>\n\n<p>Mac OS</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ cd ~/.bash_profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加下面两个环境变量</span></span><br><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn  </span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">保存 ,激活生效</span></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>将下载的安装包解压，当前的版本为<code>1.7</code>，然后配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ vi ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\">#增加如下,根据你实际的位置进行配置</span></span><br><span class=\"line\"><span class=\"comment\">#flutter</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/Users/xxx/develop/flutter/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\">#验证</span></span><br><span class=\"line\">flutter --version</span><br><span class=\"line\">  ╔════════════════════════════════════════════════════════════════════════════╗</span><br><span class=\"line\">  ║ A new version of Flutter is available!                                     ║</span><br><span class=\"line\">  ║                                                                            ║</span><br><span class=\"line\">  ║ To update to the latest version, run <span class=\"string\">\"flutter upgrade\"</span>.                    ║</span><br><span class=\"line\">  ╚════════════════════════════════════════════════════════════════════════════╝</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Flutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.git</span><br><span class=\"line\">Framework • revision 7a4c33425d (2 months ago) • 2019-04-29 11:05:24 -0700</span><br><span class=\"line\">Engine • revision 52c7a1e849</span><br><span class=\"line\">Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5)</span><br><span class=\"line\"><span class=\"comment\">#提示我更新，我当时安装的是1.5.4,更新完成再次验证，更新会花点时间，使用下面的命令行走代理，或者全局也可以，根据实际情况配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:1087;</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:1087;</span><br><span class=\"line\"><span class=\"built_in\">export</span> all_proxy=socks5://127.0.0.1:1086</span><br><span class=\"line\"><span class=\"comment\">#运行doctor 检测配置，第一次安装需要安装额外的几个包，按照提示安装即可</span></span><br><span class=\"line\">Running flutter doctor...</span><br><span class=\"line\">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class=\"line\">[✓] Flutter (Channel stable, v1.7.8+hotfix.3, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)</span><br><span class=\"line\">[!] Android toolchain - develop <span class=\"keyword\">for</span> Android devices (Android SDK version 28.0.3)</span><br><span class=\"line\">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br><span class=\"line\">[!] Xcode - develop <span class=\"keyword\">for</span> iOS and macOS (Xcode 10.2.1)</span><br><span class=\"line\">    ! CocoaPods out of date (1.6.0 is recommended).</span><br><span class=\"line\">        CocoaPods is used to retrieve the iOS and macOS platform side<span class=\"string\">'s plugin code that responds to your plugin usage on the Dart side.</span></span><br><span class=\"line\"><span class=\"string\">        Without CocoaPods, plugins will not work on iOS or macOS.</span></span><br><span class=\"line\"><span class=\"string\">        For more info, see https://flutter.dev/platform-plugins</span></span><br><span class=\"line\"><span class=\"string\">      To upgrade:</span></span><br><span class=\"line\"><span class=\"string\">        brew upgrade cocoapods</span></span><br><span class=\"line\"><span class=\"string\">        pod setup</span></span><br><span class=\"line\"><span class=\"string\">[!] iOS tools - develop for iOS devices</span></span><br><span class=\"line\"><span class=\"string\">    ✗ ios-deploy not installed. To install:</span></span><br><span class=\"line\"><span class=\"string\">        brew install ios-deploy</span></span><br><span class=\"line\"><span class=\"string\">[✓] Android Studio (version 3.4)</span></span><br><span class=\"line\"><span class=\"string\">[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3)</span></span><br><span class=\"line\"><span class=\"string\">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span></span><br><span class=\"line\"><span class=\"string\">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span></span><br><span class=\"line\"><span class=\"string\">[!] VS Code (version 1.35.1)</span></span><br><span class=\"line\"><span class=\"string\">    ✗ Flutter extension not installed; install from</span></span><br><span class=\"line\"><span class=\"string\">      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter</span></span><br><span class=\"line\"><span class=\"string\">[!] Proxy Configuration</span></span><br><span class=\"line\"><span class=\"string\">    ! NO_PROXY is not set</span></span><br><span class=\"line\"><span class=\"string\">[!] Connected device</span></span><br><span class=\"line\"><span class=\"string\">    ! No devices available</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">! Doctor found issues in 7 categories.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#第一次安装，需要安装下面的包，brew 的使用可用搜我之前发的文章</span></span><br><span class=\"line\"><span class=\"string\">brew update</span></span><br><span class=\"line\"><span class=\"string\">brew install --HEAD usbmuxd</span></span><br><span class=\"line\"><span class=\"string\">brew link usbmuxd</span></span><br><span class=\"line\"><span class=\"string\">brew install --HEAD libimobiledevice</span></span><br><span class=\"line\"><span class=\"string\">brew install ideviceinstaller</span></span><br></pre></td></tr></table></figure>\n\n<p>进入flutter的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ tree -L 1 </span><br><span class=\"line\">.</span><br><span class=\"line\">├── AUTHORS</span><br><span class=\"line\">├── CODE_OF_CONDUCT.md</span><br><span class=\"line\">├── CONTRIBUTING.md</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── PATENTS</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── analysis_options.yaml</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">├── dartdoc_options.yaml</span><br><span class=\"line\">├── dev</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">├── flutter_console.bat</span><br><span class=\"line\">├── flutter_root.iml</span><br><span class=\"line\">├── packages</span><br><span class=\"line\">└── version</span><br></pre></td></tr></table></figure>\n<p>在目录中看到有个<code>examples-helloworld</code> 里面有对应的示例，使用Android Studio 打开：<br><img src=\"first-flutter-app/WX20190711-212257@2x.png\" alt=\"示例\">,选择对应的模拟器，Android 的和iOS 都可以，也可以使用真机，然后点击右上角运行即可<br>使用29的API会出现如下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error connecting to the service protocol: HttpException: Connection closed before full header was received, uri &#x3D; http:&#x2F;&#x2F;127.0.0.1:53668&#x2F;CCQP0ed9oCM&#x3D;&#x2F;ws</span><br></pre></td></tr></table></figure>\n<p>运行后的效果：<br><img src=\"first-flutter-app/WX20190711-212915@2x.png\" alt=\"效果\"></p>\n<p>demo比较简单，但是感觉非常的方便，后面有空继续深入学习。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://flutter.dev/\" target=\"_blank\" rel=\"noopener\">Flutter</a> is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.","more":"</p>\n<blockquote>\n<p>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具</p>\n</blockquote>\n<p>最近看到很多的技术网站都在发Flutter相关的技术文章，所以自己也花时间了解了一下，写了个简单的HelloWorld体验了一下，感觉很不错。简单的记录一下。</p>\n<p>###安装<br>安装环境基于MAC，Windows上也没有太大的区别。<br>####安装Xcode、Android Stuido<br>#####Xcode 安装<br>Xocde 的安装比较简单，直接去App Store搜索就可以了，<img src=\"first-flutter-app/WX20190711-203332@2x.png\" alt=\"示例\">之后需要打开，会自动的进行相应的配置。<br>#####Android Studio 安装<br><a href=\"https://developer.android.com/studio\" target=\"_blank\" rel=\"noopener\">Android Studio官网下载</a><br><img src=\"first-flutter-app/WX20190711-203810@2x.png\" alt=\"示例\"><br>当前版本为3.4.2<br>配合相关的SDK，然后增加虚拟机<img src=\"first-flutter-app/WX20190711-204747@2x.png\" alt=\"示例\"><br>需要注意的是，建议使用API28,28的版本flutter会报错</p>\n<h5 id=\"安装flutter\"><a href=\"#安装flutter\" class=\"headerlink\" title=\"安装flutter\"></a>安装flutter</h5><p>Flutter在国内访问的速度不太好，访问<a href=\"https://flutter.dev/docs/get-started/install\" target=\"_blank\" rel=\"noopener\">Flutter</a>，进行下载配置，建议使用梯子，推荐使用喵帕斯，可以联系我获取邀请码。</p>\n<ul>\n<li>增加源站镜像环境变量(使用第三方的包的时候需要用到)</li>\n</ul>\n<p>Windows</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量，新建用户环境变量,增加下面两个变量</span></span><br><span class=\"line\">PUB_HOSTED_URL https://pub.flutter-io.cn </span><br><span class=\"line\">FLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>\n\n<p>Mac OS</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ cd ~/.bash_profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加下面两个环境变量</span></span><br><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn  </span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">保存 ,激活生效</span></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>将下载的安装包解压，当前的版本为<code>1.7</code>，然后配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ vi ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\">#增加如下,根据你实际的位置进行配置</span></span><br><span class=\"line\"><span class=\"comment\">#flutter</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/Users/xxx/develop/flutter/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\">#验证</span></span><br><span class=\"line\">flutter --version</span><br><span class=\"line\">  ╔════════════════════════════════════════════════════════════════════════════╗</span><br><span class=\"line\">  ║ A new version of Flutter is available!                                     ║</span><br><span class=\"line\">  ║                                                                            ║</span><br><span class=\"line\">  ║ To update to the latest version, run <span class=\"string\">\"flutter upgrade\"</span>.                    ║</span><br><span class=\"line\">  ╚════════════════════════════════════════════════════════════════════════════╝</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Flutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.git</span><br><span class=\"line\">Framework • revision 7a4c33425d (2 months ago) • 2019-04-29 11:05:24 -0700</span><br><span class=\"line\">Engine • revision 52c7a1e849</span><br><span class=\"line\">Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5)</span><br><span class=\"line\"><span class=\"comment\">#提示我更新，我当时安装的是1.5.4,更新完成再次验证，更新会花点时间，使用下面的命令行走代理，或者全局也可以，根据实际情况配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:1087;</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:1087;</span><br><span class=\"line\"><span class=\"built_in\">export</span> all_proxy=socks5://127.0.0.1:1086</span><br><span class=\"line\"><span class=\"comment\">#运行doctor 检测配置，第一次安装需要安装额外的几个包，按照提示安装即可</span></span><br><span class=\"line\">Running flutter doctor...</span><br><span class=\"line\">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class=\"line\">[✓] Flutter (Channel stable, v1.7.8+hotfix.3, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)</span><br><span class=\"line\">[!] Android toolchain - develop <span class=\"keyword\">for</span> Android devices (Android SDK version 28.0.3)</span><br><span class=\"line\">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br><span class=\"line\">[!] Xcode - develop <span class=\"keyword\">for</span> iOS and macOS (Xcode 10.2.1)</span><br><span class=\"line\">    ! CocoaPods out of date (1.6.0 is recommended).</span><br><span class=\"line\">        CocoaPods is used to retrieve the iOS and macOS platform side<span class=\"string\">'s plugin code that responds to your plugin usage on the Dart side.</span></span><br><span class=\"line\"><span class=\"string\">        Without CocoaPods, plugins will not work on iOS or macOS.</span></span><br><span class=\"line\"><span class=\"string\">        For more info, see https://flutter.dev/platform-plugins</span></span><br><span class=\"line\"><span class=\"string\">      To upgrade:</span></span><br><span class=\"line\"><span class=\"string\">        brew upgrade cocoapods</span></span><br><span class=\"line\"><span class=\"string\">        pod setup</span></span><br><span class=\"line\"><span class=\"string\">[!] iOS tools - develop for iOS devices</span></span><br><span class=\"line\"><span class=\"string\">    ✗ ios-deploy not installed. To install:</span></span><br><span class=\"line\"><span class=\"string\">        brew install ios-deploy</span></span><br><span class=\"line\"><span class=\"string\">[✓] Android Studio (version 3.4)</span></span><br><span class=\"line\"><span class=\"string\">[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3)</span></span><br><span class=\"line\"><span class=\"string\">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span></span><br><span class=\"line\"><span class=\"string\">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span></span><br><span class=\"line\"><span class=\"string\">[!] VS Code (version 1.35.1)</span></span><br><span class=\"line\"><span class=\"string\">    ✗ Flutter extension not installed; install from</span></span><br><span class=\"line\"><span class=\"string\">      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter</span></span><br><span class=\"line\"><span class=\"string\">[!] Proxy Configuration</span></span><br><span class=\"line\"><span class=\"string\">    ! NO_PROXY is not set</span></span><br><span class=\"line\"><span class=\"string\">[!] Connected device</span></span><br><span class=\"line\"><span class=\"string\">    ! No devices available</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">! Doctor found issues in 7 categories.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#第一次安装，需要安装下面的包，brew 的使用可用搜我之前发的文章</span></span><br><span class=\"line\"><span class=\"string\">brew update</span></span><br><span class=\"line\"><span class=\"string\">brew install --HEAD usbmuxd</span></span><br><span class=\"line\"><span class=\"string\">brew link usbmuxd</span></span><br><span class=\"line\"><span class=\"string\">brew install --HEAD libimobiledevice</span></span><br><span class=\"line\"><span class=\"string\">brew install ideviceinstaller</span></span><br></pre></td></tr></table></figure>\n\n<p>进入flutter的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ tree -L 1 </span><br><span class=\"line\">.</span><br><span class=\"line\">├── AUTHORS</span><br><span class=\"line\">├── CODE_OF_CONDUCT.md</span><br><span class=\"line\">├── CONTRIBUTING.md</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── PATENTS</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── analysis_options.yaml</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">├── dartdoc_options.yaml</span><br><span class=\"line\">├── dev</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">├── flutter_console.bat</span><br><span class=\"line\">├── flutter_root.iml</span><br><span class=\"line\">├── packages</span><br><span class=\"line\">└── version</span><br></pre></td></tr></table></figure>\n<p>在目录中看到有个<code>examples-helloworld</code> 里面有对应的示例，使用Android Studio 打开：<br><img src=\"first-flutter-app/WX20190711-212257@2x.png\" alt=\"示例\">,选择对应的模拟器，Android 的和iOS 都可以，也可以使用真机，然后点击右上角运行即可<br>使用29的API会出现如下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error connecting to the service protocol: HttpException: Connection closed before full header was received, uri &#x3D; http:&#x2F;&#x2F;127.0.0.1:53668&#x2F;CCQP0ed9oCM&#x3D;&#x2F;ws</span><br></pre></td></tr></table></figure>\n<p>运行后的效果：<br><img src=\"first-flutter-app/WX20190711-212915@2x.png\" alt=\"效果\"></p>\n<p>demo比较简单，但是感觉非常的方便，后面有空继续深入学习。</p>"},{"title":"gitee码云使用webhook","date":"2018-02-25T06:57:34.000Z","_content":"### 原因\n我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<!-- more -->\n### 什么是webhook\n>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。\n\n>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。\n\n### 配置webhook\n知道什么是webhook 后我们就要开始配置我们自己的项目了。\n环境：\n   CentOS7\n   Gitee（网上GitHub的教程比较多，这个基于码云）\n- 配置项目公私钥\n1. 生产公钥\n``` bash\nssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n# Generating public/private rsa key pair...\n# 三次回车即可生成 ssh key\n```\n2. 查看公钥\n``` bash\ncat ~/.ssh/id_rsa.pub\n# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n```\n3. 添加公钥\n![步骤](gitee-with-webhook/image-2018-153940@2x.png)\n4. 测试\n``` bash\nssh -T git@gitee.com\nWelcome to Gitee.com, yourname! # 返回，说明正常\n```\n\n- 配置服务器node环境\n1. 安装nvm，服务器上使用nvm 方便多版本node切换\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\nsource /etc/profile\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\n```\n2. 配置相关的脚本\n安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)\n``` bash\nmkdir /opt/webhook #创建目录\ncd /opt/webhook\nnpm init # 初始化项目\nnpm install  gitee-webhook-handler --save # 当前的版本为v0.1.2\n```\n3. 创建对应的webhook服务\n``` bash\nvim webhook.js\n\nvar http = require('http')\nvar createHandler = require('gitee-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: '123456' })# post 所需要用到的秘钥\n\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('Push Hook', function (event) {  # 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });# 需要执行的脚本位置\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666) # 服务监听的端口，可以自行修改\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n4. 创建需要执行的脚本\n``` bash\nvim deploy.sh\ngit pull xxxxx  # 根据自己的需要自行编写\n```\n5. 测试服务\n![](gitee-with-webhook/WX20180225-163439@2x.png)\n![](gitee-with-webhook/WX20180225-163748@2x.png)\n显示ok，说明成功\n\n### 使用pm2应用进程管理器\n使用node 启动服务不是很方便，推荐使用pm2\n``` bash\nnpm install -g pm2\npm2 start webhook.js\npm2 monit # 可以通过此命令查看服务的状态\n```\n![](gitee-with-webhook/WX20180225-164721@2x.png)\n上图显示了一些应用的基本信息，可以更好的观察到服务的状态\n\n### 结束\n配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。\n\n\n参考：https://www.npmjs.com/package/gitee-webhook-handler\n","source":"_posts/gitee-with-webhook.md","raw":"---\ntitle: gitee码云使用webhook\ndate: 2018-02-25 14:57:34\ncategories: Linux\ntags: Linux\n---\n### 原因\n我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<!-- more -->\n### 什么是webhook\n>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。\n\n>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。\n\n### 配置webhook\n知道什么是webhook 后我们就要开始配置我们自己的项目了。\n环境：\n   CentOS7\n   Gitee（网上GitHub的教程比较多，这个基于码云）\n- 配置项目公私钥\n1. 生产公钥\n``` bash\nssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n# Generating public/private rsa key pair...\n# 三次回车即可生成 ssh key\n```\n2. 查看公钥\n``` bash\ncat ~/.ssh/id_rsa.pub\n# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n```\n3. 添加公钥\n![步骤](gitee-with-webhook/image-2018-153940@2x.png)\n4. 测试\n``` bash\nssh -T git@gitee.com\nWelcome to Gitee.com, yourname! # 返回，说明正常\n```\n\n- 配置服务器node环境\n1. 安装nvm，服务器上使用nvm 方便多版本node切换\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\nsource /etc/profile\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\n```\n2. 配置相关的脚本\n安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)\n``` bash\nmkdir /opt/webhook #创建目录\ncd /opt/webhook\nnpm init # 初始化项目\nnpm install  gitee-webhook-handler --save # 当前的版本为v0.1.2\n```\n3. 创建对应的webhook服务\n``` bash\nvim webhook.js\n\nvar http = require('http')\nvar createHandler = require('gitee-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: '123456' })# post 所需要用到的秘钥\n\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('Push Hook', function (event) {  # 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });# 需要执行的脚本位置\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666) # 服务监听的端口，可以自行修改\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n4. 创建需要执行的脚本\n``` bash\nvim deploy.sh\ngit pull xxxxx  # 根据自己的需要自行编写\n```\n5. 测试服务\n![](gitee-with-webhook/WX20180225-163439@2x.png)\n![](gitee-with-webhook/WX20180225-163748@2x.png)\n显示ok，说明成功\n\n### 使用pm2应用进程管理器\n使用node 启动服务不是很方便，推荐使用pm2\n``` bash\nnpm install -g pm2\npm2 start webhook.js\npm2 monit # 可以通过此命令查看服务的状态\n```\n![](gitee-with-webhook/WX20180225-164721@2x.png)\n上图显示了一些应用的基本信息，可以更好的观察到服务的状态\n\n### 结束\n配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。\n\n\n参考：https://www.npmjs.com/package/gitee-webhook-handler\n","slug":"gitee-with-webhook","published":1,"updated":"2019-10-20T04:54:47.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cy0024eos69dr3962h","content":"<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<a id=\"more\"></a></p>\n<h3 id=\"什么是webhook\"><a href=\"#什么是webhook\" class=\"headerlink\" title=\"什么是webhook\"></a>什么是webhook</h3><blockquote>\n<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>\n</blockquote>\n<blockquote>\n<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>\n</blockquote>\n<h3 id=\"配置webhook\"><a href=\"#配置webhook\" class=\"headerlink\" title=\"配置webhook\"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>\n<ul>\n<li>配置项目公私钥</li>\n</ul>\n<ol>\n<li>生产公钥<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xxxxx@xxxxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair...</span></span><br><span class=\"line\"><span class=\"comment\"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure></li>\n<li>查看公钥<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure></li>\n<li>添加公钥<br><img src=\"gitee-with-webhook/image-2018-153940@2x.png\" alt=\"步骤\"></li>\n<li>测试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">Welcome to Gitee.com, yourname! <span class=\"comment\"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>配置服务器node环境</li>\n</ul>\n<ol>\n<li>安装nvm，服务器上使用nvm 方便多版本node切换<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br></pre></td></tr></table></figure></li>\n<li>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/webhook <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/webhook</span><br><span class=\"line\">npm init <span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">npm install  gitee-webhook-handler --save <span class=\"comment\"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure></li>\n<li>创建对应的webhook服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim webhook.js</span><br><span class=\"line\"></span><br><span class=\"line\">var http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">var createHandler = require(<span class=\"string\">'gitee-webhook-handler'</span>)</span><br><span class=\"line\">var handler = createHandler(&#123; path: <span class=\"string\">'/webhooks_push'</span>, secret: <span class=\"string\">'123456'</span> &#125;)<span class=\"comment\"># post 所需要用到的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(<span class=\"string\">'Push Hook'</span>, <span class=\"keyword\">function</span> (event) &#123;  <span class=\"comment\"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class=\"line\">  console.log(<span class=\"string\">'Received a push event for %s to %s'</span>,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(<span class=\"string\">'sh'</span>, [<span class=\"string\">'./deploy.sh'</span>], <span class=\"keyword\">function</span>(text)&#123; console.log(text) &#125;);<span class=\"comment\"># 需要执行的脚本位置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(<span class=\"keyword\">function</span> (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(<span class=\"string\">'no such location'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666) <span class=\"comment\"># 服务监听的端口，可以自行修改</span></span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>创建需要执行的脚本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.sh</span><br><span class=\"line\">git pull xxxxx  <span class=\"comment\"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure></li>\n<li>测试服务<br><img src=\"gitee-with-webhook/WX20180225-163439@2x.png\" alt=\"\"><br><img src=\"gitee-with-webhook/WX20180225-163748@2x.png\" alt=\"\"><br>显示ok，说明成功</li>\n</ol>\n<h3 id=\"使用pm2应用进程管理器\"><a href=\"#使用pm2应用进程管理器\" class=\"headerlink\" title=\"使用pm2应用进程管理器\"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 start webhook.js</span><br><span class=\"line\">pm2 monit <span class=\"comment\"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"gitee-with-webhook/WX20180225-164721@2x.png\" alt=\"\"><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>\n<p>参考：<a href=\"https://www.npmjs.com/package/gitee-webhook-handler\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/gitee-webhook-handler</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。","more":"</p>\n<h3 id=\"什么是webhook\"><a href=\"#什么是webhook\" class=\"headerlink\" title=\"什么是webhook\"></a>什么是webhook</h3><blockquote>\n<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>\n</blockquote>\n<blockquote>\n<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>\n</blockquote>\n<h3 id=\"配置webhook\"><a href=\"#配置webhook\" class=\"headerlink\" title=\"配置webhook\"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>\n<ul>\n<li>配置项目公私钥</li>\n</ul>\n<ol>\n<li>生产公钥<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xxxxx@xxxxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair...</span></span><br><span class=\"line\"><span class=\"comment\"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure></li>\n<li>查看公钥<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure></li>\n<li>添加公钥<br><img src=\"gitee-with-webhook/image-2018-153940@2x.png\" alt=\"步骤\"></li>\n<li>测试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">Welcome to Gitee.com, yourname! <span class=\"comment\"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>配置服务器node环境</li>\n</ul>\n<ol>\n<li>安装nvm，服务器上使用nvm 方便多版本node切换<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br></pre></td></tr></table></figure></li>\n<li>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/webhook <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/webhook</span><br><span class=\"line\">npm init <span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">npm install  gitee-webhook-handler --save <span class=\"comment\"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure></li>\n<li>创建对应的webhook服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim webhook.js</span><br><span class=\"line\"></span><br><span class=\"line\">var http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">var createHandler = require(<span class=\"string\">'gitee-webhook-handler'</span>)</span><br><span class=\"line\">var handler = createHandler(&#123; path: <span class=\"string\">'/webhooks_push'</span>, secret: <span class=\"string\">'123456'</span> &#125;)<span class=\"comment\"># post 所需要用到的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(<span class=\"string\">'Push Hook'</span>, <span class=\"keyword\">function</span> (event) &#123;  <span class=\"comment\"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class=\"line\">  console.log(<span class=\"string\">'Received a push event for %s to %s'</span>,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(<span class=\"string\">'sh'</span>, [<span class=\"string\">'./deploy.sh'</span>], <span class=\"keyword\">function</span>(text)&#123; console.log(text) &#125;);<span class=\"comment\"># 需要执行的脚本位置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(<span class=\"keyword\">function</span> (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(<span class=\"string\">'no such location'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666) <span class=\"comment\"># 服务监听的端口，可以自行修改</span></span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>创建需要执行的脚本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.sh</span><br><span class=\"line\">git pull xxxxx  <span class=\"comment\"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure></li>\n<li>测试服务<br><img src=\"gitee-with-webhook/WX20180225-163439@2x.png\" alt=\"\"><br><img src=\"gitee-with-webhook/WX20180225-163748@2x.png\" alt=\"\"><br>显示ok，说明成功</li>\n</ol>\n<h3 id=\"使用pm2应用进程管理器\"><a href=\"#使用pm2应用进程管理器\" class=\"headerlink\" title=\"使用pm2应用进程管理器\"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 start webhook.js</span><br><span class=\"line\">pm2 monit <span class=\"comment\"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"gitee-with-webhook/WX20180225-164721@2x.png\" alt=\"\"><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>\n<p>参考：<a href=\"https://www.npmjs.com/package/gitee-webhook-handler\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/gitee-webhook-handler</a></p>"},{"title":"Cannot find module './build/Release/DTraceProviderBindings'","date":"2017-09-30T10:03:00.000Z","_content":"有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩_∩)O哈哈~_) <!-- more -->\n报错如下：\n``` log\n{ Error: Cannot find module './build/Release/DTraceProviderBindings'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:476:23)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)\n    at Module._compile (module.js:624:30) code: 'MODULE_NOT_FOUND' }\nINFO  Deleted database.\n```\n上面的错误看的非常的影响心情有木有？\n\n找了网上的很多方法，最后选择了一种比较粗暴的方法\n删除hexo目录下的`node_modules`目录，之后执行以下命令：\n``` shell\nnpm install --registry=https://registry.npm.taobao.org\n```\n然后执行hexo server，就会惊喜的发现错误没有了 O(∩_∩)O~~_)\n","source":"_posts/hexo-can't-find-module.md","raw":"---\ntitle: Cannot find module './build/Release/DTraceProviderBindings'\ndate: 2017-09-30 18:03:00\ncategories: Linux\ntag: hexo\n---\n有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩_∩)O哈哈~_) <!-- more -->\n报错如下：\n``` log\n{ Error: Cannot find module './build/Release/DTraceProviderBindings'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:476:23)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)\n    at Module._compile (module.js:624:30) code: 'MODULE_NOT_FOUND' }\nINFO  Deleted database.\n```\n上面的错误看的非常的影响心情有木有？\n\n找了网上的很多方法，最后选择了一种比较粗暴的方法\n删除hexo目录下的`node_modules`目录，之后执行以下命令：\n``` shell\nnpm install --registry=https://registry.npm.taobao.org\n```\n然后执行hexo server，就会惊喜的发现错误没有了 O(∩_∩)O~~_)\n","slug":"hexo-can't-find-module","published":1,"updated":"2019-10-20T04:54:47.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9cz0028eos6dbi24cib","content":"<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>) <a id=\"more\"></a><br>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: Cannot find module &#39;.&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings&#39;</span><br><span class=\"line\">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class=\"line\">    at Function.Module._load (module.js:476:23)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal&#x2F;module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;dtrace-provider&#x2F;dtrace-provider.js:18:23)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal&#x2F;module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;bunyan&#x2F;lib&#x2F;bunyan.js:79:18)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal&#x2F;module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;hexo-log&#x2F;lib&#x2F;log.js:3:14)</span><br><span class=\"line\">    at Module._compile (module.js:624:30) code: &#39;MODULE_NOT_FOUND&#39; &#125;</span><br><span class=\"line\">INFO  Deleted database.</span><br></pre></td></tr></table></figure>\n<p>上面的错误看的非常的影响心情有木有？</p>\n<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>\n","site":{"data":{}},"excerpt":"<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>)","more":"<br>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: Cannot find module &#39;.&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings&#39;</span><br><span class=\"line\">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class=\"line\">    at Function.Module._load (module.js:476:23)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal&#x2F;module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;dtrace-provider&#x2F;dtrace-provider.js:18:23)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal&#x2F;module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;bunyan&#x2F;lib&#x2F;bunyan.js:79:18)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal&#x2F;module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;hexo-log&#x2F;lib&#x2F;log.js:3:14)</span><br><span class=\"line\">    at Module._compile (module.js:624:30) code: &#39;MODULE_NOT_FOUND&#39; &#125;</span><br><span class=\"line\">INFO  Deleted database.</span><br></pre></td></tr></table></figure>\n<p>上面的错误看的非常的影响心情有木有？</p>\n<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>"},{"title":"面试总结","date":"2019-04-18T13:24:20.000Z","_content":"最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<!-- more -->\n\n下面是一些常见的问题:\n#### 基础部分\n- HashMap的数据结构、底层实现。\n- 常用的集合类有哪些\n- session 和 cookie 的区别，cookie中有哪些键值对\n- Java 静态块 、构造块、构造函数执行顺序\n\n#### 锁、缓存、消息队列\n- 分布式锁实现\n- 乐观锁、悲观锁的实现\n- Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决\n\n#### Spring 框架\n- Spring 几种常用的单例模式\n- Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）\n- Dubbo 和 Spring Cloud 的区别以及优劣\n- 消息队列的使用、消息幂等\n- Spring bean 的生命周期\n- @Autowired 和 @Resource 的区别\n\n#### ORM、数据库\n- MyBatis 中#和$的区别\n- 左连接的时候,条件在where中和不在where中结果的区别\n\n#### 微服务、分布式\n- Session 分布式方案\n- Spring Cloud 中的常用组件以及用途\n- 分布式事务\n- 限流、降级\n\n上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。\n","source":"_posts/interview-experience.md","raw":"---\ntitle: 面试总结\ndate: 2019-04-18 21:24:20\ncategories: 面试\ntags: 工作经历\n---\n最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<!-- more -->\n\n下面是一些常见的问题:\n#### 基础部分\n- HashMap的数据结构、底层实现。\n- 常用的集合类有哪些\n- session 和 cookie 的区别，cookie中有哪些键值对\n- Java 静态块 、构造块、构造函数执行顺序\n\n#### 锁、缓存、消息队列\n- 分布式锁实现\n- 乐观锁、悲观锁的实现\n- Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决\n\n#### Spring 框架\n- Spring 几种常用的单例模式\n- Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）\n- Dubbo 和 Spring Cloud 的区别以及优劣\n- 消息队列的使用、消息幂等\n- Spring bean 的生命周期\n- @Autowired 和 @Resource 的区别\n\n#### ORM、数据库\n- MyBatis 中#和$的区别\n- 左连接的时候,条件在where中和不在where中结果的区别\n\n#### 微服务、分布式\n- Session 分布式方案\n- Spring Cloud 中的常用组件以及用途\n- 分布式事务\n- 限流、降级\n\n上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。\n","slug":"interview-experience","published":1,"updated":"2019-10-20T04:54:47.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d0002beos6bvijb5of","content":"<p>最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<a id=\"more\"></a></p>\n<p>下面是一些常见的问题:</p>\n<h4 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h4><ul>\n<li>HashMap的数据结构、底层实现。</li>\n<li>常用的集合类有哪些</li>\n<li>session 和 cookie 的区别，cookie中有哪些键值对</li>\n<li>Java 静态块 、构造块、构造函数执行顺序</li>\n</ul>\n<h4 id=\"锁、缓存、消息队列\"><a href=\"#锁、缓存、消息队列\" class=\"headerlink\" title=\"锁、缓存、消息队列\"></a>锁、缓存、消息队列</h4><ul>\n<li>分布式锁实现</li>\n<li>乐观锁、悲观锁的实现</li>\n<li>Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决</li>\n</ul>\n<h4 id=\"Spring-框架\"><a href=\"#Spring-框架\" class=\"headerlink\" title=\"Spring 框架\"></a>Spring 框架</h4><ul>\n<li>Spring 几种常用的单例模式</li>\n<li>Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）</li>\n<li>Dubbo 和 Spring Cloud 的区别以及优劣</li>\n<li>消息队列的使用、消息幂等</li>\n<li>Spring bean 的生命周期</li>\n<li>@Autowired 和 @Resource 的区别</li>\n</ul>\n<h4 id=\"ORM、数据库\"><a href=\"#ORM、数据库\" class=\"headerlink\" title=\"ORM、数据库\"></a>ORM、数据库</h4><ul>\n<li>MyBatis 中#和$的区别</li>\n<li>左连接的时候,条件在where中和不在where中结果的区别</li>\n</ul>\n<h4 id=\"微服务、分布式\"><a href=\"#微服务、分布式\" class=\"headerlink\" title=\"微服务、分布式\"></a>微服务、分布式</h4><ul>\n<li>Session 分布式方案</li>\n<li>Spring Cloud 中的常用组件以及用途</li>\n<li>分布式事务</li>\n<li>限流、降级</li>\n</ul>\n<p>上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。</p>\n","site":{"data":{}},"excerpt":"<p>最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。","more":"</p>\n<p>下面是一些常见的问题:</p>\n<h4 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h4><ul>\n<li>HashMap的数据结构、底层实现。</li>\n<li>常用的集合类有哪些</li>\n<li>session 和 cookie 的区别，cookie中有哪些键值对</li>\n<li>Java 静态块 、构造块、构造函数执行顺序</li>\n</ul>\n<h4 id=\"锁、缓存、消息队列\"><a href=\"#锁、缓存、消息队列\" class=\"headerlink\" title=\"锁、缓存、消息队列\"></a>锁、缓存、消息队列</h4><ul>\n<li>分布式锁实现</li>\n<li>乐观锁、悲观锁的实现</li>\n<li>Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决</li>\n</ul>\n<h4 id=\"Spring-框架\"><a href=\"#Spring-框架\" class=\"headerlink\" title=\"Spring 框架\"></a>Spring 框架</h4><ul>\n<li>Spring 几种常用的单例模式</li>\n<li>Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）</li>\n<li>Dubbo 和 Spring Cloud 的区别以及优劣</li>\n<li>消息队列的使用、消息幂等</li>\n<li>Spring bean 的生命周期</li>\n<li>@Autowired 和 @Resource 的区别</li>\n</ul>\n<h4 id=\"ORM、数据库\"><a href=\"#ORM、数据库\" class=\"headerlink\" title=\"ORM、数据库\"></a>ORM、数据库</h4><ul>\n<li>MyBatis 中#和$的区别</li>\n<li>左连接的时候,条件在where中和不在where中结果的区别</li>\n</ul>\n<h4 id=\"微服务、分布式\"><a href=\"#微服务、分布式\" class=\"headerlink\" title=\"微服务、分布式\"></a>微服务、分布式</h4><ul>\n<li>Session 分布式方案</li>\n<li>Spring Cloud 中的常用组件以及用途</li>\n<li>分布式事务</li>\n<li>限流、降级</li>\n</ul>\n<p>上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。</p>"},{"title":"Java 并发编程学习","date":"2018-06-13T07:30:57.000Z","_content":"### 关于并发\n并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<!-- more -->\n### 上下文切换、死锁\n#### 上下文切换\n频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：\n- 无锁并发编程\n通过将数据分段，使用不同线程处理不同的数据。\n- CAS 算法\nJava的Atomic包使用CAS算法来更新数据，而不需要加锁。\n- 使用最小线程\n避免创建不需要的线程，避免线程处于等待状态。\n- 使用协程\n在单线程里实现多任务的调度，并在线程里维持多个任务间的切换\n\n#### 死锁、避免死锁的常见方法\n锁是一个非常有用的工具，但是出现死锁会导致系统不可用。\n避免死锁的常见方法：\n- 避免一个线程同时获取多个锁\n- 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。\n- 尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。\n- 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。\n\n#### 资源限制\n带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。\n\n### Java并发底层相关实现\n#### volatile 实现原则\n- Lock前缀指令会引起处理器缓存回写到内存。\n- 一个处理器的缓存回写到内存会导致其他处理器缓存无效。\n\n#### synchronized的实现原理与应用\n","source":"_posts/java-concurrency-study.md","raw":"---\ntitle: Java 并发编程学习\ndate: 2018-06-13 15:30:57\ncategories: Java\ntag: concurrency\n---\n### 关于并发\n并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<!-- more -->\n### 上下文切换、死锁\n#### 上下文切换\n频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：\n- 无锁并发编程\n通过将数据分段，使用不同线程处理不同的数据。\n- CAS 算法\nJava的Atomic包使用CAS算法来更新数据，而不需要加锁。\n- 使用最小线程\n避免创建不需要的线程，避免线程处于等待状态。\n- 使用协程\n在单线程里实现多任务的调度，并在线程里维持多个任务间的切换\n\n#### 死锁、避免死锁的常见方法\n锁是一个非常有用的工具，但是出现死锁会导致系统不可用。\n避免死锁的常见方法：\n- 避免一个线程同时获取多个锁\n- 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。\n- 尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。\n- 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。\n\n#### 资源限制\n带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。\n\n### Java并发底层相关实现\n#### volatile 实现原则\n- Lock前缀指令会引起处理器缓存回写到内存。\n- 一个处理器的缓存回写到内存会导致其他处理器缓存无效。\n\n#### synchronized的实现原理与应用\n","slug":"java-concurrency-study","published":1,"updated":"2019-10-20T04:54:47.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d0002feos6fceyh65q","content":"<h3 id=\"关于并发\"><a href=\"#关于并发\" class=\"headerlink\" title=\"关于并发\"></a>关于并发</h3><p>并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<a id=\"more\"></a></p>\n<h3 id=\"上下文切换、死锁\"><a href=\"#上下文切换、死锁\" class=\"headerlink\" title=\"上下文切换、死锁\"></a>上下文切换、死锁</h3><h4 id=\"上下文切换\"><a href=\"#上下文切换\" class=\"headerlink\" title=\"上下文切换\"></a>上下文切换</h4><p>频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：</p>\n<ul>\n<li>无锁并发编程<br>通过将数据分段，使用不同线程处理不同的数据。</li>\n<li>CAS 算法<br>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li>使用最小线程<br>避免创建不需要的线程，避免线程处于等待状态。</li>\n<li>使用协程<br>在单线程里实现多任务的调度，并在线程里维持多个任务间的切换</li>\n</ul>\n<h4 id=\"死锁、避免死锁的常见方法\"><a href=\"#死锁、避免死锁的常见方法\" class=\"headerlink\" title=\"死锁、避免死锁的常见方法\"></a>死锁、避免死锁的常见方法</h4><p>锁是一个非常有用的工具，但是出现死锁会导致系统不可用。<br>避免死锁的常见方法：</p>\n<ul>\n<li>避免一个线程同时获取多个锁</li>\n<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>\n<li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。</li>\n<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>\n</ul>\n<h4 id=\"资源限制\"><a href=\"#资源限制\" class=\"headerlink\" title=\"资源限制\"></a>资源限制</h4><p>带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。</p>\n<h3 id=\"Java并发底层相关实现\"><a href=\"#Java并发底层相关实现\" class=\"headerlink\" title=\"Java并发底层相关实现\"></a>Java并发底层相关实现</h3><h4 id=\"volatile-实现原则\"><a href=\"#volatile-实现原则\" class=\"headerlink\" title=\"volatile 实现原则\"></a>volatile 实现原则</h4><ul>\n<li>Lock前缀指令会引起处理器缓存回写到内存。</li>\n<li>一个处理器的缓存回写到内存会导致其他处理器缓存无效。</li>\n</ul>\n<h4 id=\"synchronized的实现原理与应用\"><a href=\"#synchronized的实现原理与应用\" class=\"headerlink\" title=\"synchronized的实现原理与应用\"></a>synchronized的实现原理与应用</h4>","site":{"data":{}},"excerpt":"<h3 id=\"关于并发\"><a href=\"#关于并发\" class=\"headerlink\" title=\"关于并发\"></a>关于并发</h3><p>并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。","more":"</p>\n<h3 id=\"上下文切换、死锁\"><a href=\"#上下文切换、死锁\" class=\"headerlink\" title=\"上下文切换、死锁\"></a>上下文切换、死锁</h3><h4 id=\"上下文切换\"><a href=\"#上下文切换\" class=\"headerlink\" title=\"上下文切换\"></a>上下文切换</h4><p>频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：</p>\n<ul>\n<li>无锁并发编程<br>通过将数据分段，使用不同线程处理不同的数据。</li>\n<li>CAS 算法<br>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li>使用最小线程<br>避免创建不需要的线程，避免线程处于等待状态。</li>\n<li>使用协程<br>在单线程里实现多任务的调度，并在线程里维持多个任务间的切换</li>\n</ul>\n<h4 id=\"死锁、避免死锁的常见方法\"><a href=\"#死锁、避免死锁的常见方法\" class=\"headerlink\" title=\"死锁、避免死锁的常见方法\"></a>死锁、避免死锁的常见方法</h4><p>锁是一个非常有用的工具，但是出现死锁会导致系统不可用。<br>避免死锁的常见方法：</p>\n<ul>\n<li>避免一个线程同时获取多个锁</li>\n<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>\n<li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。</li>\n<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>\n</ul>\n<h4 id=\"资源限制\"><a href=\"#资源限制\" class=\"headerlink\" title=\"资源限制\"></a>资源限制</h4><p>带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。</p>\n<h3 id=\"Java并发底层相关实现\"><a href=\"#Java并发底层相关实现\" class=\"headerlink\" title=\"Java并发底层相关实现\"></a>Java并发底层相关实现</h3><h4 id=\"volatile-实现原则\"><a href=\"#volatile-实现原则\" class=\"headerlink\" title=\"volatile 实现原则\"></a>volatile 实现原则</h4><ul>\n<li>Lock前缀指令会引起处理器缓存回写到内存。</li>\n<li>一个处理器的缓存回写到内存会导致其他处理器缓存无效。</li>\n</ul>\n<h4 id=\"synchronized的实现原理与应用\"><a href=\"#synchronized的实现原理与应用\" class=\"headerlink\" title=\"synchronized的实现原理与应用\"></a>synchronized的实现原理与应用</h4>"},{"title":"使用kubeadm安装kubernetes集群(待续)","date":"2017-12-02T08:57:06.000Z","_content":"因为国内服务器无法访问google，所以服务器需要科学上网\n可以看我之前的文章，服务器科学上网<!-- more -->\n### 安装docker\n建议使用daocloud提供的脚本进行安装，速度很快\n``` bash\n$ curl -sSL https://get.daocloud.io/docker | sh #适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源\n$ systemctl enable docker && systemctl start docker #设置开机启动，启动docker\n```\n### 安装kubeadm, kubelet and kubectl\n``` bash\n$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n$ setenforce 0 #关闭SELinux\n$ yum install -y kubelet kubeadm kubectl\n$ systemctl enable kubelet && systemctl start kubelet # 设置开机启动，启动\n```\n安装的过程有失败，提示执行yum --enablerepo=kubernetes clean metadata\n``` bash\n$ yum --enablerepo=kubernetes clean metadata # 如果还是不行，需要先清理缓存\n$ yum clean metadata\n$ yum clean all\n$ rm -rf /var/cache/yum\n```\n### 使用 kubeadm 创建集群\n``` bash\n$ kubeadm init #初始化\n```\n待续。。。\n","source":"_posts/kubeadm-install-kubernetes.md","raw":"---\ntitle: 使用kubeadm安装kubernetes集群(待续)\ndate: 2017-12-02 16:57:06\ncategories: Linux\ntag: Docker\n---\n因为国内服务器无法访问google，所以服务器需要科学上网\n可以看我之前的文章，服务器科学上网<!-- more -->\n### 安装docker\n建议使用daocloud提供的脚本进行安装，速度很快\n``` bash\n$ curl -sSL https://get.daocloud.io/docker | sh #适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源\n$ systemctl enable docker && systemctl start docker #设置开机启动，启动docker\n```\n### 安装kubeadm, kubelet and kubectl\n``` bash\n$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n$ setenforce 0 #关闭SELinux\n$ yum install -y kubelet kubeadm kubectl\n$ systemctl enable kubelet && systemctl start kubelet # 设置开机启动，启动\n```\n安装的过程有失败，提示执行yum --enablerepo=kubernetes clean metadata\n``` bash\n$ yum --enablerepo=kubernetes clean metadata # 如果还是不行，需要先清理缓存\n$ yum clean metadata\n$ yum clean all\n$ rm -rf /var/cache/yum\n```\n### 使用 kubeadm 创建集群\n``` bash\n$ kubeadm init #初始化\n```\n待续。。。\n","slug":"kubeadm-install-kubernetes","published":1,"updated":"2019-10-20T04:54:47.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d1002ieos63upwb8x6","content":"<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网<a id=\"more\"></a></p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.daocloud.io/docker | sh <span class=\"comment\">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker <span class=\"comment\">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装kubeadm-kubelet-and-kubectl\"><a href=\"#安装kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"安装kubeadm, kubelet and kubectl\"></a>安装kubeadm, kubelet and kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\">#关闭SELinux</span></span><br><span class=\"line\">$ yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class=\"comment\"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>\n<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --enablerepo=kubernetes clean metadata <span class=\"comment\"># 如果还是不行，需要先清理缓存</span></span><br><span class=\"line\">$ yum clean metadata</span><br><span class=\"line\">$ yum clean all</span><br><span class=\"line\">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-kubeadm-创建集群\"><a href=\"#使用-kubeadm-创建集群\" class=\"headerlink\" title=\"使用 kubeadm 创建集群\"></a>使用 kubeadm 创建集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init <span class=\"comment\">#初始化</span></span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n","site":{"data":{}},"excerpt":"<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网","more":"</p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.daocloud.io/docker | sh <span class=\"comment\">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker <span class=\"comment\">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装kubeadm-kubelet-and-kubectl\"><a href=\"#安装kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"安装kubeadm, kubelet and kubectl\"></a>安装kubeadm, kubelet and kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\">#关闭SELinux</span></span><br><span class=\"line\">$ yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class=\"comment\"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>\n<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --enablerepo=kubernetes clean metadata <span class=\"comment\"># 如果还是不行，需要先清理缓存</span></span><br><span class=\"line\">$ yum clean metadata</span><br><span class=\"line\">$ yum clean all</span><br><span class=\"line\">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-kubeadm-创建集群\"><a href=\"#使用-kubeadm-创建集群\" class=\"headerlink\" title=\"使用 kubeadm 创建集群\"></a>使用 kubeadm 创建集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init <span class=\"comment\">#初始化</span></span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>"},{"title":"生活","date":"2017-09-23T05:48:08.000Z","_content":"\n\n### 日常生活趣事记录\n","source":"_posts/life.md","raw":"---\ntitle: 生活\ndate: 2017-09-23 13:48:08\ncategories: Other\ntag: Docker\n---\n\n\n### 日常生活趣事记录\n","slug":"life","published":1,"updated":"2019-10-20T04:54:47.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d3002meos6eqwq7s2p","content":"<h3 id=\"日常生活趣事记录\"><a href=\"#日常生活趣事记录\" class=\"headerlink\" title=\"日常生活趣事记录\"></a>日常生活趣事记录</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"日常生活趣事记录\"><a href=\"#日常生活趣事记录\" class=\"headerlink\" title=\"日常生活趣事记录\"></a>日常生活趣事记录</h3>"},{"title":"lightsail使用root用户登录","_content":"在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。<!--more-->\n在创建服务器的时候，选择增加脚本：\n``` shell\n#!/bin/bash\necho root:123456 |sudo chpasswd root\nsudo sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;\nsudo sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;\nsudo reboot\n```\n需要注意的：\n   root: 后面的部分需要修改为你自己的密码，如果你的服务器已经创建，可以建一个`login.sh`文件，将上面的脚本粘贴进去，然后执行`chmod +x login.sh`\n   ,`sh login`,之后服务器会重启，然后就可以尝试使用密码登录了，之前使用普通用户ssh 登录，也可以将用户名改为root进行登录。\n","source":"_posts/lightsail-use-root-logn.md","raw":"---\ntitle: lightsail使用root用户登录\ncategories: Linux\ntag: Linux\n---\n在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。<!--more-->\n在创建服务器的时候，选择增加脚本：\n``` shell\n#!/bin/bash\necho root:123456 |sudo chpasswd root\nsudo sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;\nsudo sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;\nsudo reboot\n```\n需要注意的：\n   root: 后面的部分需要修改为你自己的密码，如果你的服务器已经创建，可以建一个`login.sh`文件，将上面的脚本粘贴进去，然后执行`chmod +x login.sh`\n   ,`sh login`,之后服务器会重启，然后就可以尝试使用密码登录了，之前使用普通用户ssh 登录，也可以将用户名改为root进行登录。\n","slug":"lightsail-use-root-logn","published":1,"date":"2019-11-22T02:29:26.137Z","updated":"2019-11-22T02:48:29.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d3002oeos63mcb0zbo","content":"<p>在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。<a id=\"more\"></a><br>在创建服务器的时候，选择增加脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">echo root:123456 |sudo chpasswd root</span><br><span class=\"line\">sudo sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n<p>需要注意的：<br>   root: 后面的部分需要修改为你自己的密码，如果你的服务器已经创建，可以建一个<code>login.sh</code>文件，将上面的脚本粘贴进去，然后执行<code>chmod +x login.sh</code><br>   ,<code>sh login</code>,之后服务器会重启，然后就可以尝试使用密码登录了，之前使用普通用户ssh 登录，也可以将用户名改为root进行登录。</p>\n","site":{"data":{}},"excerpt":"<p>在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。","more":"<br>在创建服务器的时候，选择增加脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">echo root:123456 |sudo chpasswd root</span><br><span class=\"line\">sudo sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure>\n<p>需要注意的：<br>   root: 后面的部分需要修改为你自己的密码，如果你的服务器已经创建，可以建一个<code>login.sh</code>文件，将上面的脚本粘贴进去，然后执行<code>chmod +x login.sh</code><br>   ,<code>sh login</code>,之后服务器会重启，然后就可以尝试使用密码登录了，之前使用普通用户ssh 登录，也可以将用户名改为root进行登录。</p>"},{"title":"MD5、SALT加密浅析","date":"2018-11-06T03:35:06.000Z","_content":"密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，\n通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<!-- more -->\n\n### 什么是`Salt`盐\n> 盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。\n\n>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。\n\n### Java 实现MD5加密\n``` Java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class JavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        String result = getMD5(numStr);\n        System.out.println(result);\n    }\n\n\n    public final static String getMD5(String str) {\n        try {\n            //创建具有指定算法名称的摘要\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            //使用指定的字节数组更新摘要\n            md.update(str.getBytes());\n            //进行哈希计算并返回一个字节数组\n            byte mdBytes[] = md.digest();\n            String hash = \"\";\n            //循环字节数组\n            for (int i = 0; i < mdBytes.length; i++) {\n                int temp;\n                //如果有小于0的字节,则转换为正数\n                if (mdBytes[i] < 0)\n                    temp = 256 + mdBytes[i];\n                else\n                    temp = mdBytes[i];\n                if (temp < 16)\n                    hash += \"0\";\n                //将字节转换为16进制后，转换为字符串\n                hash += Integer.toString(temp, 16);\n            }\n            return hash;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n结果如下：\n``` shell\ne10adc3949ba59abbe56e057f20f883e\n```\n去MD5解码网站，很容易得到加密的内容是`123456`\n\n### Guava 实现MD5加密\nGuava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。\n导入maven 包\n``` xml\n     <dependency>\n        <groupId>com.google.guava</groupId>\n        <artifactId>guava</artifactId>\n        <version>27.0-jre</version>\n        <type>bundle</type>\n     </dependency>\n```\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        System.out.println(hc);\n    }\n}\n```\n结果跟上面相同，但是`md5()` 的这个方法代码中标记弃用了。推荐使用新的方法\n代码的量少了很多，不需要自己做过多的处理。\n\n###  加盐处理\n\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n\n    private static final String SALT = \"0fdfa5e5a88bedae440a9d8ae7c84708\";\n\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        System.out.println(getMD5WithSalt(numStr));\n    }\n\n    public static String getMD5(String numStr) {\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        return hc.toString();\n    }\n\n    public static String getMD5WithSalt(String numStr) {\n        return getMD5(getMD5(numStr) + SALT);\n    }\n}\n\n```\n\n这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。\n","source":"_posts/md5-and-salt-encryption.md","raw":"---\ntitle: MD5、SALT加密浅析\ndate: 2018-11-06 11:35:06\ncategories: Linux\ntag: 加密\n---\n密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，\n通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<!-- more -->\n\n### 什么是`Salt`盐\n> 盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。\n\n>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。\n\n### Java 实现MD5加密\n``` Java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class JavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        String result = getMD5(numStr);\n        System.out.println(result);\n    }\n\n\n    public final static String getMD5(String str) {\n        try {\n            //创建具有指定算法名称的摘要\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            //使用指定的字节数组更新摘要\n            md.update(str.getBytes());\n            //进行哈希计算并返回一个字节数组\n            byte mdBytes[] = md.digest();\n            String hash = \"\";\n            //循环字节数组\n            for (int i = 0; i < mdBytes.length; i++) {\n                int temp;\n                //如果有小于0的字节,则转换为正数\n                if (mdBytes[i] < 0)\n                    temp = 256 + mdBytes[i];\n                else\n                    temp = mdBytes[i];\n                if (temp < 16)\n                    hash += \"0\";\n                //将字节转换为16进制后，转换为字符串\n                hash += Integer.toString(temp, 16);\n            }\n            return hash;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n结果如下：\n``` shell\ne10adc3949ba59abbe56e057f20f883e\n```\n去MD5解码网站，很容易得到加密的内容是`123456`\n\n### Guava 实现MD5加密\nGuava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。\n导入maven 包\n``` xml\n     <dependency>\n        <groupId>com.google.guava</groupId>\n        <artifactId>guava</artifactId>\n        <version>27.0-jre</version>\n        <type>bundle</type>\n     </dependency>\n```\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        System.out.println(hc);\n    }\n}\n```\n结果跟上面相同，但是`md5()` 的这个方法代码中标记弃用了。推荐使用新的方法\n代码的量少了很多，不需要自己做过多的处理。\n\n###  加盐处理\n\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n\n    private static final String SALT = \"0fdfa5e5a88bedae440a9d8ae7c84708\";\n\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        System.out.println(getMD5WithSalt(numStr));\n    }\n\n    public static String getMD5(String numStr) {\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        return hc.toString();\n    }\n\n    public static String getMD5WithSalt(String numStr) {\n        return getMD5(getMD5(numStr) + SALT);\n    }\n}\n\n```\n\n这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。\n","slug":"md5-and-salt-encryption","published":1,"updated":"2019-10-20T04:54:47.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d5002teos6453f6l1p","content":"<p>密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，<br>通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<a id=\"more\"></a></p>\n<h3 id=\"什么是Salt盐\"><a href=\"#什么是Salt盐\" class=\"headerlink\" title=\"什么是Salt盐\"></a>什么是<code>Salt</code>盐</h3><blockquote>\n<p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p>\n</blockquote>\n<blockquote>\n<p>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。</p>\n</blockquote>\n<h3 id=\"Java-实现MD5加密\"><a href=\"#Java-实现MD5加密\" class=\"headerlink\" title=\"Java 实现MD5加密\"></a>Java 实现MD5加密</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        String result = getMD5(numStr);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建具有指定算法名称的摘要</span></span><br><span class=\"line\">            MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//使用指定的字节数组更新摘要</span></span><br><span class=\"line\">            md.update(str.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">//进行哈希计算并返回一个字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span> mdBytes[] = md.digest();</span><br><span class=\"line\">            String hash = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mdBytes.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">                <span class=\"comment\">//如果有小于0的字节,则转换为正数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mdBytes[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    temp = <span class=\"number\">256</span> + mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    temp = mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">                    hash += <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">                <span class=\"comment\">//将字节转换为16进制后，转换为字符串</span></span><br><span class=\"line\">                hash += Integer.toString(temp, <span class=\"number\">16</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>\n<p>去MD5解码网站，很容易得到加密的内容是<code>123456</code></p>\n<h3 id=\"Guava-实现MD5加密\"><a href=\"#Guava-实现MD5加密\" class=\"headerlink\" title=\"Guava 实现MD5加密\"></a>Guava 实现MD5加密</h3><p>Guava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。<br>导入maven 包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>27.0-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>bundle<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        System.out.println(hc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果跟上面相同，但是<code>md5()</code> 的这个方法代码中标记弃用了。推荐使用新的方法<br>代码的量少了很多，不需要自己做过多的处理。</p>\n<h3 id=\"加盐处理\"><a href=\"#加盐处理\" class=\"headerlink\" title=\"加盐处理\"></a>加盐处理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SALT = <span class=\"string\">\"0fdfa5e5a88bedae440a9d8ae7c84708\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        System.out.println(getMD5WithSalt(numStr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hc.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5WithSalt</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getMD5(getMD5(numStr) + SALT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。</p>\n","site":{"data":{}},"excerpt":"<p>密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，<br>通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。","more":"</p>\n<h3 id=\"什么是Salt盐\"><a href=\"#什么是Salt盐\" class=\"headerlink\" title=\"什么是Salt盐\"></a>什么是<code>Salt</code>盐</h3><blockquote>\n<p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p>\n</blockquote>\n<blockquote>\n<p>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。</p>\n</blockquote>\n<h3 id=\"Java-实现MD5加密\"><a href=\"#Java-实现MD5加密\" class=\"headerlink\" title=\"Java 实现MD5加密\"></a>Java 实现MD5加密</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        String result = getMD5(numStr);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建具有指定算法名称的摘要</span></span><br><span class=\"line\">            MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//使用指定的字节数组更新摘要</span></span><br><span class=\"line\">            md.update(str.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">//进行哈希计算并返回一个字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span> mdBytes[] = md.digest();</span><br><span class=\"line\">            String hash = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mdBytes.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">                <span class=\"comment\">//如果有小于0的字节,则转换为正数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mdBytes[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    temp = <span class=\"number\">256</span> + mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    temp = mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">                    hash += <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">                <span class=\"comment\">//将字节转换为16进制后，转换为字符串</span></span><br><span class=\"line\">                hash += Integer.toString(temp, <span class=\"number\">16</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>\n<p>去MD5解码网站，很容易得到加密的内容是<code>123456</code></p>\n<h3 id=\"Guava-实现MD5加密\"><a href=\"#Guava-实现MD5加密\" class=\"headerlink\" title=\"Guava 实现MD5加密\"></a>Guava 实现MD5加密</h3><p>Guava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。<br>导入maven 包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>27.0-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>bundle<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        System.out.println(hc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果跟上面相同，但是<code>md5()</code> 的这个方法代码中标记弃用了。推荐使用新的方法<br>代码的量少了很多，不需要自己做过多的处理。</p>\n<h3 id=\"加盐处理\"><a href=\"#加盐处理\" class=\"headerlink\" title=\"加盐处理\"></a>加盐处理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SALT = <span class=\"string\">\"0fdfa5e5a88bedae440a9d8ae7c84708\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        System.out.println(getMD5WithSalt(numStr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hc.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5WithSalt</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getMD5(getMD5(numStr) + SALT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。</p>"},{"title":"Netty 学习记录","date":"2018-04-11T02:44:49.000Z","_content":"### Netty 核心组件\n- Channel\n- 回调\n- Future\n- 事件和ChannelHandler\n#### Channel\nChannel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。\n#### 回调\n一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。\n####  Future\nFuture 提供了另一种在操作完成时通知应用程序的方式。\n#### ChannelHandler\nChannelHandler 是 Netty\n","source":"_posts/netty-study.md","raw":"---\ntitle: Netty 学习记录\ndate: 2018-04-11 10:44:49\ntags:\n---\n### Netty 核心组件\n- Channel\n- 回调\n- Future\n- 事件和ChannelHandler\n#### Channel\nChannel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。\n#### 回调\n一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。\n####  Future\nFuture 提供了另一种在操作完成时通知应用程序的方式。\n#### ChannelHandler\nChannelHandler 是 Netty\n","slug":"netty-study","published":1,"updated":"2019-10-20T04:54:47.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d5002weos653o7d7ju","content":"<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><ul>\n<li>Channel</li>\n<li>回调</li>\n<li>Future</li>\n<li>事件和ChannelHandler<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><ul>\n<li>Channel</li>\n<li>回调</li>\n<li>Future</li>\n<li>事件和ChannelHandler<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>\n</ul>\n"},{"title":"Nginx 负载均衡策略","date":"2017-10-12T09:12:01.000Z","_content":"Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 `注：负载均衡至少需要两台机器` <!-- more -->\n### 负载均衡\n负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。\n\n### 负载均衡策略\n负载均衡的策略可以大致分为两大类：`内置策略` 和`扩展策略`\n内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接\n扩展策略：fair、url hash等\n#### 内置策略\n- 轮询策略（轮询加权/round-robin）</br>\n`到应用服务器的请求以round-robin/轮询的方式被分发`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080 weight=1 fail_timeout=20s;\n        server 192.168.0.101:8080 weight=2 fail_timeout=20s;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- ip hash </br>\n`使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        ip_hash;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- 最少连接（least_conn) </br>\n`下一个请求将被分派到活动连接数量最少的服务器`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        least_conn;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n#### 扩展策略\n- fair</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        fair;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- url hash</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        hash $request_uri;\n        hash_method crc32;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n\nweight=1; (weight 默认为1.weight越大，负载的权重就越大)\ndown; (down 表示单前的server暂时不参与负载)\nbackup; (其它所有的非backup机器down或者忙的时候，请求backup机器)\nmax_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\nfail_timeout:max_fails次失败后，暂停的时间\n\n### 最后\n``` bash\nnginx -s reload #重启nginx\n```\n","source":"_posts/nginx-load-balance-strategy.md","raw":"---\ntitle: Nginx 负载均衡策略\ndate: 2017-10-12 17:12:01\ncategories: Linux\ntag: Nginx\n---\nNginx 作为高性能web服务器，负载均衡是其基本功能之一。 `注：负载均衡至少需要两台机器` <!-- more -->\n### 负载均衡\n负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。\n\n### 负载均衡策略\n负载均衡的策略可以大致分为两大类：`内置策略` 和`扩展策略`\n内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接\n扩展策略：fair、url hash等\n#### 内置策略\n- 轮询策略（轮询加权/round-robin）</br>\n`到应用服务器的请求以round-robin/轮询的方式被分发`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080 weight=1 fail_timeout=20s;\n        server 192.168.0.101:8080 weight=2 fail_timeout=20s;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- ip hash </br>\n`使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        ip_hash;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- 最少连接（least_conn) </br>\n`下一个请求将被分派到活动连接数量最少的服务器`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        least_conn;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n#### 扩展策略\n- fair</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        fair;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- url hash</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        hash $request_uri;\n        hash_method crc32;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n\nweight=1; (weight 默认为1.weight越大，负载的权重就越大)\ndown; (down 表示单前的server暂时不参与负载)\nbackup; (其它所有的非backup机器down或者忙的时候，请求backup机器)\nmax_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\nfail_timeout:max_fails次失败后，暂停的时间\n\n### 最后\n``` bash\nnginx -s reload #重启nginx\n```\n","slug":"nginx-load-balance-strategy","published":1,"updated":"2019-10-20T04:54:47.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d6002zeos60uckdbt7","content":"<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code> <a id=\"more\"></a></p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>\n<h4 id=\"内置策略\"><a href=\"#内置策略\" class=\"headerlink\" title=\"内置策略\"></a>内置策略</h4><ul>\n<li><p>轮询策略（轮询加权/round-robin）</br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code></br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class=\"line\">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ip hash </br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code></br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最少连接（least_conn) </br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code></br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"扩展策略\"><a href=\"#扩展策略\" class=\"headerlink\" title=\"扩展策略\"></a>扩展策略</h4><ul>\n<li><p>fair</br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        fair;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url hash</br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        hash_method crc32;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload <span class=\"comment\">#重启nginx</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code>","more":"</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>\n<h4 id=\"内置策略\"><a href=\"#内置策略\" class=\"headerlink\" title=\"内置策略\"></a>内置策略</h4><ul>\n<li><p>轮询策略（轮询加权/round-robin）</br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code></br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class=\"line\">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ip hash </br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code></br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最少连接（least_conn) </br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code></br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"扩展策略\"><a href=\"#扩展策略\" class=\"headerlink\" title=\"扩展策略\"></a>扩展策略</h4><ul>\n<li><p>fair</br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        fair;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url hash</br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        hash_method crc32;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload <span class=\"comment\">#重启nginx</span></span><br></pre></td></tr></table></figure>"},{"title":"Nginx 学习日志 1","date":"2020-06-05T07:36:53.000Z","_content":"\n### 回顾\n之前的时候写过`Centos yum 安装nginx 后增加模块`,源码安装的时候一笔带过，最近在学习Nginx其中的一些知识点，所以记录一下手动安装的过程，以及相关的配置。<!--more-->\n### 安装\nNginx 一般可以去官网下载，[Nginx](https://www.nginx.org),Nginx也有对应的商业版本[Nginx Plus](https://www.nginx.com/), 还有一些其他的基于Nginx开发的版本，[Tengine](https://tengine.taobao.org/)和[OpenResty](http://openresty.org/)都是比较有名的。\n#### 下载\n[Nginx下载](https://nginx.org/en/download.html),如下图，进入到下载页面，使用`stable version`稳定版。\n![nginx](WX20200605-151113@2x.png)\n``` bash\n#下载\nwget https://nginx.org/download/nginx-1.18.0.tar.gz\n\n```\n#### 解压\n``` bash\n#解压\ntar -xzf nginx-1.18.0.tar.gz\n```\n### 目录说明\n``` bash\n\ncd nginx-1.18.0/\n\ntree -L 1 (查看1层目录，如果没有tree 命令 yum -y install tree 进行安装 )\n\n.\n├── auto         # 编译、lib库、操作系统判断\n├── CHANGES      # feature、版本变更、bugfix\n├── CHANGES.ru   # 俄语changes\n├── conf         # 示例文件\n├── configure    # 生成中间文件\n├── contrib      # vim等相关配置\n├── html         # 标准文件页面50\n├── LICENSE      # LICENSE\n├── man          # 帮助文件\n├── README       #\n└── src          # 源码\n\n\n# 复制vim 配置，可以让nginx配置显示颜色，更加方便的配置\ncp -r contrib/vim/* ~/.vim/\n\n```\n\n#### 编译\n\n``` bash\n#查看编译配置\n./configure --help | cat\n  --help                             print this message\n\n  --prefix=PATH                      set installation prefix\n  --sbin-path=PATH                   set nginx binary pathname\n  --modules-path=PATH                set modules path\n  --conf-path=PATH                   set nginx.conf pathname\n  --error-log-path=PATH              set error log pathname\n  --pid-path=PATH                    set nginx.pid pathname\n  --lock-path=PATH                   set nginx.lock pathname\n\n  --user=USER                        set non-privileged user for\n                                     worker processes\n  --group=GROUP                      set non-privileged group for\n                                     worker processes\n\n  --build=NAME                       set build name\n  --builddir=DIR                     set build directory\n\n  --with-select_module               enable select module\n  --without-select_module            disable select module\n  --with-poll_module                 enable poll module\n  --without-poll_module              disable poll module\n\n  --with-threads                     enable thread pool support\n\n  --with-file-aio                    enable file AIO support\n\n  --with-http_ssl_module             enable ngx_http_ssl_module\n  --with-http_v2_module              enable ngx_http_v2_module\n  --with-http_realip_module          enable ngx_http_realip_module\n  --with-http_addition_module        enable ngx_http_addition_module\n  --with-http_xslt_module            enable ngx_http_xslt_module\n  --with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module\n  --with-http_image_filter_module    enable ngx_http_image_filter_module\n  --with-http_image_filter_module=dynamic\n                                     enable dynamic ngx_http_image_filter_module\n  --with-http_geoip_module           enable ngx_http_geoip_module\n  --with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module\n  --with-http_sub_module             enable ngx_http_sub_module\n  --with-http_dav_module             enable ngx_http_dav_module\n  --with-http_flv_module             enable ngx_http_flv_module\n  --with-http_mp4_module             enable ngx_http_mp4_module\n  --with-http_gunzip_module          enable ngx_http_gunzip_module\n  --with-http_gzip_static_module     enable ngx_http_gzip_static_module\n  --with-http_auth_request_module    enable ngx_http_auth_request_module\n  --with-http_random_index_module    enable ngx_http_random_index_module\n  --with-http_secure_link_module     enable ngx_http_secure_link_module\n  --with-http_degradation_module     enable ngx_http_degradation_module\n  --with-http_slice_module           enable ngx_http_slice_module\n  --with-http_stub_status_module     enable ngx_http_stub_status_module\n\n  --without-http_charset_module      disable ngx_http_charset_module\n  --without-http_gzip_module         disable ngx_http_gzip_module\n  --without-http_ssi_module          disable ngx_http_ssi_module\n  --without-http_userid_module       disable ngx_http_userid_module\n  --without-http_access_module       disable ngx_http_access_module\n  --without-http_auth_basic_module   disable ngx_http_auth_basic_module\n  --without-http_mirror_module       disable ngx_http_mirror_module\n  --without-http_autoindex_module    disable ngx_http_autoindex_module\n  --without-http_geo_module          disable ngx_http_geo_module\n  --without-http_map_module          disable ngx_http_map_module\n  --without-http_split_clients_module disable ngx_http_split_clients_module\n  --without-http_referer_module      disable ngx_http_referer_module\n  --without-http_rewrite_module      disable ngx_http_rewrite_module\n  --without-http_proxy_module        disable ngx_http_proxy_module\n  --without-http_fastcgi_module      disable ngx_http_fastcgi_module\n  --without-http_uwsgi_module        disable ngx_http_uwsgi_module\n  --without-http_scgi_module         disable ngx_http_scgi_module\n  --without-http_grpc_module         disable ngx_http_grpc_module\n  --without-http_memcached_module    disable ngx_http_memcached_module\n  --without-http_limit_conn_module   disable ngx_http_limit_conn_module\n  --without-http_limit_req_module    disable ngx_http_limit_req_module\n  --without-http_empty_gif_module    disable ngx_http_empty_gif_module\n  --without-http_browser_module      disable ngx_http_browser_module\n  --without-http_upstream_hash_module\n                                     disable ngx_http_upstream_hash_module\n  --without-http_upstream_ip_hash_module\n                                     disable ngx_http_upstream_ip_hash_module\n  --without-http_upstream_least_conn_module\n                                     disable ngx_http_upstream_least_conn_module\n  --without-http_upstream_random_module\n                                     disable ngx_http_upstream_random_module\n  --without-http_upstream_keepalive_module\n                                     disable ngx_http_upstream_keepalive_module\n  --without-http_upstream_zone_module\n                                     disable ngx_http_upstream_zone_module\n\n  --with-http_perl_module            enable ngx_http_perl_module\n  --with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module\n  --with-perl_modules_path=PATH      set Perl modules path\n  --with-perl=PATH                   set perl binary pathname\n\n  --http-log-path=PATH               set http access log pathname\n  --http-client-body-temp-path=PATH  set path to store\n                                     http client request body temporary files\n  --http-proxy-temp-path=PATH        set path to store\n                                     http proxy temporary files\n  --http-fastcgi-temp-path=PATH      set path to store\n                                     http fastcgi temporary files\n  --http-uwsgi-temp-path=PATH        set path to store\n                                     http uwsgi temporary files\n  --http-scgi-temp-path=PATH         set path to store\n                                     http scgi temporary files\n\n  --without-http                     disable HTTP server\n  --without-http-cache               disable HTTP cache\n\n  --with-mail                        enable POP3/IMAP4/SMTP proxy module\n  --with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module\n  --with-mail_ssl_module             enable ngx_mail_ssl_module\n  --without-mail_pop3_module         disable ngx_mail_pop3_module\n  --without-mail_imap_module         disable ngx_mail_imap_module\n  --without-mail_smtp_module         disable ngx_mail_smtp_module\n\n  --with-stream                      enable TCP/UDP proxy module\n  --with-stream=dynamic              enable dynamic TCP/UDP proxy module\n  --with-stream_ssl_module           enable ngx_stream_ssl_module\n  --with-stream_realip_module        enable ngx_stream_realip_module\n  --with-stream_geoip_module         enable ngx_stream_geoip_module\n  --with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module\n  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module\n  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module\n  --without-stream_access_module     disable ngx_stream_access_module\n  --without-stream_geo_module        disable ngx_stream_geo_module\n  --without-stream_map_module        disable ngx_stream_map_module\n  --without-stream_split_clients_module\n                                     disable ngx_stream_split_clients_module\n  --without-stream_return_module     disable ngx_stream_return_module\n  --without-stream_upstream_hash_module\n                                     disable ngx_stream_upstream_hash_module\n  --without-stream_upstream_least_conn_module\n                                     disable ngx_stream_upstream_least_conn_module\n  --without-stream_upstream_random_module\n                                     disable ngx_stream_upstream_random_module\n  --without-stream_upstream_zone_module\n                                     disable ngx_stream_upstream_zone_module\n\n  --with-google_perftools_module     enable ngx_google_perftools_module\n  --with-cpp_test_module             enable ngx_cpp_test_module\n\n  --add-module=PATH                  enable external module\n  --add-dynamic-module=PATH          enable dynamic external module\n\n  --with-compat                      dynamic modules compatibility\n\n  --with-cc=PATH                     set C compiler pathname\n  --with-cpp=PATH                    set C preprocessor pathname\n  --with-cc-opt=OPTIONS              set additional C compiler options\n  --with-ld-opt=OPTIONS              set additional linker options\n  --with-cpu-opt=CPU                 build for the specified CPU, valid values:\n                                     pentium, pentiumpro, pentium3, pentium4,\n                                     athlon, opteron, sparc32, sparc64, ppc64\n\n  --without-pcre                     disable PCRE library usage\n  --with-pcre                        force PCRE library usage\n  --with-pcre=DIR                    set path to PCRE library sources\n  --with-pcre-opt=OPTIONS            set additional build options for PCRE\n  --with-pcre-jit                    build PCRE with JIT compilation support\n\n  --with-zlib=DIR                    set path to zlib library sources\n  --with-zlib-opt=OPTIONS            set additional build options for zlib\n  --with-zlib-asm=CPU                use zlib assembler sources optimized\n                                     for the specified CPU, valid values:\n                                     pentium, pentiumpro\n\n  --with-libatomic                   force libatomic_ops library usage\n  --with-libatomic=DIR               set path to libatomic_ops library sources\n\n  --with-openssl=DIR                 set path to OpenSSL library sources\n  --with-openssl-opt=OPTIONS         set additional build options for OpenSSL\n\n  --with-debug                       enable debug logging\n\n```\n从上面的帮助可以看到，主要的编译配置分为3类\n- 配置文件位置指定\n- 指定使用和不使用的模块with（增加编译）、without（移除编译）\n- 优化参数、第三方模块，日志位置等\n\n``` bash\n#编译,指定位置\n./configure --prefix=/home/nginx\n```\n可能会出现报错\n``` bash\n./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=<path> option.\n```\n根据提示，可以安装对应的库，或者在编译的时候选择移除对应的模块，或者选择从源码编译\n``` bash\n#安装 pcre library\nyum -y install pcre-devel\n```\n\n再次编译提示缺少 zlib\n``` bash\n./configure: error: the HTTP gzip module requires the zlib library.\nYou can either disable the module by using --without-http_gzip_module\noption, or install the zlib library into the system, or build the zlib library\nstatically from the source with nginx by using --with-zlib=<path> option.\n```\n\n``` bash\n# 安装zlib library\nyum -y install zlib-devel\n```\n\n再次编译以后，提示编译成功,以及nginx 相关的路径、模块等目录\n``` bash\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/home/nginx\"\n  nginx binary file: \"/home/nginx/sbin/nginx\"\n  nginx modules path: \"/home/nginx/modules\"\n  nginx configuration prefix: \"/home/nginx/conf\"\n  nginx configuration file: \"/home/nginx/conf/nginx.conf\"\n  nginx pid file: \"/home/nginx/logs/nginx.pid\"\n  nginx error log file: \"/home/nginx/logs/error.log\"\n  nginx http access log file: \"/home/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n编译生成了中间文件 `objs`,通过查看`ngx_modules.c`,可以知道nginx编译了哪些模块\n执行`make`编译`make install` 安装\n安装完成进入 `/home/nginx/`启动nginx以后\n``` bash\n.\n├── client_body_temp\n├── conf\n├── fastcgi_temp\n├── html\n├── logs\n├── proxy_temp\n├── sbin\n├── scgi_temp\n└── uwsgi_temp\n```\n就可以看到所有的目录以及文件了。\n\n在生产环境中，要根据实际的情况增加第三方模块\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/nginx-study-1.md","raw":"---\ntitle: Nginx 学习日志 1\ndate: 2020-06-05 15:36:53\ncategories: Linux\ntags: Nginx\n---\n\n### 回顾\n之前的时候写过`Centos yum 安装nginx 后增加模块`,源码安装的时候一笔带过，最近在学习Nginx其中的一些知识点，所以记录一下手动安装的过程，以及相关的配置。<!--more-->\n### 安装\nNginx 一般可以去官网下载，[Nginx](https://www.nginx.org),Nginx也有对应的商业版本[Nginx Plus](https://www.nginx.com/), 还有一些其他的基于Nginx开发的版本，[Tengine](https://tengine.taobao.org/)和[OpenResty](http://openresty.org/)都是比较有名的。\n#### 下载\n[Nginx下载](https://nginx.org/en/download.html),如下图，进入到下载页面，使用`stable version`稳定版。\n![nginx](WX20200605-151113@2x.png)\n``` bash\n#下载\nwget https://nginx.org/download/nginx-1.18.0.tar.gz\n\n```\n#### 解压\n``` bash\n#解压\ntar -xzf nginx-1.18.0.tar.gz\n```\n### 目录说明\n``` bash\n\ncd nginx-1.18.0/\n\ntree -L 1 (查看1层目录，如果没有tree 命令 yum -y install tree 进行安装 )\n\n.\n├── auto         # 编译、lib库、操作系统判断\n├── CHANGES      # feature、版本变更、bugfix\n├── CHANGES.ru   # 俄语changes\n├── conf         # 示例文件\n├── configure    # 生成中间文件\n├── contrib      # vim等相关配置\n├── html         # 标准文件页面50\n├── LICENSE      # LICENSE\n├── man          # 帮助文件\n├── README       #\n└── src          # 源码\n\n\n# 复制vim 配置，可以让nginx配置显示颜色，更加方便的配置\ncp -r contrib/vim/* ~/.vim/\n\n```\n\n#### 编译\n\n``` bash\n#查看编译配置\n./configure --help | cat\n  --help                             print this message\n\n  --prefix=PATH                      set installation prefix\n  --sbin-path=PATH                   set nginx binary pathname\n  --modules-path=PATH                set modules path\n  --conf-path=PATH                   set nginx.conf pathname\n  --error-log-path=PATH              set error log pathname\n  --pid-path=PATH                    set nginx.pid pathname\n  --lock-path=PATH                   set nginx.lock pathname\n\n  --user=USER                        set non-privileged user for\n                                     worker processes\n  --group=GROUP                      set non-privileged group for\n                                     worker processes\n\n  --build=NAME                       set build name\n  --builddir=DIR                     set build directory\n\n  --with-select_module               enable select module\n  --without-select_module            disable select module\n  --with-poll_module                 enable poll module\n  --without-poll_module              disable poll module\n\n  --with-threads                     enable thread pool support\n\n  --with-file-aio                    enable file AIO support\n\n  --with-http_ssl_module             enable ngx_http_ssl_module\n  --with-http_v2_module              enable ngx_http_v2_module\n  --with-http_realip_module          enable ngx_http_realip_module\n  --with-http_addition_module        enable ngx_http_addition_module\n  --with-http_xslt_module            enable ngx_http_xslt_module\n  --with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module\n  --with-http_image_filter_module    enable ngx_http_image_filter_module\n  --with-http_image_filter_module=dynamic\n                                     enable dynamic ngx_http_image_filter_module\n  --with-http_geoip_module           enable ngx_http_geoip_module\n  --with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module\n  --with-http_sub_module             enable ngx_http_sub_module\n  --with-http_dav_module             enable ngx_http_dav_module\n  --with-http_flv_module             enable ngx_http_flv_module\n  --with-http_mp4_module             enable ngx_http_mp4_module\n  --with-http_gunzip_module          enable ngx_http_gunzip_module\n  --with-http_gzip_static_module     enable ngx_http_gzip_static_module\n  --with-http_auth_request_module    enable ngx_http_auth_request_module\n  --with-http_random_index_module    enable ngx_http_random_index_module\n  --with-http_secure_link_module     enable ngx_http_secure_link_module\n  --with-http_degradation_module     enable ngx_http_degradation_module\n  --with-http_slice_module           enable ngx_http_slice_module\n  --with-http_stub_status_module     enable ngx_http_stub_status_module\n\n  --without-http_charset_module      disable ngx_http_charset_module\n  --without-http_gzip_module         disable ngx_http_gzip_module\n  --without-http_ssi_module          disable ngx_http_ssi_module\n  --without-http_userid_module       disable ngx_http_userid_module\n  --without-http_access_module       disable ngx_http_access_module\n  --without-http_auth_basic_module   disable ngx_http_auth_basic_module\n  --without-http_mirror_module       disable ngx_http_mirror_module\n  --without-http_autoindex_module    disable ngx_http_autoindex_module\n  --without-http_geo_module          disable ngx_http_geo_module\n  --without-http_map_module          disable ngx_http_map_module\n  --without-http_split_clients_module disable ngx_http_split_clients_module\n  --without-http_referer_module      disable ngx_http_referer_module\n  --without-http_rewrite_module      disable ngx_http_rewrite_module\n  --without-http_proxy_module        disable ngx_http_proxy_module\n  --without-http_fastcgi_module      disable ngx_http_fastcgi_module\n  --without-http_uwsgi_module        disable ngx_http_uwsgi_module\n  --without-http_scgi_module         disable ngx_http_scgi_module\n  --without-http_grpc_module         disable ngx_http_grpc_module\n  --without-http_memcached_module    disable ngx_http_memcached_module\n  --without-http_limit_conn_module   disable ngx_http_limit_conn_module\n  --without-http_limit_req_module    disable ngx_http_limit_req_module\n  --without-http_empty_gif_module    disable ngx_http_empty_gif_module\n  --without-http_browser_module      disable ngx_http_browser_module\n  --without-http_upstream_hash_module\n                                     disable ngx_http_upstream_hash_module\n  --without-http_upstream_ip_hash_module\n                                     disable ngx_http_upstream_ip_hash_module\n  --without-http_upstream_least_conn_module\n                                     disable ngx_http_upstream_least_conn_module\n  --without-http_upstream_random_module\n                                     disable ngx_http_upstream_random_module\n  --without-http_upstream_keepalive_module\n                                     disable ngx_http_upstream_keepalive_module\n  --without-http_upstream_zone_module\n                                     disable ngx_http_upstream_zone_module\n\n  --with-http_perl_module            enable ngx_http_perl_module\n  --with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module\n  --with-perl_modules_path=PATH      set Perl modules path\n  --with-perl=PATH                   set perl binary pathname\n\n  --http-log-path=PATH               set http access log pathname\n  --http-client-body-temp-path=PATH  set path to store\n                                     http client request body temporary files\n  --http-proxy-temp-path=PATH        set path to store\n                                     http proxy temporary files\n  --http-fastcgi-temp-path=PATH      set path to store\n                                     http fastcgi temporary files\n  --http-uwsgi-temp-path=PATH        set path to store\n                                     http uwsgi temporary files\n  --http-scgi-temp-path=PATH         set path to store\n                                     http scgi temporary files\n\n  --without-http                     disable HTTP server\n  --without-http-cache               disable HTTP cache\n\n  --with-mail                        enable POP3/IMAP4/SMTP proxy module\n  --with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module\n  --with-mail_ssl_module             enable ngx_mail_ssl_module\n  --without-mail_pop3_module         disable ngx_mail_pop3_module\n  --without-mail_imap_module         disable ngx_mail_imap_module\n  --without-mail_smtp_module         disable ngx_mail_smtp_module\n\n  --with-stream                      enable TCP/UDP proxy module\n  --with-stream=dynamic              enable dynamic TCP/UDP proxy module\n  --with-stream_ssl_module           enable ngx_stream_ssl_module\n  --with-stream_realip_module        enable ngx_stream_realip_module\n  --with-stream_geoip_module         enable ngx_stream_geoip_module\n  --with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module\n  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module\n  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module\n  --without-stream_access_module     disable ngx_stream_access_module\n  --without-stream_geo_module        disable ngx_stream_geo_module\n  --without-stream_map_module        disable ngx_stream_map_module\n  --without-stream_split_clients_module\n                                     disable ngx_stream_split_clients_module\n  --without-stream_return_module     disable ngx_stream_return_module\n  --without-stream_upstream_hash_module\n                                     disable ngx_stream_upstream_hash_module\n  --without-stream_upstream_least_conn_module\n                                     disable ngx_stream_upstream_least_conn_module\n  --without-stream_upstream_random_module\n                                     disable ngx_stream_upstream_random_module\n  --without-stream_upstream_zone_module\n                                     disable ngx_stream_upstream_zone_module\n\n  --with-google_perftools_module     enable ngx_google_perftools_module\n  --with-cpp_test_module             enable ngx_cpp_test_module\n\n  --add-module=PATH                  enable external module\n  --add-dynamic-module=PATH          enable dynamic external module\n\n  --with-compat                      dynamic modules compatibility\n\n  --with-cc=PATH                     set C compiler pathname\n  --with-cpp=PATH                    set C preprocessor pathname\n  --with-cc-opt=OPTIONS              set additional C compiler options\n  --with-ld-opt=OPTIONS              set additional linker options\n  --with-cpu-opt=CPU                 build for the specified CPU, valid values:\n                                     pentium, pentiumpro, pentium3, pentium4,\n                                     athlon, opteron, sparc32, sparc64, ppc64\n\n  --without-pcre                     disable PCRE library usage\n  --with-pcre                        force PCRE library usage\n  --with-pcre=DIR                    set path to PCRE library sources\n  --with-pcre-opt=OPTIONS            set additional build options for PCRE\n  --with-pcre-jit                    build PCRE with JIT compilation support\n\n  --with-zlib=DIR                    set path to zlib library sources\n  --with-zlib-opt=OPTIONS            set additional build options for zlib\n  --with-zlib-asm=CPU                use zlib assembler sources optimized\n                                     for the specified CPU, valid values:\n                                     pentium, pentiumpro\n\n  --with-libatomic                   force libatomic_ops library usage\n  --with-libatomic=DIR               set path to libatomic_ops library sources\n\n  --with-openssl=DIR                 set path to OpenSSL library sources\n  --with-openssl-opt=OPTIONS         set additional build options for OpenSSL\n\n  --with-debug                       enable debug logging\n\n```\n从上面的帮助可以看到，主要的编译配置分为3类\n- 配置文件位置指定\n- 指定使用和不使用的模块with（增加编译）、without（移除编译）\n- 优化参数、第三方模块，日志位置等\n\n``` bash\n#编译,指定位置\n./configure --prefix=/home/nginx\n```\n可能会出现报错\n``` bash\n./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=<path> option.\n```\n根据提示，可以安装对应的库，或者在编译的时候选择移除对应的模块，或者选择从源码编译\n``` bash\n#安装 pcre library\nyum -y install pcre-devel\n```\n\n再次编译提示缺少 zlib\n``` bash\n./configure: error: the HTTP gzip module requires the zlib library.\nYou can either disable the module by using --without-http_gzip_module\noption, or install the zlib library into the system, or build the zlib library\nstatically from the source with nginx by using --with-zlib=<path> option.\n```\n\n``` bash\n# 安装zlib library\nyum -y install zlib-devel\n```\n\n再次编译以后，提示编译成功,以及nginx 相关的路径、模块等目录\n``` bash\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/home/nginx\"\n  nginx binary file: \"/home/nginx/sbin/nginx\"\n  nginx modules path: \"/home/nginx/modules\"\n  nginx configuration prefix: \"/home/nginx/conf\"\n  nginx configuration file: \"/home/nginx/conf/nginx.conf\"\n  nginx pid file: \"/home/nginx/logs/nginx.pid\"\n  nginx error log file: \"/home/nginx/logs/error.log\"\n  nginx http access log file: \"/home/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n编译生成了中间文件 `objs`,通过查看`ngx_modules.c`,可以知道nginx编译了哪些模块\n执行`make`编译`make install` 安装\n安装完成进入 `/home/nginx/`启动nginx以后\n``` bash\n.\n├── client_body_temp\n├── conf\n├── fastcgi_temp\n├── html\n├── logs\n├── proxy_temp\n├── sbin\n├── scgi_temp\n└── uwsgi_temp\n```\n就可以看到所有的目录以及文件了。\n\n在生产环境中，要根据实际的情况增加第三方模块\n\n\n\n\n\n\n\n\n\n\n\n","slug":"nginx-study-1","published":1,"updated":"2020-06-10T02:32:31.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d70033eos6dbxn5gj9","content":"<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>之前的时候写过<code>Centos yum 安装nginx 后增加模块</code>,源码安装的时候一笔带过，最近在学习Nginx其中的一些知识点，所以记录一下手动安装的过程，以及相关的配置。<a id=\"more\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Nginx 一般可以去官网下载，<a href=\"https://www.nginx.org\" target=\"_blank\" rel=\"noopener\">Nginx</a>,Nginx也有对应的商业版本<a href=\"https://www.nginx.com/\" target=\"_blank\" rel=\"noopener\">Nginx Plus</a>, 还有一些其他的基于Nginx开发的版本，<a href=\"https://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener\">Tengine</a>和<a href=\"http://openresty.org/\" target=\"_blank\" rel=\"noopener\">OpenResty</a>都是比较有名的。</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p><a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">Nginx下载</a>,如下图，进入到下载页面，使用<code>stable version</code>稳定版。<br><img src=\"WX20200605-151113@2x.png\" alt=\"nginx\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\">tar -xzf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.18.0/</span><br><span class=\"line\"></span><br><span class=\"line\">tree -L 1 (查看1层目录，如果没有tree 命令 yum -y install tree 进行安装 )</span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\">├── auto         <span class=\"comment\"># 编译、lib库、操作系统判断</span></span><br><span class=\"line\">├── CHANGES      <span class=\"comment\"># feature、版本变更、bugfix</span></span><br><span class=\"line\">├── CHANGES.ru   <span class=\"comment\"># 俄语changes</span></span><br><span class=\"line\">├── conf         <span class=\"comment\"># 示例文件</span></span><br><span class=\"line\">├── configure    <span class=\"comment\"># 生成中间文件</span></span><br><span class=\"line\">├── contrib      <span class=\"comment\"># vim等相关配置</span></span><br><span class=\"line\">├── html         <span class=\"comment\"># 标准文件页面50</span></span><br><span class=\"line\">├── LICENSE      <span class=\"comment\"># LICENSE</span></span><br><span class=\"line\">├── man          <span class=\"comment\"># 帮助文件</span></span><br><span class=\"line\">├── README       <span class=\"comment\">#</span></span><br><span class=\"line\">└── src          <span class=\"comment\"># 源码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制vim 配置，可以让nginx配置显示颜色，更加方便的配置</span></span><br><span class=\"line\">cp -r contrib/vim/* ~/.vim/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看编译配置</span></span><br><span class=\"line\">./configure --<span class=\"built_in\">help</span> | cat</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>                             <span class=\"built_in\">print</span> this message</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=PATH                      <span class=\"built_in\">set</span> installation prefix</span><br><span class=\"line\">  --sbin-path=PATH                   <span class=\"built_in\">set</span> nginx binary pathname</span><br><span class=\"line\">  --modules-path=PATH                <span class=\"built_in\">set</span> modules path</span><br><span class=\"line\">  --conf-path=PATH                   <span class=\"built_in\">set</span> nginx.conf pathname</span><br><span class=\"line\">  --error-log-path=PATH              <span class=\"built_in\">set</span> error <span class=\"built_in\">log</span> pathname</span><br><span class=\"line\">  --pid-path=PATH                    <span class=\"built_in\">set</span> nginx.pid pathname</span><br><span class=\"line\">  --lock-path=PATH                   <span class=\"built_in\">set</span> nginx.lock pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --user=USER                        <span class=\"built_in\">set</span> non-privileged user <span class=\"keyword\">for</span></span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\">  --group=GROUP                      <span class=\"built_in\">set</span> non-privileged group <span class=\"keyword\">for</span></span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\"></span><br><span class=\"line\">  --build=NAME                       <span class=\"built_in\">set</span> build name</span><br><span class=\"line\">  --builddir=DIR                     <span class=\"built_in\">set</span> build directory</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-select_module               <span class=\"built_in\">enable</span> select module</span><br><span class=\"line\">  --without-select_module            <span class=\"built_in\">disable</span> select module</span><br><span class=\"line\">  --with-poll_module                 <span class=\"built_in\">enable</span> poll module</span><br><span class=\"line\">  --without-poll_module              <span class=\"built_in\">disable</span> poll module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-threads                     <span class=\"built_in\">enable</span> thread pool support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-file-aio                    <span class=\"built_in\">enable</span> file AIO support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_ssl_module             <span class=\"built_in\">enable</span> ngx_http_ssl_module</span><br><span class=\"line\">  --with-http_v2_module              <span class=\"built_in\">enable</span> ngx_http_v2_module</span><br><span class=\"line\">  --with-http_realip_module          <span class=\"built_in\">enable</span> ngx_http_realip_module</span><br><span class=\"line\">  --with-http_addition_module        <span class=\"built_in\">enable</span> ngx_http_addition_module</span><br><span class=\"line\">  --with-http_xslt_module            <span class=\"built_in\">enable</span> ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_xslt_module=dynamic    <span class=\"built_in\">enable</span> dynamic ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_image_filter_module    <span class=\"built_in\">enable</span> ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_image_filter_module=dynamic</span><br><span class=\"line\">                                     <span class=\"built_in\">enable</span> dynamic ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_geoip_module           <span class=\"built_in\">enable</span> ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_geoip_module=dynamic   <span class=\"built_in\">enable</span> dynamic ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_sub_module             <span class=\"built_in\">enable</span> ngx_http_sub_module</span><br><span class=\"line\">  --with-http_dav_module             <span class=\"built_in\">enable</span> ngx_http_dav_module</span><br><span class=\"line\">  --with-http_flv_module             <span class=\"built_in\">enable</span> ngx_http_flv_module</span><br><span class=\"line\">  --with-http_mp4_module             <span class=\"built_in\">enable</span> ngx_http_mp4_module</span><br><span class=\"line\">  --with-http_gunzip_module          <span class=\"built_in\">enable</span> ngx_http_gunzip_module</span><br><span class=\"line\">  --with-http_gzip_static_module     <span class=\"built_in\">enable</span> ngx_http_gzip_static_module</span><br><span class=\"line\">  --with-http_auth_request_module    <span class=\"built_in\">enable</span> ngx_http_auth_request_module</span><br><span class=\"line\">  --with-http_random_index_module    <span class=\"built_in\">enable</span> ngx_http_random_index_module</span><br><span class=\"line\">  --with-http_secure_link_module     <span class=\"built_in\">enable</span> ngx_http_secure_link_module</span><br><span class=\"line\">  --with-http_degradation_module     <span class=\"built_in\">enable</span> ngx_http_degradation_module</span><br><span class=\"line\">  --with-http_slice_module           <span class=\"built_in\">enable</span> ngx_http_slice_module</span><br><span class=\"line\">  --with-http_stub_status_module     <span class=\"built_in\">enable</span> ngx_http_stub_status_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http_charset_module      <span class=\"built_in\">disable</span> ngx_http_charset_module</span><br><span class=\"line\">  --without-http_gzip_module         <span class=\"built_in\">disable</span> ngx_http_gzip_module</span><br><span class=\"line\">  --without-http_ssi_module          <span class=\"built_in\">disable</span> ngx_http_ssi_module</span><br><span class=\"line\">  --without-http_userid_module       <span class=\"built_in\">disable</span> ngx_http_userid_module</span><br><span class=\"line\">  --without-http_access_module       <span class=\"built_in\">disable</span> ngx_http_access_module</span><br><span class=\"line\">  --without-http_auth_basic_module   <span class=\"built_in\">disable</span> ngx_http_auth_basic_module</span><br><span class=\"line\">  --without-http_mirror_module       <span class=\"built_in\">disable</span> ngx_http_mirror_module</span><br><span class=\"line\">  --without-http_autoindex_module    <span class=\"built_in\">disable</span> ngx_http_autoindex_module</span><br><span class=\"line\">  --without-http_geo_module          <span class=\"built_in\">disable</span> ngx_http_geo_module</span><br><span class=\"line\">  --without-http_map_module          <span class=\"built_in\">disable</span> ngx_http_map_module</span><br><span class=\"line\">  --without-http_split_clients_module <span class=\"built_in\">disable</span> ngx_http_split_clients_module</span><br><span class=\"line\">  --without-http_referer_module      <span class=\"built_in\">disable</span> ngx_http_referer_module</span><br><span class=\"line\">  --without-http_rewrite_module      <span class=\"built_in\">disable</span> ngx_http_rewrite_module</span><br><span class=\"line\">  --without-http_proxy_module        <span class=\"built_in\">disable</span> ngx_http_proxy_module</span><br><span class=\"line\">  --without-http_fastcgi_module      <span class=\"built_in\">disable</span> ngx_http_fastcgi_module</span><br><span class=\"line\">  --without-http_uwsgi_module        <span class=\"built_in\">disable</span> ngx_http_uwsgi_module</span><br><span class=\"line\">  --without-http_scgi_module         <span class=\"built_in\">disable</span> ngx_http_scgi_module</span><br><span class=\"line\">  --without-http_grpc_module         <span class=\"built_in\">disable</span> ngx_http_grpc_module</span><br><span class=\"line\">  --without-http_memcached_module    <span class=\"built_in\">disable</span> ngx_http_memcached_module</span><br><span class=\"line\">  --without-http_limit_conn_module   <span class=\"built_in\">disable</span> ngx_http_limit_conn_module</span><br><span class=\"line\">  --without-http_limit_req_module    <span class=\"built_in\">disable</span> ngx_http_limit_req_module</span><br><span class=\"line\">  --without-http_empty_gif_module    <span class=\"built_in\">disable</span> ngx_http_empty_gif_module</span><br><span class=\"line\">  --without-http_browser_module      <span class=\"built_in\">disable</span> ngx_http_browser_module</span><br><span class=\"line\">  --without-http_upstream_hash_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_hash_module</span><br><span class=\"line\">  --without-http_upstream_ip_hash_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_ip_hash_module</span><br><span class=\"line\">  --without-http_upstream_least_conn_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_least_conn_module</span><br><span class=\"line\">  --without-http_upstream_random_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_random_module</span><br><span class=\"line\">  --without-http_upstream_keepalive_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_keepalive_module</span><br><span class=\"line\">  --without-http_upstream_zone_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_perl_module            <span class=\"built_in\">enable</span> ngx_http_perl_module</span><br><span class=\"line\">  --with-http_perl_module=dynamic    <span class=\"built_in\">enable</span> dynamic ngx_http_perl_module</span><br><span class=\"line\">  --with-perl_modules_path=PATH      <span class=\"built_in\">set</span> Perl modules path</span><br><span class=\"line\">  --with-perl=PATH                   <span class=\"built_in\">set</span> perl binary pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --http-log-path=PATH               <span class=\"built_in\">set</span> http access <span class=\"built_in\">log</span> pathname</span><br><span class=\"line\">  --http-client-body-temp-path=PATH  <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http client request body temporary files</span><br><span class=\"line\">  --http-proxy-temp-path=PATH        <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http proxy temporary files</span><br><span class=\"line\">  --http-fastcgi-temp-path=PATH      <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http fastcgi temporary files</span><br><span class=\"line\">  --http-uwsgi-temp-path=PATH        <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http uwsgi temporary files</span><br><span class=\"line\">  --http-scgi-temp-path=PATH         <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http scgi temporary files</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http                     <span class=\"built_in\">disable</span> HTTP server</span><br><span class=\"line\">  --without-http-cache               <span class=\"built_in\">disable</span> HTTP cache</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-mail                        <span class=\"built_in\">enable</span> POP3/IMAP4/SMTP proxy module</span><br><span class=\"line\">  --with-mail=dynamic                <span class=\"built_in\">enable</span> dynamic POP3/IMAP4/SMTP proxy module</span><br><span class=\"line\">  --with-mail_ssl_module             <span class=\"built_in\">enable</span> ngx_mail_ssl_module</span><br><span class=\"line\">  --without-mail_pop3_module         <span class=\"built_in\">disable</span> ngx_mail_pop3_module</span><br><span class=\"line\">  --without-mail_imap_module         <span class=\"built_in\">disable</span> ngx_mail_imap_module</span><br><span class=\"line\">  --without-mail_smtp_module         <span class=\"built_in\">disable</span> ngx_mail_smtp_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-stream                      <span class=\"built_in\">enable</span> TCP/UDP proxy module</span><br><span class=\"line\">  --with-stream=dynamic              <span class=\"built_in\">enable</span> dynamic TCP/UDP proxy module</span><br><span class=\"line\">  --with-stream_ssl_module           <span class=\"built_in\">enable</span> ngx_stream_ssl_module</span><br><span class=\"line\">  --with-stream_realip_module        <span class=\"built_in\">enable</span> ngx_stream_realip_module</span><br><span class=\"line\">  --with-stream_geoip_module         <span class=\"built_in\">enable</span> ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_geoip_module=dynamic <span class=\"built_in\">enable</span> dynamic ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_ssl_preread_module   <span class=\"built_in\">enable</span> ngx_stream_ssl_preread_module</span><br><span class=\"line\">  --without-stream_limit_conn_module <span class=\"built_in\">disable</span> ngx_stream_limit_conn_module</span><br><span class=\"line\">  --without-stream_access_module     <span class=\"built_in\">disable</span> ngx_stream_access_module</span><br><span class=\"line\">  --without-stream_geo_module        <span class=\"built_in\">disable</span> ngx_stream_geo_module</span><br><span class=\"line\">  --without-stream_map_module        <span class=\"built_in\">disable</span> ngx_stream_map_module</span><br><span class=\"line\">  --without-stream_split_clients_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_split_clients_module</span><br><span class=\"line\">  --without-stream_return_module     <span class=\"built_in\">disable</span> ngx_stream_return_module</span><br><span class=\"line\">  --without-stream_upstream_hash_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_hash_module</span><br><span class=\"line\">  --without-stream_upstream_least_conn_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_least_conn_module</span><br><span class=\"line\">  --without-stream_upstream_random_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_random_module</span><br><span class=\"line\">  --without-stream_upstream_zone_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-google_perftools_module     <span class=\"built_in\">enable</span> ngx_google_perftools_module</span><br><span class=\"line\">  --with-cpp_test_module             <span class=\"built_in\">enable</span> ngx_cpp_test_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --add-module=PATH                  <span class=\"built_in\">enable</span> external module</span><br><span class=\"line\">  --add-dynamic-module=PATH          <span class=\"built_in\">enable</span> dynamic external module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-compat                      dynamic modules compatibility</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-cc=PATH                     <span class=\"built_in\">set</span> C compiler pathname</span><br><span class=\"line\">  --with-cpp=PATH                    <span class=\"built_in\">set</span> C preprocessor pathname</span><br><span class=\"line\">  --with-cc-opt=OPTIONS              <span class=\"built_in\">set</span> additional C compiler options</span><br><span class=\"line\">  --with-ld-opt=OPTIONS              <span class=\"built_in\">set</span> additional linker options</span><br><span class=\"line\">  --with-cpu-opt=CPU                 build <span class=\"keyword\">for</span> the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class=\"line\">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-pcre                     <span class=\"built_in\">disable</span> PCRE library usage</span><br><span class=\"line\">  --with-pcre                        force PCRE library usage</span><br><span class=\"line\">  --with-pcre=DIR                    <span class=\"built_in\">set</span> path to PCRE library sources</span><br><span class=\"line\">  --with-pcre-opt=OPTIONS            <span class=\"built_in\">set</span> additional build options <span class=\"keyword\">for</span> PCRE</span><br><span class=\"line\">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-zlib=DIR                    <span class=\"built_in\">set</span> path to zlib library sources</span><br><span class=\"line\">  --with-zlib-opt=OPTIONS            <span class=\"built_in\">set</span> additional build options <span class=\"keyword\">for</span> zlib</span><br><span class=\"line\">  --with-zlib-asm=CPU                use zlib assembler sources optimized</span><br><span class=\"line\">                                     <span class=\"keyword\">for</span> the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-libatomic                   force libatomic_ops library usage</span><br><span class=\"line\">  --with-libatomic=DIR               <span class=\"built_in\">set</span> path to libatomic_ops library sources</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-openssl=DIR                 <span class=\"built_in\">set</span> path to OpenSSL library sources</span><br><span class=\"line\">  --with-openssl-opt=OPTIONS         <span class=\"built_in\">set</span> additional build options <span class=\"keyword\">for</span> OpenSSL</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-debug                       <span class=\"built_in\">enable</span> debug logging</span><br></pre></td></tr></table></figure>\n<p>从上面的帮助可以看到，主要的编译配置分为3类</p>\n<ul>\n<li>配置文件位置指定</li>\n<li>指定使用和不使用的模块with（增加编译）、without（移除编译）</li>\n<li>优化参数、第三方模块，日志位置等</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编译,指定位置</span></span><br><span class=\"line\">./configure --prefix=/home/nginx</span><br></pre></td></tr></table></figure>\n<p>可能会出现报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class=\"line\">You can either <span class=\"built_in\">disable</span> the module by using --without-http_rewrite_module</span><br><span class=\"line\">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class=\"line\">statically from the <span class=\"built_in\">source</span> with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>\n<p>根据提示，可以安装对应的库，或者在编译的时候选择移除对应的模块，或者选择从源码编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装 pcre library</span></span><br><span class=\"line\">yum -y install pcre-devel</span><br></pre></td></tr></table></figure>\n\n<p>再次编译提示缺少 zlib</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class=\"line\">You can either <span class=\"built_in\">disable</span> the module by using --without-http_gzip_module</span><br><span class=\"line\">option, or install the zlib library into the system, or build the zlib library</span><br><span class=\"line\">statically from the <span class=\"built_in\">source</span> with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装zlib library</span></span><br><span class=\"line\">yum -y install zlib-devel</span><br></pre></td></tr></table></figure>\n\n<p>再次编译以后，提示编译成功,以及nginx 相关的路径、模块等目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + OpenSSL library is not used</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: <span class=\"string\">\"/home/nginx\"</span></span><br><span class=\"line\">  nginx binary file: <span class=\"string\">\"/home/nginx/sbin/nginx\"</span></span><br><span class=\"line\">  nginx modules path: <span class=\"string\">\"/home/nginx/modules\"</span></span><br><span class=\"line\">  nginx configuration prefix: <span class=\"string\">\"/home/nginx/conf\"</span></span><br><span class=\"line\">  nginx configuration file: <span class=\"string\">\"/home/nginx/conf/nginx.conf\"</span></span><br><span class=\"line\">  nginx pid file: <span class=\"string\">\"/home/nginx/logs/nginx.pid\"</span></span><br><span class=\"line\">  nginx error <span class=\"built_in\">log</span> file: <span class=\"string\">\"/home/nginx/logs/error.log\"</span></span><br><span class=\"line\">  nginx http access <span class=\"built_in\">log</span> file: <span class=\"string\">\"/home/nginx/logs/access.log\"</span></span><br><span class=\"line\">  nginx http client request body temporary files: <span class=\"string\">\"client_body_temp\"</span></span><br><span class=\"line\">  nginx http proxy temporary files: <span class=\"string\">\"proxy_temp\"</span></span><br><span class=\"line\">  nginx http fastcgi temporary files: <span class=\"string\">\"fastcgi_temp\"</span></span><br><span class=\"line\">  nginx http uwsgi temporary files: <span class=\"string\">\"uwsgi_temp\"</span></span><br><span class=\"line\">  nginx http scgi temporary files: <span class=\"string\">\"scgi_temp\"</span></span><br></pre></td></tr></table></figure>\n<p>编译生成了中间文件 <code>objs</code>,通过查看<code>ngx_modules.c</code>,可以知道nginx编译了哪些模块<br>执行<code>make</code>编译<code>make install</code> 安装<br>安装完成进入 <code>/home/nginx/</code>启动nginx以后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── fastcgi_temp</span><br><span class=\"line\">├── html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">├── proxy_temp</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">├── scgi_temp</span><br><span class=\"line\">└── uwsgi_temp</span><br></pre></td></tr></table></figure>\n<p>就可以看到所有的目录以及文件了。</p>\n<p>在生产环境中，要根据实际的情况增加第三方模块</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>之前的时候写过<code>Centos yum 安装nginx 后增加模块</code>,源码安装的时候一笔带过，最近在学习Nginx其中的一些知识点，所以记录一下手动安装的过程，以及相关的配置。","more":"</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Nginx 一般可以去官网下载，<a href=\"https://www.nginx.org\" target=\"_blank\" rel=\"noopener\">Nginx</a>,Nginx也有对应的商业版本<a href=\"https://www.nginx.com/\" target=\"_blank\" rel=\"noopener\">Nginx Plus</a>, 还有一些其他的基于Nginx开发的版本，<a href=\"https://tengine.taobao.org/\" target=\"_blank\" rel=\"noopener\">Tengine</a>和<a href=\"http://openresty.org/\" target=\"_blank\" rel=\"noopener\">OpenResty</a>都是比较有名的。</p>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p><a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">Nginx下载</a>,如下图，进入到下载页面，使用<code>stable version</code>稳定版。<br><img src=\"WX20200605-151113@2x.png\" alt=\"nginx\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载</span></span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\">tar -xzf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.18.0/</span><br><span class=\"line\"></span><br><span class=\"line\">tree -L 1 (查看1层目录，如果没有tree 命令 yum -y install tree 进行安装 )</span><br><span class=\"line\"></span><br><span class=\"line\">.</span><br><span class=\"line\">├── auto         <span class=\"comment\"># 编译、lib库、操作系统判断</span></span><br><span class=\"line\">├── CHANGES      <span class=\"comment\"># feature、版本变更、bugfix</span></span><br><span class=\"line\">├── CHANGES.ru   <span class=\"comment\"># 俄语changes</span></span><br><span class=\"line\">├── conf         <span class=\"comment\"># 示例文件</span></span><br><span class=\"line\">├── configure    <span class=\"comment\"># 生成中间文件</span></span><br><span class=\"line\">├── contrib      <span class=\"comment\"># vim等相关配置</span></span><br><span class=\"line\">├── html         <span class=\"comment\"># 标准文件页面50</span></span><br><span class=\"line\">├── LICENSE      <span class=\"comment\"># LICENSE</span></span><br><span class=\"line\">├── man          <span class=\"comment\"># 帮助文件</span></span><br><span class=\"line\">├── README       <span class=\"comment\">#</span></span><br><span class=\"line\">└── src          <span class=\"comment\"># 源码</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制vim 配置，可以让nginx配置显示颜色，更加方便的配置</span></span><br><span class=\"line\">cp -r contrib/vim/* ~/.vim/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看编译配置</span></span><br><span class=\"line\">./configure --<span class=\"built_in\">help</span> | cat</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>                             <span class=\"built_in\">print</span> this message</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=PATH                      <span class=\"built_in\">set</span> installation prefix</span><br><span class=\"line\">  --sbin-path=PATH                   <span class=\"built_in\">set</span> nginx binary pathname</span><br><span class=\"line\">  --modules-path=PATH                <span class=\"built_in\">set</span> modules path</span><br><span class=\"line\">  --conf-path=PATH                   <span class=\"built_in\">set</span> nginx.conf pathname</span><br><span class=\"line\">  --error-log-path=PATH              <span class=\"built_in\">set</span> error <span class=\"built_in\">log</span> pathname</span><br><span class=\"line\">  --pid-path=PATH                    <span class=\"built_in\">set</span> nginx.pid pathname</span><br><span class=\"line\">  --lock-path=PATH                   <span class=\"built_in\">set</span> nginx.lock pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --user=USER                        <span class=\"built_in\">set</span> non-privileged user <span class=\"keyword\">for</span></span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\">  --group=GROUP                      <span class=\"built_in\">set</span> non-privileged group <span class=\"keyword\">for</span></span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\"></span><br><span class=\"line\">  --build=NAME                       <span class=\"built_in\">set</span> build name</span><br><span class=\"line\">  --builddir=DIR                     <span class=\"built_in\">set</span> build directory</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-select_module               <span class=\"built_in\">enable</span> select module</span><br><span class=\"line\">  --without-select_module            <span class=\"built_in\">disable</span> select module</span><br><span class=\"line\">  --with-poll_module                 <span class=\"built_in\">enable</span> poll module</span><br><span class=\"line\">  --without-poll_module              <span class=\"built_in\">disable</span> poll module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-threads                     <span class=\"built_in\">enable</span> thread pool support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-file-aio                    <span class=\"built_in\">enable</span> file AIO support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_ssl_module             <span class=\"built_in\">enable</span> ngx_http_ssl_module</span><br><span class=\"line\">  --with-http_v2_module              <span class=\"built_in\">enable</span> ngx_http_v2_module</span><br><span class=\"line\">  --with-http_realip_module          <span class=\"built_in\">enable</span> ngx_http_realip_module</span><br><span class=\"line\">  --with-http_addition_module        <span class=\"built_in\">enable</span> ngx_http_addition_module</span><br><span class=\"line\">  --with-http_xslt_module            <span class=\"built_in\">enable</span> ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_xslt_module=dynamic    <span class=\"built_in\">enable</span> dynamic ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_image_filter_module    <span class=\"built_in\">enable</span> ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_image_filter_module=dynamic</span><br><span class=\"line\">                                     <span class=\"built_in\">enable</span> dynamic ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_geoip_module           <span class=\"built_in\">enable</span> ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_geoip_module=dynamic   <span class=\"built_in\">enable</span> dynamic ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_sub_module             <span class=\"built_in\">enable</span> ngx_http_sub_module</span><br><span class=\"line\">  --with-http_dav_module             <span class=\"built_in\">enable</span> ngx_http_dav_module</span><br><span class=\"line\">  --with-http_flv_module             <span class=\"built_in\">enable</span> ngx_http_flv_module</span><br><span class=\"line\">  --with-http_mp4_module             <span class=\"built_in\">enable</span> ngx_http_mp4_module</span><br><span class=\"line\">  --with-http_gunzip_module          <span class=\"built_in\">enable</span> ngx_http_gunzip_module</span><br><span class=\"line\">  --with-http_gzip_static_module     <span class=\"built_in\">enable</span> ngx_http_gzip_static_module</span><br><span class=\"line\">  --with-http_auth_request_module    <span class=\"built_in\">enable</span> ngx_http_auth_request_module</span><br><span class=\"line\">  --with-http_random_index_module    <span class=\"built_in\">enable</span> ngx_http_random_index_module</span><br><span class=\"line\">  --with-http_secure_link_module     <span class=\"built_in\">enable</span> ngx_http_secure_link_module</span><br><span class=\"line\">  --with-http_degradation_module     <span class=\"built_in\">enable</span> ngx_http_degradation_module</span><br><span class=\"line\">  --with-http_slice_module           <span class=\"built_in\">enable</span> ngx_http_slice_module</span><br><span class=\"line\">  --with-http_stub_status_module     <span class=\"built_in\">enable</span> ngx_http_stub_status_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http_charset_module      <span class=\"built_in\">disable</span> ngx_http_charset_module</span><br><span class=\"line\">  --without-http_gzip_module         <span class=\"built_in\">disable</span> ngx_http_gzip_module</span><br><span class=\"line\">  --without-http_ssi_module          <span class=\"built_in\">disable</span> ngx_http_ssi_module</span><br><span class=\"line\">  --without-http_userid_module       <span class=\"built_in\">disable</span> ngx_http_userid_module</span><br><span class=\"line\">  --without-http_access_module       <span class=\"built_in\">disable</span> ngx_http_access_module</span><br><span class=\"line\">  --without-http_auth_basic_module   <span class=\"built_in\">disable</span> ngx_http_auth_basic_module</span><br><span class=\"line\">  --without-http_mirror_module       <span class=\"built_in\">disable</span> ngx_http_mirror_module</span><br><span class=\"line\">  --without-http_autoindex_module    <span class=\"built_in\">disable</span> ngx_http_autoindex_module</span><br><span class=\"line\">  --without-http_geo_module          <span class=\"built_in\">disable</span> ngx_http_geo_module</span><br><span class=\"line\">  --without-http_map_module          <span class=\"built_in\">disable</span> ngx_http_map_module</span><br><span class=\"line\">  --without-http_split_clients_module <span class=\"built_in\">disable</span> ngx_http_split_clients_module</span><br><span class=\"line\">  --without-http_referer_module      <span class=\"built_in\">disable</span> ngx_http_referer_module</span><br><span class=\"line\">  --without-http_rewrite_module      <span class=\"built_in\">disable</span> ngx_http_rewrite_module</span><br><span class=\"line\">  --without-http_proxy_module        <span class=\"built_in\">disable</span> ngx_http_proxy_module</span><br><span class=\"line\">  --without-http_fastcgi_module      <span class=\"built_in\">disable</span> ngx_http_fastcgi_module</span><br><span class=\"line\">  --without-http_uwsgi_module        <span class=\"built_in\">disable</span> ngx_http_uwsgi_module</span><br><span class=\"line\">  --without-http_scgi_module         <span class=\"built_in\">disable</span> ngx_http_scgi_module</span><br><span class=\"line\">  --without-http_grpc_module         <span class=\"built_in\">disable</span> ngx_http_grpc_module</span><br><span class=\"line\">  --without-http_memcached_module    <span class=\"built_in\">disable</span> ngx_http_memcached_module</span><br><span class=\"line\">  --without-http_limit_conn_module   <span class=\"built_in\">disable</span> ngx_http_limit_conn_module</span><br><span class=\"line\">  --without-http_limit_req_module    <span class=\"built_in\">disable</span> ngx_http_limit_req_module</span><br><span class=\"line\">  --without-http_empty_gif_module    <span class=\"built_in\">disable</span> ngx_http_empty_gif_module</span><br><span class=\"line\">  --without-http_browser_module      <span class=\"built_in\">disable</span> ngx_http_browser_module</span><br><span class=\"line\">  --without-http_upstream_hash_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_hash_module</span><br><span class=\"line\">  --without-http_upstream_ip_hash_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_ip_hash_module</span><br><span class=\"line\">  --without-http_upstream_least_conn_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_least_conn_module</span><br><span class=\"line\">  --without-http_upstream_random_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_random_module</span><br><span class=\"line\">  --without-http_upstream_keepalive_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_keepalive_module</span><br><span class=\"line\">  --without-http_upstream_zone_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_http_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_perl_module            <span class=\"built_in\">enable</span> ngx_http_perl_module</span><br><span class=\"line\">  --with-http_perl_module=dynamic    <span class=\"built_in\">enable</span> dynamic ngx_http_perl_module</span><br><span class=\"line\">  --with-perl_modules_path=PATH      <span class=\"built_in\">set</span> Perl modules path</span><br><span class=\"line\">  --with-perl=PATH                   <span class=\"built_in\">set</span> perl binary pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --http-log-path=PATH               <span class=\"built_in\">set</span> http access <span class=\"built_in\">log</span> pathname</span><br><span class=\"line\">  --http-client-body-temp-path=PATH  <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http client request body temporary files</span><br><span class=\"line\">  --http-proxy-temp-path=PATH        <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http proxy temporary files</span><br><span class=\"line\">  --http-fastcgi-temp-path=PATH      <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http fastcgi temporary files</span><br><span class=\"line\">  --http-uwsgi-temp-path=PATH        <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http uwsgi temporary files</span><br><span class=\"line\">  --http-scgi-temp-path=PATH         <span class=\"built_in\">set</span> path to store</span><br><span class=\"line\">                                     http scgi temporary files</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http                     <span class=\"built_in\">disable</span> HTTP server</span><br><span class=\"line\">  --without-http-cache               <span class=\"built_in\">disable</span> HTTP cache</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-mail                        <span class=\"built_in\">enable</span> POP3/IMAP4/SMTP proxy module</span><br><span class=\"line\">  --with-mail=dynamic                <span class=\"built_in\">enable</span> dynamic POP3/IMAP4/SMTP proxy module</span><br><span class=\"line\">  --with-mail_ssl_module             <span class=\"built_in\">enable</span> ngx_mail_ssl_module</span><br><span class=\"line\">  --without-mail_pop3_module         <span class=\"built_in\">disable</span> ngx_mail_pop3_module</span><br><span class=\"line\">  --without-mail_imap_module         <span class=\"built_in\">disable</span> ngx_mail_imap_module</span><br><span class=\"line\">  --without-mail_smtp_module         <span class=\"built_in\">disable</span> ngx_mail_smtp_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-stream                      <span class=\"built_in\">enable</span> TCP/UDP proxy module</span><br><span class=\"line\">  --with-stream=dynamic              <span class=\"built_in\">enable</span> dynamic TCP/UDP proxy module</span><br><span class=\"line\">  --with-stream_ssl_module           <span class=\"built_in\">enable</span> ngx_stream_ssl_module</span><br><span class=\"line\">  --with-stream_realip_module        <span class=\"built_in\">enable</span> ngx_stream_realip_module</span><br><span class=\"line\">  --with-stream_geoip_module         <span class=\"built_in\">enable</span> ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_geoip_module=dynamic <span class=\"built_in\">enable</span> dynamic ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_ssl_preread_module   <span class=\"built_in\">enable</span> ngx_stream_ssl_preread_module</span><br><span class=\"line\">  --without-stream_limit_conn_module <span class=\"built_in\">disable</span> ngx_stream_limit_conn_module</span><br><span class=\"line\">  --without-stream_access_module     <span class=\"built_in\">disable</span> ngx_stream_access_module</span><br><span class=\"line\">  --without-stream_geo_module        <span class=\"built_in\">disable</span> ngx_stream_geo_module</span><br><span class=\"line\">  --without-stream_map_module        <span class=\"built_in\">disable</span> ngx_stream_map_module</span><br><span class=\"line\">  --without-stream_split_clients_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_split_clients_module</span><br><span class=\"line\">  --without-stream_return_module     <span class=\"built_in\">disable</span> ngx_stream_return_module</span><br><span class=\"line\">  --without-stream_upstream_hash_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_hash_module</span><br><span class=\"line\">  --without-stream_upstream_least_conn_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_least_conn_module</span><br><span class=\"line\">  --without-stream_upstream_random_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_random_module</span><br><span class=\"line\">  --without-stream_upstream_zone_module</span><br><span class=\"line\">                                     <span class=\"built_in\">disable</span> ngx_stream_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-google_perftools_module     <span class=\"built_in\">enable</span> ngx_google_perftools_module</span><br><span class=\"line\">  --with-cpp_test_module             <span class=\"built_in\">enable</span> ngx_cpp_test_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --add-module=PATH                  <span class=\"built_in\">enable</span> external module</span><br><span class=\"line\">  --add-dynamic-module=PATH          <span class=\"built_in\">enable</span> dynamic external module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-compat                      dynamic modules compatibility</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-cc=PATH                     <span class=\"built_in\">set</span> C compiler pathname</span><br><span class=\"line\">  --with-cpp=PATH                    <span class=\"built_in\">set</span> C preprocessor pathname</span><br><span class=\"line\">  --with-cc-opt=OPTIONS              <span class=\"built_in\">set</span> additional C compiler options</span><br><span class=\"line\">  --with-ld-opt=OPTIONS              <span class=\"built_in\">set</span> additional linker options</span><br><span class=\"line\">  --with-cpu-opt=CPU                 build <span class=\"keyword\">for</span> the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class=\"line\">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-pcre                     <span class=\"built_in\">disable</span> PCRE library usage</span><br><span class=\"line\">  --with-pcre                        force PCRE library usage</span><br><span class=\"line\">  --with-pcre=DIR                    <span class=\"built_in\">set</span> path to PCRE library sources</span><br><span class=\"line\">  --with-pcre-opt=OPTIONS            <span class=\"built_in\">set</span> additional build options <span class=\"keyword\">for</span> PCRE</span><br><span class=\"line\">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-zlib=DIR                    <span class=\"built_in\">set</span> path to zlib library sources</span><br><span class=\"line\">  --with-zlib-opt=OPTIONS            <span class=\"built_in\">set</span> additional build options <span class=\"keyword\">for</span> zlib</span><br><span class=\"line\">  --with-zlib-asm=CPU                use zlib assembler sources optimized</span><br><span class=\"line\">                                     <span class=\"keyword\">for</span> the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-libatomic                   force libatomic_ops library usage</span><br><span class=\"line\">  --with-libatomic=DIR               <span class=\"built_in\">set</span> path to libatomic_ops library sources</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-openssl=DIR                 <span class=\"built_in\">set</span> path to OpenSSL library sources</span><br><span class=\"line\">  --with-openssl-opt=OPTIONS         <span class=\"built_in\">set</span> additional build options <span class=\"keyword\">for</span> OpenSSL</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-debug                       <span class=\"built_in\">enable</span> debug logging</span><br></pre></td></tr></table></figure>\n<p>从上面的帮助可以看到，主要的编译配置分为3类</p>\n<ul>\n<li>配置文件位置指定</li>\n<li>指定使用和不使用的模块with（增加编译）、without（移除编译）</li>\n<li>优化参数、第三方模块，日志位置等</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编译,指定位置</span></span><br><span class=\"line\">./configure --prefix=/home/nginx</span><br></pre></td></tr></table></figure>\n<p>可能会出现报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class=\"line\">You can either <span class=\"built_in\">disable</span> the module by using --without-http_rewrite_module</span><br><span class=\"line\">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class=\"line\">statically from the <span class=\"built_in\">source</span> with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>\n<p>根据提示，可以安装对应的库，或者在编译的时候选择移除对应的模块，或者选择从源码编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装 pcre library</span></span><br><span class=\"line\">yum -y install pcre-devel</span><br></pre></td></tr></table></figure>\n\n<p>再次编译提示缺少 zlib</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class=\"line\">You can either <span class=\"built_in\">disable</span> the module by using --without-http_gzip_module</span><br><span class=\"line\">option, or install the zlib library into the system, or build the zlib library</span><br><span class=\"line\">statically from the <span class=\"built_in\">source</span> with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装zlib library</span></span><br><span class=\"line\">yum -y install zlib-devel</span><br></pre></td></tr></table></figure>\n\n<p>再次编译以后，提示编译成功,以及nginx 相关的路径、模块等目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + OpenSSL library is not used</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: <span class=\"string\">\"/home/nginx\"</span></span><br><span class=\"line\">  nginx binary file: <span class=\"string\">\"/home/nginx/sbin/nginx\"</span></span><br><span class=\"line\">  nginx modules path: <span class=\"string\">\"/home/nginx/modules\"</span></span><br><span class=\"line\">  nginx configuration prefix: <span class=\"string\">\"/home/nginx/conf\"</span></span><br><span class=\"line\">  nginx configuration file: <span class=\"string\">\"/home/nginx/conf/nginx.conf\"</span></span><br><span class=\"line\">  nginx pid file: <span class=\"string\">\"/home/nginx/logs/nginx.pid\"</span></span><br><span class=\"line\">  nginx error <span class=\"built_in\">log</span> file: <span class=\"string\">\"/home/nginx/logs/error.log\"</span></span><br><span class=\"line\">  nginx http access <span class=\"built_in\">log</span> file: <span class=\"string\">\"/home/nginx/logs/access.log\"</span></span><br><span class=\"line\">  nginx http client request body temporary files: <span class=\"string\">\"client_body_temp\"</span></span><br><span class=\"line\">  nginx http proxy temporary files: <span class=\"string\">\"proxy_temp\"</span></span><br><span class=\"line\">  nginx http fastcgi temporary files: <span class=\"string\">\"fastcgi_temp\"</span></span><br><span class=\"line\">  nginx http uwsgi temporary files: <span class=\"string\">\"uwsgi_temp\"</span></span><br><span class=\"line\">  nginx http scgi temporary files: <span class=\"string\">\"scgi_temp\"</span></span><br></pre></td></tr></table></figure>\n<p>编译生成了中间文件 <code>objs</code>,通过查看<code>ngx_modules.c</code>,可以知道nginx编译了哪些模块<br>执行<code>make</code>编译<code>make install</code> 安装<br>安装完成进入 <code>/home/nginx/</code>启动nginx以后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">├── fastcgi_temp</span><br><span class=\"line\">├── html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">├── proxy_temp</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">├── scgi_temp</span><br><span class=\"line\">└── uwsgi_temp</span><br></pre></td></tr></table></figure>\n<p>就可以看到所有的目录以及文件了。</p>\n<p>在生产环境中，要根据实际的情况增加第三方模块</p>"},{"title":"Nginx学习日志 2","date":"2020-06-10T02:25:38.000Z","_content":"### Nginx 配置语法\n\n- 配置文件由指令与指令块组成\n- 每条指令以 ; 结尾，指令与参数以空格符号分隔\n- 指令块以{} 大括号将多条指令组合在一起\n- include 语句允许组合多个配置文件以提升可维护性\n- 使用#符号添加注释，提高可读性\n- 使用$符变量\n- 部分指令的参数支持正则表达式\n<!--more-->\n\n``` bash\n# nginx.conf\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n```\n\nhttp配置指令块主要包含下面4个部分\n  - http\n  - server\n  - location\n  - upstream\n\n### Nginx命令行\n- 格式 nginx -s reload\n- 帮助 -? -h\n- 使用指定的配置文件 -c\n- 指定配置文件指定 -g\n- 指定运行目录 -p\n- 发送信号 -s(立刻停止 stop 优雅退出 quit 重载配置文件 reload 重新开始记录日志文件reopen)\n- 测试配置文件是否有语法错误 -t -T\n- 打印Nginx的版本信息、编译信息等 -v -V\n\n\n### Nginx 热部署\n#### 备份\ncp nginx nginx.old\n用新编译好的nginx 替换\n#### 部署切换\n```ps -ef | grep nginx\n#进程会平滑切换\nkill -USR2 pid\n\n#优雅退出\nkill -WNCH pid\n```\n\n### 日志切割\n移动日志 mv xxx.log xxx.bak 重新开始记录日志文件,更好的方式是通过脚本进行\n./nginx -s reopen \n","source":"_posts/nginx-study-2.md","raw":"---\ntitle: Nginx学习日志 2\ndate: 2020-06-10 10:25:38\ncategories: Linux\ntags: Nginx\n---\n### Nginx 配置语法\n\n- 配置文件由指令与指令块组成\n- 每条指令以 ; 结尾，指令与参数以空格符号分隔\n- 指令块以{} 大括号将多条指令组合在一起\n- include 语句允许组合多个配置文件以提升可维护性\n- 使用#符号添加注释，提高可读性\n- 使用$符变量\n- 部分指令的参数支持正则表达式\n<!--more-->\n\n``` bash\n# nginx.conf\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n```\n\nhttp配置指令块主要包含下面4个部分\n  - http\n  - server\n  - location\n  - upstream\n\n### Nginx命令行\n- 格式 nginx -s reload\n- 帮助 -? -h\n- 使用指定的配置文件 -c\n- 指定配置文件指定 -g\n- 指定运行目录 -p\n- 发送信号 -s(立刻停止 stop 优雅退出 quit 重载配置文件 reload 重新开始记录日志文件reopen)\n- 测试配置文件是否有语法错误 -t -T\n- 打印Nginx的版本信息、编译信息等 -v -V\n\n\n### Nginx 热部署\n#### 备份\ncp nginx nginx.old\n用新编译好的nginx 替换\n#### 部署切换\n```ps -ef | grep nginx\n#进程会平滑切换\nkill -USR2 pid\n\n#优雅退出\nkill -WNCH pid\n```\n\n### 日志切割\n移动日志 mv xxx.log xxx.bak 重新开始记录日志文件,更好的方式是通过脚本进行\n./nginx -s reopen \n","slug":"nginx-study-2","published":1,"updated":"2020-06-10T03:27:27.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d80037eos6f4fdb8is","content":"<h3 id=\"Nginx-配置语法\"><a href=\"#Nginx-配置语法\" class=\"headerlink\" title=\"Nginx 配置语法\"></a>Nginx 配置语法</h3><ul>\n<li>配置文件由指令与指令块组成</li>\n<li>每条指令以 ; 结尾，指令与参数以空格符号分隔</li>\n<li>指令块以{} 大括号将多条指令组合在一起</li>\n<li>include 语句允许组合多个配置文件以提升可维护性</li>\n<li>使用#符号添加注释，提高可读性</li>\n<li>使用$符变量</li>\n<li>部分指令的参数支持正则表达式<a id=\"more\"></a>\n\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx.conf</span></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;</span></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache's document root</span></span><br><span class=\"line\">        <span class=\"comment\"># concurs with nginx's one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       8000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       somename:8080;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  somename  alias  another.alias;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HTTPS server</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       443 ssl;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate      cert.pem;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate_key  cert.key;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_timeout  5m;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_prefer_server_ciphers  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>http配置指令块主要包含下面4个部分</p>\n<ul>\n<li>http</li>\n<li>server</li>\n<li>location</li>\n<li>upstream</li>\n</ul>\n<h3 id=\"Nginx命令行\"><a href=\"#Nginx命令行\" class=\"headerlink\" title=\"Nginx命令行\"></a>Nginx命令行</h3><ul>\n<li>格式 nginx -s reload</li>\n<li>帮助 -? -h</li>\n<li>使用指定的配置文件 -c</li>\n<li>指定配置文件指定 -g</li>\n<li>指定运行目录 -p</li>\n<li>发送信号 -s(立刻停止 stop 优雅退出 quit 重载配置文件 reload 重新开始记录日志文件reopen)</li>\n<li>测试配置文件是否有语法错误 -t -T</li>\n<li>打印Nginx的版本信息、编译信息等 -v -V</li>\n</ul>\n<h3 id=\"Nginx-热部署\"><a href=\"#Nginx-热部署\" class=\"headerlink\" title=\"Nginx 热部署\"></a>Nginx 热部署</h3><h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><p>cp nginx nginx.old<br>用新编译好的nginx 替换</p>\n<h4 id=\"部署切换\"><a href=\"#部署切换\" class=\"headerlink\" title=\"部署切换\"></a>部署切换</h4><figure class=\"highlight ps\"><figcaption><span>-ef | grep nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进程会平滑切换</span></span><br><span class=\"line\">kill -USR2 pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#优雅退出</span></span><br><span class=\"line\">kill -WNCH pid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志切割\"><a href=\"#日志切割\" class=\"headerlink\" title=\"日志切割\"></a>日志切割</h3><p>移动日志 mv xxx.log xxx.bak 重新开始记录日志文件,更好的方式是通过脚本进行<br>./nginx -s reopen </p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Nginx-配置语法\"><a href=\"#Nginx-配置语法\" class=\"headerlink\" title=\"Nginx 配置语法\"></a>Nginx 配置语法</h3><ul>\n<li>配置文件由指令与指令块组成</li>\n<li>每条指令以 ; 结尾，指令与参数以空格符号分隔</li>\n<li>指令块以{} 大括号将多条指令组合在一起</li>\n<li>include 语句允许组合多个配置文件以提升可维护性</li>\n<li>使用#符号添加注释，提高可读性</li>\n<li>使用$符变量</li>\n<li>部分指令的参数支持正则表达式","more":"</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx.conf</span></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;</span></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache's document root</span></span><br><span class=\"line\">        <span class=\"comment\"># concurs with nginx's one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       8000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       somename:8080;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  somename  alias  another.alias;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HTTPS server</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       443 ssl;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate      cert.pem;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate_key  cert.key;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_timeout  5m;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_prefer_server_ciphers  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>http配置指令块主要包含下面4个部分</p>\n<ul>\n<li>http</li>\n<li>server</li>\n<li>location</li>\n<li>upstream</li>\n</ul>\n<h3 id=\"Nginx命令行\"><a href=\"#Nginx命令行\" class=\"headerlink\" title=\"Nginx命令行\"></a>Nginx命令行</h3><ul>\n<li>格式 nginx -s reload</li>\n<li>帮助 -? -h</li>\n<li>使用指定的配置文件 -c</li>\n<li>指定配置文件指定 -g</li>\n<li>指定运行目录 -p</li>\n<li>发送信号 -s(立刻停止 stop 优雅退出 quit 重载配置文件 reload 重新开始记录日志文件reopen)</li>\n<li>测试配置文件是否有语法错误 -t -T</li>\n<li>打印Nginx的版本信息、编译信息等 -v -V</li>\n</ul>\n<h3 id=\"Nginx-热部署\"><a href=\"#Nginx-热部署\" class=\"headerlink\" title=\"Nginx 热部署\"></a>Nginx 热部署</h3><h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><p>cp nginx nginx.old<br>用新编译好的nginx 替换</p>\n<h4 id=\"部署切换\"><a href=\"#部署切换\" class=\"headerlink\" title=\"部署切换\"></a>部署切换</h4><figure class=\"highlight ps\"><figcaption><span>-ef | grep nginx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进程会平滑切换</span></span><br><span class=\"line\">kill -USR2 pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#优雅退出</span></span><br><span class=\"line\">kill -WNCH pid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志切割\"><a href=\"#日志切割\" class=\"headerlink\" title=\"日志切割\"></a>日志切割</h3><p>移动日志 mv xxx.log xxx.bak 重新开始记录日志文件,更好的方式是通过脚本进行<br>./nginx -s reopen </p>"},{"title":"CentOS 安装 node","date":"2018-02-09T05:05:14.000Z","_content":"### 下载node\n``` bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz\n```\n### 解压&配置\n``` bash\ntar xvJf node-v8.9.4-linux-x64.tar.xz\nmv node-v8.9.4-linux-x64 /opt\n```\n``` bash\nvim /etc/profile\n```\n``` bash\n#设置node 环境变量\nexport NODE_HOME=/opt/node-v8.9.4-linux-x64\nexport PATH=$NODE_HOME/bin:$PATH\nsource /etc/profile\n```\n### 测试是否成功\n``` bash\nnode -v\n```\n或者安装nvm\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm、\nsource /etc/profile\n```\n### 检查是否安装成功\n``` shell\n nvm --version\n```\n\n### 安装node\n``` bash\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\nnvm ls # 列出所有版本\n```\n","source":"_posts/node-install.md","raw":"---\ntitle: CentOS 安装 node\ndate: 2018-02-09 13:05:14\ncategories: Linux\ntags: Node\n---\n### 下载node\n``` bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz\n```\n### 解压&配置\n``` bash\ntar xvJf node-v8.9.4-linux-x64.tar.xz\nmv node-v8.9.4-linux-x64 /opt\n```\n``` bash\nvim /etc/profile\n```\n``` bash\n#设置node 环境变量\nexport NODE_HOME=/opt/node-v8.9.4-linux-x64\nexport PATH=$NODE_HOME/bin:$PATH\nsource /etc/profile\n```\n### 测试是否成功\n``` bash\nnode -v\n```\n或者安装nvm\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm、\nsource /etc/profile\n```\n### 检查是否安装成功\n``` shell\n nvm --version\n```\n\n### 安装node\n``` bash\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\nnvm ls # 列出所有版本\n```\n","slug":"node-install","published":1,"updated":"2019-10-20T04:54:47.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d9003aeos617zk87bs","content":"<h3 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压-amp-配置\"><a href=\"#解压-amp-配置\" class=\"headerlink\" title=\"解压&amp;配置\"></a>解压&amp;配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置node 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p>或者安装nvm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm、</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br><span class=\"line\">nvm ls <span class=\"comment\"># 列出所有版本</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压-amp-配置\"><a href=\"#解压-amp-配置\" class=\"headerlink\" title=\"解压&amp;配置\"></a>解压&amp;配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置node 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p>或者安装nvm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm、</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br><span class=\"line\">nvm ls <span class=\"comment\"># 列出所有版本</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Node 项目问题总结","date":"2018-06-02T06:52:15.000Z","_content":"最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <!-- more -->\n### RabbitMQ virtual hosts 问题\n项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错\n``` error\nrabbitmq typeerror cannot read property 'create channel' of undefined\n```\n会碰到上面类似的错误，创建channel的报错。\n最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面\n在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。\n最后发现是因为`virtual hosts`的原因\n``` Javascript\n   amqp.connect('amqp://admin:123456@localhost', function (err, conn) { ......\n```\n默认的配置如上图所示，其实这个配置会使用默认的`virtual hosts` `/`,但是如果配置了其他的`virtual hosts`，你没有配置就会导致你\n无法正常的连接。\n如果你配置的有其他的`virtual hosts`，那么配置如下\n``` Javascript\n amqp.connect('amqp://admin:123456@localhost/virtual_hosts_name', function (err, conn) { ......\n```\n这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置`virtual hosts`的name就可以了。\n\n### RabbitMQ message 信息消费问题\n项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。\nJava端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码\n``` JavaScript\n ch.sendToQueue(q, new Buffer.from(JSON.stringify(orders)), {persistent: true});\n```\n发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收\n``` Java\nByte[] body = null;\nString message = new String(body, \"UTF-8\");\n```\n这样就能正常解析从node 传输过来的数据。\n","source":"_posts/node-project-summary.md","raw":"---\ntitle: Node 项目问题总结\ndate: 2018-06-02 14:52:15\ncategories: Node\ntags: rabbitmq\n---\n最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <!-- more -->\n### RabbitMQ virtual hosts 问题\n项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错\n``` error\nrabbitmq typeerror cannot read property 'create channel' of undefined\n```\n会碰到上面类似的错误，创建channel的报错。\n最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面\n在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。\n最后发现是因为`virtual hosts`的原因\n``` Javascript\n   amqp.connect('amqp://admin:123456@localhost', function (err, conn) { ......\n```\n默认的配置如上图所示，其实这个配置会使用默认的`virtual hosts` `/`,但是如果配置了其他的`virtual hosts`，你没有配置就会导致你\n无法正常的连接。\n如果你配置的有其他的`virtual hosts`，那么配置如下\n``` Javascript\n amqp.connect('amqp://admin:123456@localhost/virtual_hosts_name', function (err, conn) { ......\n```\n这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置`virtual hosts`的name就可以了。\n\n### RabbitMQ message 信息消费问题\n项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。\nJava端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码\n``` JavaScript\n ch.sendToQueue(q, new Buffer.from(JSON.stringify(orders)), {persistent: true});\n```\n发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收\n``` Java\nByte[] body = null;\nString message = new String(body, \"UTF-8\");\n```\n这样就能正常解析从node 传输过来的数据。\n","slug":"node-project-summary","published":1,"updated":"2019-10-20T04:54:47.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9d9003eeos63mtj3qed","content":"<p>最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <a id=\"more\"></a></p>\n<h3 id=\"RabbitMQ-virtual-hosts-问题\"><a href=\"#RabbitMQ-virtual-hosts-问题\" class=\"headerlink\" title=\"RabbitMQ virtual hosts 问题\"></a>RabbitMQ virtual hosts 问题</h3><p>项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq typeerror cannot read property &#39;create channel&#39; of undefined</span><br></pre></td></tr></table></figure>\n<p>会碰到上面类似的错误，创建channel的报错。<br>最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面<br>在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。<br>最后发现是因为<code>virtual hosts</code>的原因</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n<p>默认的配置如上图所示，其实这个配置会使用默认的<code>virtual hosts</code> <code>/</code>,但是如果配置了其他的<code>virtual hosts</code>，你没有配置就会导致你<br>无法正常的连接。<br>如果你配置的有其他的<code>virtual hosts</code>，那么配置如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost/virtual_hosts_name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n<p>这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置<code>virtual hosts</code>的name就可以了。</p>\n<h3 id=\"RabbitMQ-message-信息消费问题\"><a href=\"#RabbitMQ-message-信息消费问题\" class=\"headerlink\" title=\"RabbitMQ message 信息消费问题\"></a>RabbitMQ message 信息消费问题</h3><p>项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。<br>Java端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.sendToQueue(q, <span class=\"keyword\">new</span> Buffer.from(<span class=\"built_in\">JSON</span>.stringify(orders)), &#123;<span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Byte[] body = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">String message = <span class=\"keyword\">new</span> String(body, <span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样就能正常解析从node 传输过来的数据。</p>\n","site":{"data":{}},"excerpt":"<p>最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。","more":"</p>\n<h3 id=\"RabbitMQ-virtual-hosts-问题\"><a href=\"#RabbitMQ-virtual-hosts-问题\" class=\"headerlink\" title=\"RabbitMQ virtual hosts 问题\"></a>RabbitMQ virtual hosts 问题</h3><p>项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq typeerror cannot read property &#39;create channel&#39; of undefined</span><br></pre></td></tr></table></figure>\n<p>会碰到上面类似的错误，创建channel的报错。<br>最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面<br>在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。<br>最后发现是因为<code>virtual hosts</code>的原因</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n<p>默认的配置如上图所示，其实这个配置会使用默认的<code>virtual hosts</code> <code>/</code>,但是如果配置了其他的<code>virtual hosts</code>，你没有配置就会导致你<br>无法正常的连接。<br>如果你配置的有其他的<code>virtual hosts</code>，那么配置如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost/virtual_hosts_name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n<p>这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置<code>virtual hosts</code>的name就可以了。</p>\n<h3 id=\"RabbitMQ-message-信息消费问题\"><a href=\"#RabbitMQ-message-信息消费问题\" class=\"headerlink\" title=\"RabbitMQ message 信息消费问题\"></a>RabbitMQ message 信息消费问题</h3><p>项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。<br>Java端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.sendToQueue(q, <span class=\"keyword\">new</span> Buffer.from(<span class=\"built_in\">JSON</span>.stringify(orders)), &#123;<span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Byte[] body = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">String message = <span class=\"keyword\">new</span> String(body, <span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样就能正常解析从node 传输过来的数据。</p>"},{"title":"okhttp3-proxy-auth (okhttp3 http 代理鉴权)","date":"2018-08-30T11:17:14.000Z","_content":"因为种种原因，没有按时写博客，最近准备把博客重新拾起来。\n最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<!-- more -->\n\n默认的okhttp代理鉴权如下：\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n        String url = \"https://www.baidu.com\";\n        //设置socks代理服务器ip端口\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n        Authenticator.setDefault(new Authenticator()\n        {\n            private PasswordAuthentication authentication = new PasswordAuthentication(\"username\", \"password\".toCharArray());\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication()\n            {\n                return authentication;\n            }\n        });\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n但是试了一下发现会报错,代理鉴权失败\n``` log\njava.io.IOException: Failed to authenticate with proxy\n\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)\n\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)\n\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n于是采用另外一种方式\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n\n        String url = \"https://www.baidu.com\";\n        final String username = \"username\";\n        final String password = \"password\";\n\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n\n        Authenticator proxyAuthenticator = new Authenticator() {\n            @Override\n            public Request authenticate(Route route, Response response) throws IOException {\n                String credential = Credentials.basic(username, password);\n                return response.request().newBuilder()\n                        .header(\"Proxy-Authorization\", credential)\n                        .build();\n            }\n        };\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                .proxyAuthenticator(proxyAuthenticator)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n\n通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的\n","source":"_posts/okhttp3-proxy-auth.md","raw":"---\ntitle: okhttp3-proxy-auth (okhttp3 http 代理鉴权)\ndate: 2018-08-30 19:17:14\ncategories: Java\ntag: okhttp\n---\n因为种种原因，没有按时写博客，最近准备把博客重新拾起来。\n最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<!-- more -->\n\n默认的okhttp代理鉴权如下：\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n        String url = \"https://www.baidu.com\";\n        //设置socks代理服务器ip端口\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n        Authenticator.setDefault(new Authenticator()\n        {\n            private PasswordAuthentication authentication = new PasswordAuthentication(\"username\", \"password\".toCharArray());\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication()\n            {\n                return authentication;\n            }\n        });\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n但是试了一下发现会报错,代理鉴权失败\n``` log\njava.io.IOException: Failed to authenticate with proxy\n\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)\n\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)\n\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n于是采用另外一种方式\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n\n        String url = \"https://www.baidu.com\";\n        final String username = \"username\";\n        final String password = \"password\";\n\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n\n        Authenticator proxyAuthenticator = new Authenticator() {\n            @Override\n            public Request authenticate(Route route, Response response) throws IOException {\n                String credential = Credentials.basic(username, password);\n                return response.request().newBuilder()\n                        .header(\"Proxy-Authorization\", credential)\n                        .build();\n            }\n        };\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                .proxyAuthenticator(proxyAuthenticator)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n\n通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的\n","slug":"okhttp3-proxy-auth","published":1,"updated":"2019-10-20T04:54:47.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9da003heos612cs461r","content":"<p>因为种种原因，没有按时写博客，最近准备把博客重新拾起来。<br>最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<a id=\"more\"></a></p>\n<p>默认的okhttp代理鉴权如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Authenticator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.PasswordAuthentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//设置socks代理服务器ip端口</span></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\">        Authenticator.setDefault(<span class=\"keyword\">new</span> Authenticator()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> PasswordAuthentication authentication = <span class=\"keyword\">new</span> PasswordAuthentication(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"password\"</span>.toCharArray());</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是试了一下发现会报错,代理鉴权失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.io.IOException: Failed to authenticate with proxy</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class=\"line\">\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)</span><br><span class=\"line\">\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n<p>于是采用另外一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String username = <span class=\"string\">\"username\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String password = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Authenticator proxyAuthenticator = <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">authenticate</span><span class=\"params\">(Route route, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                String credential = Credentials.basic(username, password);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> response.request().newBuilder()</span><br><span class=\"line\">                        .header(<span class=\"string\">\"Proxy-Authorization\"</span>, credential)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                .proxyAuthenticator(proxyAuthenticator)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的</p>\n","site":{"data":{}},"excerpt":"<p>因为种种原因，没有按时写博客，最近准备把博客重新拾起来。<br>最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下","more":"</p>\n<p>默认的okhttp代理鉴权如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Authenticator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.PasswordAuthentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//设置socks代理服务器ip端口</span></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\">        Authenticator.setDefault(<span class=\"keyword\">new</span> Authenticator()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> PasswordAuthentication authentication = <span class=\"keyword\">new</span> PasswordAuthentication(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"password\"</span>.toCharArray());</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是试了一下发现会报错,代理鉴权失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.io.IOException: Failed to authenticate with proxy</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class=\"line\">\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)</span><br><span class=\"line\">\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n<p>于是采用另外一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String username = <span class=\"string\">\"username\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String password = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Authenticator proxyAuthenticator = <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">authenticate</span><span class=\"params\">(Route route, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                String credential = Credentials.basic(username, password);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> response.request().newBuilder()</span><br><span class=\"line\">                        .header(<span class=\"string\">\"Proxy-Authorization\"</span>, credential)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                .proxyAuthenticator(proxyAuthenticator)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的</p>"},{"title":"python 入门","date":"2018-03-07T02:55:06.000Z","_content":"> Life is short, you need Python.\n\n上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<!-- more -->\n\n### 基本数据类型\n了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。\n\nPython 基本数据类型（6个标注数据类型）\n- Number (数字)\n- String (字符串)\n- List   (列表)\n- Tuple  (元组)\n- Sets   (集合)\n- Dictionary (字典)\n\n### 待续。。。\n","source":"_posts/pthon-tutorial.md","raw":"---\ntitle: python 入门\ndate: 2018-03-07 10:55:06\ncategories: Python\ntags: Python\n---\n> Life is short, you need Python.\n\n上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<!-- more -->\n\n### 基本数据类型\n了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。\n\nPython 基本数据类型（6个标注数据类型）\n- Number (数字)\n- String (字符串)\n- List   (列表)\n- Tuple  (元组)\n- Sets   (集合)\n- Dictionary (字典)\n\n### 待续。。。\n","slug":"pthon-tutorial","published":1,"updated":"2019-10-20T04:54:47.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9db003meos633u2dkkv","content":"<blockquote>\n<p>Life is short, you need Python.</p>\n</blockquote>\n<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<a id=\"more\"></a></p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>\n<p>Python 基本数据类型（6个标注数据类型）</p>\n<ul>\n<li>Number (数字)</li>\n<li>String (字符串)</li>\n<li>List   (列表)</li>\n<li>Tuple  (元组)</li>\n<li>Sets   (集合)</li>\n<li>Dictionary (字典)</li>\n</ul>\n<h3 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>Life is short, you need Python.</p>\n</blockquote>\n<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。","more":"</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>\n<p>Python 基本数据类型（6个标注数据类型）</p>\n<ul>\n<li>Number (数字)</li>\n<li>String (字符串)</li>\n<li>List   (列表)</li>\n<li>Tuple  (元组)</li>\n<li>Sets   (集合)</li>\n<li>Dictionary (字典)</li>\n</ul>\n<h3 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h3>"},{"title":"python通过使用requirements.txt文件记录管理依赖包","date":"2018-03-07T03:38:55.000Z","_content":"python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<!-- more -->\n\n### 使用\n``` shell\n# 进入项目目录创建requirements.txt文件\ntouch requirements.txt\n# 将项目中使用的包冻结（freeze）到requirements.txt文件中\npip freeze >requirements.txt\n```\n当把项目上传到服务器以后可以执行下面的命令安装对应的包\n``` shell\n#通过requirements.txt 文件中的记录安装依赖\npip install -r requirements.txt\n```\n通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。\n","source":"_posts/python-requirements.md","raw":"---\ntitle: python通过使用requirements.txt文件记录管理依赖包\ndate: 2018-03-07 11:38:55\ncategories: Python\ntags: Python\n---\npython在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<!-- more -->\n\n### 使用\n``` shell\n# 进入项目目录创建requirements.txt文件\ntouch requirements.txt\n# 将项目中使用的包冻结（freeze）到requirements.txt文件中\npip freeze >requirements.txt\n```\n当把项目上传到服务器以后可以执行下面的命令安装对应的包\n``` shell\n#通过requirements.txt 文件中的记录安装依赖\npip install -r requirements.txt\n```\n通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。\n","slug":"python-requirements","published":1,"updated":"2019-10-20T04:54:47.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dd003peos681r3b1e4","content":"<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<a id=\"more\"></a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入项目目录创建requirements.txt文件</span></span><br><span class=\"line\">touch requirements.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class=\"line\">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>\n<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>\n","site":{"data":{}},"excerpt":"<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。","more":"</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入项目目录创建requirements.txt文件</span></span><br><span class=\"line\">touch requirements.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class=\"line\">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>\n<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>"},{"title":"提升国内服务器Github clone速度的方法","date":"2018-04-18T03:24:25.000Z","_content":"### Github 速度慢\n众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<!-- more -->\n\n### 修改hosts\n从`http://github.global.ssl.fastly.net.ipaddress.com/` 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。\n\n![fastly](raise-github-clone-speed/WX20180418-113942.png)\n``` Shell\nvim /etc/hosts\n# GitHub Start\n151.101.185.194 github.global.ssl.fastly.net\n```\n保存后自动生效\n\n![fastly](raise-github-clone-speed/WX20180418-114759@2x.png)\n通过下载Spring Boot 的源码，见上图，速度还不错。\n\n### 通过代理提升本地的速度\n一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。\n``` Shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n![socks5](raise-github-clone-speed/WX20180418-115544@2x.png)\n\n上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成`socks5://127.0.0.1:1086`。\n\n通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。\n","source":"_posts/raise-github-clone-speed.md","raw":"---\ntitle: 提升国内服务器Github clone速度的方法\ndate: 2018-04-18 11:24:25\ncategories: Linux\ntags: Shell\n---\n### Github 速度慢\n众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<!-- more -->\n\n### 修改hosts\n从`http://github.global.ssl.fastly.net.ipaddress.com/` 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。\n\n![fastly](raise-github-clone-speed/WX20180418-113942.png)\n``` Shell\nvim /etc/hosts\n# GitHub Start\n151.101.185.194 github.global.ssl.fastly.net\n```\n保存后自动生效\n\n![fastly](raise-github-clone-speed/WX20180418-114759@2x.png)\n通过下载Spring Boot 的源码，见上图，速度还不错。\n\n### 通过代理提升本地的速度\n一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。\n``` Shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n![socks5](raise-github-clone-speed/WX20180418-115544@2x.png)\n\n上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成`socks5://127.0.0.1:1086`。\n\n通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。\n","slug":"raise-github-clone-speed","published":1,"updated":"2019-10-20T04:54:47.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9df003teos6eyx4gfpf","content":"<h3 id=\"Github-速度慢\"><a href=\"#Github-速度慢\" class=\"headerlink\" title=\"Github 速度慢\"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<a id=\"more\"></a></p>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>\n<p><img src=\"raise-github-clone-speed/WX20180418-113942.png\" alt=\"fastly\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> GitHub Start</span></span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n<p>保存后自动生效</p>\n<p><img src=\"raise-github-clone-speed/WX20180418-114759@2x.png\" alt=\"fastly\"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>\n<h3 id=\"通过代理提升本地的速度\"><a href=\"#通过代理提升本地的速度\" class=\"headerlink\" title=\"通过代理提升本地的速度\"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class=\"line\">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure>\n<p><img src=\"raise-github-clone-speed/WX20180418-115544@2x.png\" alt=\"socks5\"></p>\n<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>\n<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Github-速度慢\"><a href=\"#Github-速度慢\" class=\"headerlink\" title=\"Github 速度慢\"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。","more":"</p>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>\n<p><img src=\"raise-github-clone-speed/WX20180418-113942.png\" alt=\"fastly\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> GitHub Start</span></span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n<p>保存后自动生效</p>\n<p><img src=\"raise-github-clone-speed/WX20180418-114759@2x.png\" alt=\"fastly\"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>\n<h3 id=\"通过代理提升本地的速度\"><a href=\"#通过代理提升本地的速度\" class=\"headerlink\" title=\"通过代理提升本地的速度\"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class=\"line\">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure>\n<p><img src=\"raise-github-clone-speed/WX20180418-115544@2x.png\" alt=\"socks5\"></p>\n<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>\n<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>"},{"title":"正则表达式基础知识总结","date":"2017-12-07T07:48:36.000Z","_content":"最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch\n（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下\nGitHub，选择了[code4craft](https://github.com/code4craft)的[webmagic](https://github.com/code4craft/webmagic)\n作为项目的基础组件。<!-- more -->\n\n对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取\n这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。\n\n[0-9]这种形式的正则表达式称作字符组、字符集。\n\\d 字符组简写。\n(.) 匹配任意字符，通配符，一般不匹配行起始符。\n","source":"_posts/regular-expression-basic.md","raw":"---\ntitle: 正则表达式基础知识总结\ndate: 2017-12-07 15:48:36\ncategories: Regular\ntag: Regular\n---\n最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch\n（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下\nGitHub，选择了[code4craft](https://github.com/code4craft)的[webmagic](https://github.com/code4craft/webmagic)\n作为项目的基础组件。<!-- more -->\n\n对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取\n这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。\n\n[0-9]这种形式的正则表达式称作字符组、字符集。\n\\d 字符组简写。\n(.) 匹配任意字符，通配符，一般不匹配行起始符。\n","slug":"regular-expression-basic","published":1,"updated":"2019-10-20T04:54:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dg003xeos6g1i40ohh","content":"<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a>的<a href=\"https://github.com/code4craft/webmagic\" target=\"_blank\" rel=\"noopener\">webmagic</a><br>作为项目的基础组件。<a id=\"more\"></a></p>\n<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>\n<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>\n","site":{"data":{}},"excerpt":"<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a>的<a href=\"https://github.com/code4craft/webmagic\" target=\"_blank\" rel=\"noopener\">webmagic</a><br>作为项目的基础组件。","more":"</p>\n<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>\n<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>"},{"title":"服务器科学上网","date":"2017-12-02T08:19:31.000Z","_content":"因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<!-- more -->\n### 准备\n- 两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4\n- privoxy 包\n\n### 开始\n先用ssh 命令进行服务器socks5 连接接\n``` bash\n$ ssh -f -N -D bindaddress:port name@server\n$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77\n```\n- -f\n输入密码后进入后台模式\n(Requests ssh to go to background just before command execution.)\n- -N\n不执行远程命令,用于端口转发\n( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)\n- -D\nsocket5代理\n(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)\n- -L\ntcp转发\n(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)\n- -C\n使用数据压缩,网速快时会影响速度\n(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)\n\nbindaddress ：指定绑定ip地址\nport ： 指定侦听端口\nname： ssh服务器登录名\nserver： ssh服务器地址\n\n运行完上面的命令就进行socks5连接了\n可以执行下面的命令查看端口是否打开\n``` bash\n$ netstat -nltp\n```\n如果能看到指定的端口打开(1080端口)就说明正常连接了。\n\n### 安装privoxy\n``` bash\n$ yum install privoxy  -y # 使用yum 安装比较方便，也可以使用源码安装\n```\n安装完成后需要进行配置，否则无法正常访问\n``` bash\n$ vim /etc/privoxy/config\n# :783: 找到 783行，去掉前面的注释符号，端口可以随便改\n$ listen-address 127.0.0.1:8118\n#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致\n$ forward-socks5t / 127.0.0.1:1080\n```\n### 修改环境变量开启代理\n``` bash\nvi /ect/profile\nexport https_proxy=http://127.0.0.1:8118\nexport http_proxy=http://127.0.0.1:8118\n# 之后执行source /etc/profile 使配置生效\n```\n\n### 启动privoxy、测试\n``` bash\n$ privoxy /etc/privoxy/config  #netstat -ntlp 查看8118端口\n$ wget www.google.com # 如果能下载则说明成功\n```\n### 后记\n使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢\n注释掉`/etc/profile` 内的内容，刷新配置。\n","source":"_posts/server-over-the-wall.md","raw":"---\ntitle: 服务器科学上网\ndate: 2017-12-02 16:19:31\ncategories: Linux\ntag: Shell\n---\n因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<!-- more -->\n### 准备\n- 两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4\n- privoxy 包\n\n### 开始\n先用ssh 命令进行服务器socks5 连接接\n``` bash\n$ ssh -f -N -D bindaddress:port name@server\n$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77\n```\n- -f\n输入密码后进入后台模式\n(Requests ssh to go to background just before command execution.)\n- -N\n不执行远程命令,用于端口转发\n( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)\n- -D\nsocket5代理\n(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)\n- -L\ntcp转发\n(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)\n- -C\n使用数据压缩,网速快时会影响速度\n(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)\n\nbindaddress ：指定绑定ip地址\nport ： 指定侦听端口\nname： ssh服务器登录名\nserver： ssh服务器地址\n\n运行完上面的命令就进行socks5连接了\n可以执行下面的命令查看端口是否打开\n``` bash\n$ netstat -nltp\n```\n如果能看到指定的端口打开(1080端口)就说明正常连接了。\n\n### 安装privoxy\n``` bash\n$ yum install privoxy  -y # 使用yum 安装比较方便，也可以使用源码安装\n```\n安装完成后需要进行配置，否则无法正常访问\n``` bash\n$ vim /etc/privoxy/config\n# :783: 找到 783行，去掉前面的注释符号，端口可以随便改\n$ listen-address 127.0.0.1:8118\n#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致\n$ forward-socks5t / 127.0.0.1:1080\n```\n### 修改环境变量开启代理\n``` bash\nvi /ect/profile\nexport https_proxy=http://127.0.0.1:8118\nexport http_proxy=http://127.0.0.1:8118\n# 之后执行source /etc/profile 使配置生效\n```\n\n### 启动privoxy、测试\n``` bash\n$ privoxy /etc/privoxy/config  #netstat -ntlp 查看8118端口\n$ wget www.google.com # 如果能下载则说明成功\n```\n### 后记\n使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢\n注释掉`/etc/profile` 内的内容，刷新配置。\n","slug":"server-over-the-wall","published":1,"updated":"2019-10-20T04:54:47.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dh0041eos6frcggqfu","content":"<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<a id=\"more\"></a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>\n<li>privoxy 包</li>\n</ul>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -f -N -D bindaddress:port name@server</span><br><span class=\"line\">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>\n<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>\n<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>\n<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>\n<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>\n</ul>\n<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>\n<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -nltp</span><br></pre></td></tr></table></figure>\n<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>\n<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install privoxy  -y <span class=\"comment\"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>\n<p>安装完成后需要进行配置，否则无法正常访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/privoxy/config</span><br><span class=\"line\"><span class=\"comment\"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class=\"line\">$ listen-address 127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class=\"line\">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改环境变量开启代理\"><a href=\"#修改环境变量开启代理\" class=\"headerlink\" title=\"修改环境变量开启代理\"></a>修改环境变量开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /ect/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动privoxy、测试\"><a href=\"#启动privoxy、测试\" class=\"headerlink\" title=\"启动privoxy、测试\"></a>启动privoxy、测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ privoxy /etc/privoxy/config  <span class=\"comment\">#netstat -ntlp 查看8118端口</span></span><br><span class=\"line\">$ wget www.google.com <span class=\"comment\"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>\n","site":{"data":{}},"excerpt":"<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。","more":"</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>\n<li>privoxy 包</li>\n</ul>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -f -N -D bindaddress:port name@server</span><br><span class=\"line\">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>\n<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>\n<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>\n<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>\n<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>\n</ul>\n<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>\n<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -nltp</span><br></pre></td></tr></table></figure>\n<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>\n<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install privoxy  -y <span class=\"comment\"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>\n<p>安装完成后需要进行配置，否则无法正常访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/privoxy/config</span><br><span class=\"line\"><span class=\"comment\"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class=\"line\">$ listen-address 127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class=\"line\">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改环境变量开启代理\"><a href=\"#修改环境变量开启代理\" class=\"headerlink\" title=\"修改环境变量开启代理\"></a>修改环境变量开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /ect/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动privoxy、测试\"><a href=\"#启动privoxy、测试\" class=\"headerlink\" title=\"启动privoxy、测试\"></a>启动privoxy、测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ privoxy /etc/privoxy/config  <span class=\"comment\">#netstat -ntlp 查看8118端口</span></span><br><span class=\"line\">$ wget www.google.com <span class=\"comment\"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>"},{"title":"CentOS7搭建socks5 服务","date":"2018-01-15T02:06:00.000Z","_content":"\n### 环境\n基于centsOS 7\nss5-3.8.9-8\n### 下载源文件\n``` shell\nwget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz\n\n#配置编译环境及安装编译SS5依赖组件\nyum -y install gcc automake make\nyum install gcc openldap-devel pam-devel openssl-devel\n```\n### 安装\n``` shell\ntar xf ss5-3.8.9-8.tar.gz\nmv ss5-3.8.9-8 ss5\ncd  ss5\n./configure\nmake && make install\n```\n### 启动脚本加执行权限\n``` shell\nchmod +x /etc/init.d/ss5\n```\n### 进行配置并启动\n``` shell\nvi /etc/sysconfig/ss5  \nSS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080\nsystemctl start ss5 #启动服务\n\n#增加用户登录权限\nvi /etc/opt/ss5/ss5.conf  \nauth 0.0.0.0/0 - u  \npermit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -\n\n#设置用户名和密码，一个用户和密码一行，用空格间隔\nvi /etc/opt/ss5/ss5.passwd  \nuser1 123456\nuser2 123456\n\n```\n","source":"_posts/socks5-server.md","raw":"---\ntitle: CentOS7搭建socks5 服务\ndate: 2018-01-15 10:06:00\ncategories: Linux\ntags: Socks5\n---\n\n### 环境\n基于centsOS 7\nss5-3.8.9-8\n### 下载源文件\n``` shell\nwget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz\n\n#配置编译环境及安装编译SS5依赖组件\nyum -y install gcc automake make\nyum install gcc openldap-devel pam-devel openssl-devel\n```\n### 安装\n``` shell\ntar xf ss5-3.8.9-8.tar.gz\nmv ss5-3.8.9-8 ss5\ncd  ss5\n./configure\nmake && make install\n```\n### 启动脚本加执行权限\n``` shell\nchmod +x /etc/init.d/ss5\n```\n### 进行配置并启动\n``` shell\nvi /etc/sysconfig/ss5  \nSS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080\nsystemctl start ss5 #启动服务\n\n#增加用户登录权限\nvi /etc/opt/ss5/ss5.conf  \nauth 0.0.0.0/0 - u  \npermit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -\n\n#设置用户名和密码，一个用户和密码一行，用空格间隔\nvi /etc/opt/ss5/ss5.passwd  \nuser1 123456\nuser2 123456\n\n```\n","slug":"socks5-server","published":1,"updated":"2019-10-20T04:54:47.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dh0044eos6140g2q3y","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置编译环境及安装编译SS5依赖组件</span></span><br><span class=\"line\">yum -y install gcc automake make</span><br><span class=\"line\">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf ss5-3.8.9-8.tar.gz</span><br><span class=\"line\">mv ss5-3.8.9-8 ss5</span><br><span class=\"line\">cd  ss5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动脚本加执行权限\"><a href=\"#启动脚本加执行权限\" class=\"headerlink\" title=\"启动脚本加执行权限\"></a>启动脚本加执行权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行配置并启动\"><a href=\"#进行配置并启动\" class=\"headerlink\" title=\"进行配置并启动\"></a>进行配置并启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/ss5  </span><br><span class=\"line\">SS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080</span><br><span class=\"line\">systemctl start ss5 #启动服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加用户登录权限</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.conf  </span><br><span class=\"line\">auth 0.0.0.0/0 - u  </span><br><span class=\"line\">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.passwd  </span><br><span class=\"line\">user1 123456</span><br><span class=\"line\">user2 123456</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置编译环境及安装编译SS5依赖组件</span></span><br><span class=\"line\">yum -y install gcc automake make</span><br><span class=\"line\">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf ss5-3.8.9-8.tar.gz</span><br><span class=\"line\">mv ss5-3.8.9-8 ss5</span><br><span class=\"line\">cd  ss5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动脚本加执行权限\"><a href=\"#启动脚本加执行权限\" class=\"headerlink\" title=\"启动脚本加执行权限\"></a>启动脚本加执行权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行配置并启动\"><a href=\"#进行配置并启动\" class=\"headerlink\" title=\"进行配置并启动\"></a>进行配置并启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/ss5  </span><br><span class=\"line\">SS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080</span><br><span class=\"line\">systemctl start ss5 #启动服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加用户登录权限</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.conf  </span><br><span class=\"line\">auth 0.0.0.0/0 - u  </span><br><span class=\"line\">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.passwd  </span><br><span class=\"line\">user1 123456</span><br><span class=\"line\">user2 123456</span><br></pre></td></tr></table></figure>\n"},{"title":"几款常用的性能测试工具","date":"2019-06-28T07:08:55.000Z","_content":"在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。<!--More-->\n\n### 安装\n#### CentOS7 下安装ad\n\n``` shell\nyum -y install httpd-tools\n```\n\n然后使用百度做个测试\n``` shell\n[root@VM_0_15_centos ~]#  ab -n 1000 -c 10 https://www.baidu.com/\nThis is ApacheBench, Version 2.3 <$Revision: 1430300 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking www.baidu.com (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        BWS/1.1\nServer Hostname:        www.baidu.com\nServer Port:            443\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128\n\nDocument Path:          /\nDocument Length:        227 bytes\n\nConcurrency Level:      10\nTime taken for tests:   15.518 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      893000 bytes\nHTML transferred:       227000 bytes\nRequests per second:    64.44 [#/sec] (mean)\nTime per request:       155.176 [ms] (mean)\nTime per request:       15.518 [ms] (mean, across all concurrent requests)\nTransfer rate:          56.20 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:      104  114   6.8    116     172\nProcessing:    35   39   5.1     39     140\nWaiting:       35   38   5.1     39     140\nTotal:        139  153   9.8    156     264\n\nPercentage of the requests served within a certain time (ms)\n  50%    156\n  66%    159\n  75%    160\n  80%    161\n  90%    163\n  95%    164\n  98%    165\n  99%    175\n 100%    264 (longest request)\n```\n上面就是请求后的结果。注意请求的地址后面要加`/`否则会报无效的url。\n#### Mac 上使用\n\nMac 上好像有自带的ab 工具，请求效果如下\n![Mac 请求效果](some-pressure-measuring-tools/WX20190628-171039@2x.png)\n\n### 使用Jmeter\n具体可以查看[Jmeter](https://jmeter.apache.org/),后面会补充这一部分的内容\n\n### 使用阿里云PTS\n具体可参考[PTS](https://www.aliyun.com/product/pts)\n","source":"_posts/some-pressure-measuring-tools.md","raw":"---\ntitle: 几款常用的性能测试工具\ndate: 2019-06-28 15:08:55\ncategories: Linux\ntags: 性能测试工具\n---\n在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。<!--More-->\n\n### 安装\n#### CentOS7 下安装ad\n\n``` shell\nyum -y install httpd-tools\n```\n\n然后使用百度做个测试\n``` shell\n[root@VM_0_15_centos ~]#  ab -n 1000 -c 10 https://www.baidu.com/\nThis is ApacheBench, Version 2.3 <$Revision: 1430300 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking www.baidu.com (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nCompleted 400 requests\nCompleted 500 requests\nCompleted 600 requests\nCompleted 700 requests\nCompleted 800 requests\nCompleted 900 requests\nCompleted 1000 requests\nFinished 1000 requests\n\n\nServer Software:        BWS/1.1\nServer Hostname:        www.baidu.com\nServer Port:            443\nSSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128\n\nDocument Path:          /\nDocument Length:        227 bytes\n\nConcurrency Level:      10\nTime taken for tests:   15.518 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      893000 bytes\nHTML transferred:       227000 bytes\nRequests per second:    64.44 [#/sec] (mean)\nTime per request:       155.176 [ms] (mean)\nTime per request:       15.518 [ms] (mean, across all concurrent requests)\nTransfer rate:          56.20 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:      104  114   6.8    116     172\nProcessing:    35   39   5.1     39     140\nWaiting:       35   38   5.1     39     140\nTotal:        139  153   9.8    156     264\n\nPercentage of the requests served within a certain time (ms)\n  50%    156\n  66%    159\n  75%    160\n  80%    161\n  90%    163\n  95%    164\n  98%    165\n  99%    175\n 100%    264 (longest request)\n```\n上面就是请求后的结果。注意请求的地址后面要加`/`否则会报无效的url。\n#### Mac 上使用\n\nMac 上好像有自带的ab 工具，请求效果如下\n![Mac 请求效果](some-pressure-measuring-tools/WX20190628-171039@2x.png)\n\n### 使用Jmeter\n具体可以查看[Jmeter](https://jmeter.apache.org/),后面会补充这一部分的内容\n\n### 使用阿里云PTS\n具体可参考[PTS](https://www.aliyun.com/product/pts)\n","slug":"some-pressure-measuring-tools","published":1,"updated":"2019-10-20T04:54:47.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9di0046eos6fc2s6v39","content":"<p>在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。<a id=\"more\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"CentOS7-下安装ad\"><a href=\"#CentOS7-下安装ad\" class=\"headerlink\" title=\"CentOS7 下安装ad\"></a>CentOS7 下安装ad</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>\n\n<p>然后使用百度做个测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_15_centos ~]#  ab -n 1000 -c 10 https://www.baidu.com/</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking www.baidu.com (be patient)</span><br><span class=\"line\">Completed 100 requests</span><br><span class=\"line\">Completed 200 requests</span><br><span class=\"line\">Completed 300 requests</span><br><span class=\"line\">Completed 400 requests</span><br><span class=\"line\">Completed 500 requests</span><br><span class=\"line\">Completed 600 requests</span><br><span class=\"line\">Completed 700 requests</span><br><span class=\"line\">Completed 800 requests</span><br><span class=\"line\">Completed 900 requests</span><br><span class=\"line\">Completed 1000 requests</span><br><span class=\"line\">Finished 1000 requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        BWS/1.1</span><br><span class=\"line\">Server Hostname:        www.baidu.com</span><br><span class=\"line\">Server Port:            443</span><br><span class=\"line\">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /</span><br><span class=\"line\">Document Length:        227 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      10</span><br><span class=\"line\">Time taken for tests:   15.518 seconds</span><br><span class=\"line\">Complete requests:      1000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Write errors:           0</span><br><span class=\"line\">Total transferred:      893000 bytes</span><br><span class=\"line\">HTML transferred:       227000 bytes</span><br><span class=\"line\">Requests per second:    64.44 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       155.176 [ms] (mean)</span><br><span class=\"line\">Time per request:       15.518 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          56.20 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:      104  114   6.8    116     172</span><br><span class=\"line\">Processing:    35   39   5.1     39     140</span><br><span class=\"line\">Waiting:       35   38   5.1     39     140</span><br><span class=\"line\">Total:        139  153   9.8    156     264</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\"><span class=\"meta\">  50%</span><span class=\"bash\">    156</span></span><br><span class=\"line\"><span class=\"meta\">  66%</span><span class=\"bash\">    159</span></span><br><span class=\"line\"><span class=\"meta\">  75%</span><span class=\"bash\">    160</span></span><br><span class=\"line\"><span class=\"meta\">  80%</span><span class=\"bash\">    161</span></span><br><span class=\"line\"><span class=\"meta\">  90%</span><span class=\"bash\">    163</span></span><br><span class=\"line\"><span class=\"meta\">  95%</span><span class=\"bash\">    164</span></span><br><span class=\"line\"><span class=\"meta\">  98%</span><span class=\"bash\">    165</span></span><br><span class=\"line\"><span class=\"meta\">  99%</span><span class=\"bash\">    175</span></span><br><span class=\"line\"><span class=\"meta\"> 100%</span><span class=\"bash\">    264 (longest request)</span></span><br></pre></td></tr></table></figure>\n<p>上面就是请求后的结果。注意请求的地址后面要加<code>/</code>否则会报无效的url。</p>\n<h4 id=\"Mac-上使用\"><a href=\"#Mac-上使用\" class=\"headerlink\" title=\"Mac 上使用\"></a>Mac 上使用</h4><p>Mac 上好像有自带的ab 工具，请求效果如下<br><img src=\"some-pressure-measuring-tools/WX20190628-171039@2x.png\" alt=\"Mac 请求效果\"></p>\n<h3 id=\"使用Jmeter\"><a href=\"#使用Jmeter\" class=\"headerlink\" title=\"使用Jmeter\"></a>使用Jmeter</h3><p>具体可以查看<a href=\"https://jmeter.apache.org/\" target=\"_blank\" rel=\"noopener\">Jmeter</a>,后面会补充这一部分的内容</p>\n<h3 id=\"使用阿里云PTS\"><a href=\"#使用阿里云PTS\" class=\"headerlink\" title=\"使用阿里云PTS\"></a>使用阿里云PTS</h3><p>具体可参考<a href=\"https://www.aliyun.com/product/pts\" target=\"_blank\" rel=\"noopener\">PTS</a></p>\n","site":{"data":{}},"excerpt":"<p>在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。","more":"</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"CentOS7-下安装ad\"><a href=\"#CentOS7-下安装ad\" class=\"headerlink\" title=\"CentOS7 下安装ad\"></a>CentOS7 下安装ad</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>\n\n<p>然后使用百度做个测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM_0_15_centos ~]#  ab -n 1000 -c 10 https://www.baidu.com/</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class=\"line\">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class=\"line\">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class=\"line\"></span><br><span class=\"line\">Benchmarking www.baidu.com (be patient)</span><br><span class=\"line\">Completed 100 requests</span><br><span class=\"line\">Completed 200 requests</span><br><span class=\"line\">Completed 300 requests</span><br><span class=\"line\">Completed 400 requests</span><br><span class=\"line\">Completed 500 requests</span><br><span class=\"line\">Completed 600 requests</span><br><span class=\"line\">Completed 700 requests</span><br><span class=\"line\">Completed 800 requests</span><br><span class=\"line\">Completed 900 requests</span><br><span class=\"line\">Completed 1000 requests</span><br><span class=\"line\">Finished 1000 requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        BWS/1.1</span><br><span class=\"line\">Server Hostname:        www.baidu.com</span><br><span class=\"line\">Server Port:            443</span><br><span class=\"line\">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /</span><br><span class=\"line\">Document Length:        227 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      10</span><br><span class=\"line\">Time taken for tests:   15.518 seconds</span><br><span class=\"line\">Complete requests:      1000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Write errors:           0</span><br><span class=\"line\">Total transferred:      893000 bytes</span><br><span class=\"line\">HTML transferred:       227000 bytes</span><br><span class=\"line\">Requests per second:    64.44 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       155.176 [ms] (mean)</span><br><span class=\"line\">Time per request:       15.518 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          56.20 [Kbytes/sec] received</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:      104  114   6.8    116     172</span><br><span class=\"line\">Processing:    35   39   5.1     39     140</span><br><span class=\"line\">Waiting:       35   38   5.1     39     140</span><br><span class=\"line\">Total:        139  153   9.8    156     264</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\"><span class=\"meta\">  50%</span><span class=\"bash\">    156</span></span><br><span class=\"line\"><span class=\"meta\">  66%</span><span class=\"bash\">    159</span></span><br><span class=\"line\"><span class=\"meta\">  75%</span><span class=\"bash\">    160</span></span><br><span class=\"line\"><span class=\"meta\">  80%</span><span class=\"bash\">    161</span></span><br><span class=\"line\"><span class=\"meta\">  90%</span><span class=\"bash\">    163</span></span><br><span class=\"line\"><span class=\"meta\">  95%</span><span class=\"bash\">    164</span></span><br><span class=\"line\"><span class=\"meta\">  98%</span><span class=\"bash\">    165</span></span><br><span class=\"line\"><span class=\"meta\">  99%</span><span class=\"bash\">    175</span></span><br><span class=\"line\"><span class=\"meta\"> 100%</span><span class=\"bash\">    264 (longest request)</span></span><br></pre></td></tr></table></figure>\n<p>上面就是请求后的结果。注意请求的地址后面要加<code>/</code>否则会报无效的url。</p>\n<h4 id=\"Mac-上使用\"><a href=\"#Mac-上使用\" class=\"headerlink\" title=\"Mac 上使用\"></a>Mac 上使用</h4><p>Mac 上好像有自带的ab 工具，请求效果如下<br><img src=\"some-pressure-measuring-tools/WX20190628-171039@2x.png\" alt=\"Mac 请求效果\"></p>\n<h3 id=\"使用Jmeter\"><a href=\"#使用Jmeter\" class=\"headerlink\" title=\"使用Jmeter\"></a>使用Jmeter</h3><p>具体可以查看<a href=\"https://jmeter.apache.org/\" target=\"_blank\" rel=\"noopener\">Jmeter</a>,后面会补充这一部分的内容</p>\n<h3 id=\"使用阿里云PTS\"><a href=\"#使用阿里云PTS\" class=\"headerlink\" title=\"使用阿里云PTS\"></a>使用阿里云PTS</h3><p>具体可参考<a href=\"https://www.aliyun.com/product/pts\" target=\"_blank\" rel=\"noopener\">PTS</a></p>"},{"title":"SpringCloud 引入链路跟踪Sleuth及Zipkin","date":"2020-03-19T03:28:09.000Z","_content":"\nZipkin是一种分布式跟踪系统，它有助于收集解决微服务架构中得延迟问题所需的时序数据，它管理这些数据的收集和查找。<!--More-->\n\n### 下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\n使用官方一键脚本\n``` shell\ncurl -sSL https://zipkin.io/quickstart.sh | bash -s\njava -jar zipkin.jar\n```\ndocker\n``` shell\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n访问\n任一方式启动后，访问 http://localhost:9411/zipkin/ ，如下图\n![zipkin](WX20200319-113846.png)\n\n### 项目集成\n\n2.pom.xml 配置\n\n增加如下依赖\n``` xml\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-zipkin</artifactId>\n <version>2.0.3.RELEASE</version>\n</dependency>\n```\n\n如果项目中包含  aspectjweaver 这个jar ，需要指定jar包版本为1.8.10，否则项目启动会出错\n```xml\n<dependency>\n <groupId>org.aspectj</groupId>\n <artifactId>aspectjweaver</artifactId>\n <version>1.8.10</version>\n</dependency>\n```\n\n### 配置采样等参数\n``` yml\n#zipkin配置 # 指定了 Zipkin 服务器的地址\nspring.zipkin.base-url = http://localhost:9411/ \n#采样率 1.0表示全部采样\nspring.sleuth.sampler.probability = 1.0\n```\n服务调用以后，就可以看到具体的调用请求时间，但是在这个过程中也碰到了一些问题\n- 如果屏蔽一些接口记录，例如 健康检查会产生大量的无用数据，影响查询\n- 如果使用mysql查询会有一定的影响，官方也不建议使用\n- 使用官方的jar后，无法进行改造，满足不了一些额外的需求\n- 存储数据安全规范等问题\n\n### 如果使用ES进行存储（建议使用）\n``` shell\n# STORAGE_TYPE 指定存储类型 ES_HOSTS es ip 通过逗号隔开，可以使用多个，ES_USERNAME ES用户名 ES_PASSWORD ES密码 ES_INDEX 自定义存储索引\nSTORAGE_TYPE=elasticsearch ES_HOSTS=172.16.28.56:9200,172.16.28.57:9200  ES_USERNAME=admin ES_PASSWORD=123456 ES_INDEX=zipkin-trace  java -jar /zipkin.jar\n```\n\n\n\n\n\n","source":"_posts/spring-seluth-zipkin.md","raw":"---\ntitle: SpringCloud 引入链路跟踪Sleuth及Zipkin\ndate: 2020-03-19 11:28:09\ncategories: Linux\ntags: 调用链监控\n---\n\nZipkin是一种分布式跟踪系统，它有助于收集解决微服务架构中得延迟问题所需的时序数据，它管理这些数据的收集和查找。<!--More-->\n\n### 下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\n使用官方一键脚本\n``` shell\ncurl -sSL https://zipkin.io/quickstart.sh | bash -s\njava -jar zipkin.jar\n```\ndocker\n``` shell\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```\n访问\n任一方式启动后，访问 http://localhost:9411/zipkin/ ，如下图\n![zipkin](WX20200319-113846.png)\n\n### 项目集成\n\n2.pom.xml 配置\n\n增加如下依赖\n``` xml\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-zipkin</artifactId>\n <version>2.0.3.RELEASE</version>\n</dependency>\n```\n\n如果项目中包含  aspectjweaver 这个jar ，需要指定jar包版本为1.8.10，否则项目启动会出错\n```xml\n<dependency>\n <groupId>org.aspectj</groupId>\n <artifactId>aspectjweaver</artifactId>\n <version>1.8.10</version>\n</dependency>\n```\n\n### 配置采样等参数\n``` yml\n#zipkin配置 # 指定了 Zipkin 服务器的地址\nspring.zipkin.base-url = http://localhost:9411/ \n#采样率 1.0表示全部采样\nspring.sleuth.sampler.probability = 1.0\n```\n服务调用以后，就可以看到具体的调用请求时间，但是在这个过程中也碰到了一些问题\n- 如果屏蔽一些接口记录，例如 健康检查会产生大量的无用数据，影响查询\n- 如果使用mysql查询会有一定的影响，官方也不建议使用\n- 使用官方的jar后，无法进行改造，满足不了一些额外的需求\n- 存储数据安全规范等问题\n\n### 如果使用ES进行存储（建议使用）\n``` shell\n# STORAGE_TYPE 指定存储类型 ES_HOSTS es ip 通过逗号隔开，可以使用多个，ES_USERNAME ES用户名 ES_PASSWORD ES密码 ES_INDEX 自定义存储索引\nSTORAGE_TYPE=elasticsearch ES_HOSTS=172.16.28.56:9200,172.16.28.57:9200  ES_USERNAME=admin ES_PASSWORD=123456 ES_INDEX=zipkin-trace  java -jar /zipkin.jar\n```\n\n\n\n\n\n","slug":"spring-seluth-zipkin","published":1,"updated":"2020-03-19T03:55:18.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dk004beos624hhcsll","content":"<p>Zipkin是一种分布式跟踪系统，它有助于收集解决微服务架构中得延迟问题所需的时序数据，它管理这些数据的收集和查找。<a id=\"more\"></a></p>\n<h3 id=\"下载-官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\"><a href=\"#下载-官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\" class=\"headerlink\" title=\"下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\"></a>下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar</h3><p>使用官方一键脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class=\"line\">java -jar zipkin.jar</span><br></pre></td></tr></table></figure>\n<p>docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>\n<p>访问<br>任一方式启动后，访问 <a href=\"http://localhost:9411/zipkin/\" target=\"_blank\" rel=\"noopener\">http://localhost:9411/zipkin/</a> ，如下图<br><img src=\"WX20200319-113846.png\" alt=\"zipkin\"></p>\n<h3 id=\"项目集成\"><a href=\"#项目集成\" class=\"headerlink\" title=\"项目集成\"></a>项目集成</h3><p>2.pom.xml 配置</p>\n<p>增加如下依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果项目中包含  aspectjweaver 这个jar ，需要指定jar包版本为1.8.10，否则项目启动会出错</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置采样等参数\"><a href=\"#配置采样等参数\" class=\"headerlink\" title=\"配置采样等参数\"></a>配置采样等参数</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#zipkin配置 # 指定了 Zipkin 服务器的地址</span></span><br><span class=\"line\"><span class=\"string\">spring.zipkin.base-url</span> <span class=\"string\">=</span> <span class=\"attr\">http://localhost:9411/</span> </span><br><span class=\"line\"><span class=\"comment\">#采样率 1.0表示全部采样</span></span><br><span class=\"line\"><span class=\"string\">spring.sleuth.sampler.probability</span> <span class=\"string\">=</span> <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p>服务调用以后，就可以看到具体的调用请求时间，但是在这个过程中也碰到了一些问题</p>\n<ul>\n<li>如果屏蔽一些接口记录，例如 健康检查会产生大量的无用数据，影响查询</li>\n<li>如果使用mysql查询会有一定的影响，官方也不建议使用</li>\n<li>使用官方的jar后，无法进行改造，满足不了一些额外的需求</li>\n<li>存储数据安全规范等问题</li>\n</ul>\n<h3 id=\"如果使用ES进行存储（建议使用）\"><a href=\"#如果使用ES进行存储（建议使用）\" class=\"headerlink\" title=\"如果使用ES进行存储（建议使用）\"></a>如果使用ES进行存储（建议使用）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> STORAGE_TYPE 指定存储类型 ES_HOSTS es ip 通过逗号隔开，可以使用多个，ES_USERNAME ES用户名 ES_PASSWORD ES密码 ES_INDEX 自定义存储索引</span></span><br><span class=\"line\">STORAGE_TYPE=elasticsearch ES_HOSTS=172.16.28.56:9200,172.16.28.57:9200  ES_USERNAME=admin ES_PASSWORD=123456 ES_INDEX=zipkin-trace  java -jar /zipkin.jar</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>Zipkin是一种分布式跟踪系统，它有助于收集解决微服务架构中得延迟问题所需的时序数据，它管理这些数据的收集和查找。","more":"</p>\n<h3 id=\"下载-官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\"><a href=\"#下载-官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\" class=\"headerlink\" title=\"下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar\"></a>下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar</h3><p>使用官方一键脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class=\"line\">java -jar zipkin.jar</span><br></pre></td></tr></table></figure>\n<p>docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>\n<p>访问<br>任一方式启动后，访问 <a href=\"http://localhost:9411/zipkin/\" target=\"_blank\" rel=\"noopener\">http://localhost:9411/zipkin/</a> ，如下图<br><img src=\"WX20200319-113846.png\" alt=\"zipkin\"></p>\n<h3 id=\"项目集成\"><a href=\"#项目集成\" class=\"headerlink\" title=\"项目集成\"></a>项目集成</h3><p>2.pom.xml 配置</p>\n<p>增加如下依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果项目中包含  aspectjweaver 这个jar ，需要指定jar包版本为1.8.10，否则项目启动会出错</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置采样等参数\"><a href=\"#配置采样等参数\" class=\"headerlink\" title=\"配置采样等参数\"></a>配置采样等参数</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#zipkin配置 # 指定了 Zipkin 服务器的地址</span></span><br><span class=\"line\"><span class=\"string\">spring.zipkin.base-url</span> <span class=\"string\">=</span> <span class=\"attr\">http://localhost:9411/</span> </span><br><span class=\"line\"><span class=\"comment\">#采样率 1.0表示全部采样</span></span><br><span class=\"line\"><span class=\"string\">spring.sleuth.sampler.probability</span> <span class=\"string\">=</span> <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p>服务调用以后，就可以看到具体的调用请求时间，但是在这个过程中也碰到了一些问题</p>\n<ul>\n<li>如果屏蔽一些接口记录，例如 健康检查会产生大量的无用数据，影响查询</li>\n<li>如果使用mysql查询会有一定的影响，官方也不建议使用</li>\n<li>使用官方的jar后，无法进行改造，满足不了一些额外的需求</li>\n<li>存储数据安全规范等问题</li>\n</ul>\n<h3 id=\"如果使用ES进行存储（建议使用）\"><a href=\"#如果使用ES进行存储（建议使用）\" class=\"headerlink\" title=\"如果使用ES进行存储（建议使用）\"></a>如果使用ES进行存储（建议使用）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> STORAGE_TYPE 指定存储类型 ES_HOSTS es ip 通过逗号隔开，可以使用多个，ES_USERNAME ES用户名 ES_PASSWORD ES密码 ES_INDEX 自定义存储索引</span></span><br><span class=\"line\">STORAGE_TYPE=elasticsearch ES_HOSTS=172.16.28.56:9200,172.16.28.57:9200  ES_USERNAME=admin ES_PASSWORD=123456 ES_INDEX=zipkin-trace  java -jar /zipkin.jar</span><br></pre></td></tr></table></figure>"},{"title":"初识Dart(一)","date":"2019-07-15T12:06:52.000Z","_content":"2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。<!--more-->\n\n不过因为Node的出现，JavaScript得到了告诉的发展了，Dart并没有流行起来，不过因为Flutter的出现，Dart迎来了自己的第二春。\n\n学习语言的第一件事情就是准备一个环境，在[repl](https://repl.it/languages/dart)新建一个`main.dart`文件\n\n### 范例，hello world\n\n```` dart\nvoid main() {\n    print('Hello World!');\n}\n```\n点击`run`\n可以看到右边打印出来内容\n``` shell\nDart VM version: 2.2.0 (Unknown timestamp) on \"linux_x64\"\n> run-project\nHello World!\n```\nDart 也是用main做函数的入口的，跟Java很像。\n\n### Dart的变量与类型\n#### Dart的基本内置类型有：\n* Numbers\n* Strings\n* Booleans\n* Lists\n* Sets\n* Maps\n* Runes\n* Symbols\n\n`Numbers`有两种子类（int 和 double）\n`Strings`跟我们平常用的String没有什么区别\n`Booleans`是类型安全的，意味着我们不能使用if (nonbooleanValue) or assert (nonbooleanValue) 这样的代码去判断，而应该显示的检查\n`Lists`在Dart中，数组是List对象，因此大多数人只是将它们称为列表。\n`Sets`无序集合\n`Maps`key和value可以是任何类型\n`Runes`UTF-32字符串\n`Symbols`开发中基本上用不上\n#### 常量\n* const 表示常量在编译期能确定的值\n* final 在运行时确定，一旦确定不可变更\n还有一些流程控制语法，各个语言基本上大同小异，可以参考[官方文档}(https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。\n","source":"_posts/study-dart-1.md","raw":"---\ntitle: 初识Dart(一)\ndate: 2019-07-15 20:06:52\ncategories: Dart\ntags: Dart\n---\n2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。<!--more-->\n\n不过因为Node的出现，JavaScript得到了告诉的发展了，Dart并没有流行起来，不过因为Flutter的出现，Dart迎来了自己的第二春。\n\n学习语言的第一件事情就是准备一个环境，在[repl](https://repl.it/languages/dart)新建一个`main.dart`文件\n\n### 范例，hello world\n\n```` dart\nvoid main() {\n    print('Hello World!');\n}\n```\n点击`run`\n可以看到右边打印出来内容\n``` shell\nDart VM version: 2.2.0 (Unknown timestamp) on \"linux_x64\"\n> run-project\nHello World!\n```\nDart 也是用main做函数的入口的，跟Java很像。\n\n### Dart的变量与类型\n#### Dart的基本内置类型有：\n* Numbers\n* Strings\n* Booleans\n* Lists\n* Sets\n* Maps\n* Runes\n* Symbols\n\n`Numbers`有两种子类（int 和 double）\n`Strings`跟我们平常用的String没有什么区别\n`Booleans`是类型安全的，意味着我们不能使用if (nonbooleanValue) or assert (nonbooleanValue) 这样的代码去判断，而应该显示的检查\n`Lists`在Dart中，数组是List对象，因此大多数人只是将它们称为列表。\n`Sets`无序集合\n`Maps`key和value可以是任何类型\n`Runes`UTF-32字符串\n`Symbols`开发中基本上用不上\n#### 常量\n* const 表示常量在编译期能确定的值\n* final 在运行时确定，一旦确定不可变更\n还有一些流程控制语法，各个语言基本上大同小异，可以参考[官方文档}(https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。\n","slug":"study-dart-1","published":1,"updated":"2019-10-20T04:54:47.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dl004eeos63xqb84ej","content":"<p>2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。<a id=\"more\"></a></p>\n<p>不过因为Node的出现，JavaScript得到了告诉的发展了，Dart并没有流行起来，不过因为Flutter的出现，Dart迎来了自己的第二春。</p>\n<p>学习语言的第一件事情就是准备一个环境，在<a href=\"https://repl.it/languages/dart\" target=\"_blank\" rel=\"noopener\">repl</a>新建一个<code>main.dart</code>文件</p>\n<h3 id=\"范例，hello-world\"><a href=\"#范例，hello-world\" class=\"headerlink\" title=\"范例，hello world\"></a>范例，hello world</h3><figure class=\"highlight plain\"><figcaption><span>dart</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void main() &#123;</span><br><span class=\"line\">    print(&#39;Hello World!&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击<code>run</code><br>可以看到右边打印出来内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dart VM version: 2.2.0 (Unknown timestamp) on \"linux_x64\"</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> run-project</span></span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n<p>Dart 也是用main做函数的入口的，跟Java很像。</p>\n<h3 id=\"Dart的变量与类型\"><a href=\"#Dart的变量与类型\" class=\"headerlink\" title=\"Dart的变量与类型\"></a>Dart的变量与类型</h3><h4 id=\"Dart的基本内置类型有：\"><a href=\"#Dart的基本内置类型有：\" class=\"headerlink\" title=\"Dart的基本内置类型有：\"></a>Dart的基本内置类型有：</h4><ul>\n<li>Numbers</li>\n<li>Strings</li>\n<li>Booleans</li>\n<li>Lists</li>\n<li>Sets</li>\n<li>Maps</li>\n<li>Runes</li>\n<li>Symbols</li>\n</ul>\n<p><code>Numbers</code>有两种子类（int 和 double）<br><code>Strings</code>跟我们平常用的String没有什么区别<br><code>Booleans</code>是类型安全的，意味着我们不能使用if (nonbooleanValue) or assert (nonbooleanValue) 这样的代码去判断，而应该显示的检查<br><code>Lists</code>在Dart中，数组是List对象，因此大多数人只是将它们称为列表。<br><code>Sets</code>无序集合<br><code>Maps</code>key和value可以是任何类型<br><code>Runes</code>UTF-32字符串<br><code>Symbols</code>开发中基本上用不上</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><ul>\n<li>const 表示常量在编译期能确定的值</li>\n<li>final 在运行时确定，一旦确定不可变更<br>还有一些流程控制语法，各个语言基本上大同小异，可以参考[官方文档}(<a href=\"https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。\" target=\"_blank\" rel=\"noopener\">https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。","more":"</p>\n<p>不过因为Node的出现，JavaScript得到了告诉的发展了，Dart并没有流行起来，不过因为Flutter的出现，Dart迎来了自己的第二春。</p>\n<p>学习语言的第一件事情就是准备一个环境，在<a href=\"https://repl.it/languages/dart\" target=\"_blank\" rel=\"noopener\">repl</a>新建一个<code>main.dart</code>文件</p>\n<h3 id=\"范例，hello-world\"><a href=\"#范例，hello-world\" class=\"headerlink\" title=\"范例，hello world\"></a>范例，hello world</h3><figure class=\"highlight plain\"><figcaption><span>dart</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void main() &#123;</span><br><span class=\"line\">    print(&#39;Hello World!&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击<code>run</code><br>可以看到右边打印出来内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dart VM version: 2.2.0 (Unknown timestamp) on \"linux_x64\"</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> run-project</span></span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n<p>Dart 也是用main做函数的入口的，跟Java很像。</p>\n<h3 id=\"Dart的变量与类型\"><a href=\"#Dart的变量与类型\" class=\"headerlink\" title=\"Dart的变量与类型\"></a>Dart的变量与类型</h3><h4 id=\"Dart的基本内置类型有：\"><a href=\"#Dart的基本内置类型有：\" class=\"headerlink\" title=\"Dart的基本内置类型有：\"></a>Dart的基本内置类型有：</h4><ul>\n<li>Numbers</li>\n<li>Strings</li>\n<li>Booleans</li>\n<li>Lists</li>\n<li>Sets</li>\n<li>Maps</li>\n<li>Runes</li>\n<li>Symbols</li>\n</ul>\n<p><code>Numbers</code>有两种子类（int 和 double）<br><code>Strings</code>跟我们平常用的String没有什么区别<br><code>Booleans</code>是类型安全的，意味着我们不能使用if (nonbooleanValue) or assert (nonbooleanValue) 这样的代码去判断，而应该显示的检查<br><code>Lists</code>在Dart中，数组是List对象，因此大多数人只是将它们称为列表。<br><code>Sets</code>无序集合<br><code>Maps</code>key和value可以是任何类型<br><code>Runes</code>UTF-32字符串<br><code>Symbols</code>开发中基本上用不上</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><ul>\n<li>const 表示常量在编译期能确定的值</li>\n<li>final 在运行时确定，一旦确定不可变更<br>还有一些流程控制语法，各个语言基本上大同小异，可以参考[官方文档}(<a href=\"https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。\" target=\"_blank\" rel=\"noopener\">https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。</a></li>\n</ul>"},{"title":"学习Elastic Stack（一）","date":"2019-06-26T05:35:14.000Z","_content":"前两天在`极客时间`买了`Elasticsearch核心技术与实战`的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。<!--more-->\n\n![Elastic Stack](elk-stack-elkb-diagram.png)\n\n\n### Elastic Stack概念\n首先需要了解一下，什么是`ELK`，`为什么是Elastic Stack`，[What is the ELK Stack? Why, it’s the Elastic Stack.](https://www.elastic.co/cn/elk-stack)\n> So, what is the ELK Stack? \"ELK\" is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a \"stash\" like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.\nThe Elastic Stack is the next evolution of the ELK Stack.\n\n### 安装环境\n因为是为了方便学习，所以使用docker进行环境的搭建，使用docker-compose 进行搭建，Elastic官方也提供了对应的[脚本](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html)，极客时间上的是基于7.1版本ES的，不过区别不是很大(增加了cerebro监控和kibana，可以自行添加)。\n#### 运行 docker-compose 命令\n`docker-compose.yml` 文件内容如下\n``` shell\nversion: '2.2'\nservices:\n  es01:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0\n    container_name: es01\n    environment:\n      - node.name=es01\n      - discovery.seed_hosts=es02\n      - cluster.initial_master_nodes=es01,es02\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata01:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - esnet\n  es02:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0\n    container_name: es02\n    environment:\n      - node.name=es02\n      - discovery.seed_hosts=es01\n      - cluster.initial_master_nodes=es01,es02\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata02:/usr/share/elasticsearch/data\n    networks:\n      - esnet\n\nvolumes:\n  esdata01:\n    driver: local\n  esdata02:\n    driver: local\n\nnetworks:\n  esnet:\n```\n启动、停止、销毁\n```shell\n#启动\ndocker-compose up\n#停止\ndocker-compose down\n#销毁\ndocker-compose down -v\n```\n#### 检查集群状态\n``` shell\ncurl http://127.0.0.1:9200/_cat/health\n#表示没有正常运行\ncurl: (52) Empty reply from server\n#正常运行如下\n1561531623 06:47:03 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%\n```\n#### Elasticsearch Docker 配置修改\nElasticsearch 从`/usr/share/elasticsearch/config/` 加载配置，这些配置包括 配置Elasticsearch和设置JVM选项。\n\n更多的配置可以自行查看Elastic的官网，有更详细的介绍，上面的工作就可以完成最基本的配置了\n","source":"_posts/study-elastic-stack-1.md","raw":"---\ntitle: 学习Elastic Stack（一）\ndate: 2019-06-26 13:35:14\ncategories: Linux\ntags: Docker、Elastic\n---\n前两天在`极客时间`买了`Elasticsearch核心技术与实战`的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。<!--more-->\n\n![Elastic Stack](elk-stack-elkb-diagram.png)\n\n\n### Elastic Stack概念\n首先需要了解一下，什么是`ELK`，`为什么是Elastic Stack`，[What is the ELK Stack? Why, it’s the Elastic Stack.](https://www.elastic.co/cn/elk-stack)\n> So, what is the ELK Stack? \"ELK\" is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a \"stash\" like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.\nThe Elastic Stack is the next evolution of the ELK Stack.\n\n### 安装环境\n因为是为了方便学习，所以使用docker进行环境的搭建，使用docker-compose 进行搭建，Elastic官方也提供了对应的[脚本](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html)，极客时间上的是基于7.1版本ES的，不过区别不是很大(增加了cerebro监控和kibana，可以自行添加)。\n#### 运行 docker-compose 命令\n`docker-compose.yml` 文件内容如下\n``` shell\nversion: '2.2'\nservices:\n  es01:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0\n    container_name: es01\n    environment:\n      - node.name=es01\n      - discovery.seed_hosts=es02\n      - cluster.initial_master_nodes=es01,es02\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata01:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - esnet\n  es02:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0\n    container_name: es02\n    environment:\n      - node.name=es02\n      - discovery.seed_hosts=es01\n      - cluster.initial_master_nodes=es01,es02\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata02:/usr/share/elasticsearch/data\n    networks:\n      - esnet\n\nvolumes:\n  esdata01:\n    driver: local\n  esdata02:\n    driver: local\n\nnetworks:\n  esnet:\n```\n启动、停止、销毁\n```shell\n#启动\ndocker-compose up\n#停止\ndocker-compose down\n#销毁\ndocker-compose down -v\n```\n#### 检查集群状态\n``` shell\ncurl http://127.0.0.1:9200/_cat/health\n#表示没有正常运行\ncurl: (52) Empty reply from server\n#正常运行如下\n1561531623 06:47:03 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%\n```\n#### Elasticsearch Docker 配置修改\nElasticsearch 从`/usr/share/elasticsearch/config/` 加载配置，这些配置包括 配置Elasticsearch和设置JVM选项。\n\n更多的配置可以自行查看Elastic的官网，有更详细的介绍，上面的工作就可以完成最基本的配置了\n","slug":"study-elastic-stack-1","published":1,"updated":"2019-10-20T04:54:47.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dm004ieos6dv217rfb","content":"<p>前两天在<code>极客时间</code>买了<code>Elasticsearch核心技术与实战</code>的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。<a id=\"more\"></a></p>\n<p><img src=\"elk-stack-elkb-diagram.png\" alt=\"Elastic Stack\"></p>\n<h3 id=\"Elastic-Stack概念\"><a href=\"#Elastic-Stack概念\" class=\"headerlink\" title=\"Elastic Stack概念\"></a>Elastic Stack概念</h3><p>首先需要了解一下，什么是<code>ELK</code>，<code>为什么是Elastic Stack</code>，<a href=\"https://www.elastic.co/cn/elk-stack\" target=\"_blank\" rel=\"noopener\">What is the ELK Stack? Why, it’s the Elastic Stack.</a></p>\n<blockquote>\n<p>So, what is the ELK Stack? “ELK” is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a “stash” like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.<br>The Elastic Stack is the next evolution of the ELK Stack.</p>\n</blockquote>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>因为是为了方便学习，所以使用docker进行环境的搭建，使用docker-compose 进行搭建，Elastic官方也提供了对应的<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">脚本</a>，极客时间上的是基于7.1版本ES的，不过区别不是很大(增加了cerebro监控和kibana，可以自行添加)。</p>\n<h4 id=\"运行-docker-compose-命令\"><a href=\"#运行-docker-compose-命令\" class=\"headerlink\" title=\"运行 docker-compose 命令\"></a>运行 docker-compose 命令</h4><p><code>docker-compose.yml</code> 文件内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '2.2'</span><br><span class=\"line\">services:</span><br><span class=\"line\">  es01:</span><br><span class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class=\"line\">    container_name: es01</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - node.name=es01</span><br><span class=\"line\">      - discovery.seed_hosts=es02</span><br><span class=\"line\">      - cluster.initial_master_nodes=es01,es02</span><br><span class=\"line\">      - cluster.name=docker-cluster</span><br><span class=\"line\">      - bootstrap.memory_lock=true</span><br><span class=\"line\">      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      memlock:</span><br><span class=\"line\">        soft: -1</span><br><span class=\"line\">        hard: -1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - esdata01:/usr/share/elasticsearch/data</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9200:9200</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - esnet</span><br><span class=\"line\">  es02:</span><br><span class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class=\"line\">    container_name: es02</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - node.name=es02</span><br><span class=\"line\">      - discovery.seed_hosts=es01</span><br><span class=\"line\">      - cluster.initial_master_nodes=es01,es02</span><br><span class=\"line\">      - cluster.name=docker-cluster</span><br><span class=\"line\">      - bootstrap.memory_lock=true</span><br><span class=\"line\">      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      memlock:</span><br><span class=\"line\">        soft: -1</span><br><span class=\"line\">        hard: -1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - esdata02:/usr/share/elasticsearch/data</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - esnet</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  esdata01:</span><br><span class=\"line\">    driver: local</span><br><span class=\"line\">  esdata02:</span><br><span class=\"line\">    driver: local</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  esnet:</span><br></pre></td></tr></table></figure>\n<p>启动、停止、销毁</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">docker-compose up</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止</span></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">销毁</span></span><br><span class=\"line\">docker-compose down -v</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查集群状态\"><a href=\"#检查集群状态\" class=\"headerlink\" title=\"检查集群状态\"></a>检查集群状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:9200/_cat/health</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">表示没有正常运行</span></span><br><span class=\"line\">curl: (52) Empty reply from server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">正常运行如下</span></span><br><span class=\"line\">1561531623 06:47:03 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure>\n<h4 id=\"Elasticsearch-Docker-配置修改\"><a href=\"#Elasticsearch-Docker-配置修改\" class=\"headerlink\" title=\"Elasticsearch Docker 配置修改\"></a>Elasticsearch Docker 配置修改</h4><p>Elasticsearch 从<code>/usr/share/elasticsearch/config/</code> 加载配置，这些配置包括 配置Elasticsearch和设置JVM选项。</p>\n<p>更多的配置可以自行查看Elastic的官网，有更详细的介绍，上面的工作就可以完成最基本的配置了</p>\n","site":{"data":{}},"excerpt":"<p>前两天在<code>极客时间</code>买了<code>Elasticsearch核心技术与实战</code>的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。","more":"</p>\n<p><img src=\"elk-stack-elkb-diagram.png\" alt=\"Elastic Stack\"></p>\n<h3 id=\"Elastic-Stack概念\"><a href=\"#Elastic-Stack概念\" class=\"headerlink\" title=\"Elastic Stack概念\"></a>Elastic Stack概念</h3><p>首先需要了解一下，什么是<code>ELK</code>，<code>为什么是Elastic Stack</code>，<a href=\"https://www.elastic.co/cn/elk-stack\" target=\"_blank\" rel=\"noopener\">What is the ELK Stack? Why, it’s the Elastic Stack.</a></p>\n<blockquote>\n<p>So, what is the ELK Stack? “ELK” is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a “stash” like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.<br>The Elastic Stack is the next evolution of the ELK Stack.</p>\n</blockquote>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>因为是为了方便学习，所以使用docker进行环境的搭建，使用docker-compose 进行搭建，Elastic官方也提供了对应的<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">脚本</a>，极客时间上的是基于7.1版本ES的，不过区别不是很大(增加了cerebro监控和kibana，可以自行添加)。</p>\n<h4 id=\"运行-docker-compose-命令\"><a href=\"#运行-docker-compose-命令\" class=\"headerlink\" title=\"运行 docker-compose 命令\"></a>运行 docker-compose 命令</h4><p><code>docker-compose.yml</code> 文件内容如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: '2.2'</span><br><span class=\"line\">services:</span><br><span class=\"line\">  es01:</span><br><span class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class=\"line\">    container_name: es01</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - node.name=es01</span><br><span class=\"line\">      - discovery.seed_hosts=es02</span><br><span class=\"line\">      - cluster.initial_master_nodes=es01,es02</span><br><span class=\"line\">      - cluster.name=docker-cluster</span><br><span class=\"line\">      - bootstrap.memory_lock=true</span><br><span class=\"line\">      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      memlock:</span><br><span class=\"line\">        soft: -1</span><br><span class=\"line\">        hard: -1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - esdata01:/usr/share/elasticsearch/data</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9200:9200</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - esnet</span><br><span class=\"line\">  es02:</span><br><span class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class=\"line\">    container_name: es02</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - node.name=es02</span><br><span class=\"line\">      - discovery.seed_hosts=es01</span><br><span class=\"line\">      - cluster.initial_master_nodes=es01,es02</span><br><span class=\"line\">      - cluster.name=docker-cluster</span><br><span class=\"line\">      - bootstrap.memory_lock=true</span><br><span class=\"line\">      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      memlock:</span><br><span class=\"line\">        soft: -1</span><br><span class=\"line\">        hard: -1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - esdata02:/usr/share/elasticsearch/data</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - esnet</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  esdata01:</span><br><span class=\"line\">    driver: local</span><br><span class=\"line\">  esdata02:</span><br><span class=\"line\">    driver: local</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  esnet:</span><br></pre></td></tr></table></figure>\n<p>启动、停止、销毁</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动</span></span><br><span class=\"line\">docker-compose up</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止</span></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">销毁</span></span><br><span class=\"line\">docker-compose down -v</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查集群状态\"><a href=\"#检查集群状态\" class=\"headerlink\" title=\"检查集群状态\"></a>检查集群状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:9200/_cat/health</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">表示没有正常运行</span></span><br><span class=\"line\">curl: (52) Empty reply from server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">正常运行如下</span></span><br><span class=\"line\">1561531623 06:47:03 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure>\n<h4 id=\"Elasticsearch-Docker-配置修改\"><a href=\"#Elasticsearch-Docker-配置修改\" class=\"headerlink\" title=\"Elasticsearch Docker 配置修改\"></a>Elasticsearch Docker 配置修改</h4><p>Elasticsearch 从<code>/usr/share/elasticsearch/config/</code> 加载配置，这些配置包括 配置Elasticsearch和设置JVM选项。</p>\n<p>更多的配置可以自行查看Elastic的官网，有更详细的介绍，上面的工作就可以完成最基本的配置了</p>"},{"title":"学习Elastic Stack（二）","date":"2019-06-27T01:01:53.000Z","_content":"Elastic官方提供了Elastic Stack 和 相关产品的[文档](https://www.elastic.co/guide/index.html)，而且提供了中文的文档，[`《Elasticsearch 权威指南》中文版`](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html),不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作`CRUD`。 <!--more-->\n\n### 基本概念\nElasticsearch的主要用途是搜索和分析。\n\nElasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats有助于收集，聚合和丰富您的数据并将其存储在Elasticsearch中。Kibana使您能够以交互方式探索，可视化和分享数据洞察，并管理和监控堆栈。\n\nElasticsearch为所有类型的数据提供实时搜索和分析。无论是结构化文档还是非结构化文本，数字数据或地理空间数据，Elasticsearch都可以以支持快速搜索的方式有效地存储和索引它。远远超出简单的数据检索和聚合信息，以发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使你部署能够与其一起无缝地增长。\n### 数据输入：文档和索引\nElasticsearch是一个分布式文档存储。Elasticsearch不是将信息存储为列数据行，而是存储已经序列化为JSON文档的复杂数据结构。当群集中有多个Elasticsearch节点时，存储的文档将分布在群集中，并且可以从任何节点立即访问。\n\n存储文档时，它会在1秒内实时索引并完全可搜索。Elasticsearch使用称为倒排索引的数据结构，支持非常快速的全文搜索。倒排索引列出任何文档中出现的每个唯一单词，并标识每个单词出现的所有文档。\n\n索引可以被视为优化的文档集合，每个文档都是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch会为每个字段中的所有数据编制索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在反向索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来汇编和返回搜索结果的能力使Elasticsearch如此之快。\n\nElasticsearch还具有无模式的能力，这意味着可以索引文档而无需显式指定如何处理文档中可能出现的每个不同字段。启用动态映射后，Elasticsearch会自动检测并向索引添加新字段。这种默认行为使您可以轻松索引和浏览数据 - 只需开始索引文档，Elasticsearch将检测并将布尔值，浮点和整数值，日期和字符串映射到相应的Elasticsearch数据类型。\n\n但是，最终，您比Elasticsearch更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射，以完全控制字段的存储和索引方式。\n\n定义自己的映射使您能够：\n\n区分全文字符串字段和精确值字符串字段\n执行特定于语言的文本分析\n优化字段以进行部分匹配\n使用自定义日期格式\n使用诸如geo_point和geo_shape无法自动检测的数据类型\n为不同目的以不同方式索引相同字段通常很有用。例如，您可能希望将字符串字段索引为全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。\n\n在索引期间应用于全文字段的分析链也在搜索时使用。查询全文字段时，查询文本在索引中查找术语之前会进行相同的分析。\n","source":"_posts/study-elastic-stack-2.md","raw":"---\ntitle: 学习Elastic Stack（二）\ndate: 2019-06-27 09:01:53\ncategories: Linux\ntags: Docker、Elastic\n#visible: hide\n---\nElastic官方提供了Elastic Stack 和 相关产品的[文档](https://www.elastic.co/guide/index.html)，而且提供了中文的文档，[`《Elasticsearch 权威指南》中文版`](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html),不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作`CRUD`。 <!--more-->\n\n### 基本概念\nElasticsearch的主要用途是搜索和分析。\n\nElasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats有助于收集，聚合和丰富您的数据并将其存储在Elasticsearch中。Kibana使您能够以交互方式探索，可视化和分享数据洞察，并管理和监控堆栈。\n\nElasticsearch为所有类型的数据提供实时搜索和分析。无论是结构化文档还是非结构化文本，数字数据或地理空间数据，Elasticsearch都可以以支持快速搜索的方式有效地存储和索引它。远远超出简单的数据检索和聚合信息，以发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使你部署能够与其一起无缝地增长。\n### 数据输入：文档和索引\nElasticsearch是一个分布式文档存储。Elasticsearch不是将信息存储为列数据行，而是存储已经序列化为JSON文档的复杂数据结构。当群集中有多个Elasticsearch节点时，存储的文档将分布在群集中，并且可以从任何节点立即访问。\n\n存储文档时，它会在1秒内实时索引并完全可搜索。Elasticsearch使用称为倒排索引的数据结构，支持非常快速的全文搜索。倒排索引列出任何文档中出现的每个唯一单词，并标识每个单词出现的所有文档。\n\n索引可以被视为优化的文档集合，每个文档都是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch会为每个字段中的所有数据编制索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在反向索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来汇编和返回搜索结果的能力使Elasticsearch如此之快。\n\nElasticsearch还具有无模式的能力，这意味着可以索引文档而无需显式指定如何处理文档中可能出现的每个不同字段。启用动态映射后，Elasticsearch会自动检测并向索引添加新字段。这种默认行为使您可以轻松索引和浏览数据 - 只需开始索引文档，Elasticsearch将检测并将布尔值，浮点和整数值，日期和字符串映射到相应的Elasticsearch数据类型。\n\n但是，最终，您比Elasticsearch更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射，以完全控制字段的存储和索引方式。\n\n定义自己的映射使您能够：\n\n区分全文字符串字段和精确值字符串字段\n执行特定于语言的文本分析\n优化字段以进行部分匹配\n使用自定义日期格式\n使用诸如geo_point和geo_shape无法自动检测的数据类型\n为不同目的以不同方式索引相同字段通常很有用。例如，您可能希望将字符串字段索引为全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。\n\n在索引期间应用于全文字段的分析链也在搜索时使用。查询全文字段时，查询文本在索引中查找术语之前会进行相同的分析。\n","slug":"study-elastic-stack-2","published":1,"updated":"2019-10-20T05:19:44.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dn004meos63g1p8uvf","content":"<p>Elastic官方提供了Elastic Stack 和 相关产品的<a href=\"https://www.elastic.co/guide/index.html\" target=\"_blank\" rel=\"noopener\">文档</a>，而且提供了中文的文档，<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\"><code>《Elasticsearch 权威指南》中文版</code></a>,不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作<code>CRUD</code>。 <a id=\"more\"></a></p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>Elasticsearch的主要用途是搜索和分析。</p>\n<p>Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats有助于收集，聚合和丰富您的数据并将其存储在Elasticsearch中。Kibana使您能够以交互方式探索，可视化和分享数据洞察，并管理和监控堆栈。</p>\n<p>Elasticsearch为所有类型的数据提供实时搜索和分析。无论是结构化文档还是非结构化文本，数字数据或地理空间数据，Elasticsearch都可以以支持快速搜索的方式有效地存储和索引它。远远超出简单的数据检索和聚合信息，以发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使你部署能够与其一起无缝地增长。</p>\n<h3 id=\"数据输入：文档和索引\"><a href=\"#数据输入：文档和索引\" class=\"headerlink\" title=\"数据输入：文档和索引\"></a>数据输入：文档和索引</h3><p>Elasticsearch是一个分布式文档存储。Elasticsearch不是将信息存储为列数据行，而是存储已经序列化为JSON文档的复杂数据结构。当群集中有多个Elasticsearch节点时，存储的文档将分布在群集中，并且可以从任何节点立即访问。</p>\n<p>存储文档时，它会在1秒内实时索引并完全可搜索。Elasticsearch使用称为倒排索引的数据结构，支持非常快速的全文搜索。倒排索引列出任何文档中出现的每个唯一单词，并标识每个单词出现的所有文档。</p>\n<p>索引可以被视为优化的文档集合，每个文档都是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch会为每个字段中的所有数据编制索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在反向索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来汇编和返回搜索结果的能力使Elasticsearch如此之快。</p>\n<p>Elasticsearch还具有无模式的能力，这意味着可以索引文档而无需显式指定如何处理文档中可能出现的每个不同字段。启用动态映射后，Elasticsearch会自动检测并向索引添加新字段。这种默认行为使您可以轻松索引和浏览数据 - 只需开始索引文档，Elasticsearch将检测并将布尔值，浮点和整数值，日期和字符串映射到相应的Elasticsearch数据类型。</p>\n<p>但是，最终，您比Elasticsearch更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射，以完全控制字段的存储和索引方式。</p>\n<p>定义自己的映射使您能够：</p>\n<p>区分全文字符串字段和精确值字符串字段<br>执行特定于语言的文本分析<br>优化字段以进行部分匹配<br>使用自定义日期格式<br>使用诸如geo_point和geo_shape无法自动检测的数据类型<br>为不同目的以不同方式索引相同字段通常很有用。例如，您可能希望将字符串字段索引为全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。</p>\n<p>在索引期间应用于全文字段的分析链也在搜索时使用。查询全文字段时，查询文本在索引中查找术语之前会进行相同的分析。</p>\n","site":{"data":{}},"excerpt":"<p>Elastic官方提供了Elastic Stack 和 相关产品的<a href=\"https://www.elastic.co/guide/index.html\" target=\"_blank\" rel=\"noopener\">文档</a>，而且提供了中文的文档，<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\"><code>《Elasticsearch 权威指南》中文版</code></a>,不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作<code>CRUD</code>。","more":"</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>Elasticsearch的主要用途是搜索和分析。</p>\n<p>Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats有助于收集，聚合和丰富您的数据并将其存储在Elasticsearch中。Kibana使您能够以交互方式探索，可视化和分享数据洞察，并管理和监控堆栈。</p>\n<p>Elasticsearch为所有类型的数据提供实时搜索和分析。无论是结构化文档还是非结构化文本，数字数据或地理空间数据，Elasticsearch都可以以支持快速搜索的方式有效地存储和索引它。远远超出简单的数据检索和聚合信息，以发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使你部署能够与其一起无缝地增长。</p>\n<h3 id=\"数据输入：文档和索引\"><a href=\"#数据输入：文档和索引\" class=\"headerlink\" title=\"数据输入：文档和索引\"></a>数据输入：文档和索引</h3><p>Elasticsearch是一个分布式文档存储。Elasticsearch不是将信息存储为列数据行，而是存储已经序列化为JSON文档的复杂数据结构。当群集中有多个Elasticsearch节点时，存储的文档将分布在群集中，并且可以从任何节点立即访问。</p>\n<p>存储文档时，它会在1秒内实时索引并完全可搜索。Elasticsearch使用称为倒排索引的数据结构，支持非常快速的全文搜索。倒排索引列出任何文档中出现的每个唯一单词，并标识每个单词出现的所有文档。</p>\n<p>索引可以被视为优化的文档集合，每个文档都是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch会为每个字段中的所有数据编制索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在反向索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来汇编和返回搜索结果的能力使Elasticsearch如此之快。</p>\n<p>Elasticsearch还具有无模式的能力，这意味着可以索引文档而无需显式指定如何处理文档中可能出现的每个不同字段。启用动态映射后，Elasticsearch会自动检测并向索引添加新字段。这种默认行为使您可以轻松索引和浏览数据 - 只需开始索引文档，Elasticsearch将检测并将布尔值，浮点和整数值，日期和字符串映射到相应的Elasticsearch数据类型。</p>\n<p>但是，最终，您比Elasticsearch更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射，以完全控制字段的存储和索引方式。</p>\n<p>定义自己的映射使您能够：</p>\n<p>区分全文字符串字段和精确值字符串字段<br>执行特定于语言的文本分析<br>优化字段以进行部分匹配<br>使用自定义日期格式<br>使用诸如geo_point和geo_shape无法自动检测的数据类型<br>为不同目的以不同方式索引相同字段通常很有用。例如，您可能希望将字符串字段索引为全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。</p>\n<p>在索引期间应用于全文字段的分析链也在搜索时使用。查询全文字段时，查询文本在索引中查找术语之前会进行相同的分析。</p>"},{"title":"pandas学习笔记-2","date":"2018-09-25T15:10:01.000Z","_content":"\n#### 3.为什么pandas命令以括号结尾，其他的命令不呢？([源码见demo3.py](https://github.com/junhuali/study-pandas/blob/master/demo3.py))\n``` python \n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nhead = movies.head()\nprint(head)\n\ndescribe = movies.describe()\nprint(describe)\n\nshape = movies.shape\nprint(shape)\n\ndtypes = movies.dtypes\nprint(dtypes)\n\nprint(type(movies))\n\nmovies.describe(include=['object'])\n```\n\n#### 4. 在pandas DataFrame 中重命名列名([源码见demo4.py](https://github.com/junhuali/study-pandas/blob/master/demo4.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\nhead = ufo.head()\n\nprint(head)\n\nprint(ufo.columns)\n\nufo.rename(columns={'Colors Reported': 'Colors_Reported', 'Shape Reported': 'Shape_Reported'}, inplace=True)\n\nprint(ufo.columns)\n\nufo_cols = {'city', 'colors reported', 'shape reported', 'state', 'time'}\n\nufo.columns = ufo_cols\n\nprint(ufo.head())\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv', names=ufo_cols, header=0)\nprint(ufo.head())\n\nprint(ufo.columns)\n\nufo.columns = ufo.columns.str.replace(' ', '_')\nprint(ufo.columns)\n\n```\n#### 5.在pandas DataFrame 中移除指定的行和列([源码见demo5.py](https://github.com/junhuali/study-pandas/blob/master/demo5.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\nprint(ufo.head())\nprint(ufo.shape)\n\n# axis=0 按行 axi=1 按列\nufo.drop('Colors Reported', axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop(['City', 'State'], axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop([0, 1], axis=0, inplace=True)\nprint(ufo.head())\nprint(ufo.shape)\n```\n\n视频p4\n讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上`shift+tab`键，\n查看对应的说明。\n视频p5\n讲解了通过几种方法修改数据的列名\n视频p6\n讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗\n","source":"_posts/study-pandas-notes-2.md","raw":"---\ntitle: pandas学习笔记-2\ndate: 2018-09-25 23:10:01\ncategories: Python\ntags: pandas\n---\n\n#### 3.为什么pandas命令以括号结尾，其他的命令不呢？([源码见demo3.py](https://github.com/junhuali/study-pandas/blob/master/demo3.py))\n``` python \n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nhead = movies.head()\nprint(head)\n\ndescribe = movies.describe()\nprint(describe)\n\nshape = movies.shape\nprint(shape)\n\ndtypes = movies.dtypes\nprint(dtypes)\n\nprint(type(movies))\n\nmovies.describe(include=['object'])\n```\n\n#### 4. 在pandas DataFrame 中重命名列名([源码见demo4.py](https://github.com/junhuali/study-pandas/blob/master/demo4.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\nhead = ufo.head()\n\nprint(head)\n\nprint(ufo.columns)\n\nufo.rename(columns={'Colors Reported': 'Colors_Reported', 'Shape Reported': 'Shape_Reported'}, inplace=True)\n\nprint(ufo.columns)\n\nufo_cols = {'city', 'colors reported', 'shape reported', 'state', 'time'}\n\nufo.columns = ufo_cols\n\nprint(ufo.head())\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv', names=ufo_cols, header=0)\nprint(ufo.head())\n\nprint(ufo.columns)\n\nufo.columns = ufo.columns.str.replace(' ', '_')\nprint(ufo.columns)\n\n```\n#### 5.在pandas DataFrame 中移除指定的行和列([源码见demo5.py](https://github.com/junhuali/study-pandas/blob/master/demo5.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\nprint(ufo.head())\nprint(ufo.shape)\n\n# axis=0 按行 axi=1 按列\nufo.drop('Colors Reported', axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop(['City', 'State'], axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop([0, 1], axis=0, inplace=True)\nprint(ufo.head())\nprint(ufo.shape)\n```\n\n视频p4\n讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上`shift+tab`键，\n查看对应的说明。\n视频p5\n讲解了通过几种方法修改数据的列名\n视频p6\n讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗\n","slug":"study-pandas-notes-2","published":1,"updated":"2019-10-20T04:54:47.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9do004qeos6gn86b1l2","content":"<h4 id=\"3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\"><a href=\"#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\" class=\"headerlink\" title=\"3.为什么pandas命令以括号结尾，其他的命令不呢？(源码见demo3.py)\"></a>3.为什么pandas命令以括号结尾，其他的命令不呢？(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo3.py\" target=\"_blank\" rel=\"noopener\">源码见demo3.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">head = movies.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">describe = movies.describe()</span><br><span class=\"line\">print(describe)</span><br><span class=\"line\"></span><br><span class=\"line\">shape = movies.shape</span><br><span class=\"line\">print(shape)</span><br><span class=\"line\"></span><br><span class=\"line\">dtypes = movies.dtypes</span><br><span class=\"line\">print(dtypes)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(movies))</span><br><span class=\"line\"></span><br><span class=\"line\">movies.describe(include=[<span class=\"string\">'object'</span>])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在pandas-DataFrame-中重命名列名-源码见demo4-py\"><a href=\"#4-在pandas-DataFrame-中重命名列名-源码见demo4-py\" class=\"headerlink\" title=\"4. 在pandas DataFrame 中重命名列名(源码见demo4.py)\"></a>4. 在pandas DataFrame 中重命名列名(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo4.py\" target=\"_blank\" rel=\"noopener\">源码见demo4.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">head = ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.rename(columns=&#123;<span class=\"string\">'Colors Reported'</span>: <span class=\"string\">'Colors_Reported'</span>, <span class=\"string\">'Shape Reported'</span>: <span class=\"string\">'Shape_Reported'</span>&#125;, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo_cols = &#123;<span class=\"string\">'city'</span>, <span class=\"string\">'colors reported'</span>, <span class=\"string\">'shape reported'</span>, <span class=\"string\">'state'</span>, <span class=\"string\">'time'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo_cols</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>, names=ufo_cols, header=<span class=\"number\">0</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo.columns.str.replace(<span class=\"string\">' '</span>, <span class=\"string\">'_'</span>)</span><br><span class=\"line\">print(ufo.columns)</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\"><a href=\"#5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\" class=\"headerlink\" title=\"5.在pandas DataFrame 中移除指定的行和列(源码见demo5.py)\"></a>5.在pandas DataFrame 中移除指定的行和列(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo5.py\" target=\"_blank\" rel=\"noopener\">源码见demo5.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># axis=0 按行 axi=1 按列</span></span><br><span class=\"line\">ufo.drop(<span class=\"string\">'Colors Reported'</span>, axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"string\">'City'</span>, <span class=\"string\">'State'</span>], axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"number\">0</span>, <span class=\"number\">1</span>], axis=<span class=\"number\">0</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br></pre></td></tr></table></figure>\n\n<p>视频p4<br>讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上<code>shift+tab</code>键，<br>查看对应的说明。<br>视频p5<br>讲解了通过几种方法修改数据的列名<br>视频p6<br>讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\"><a href=\"#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\" class=\"headerlink\" title=\"3.为什么pandas命令以括号结尾，其他的命令不呢？(源码见demo3.py)\"></a>3.为什么pandas命令以括号结尾，其他的命令不呢？(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo3.py\" target=\"_blank\" rel=\"noopener\">源码见demo3.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">head = movies.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">describe = movies.describe()</span><br><span class=\"line\">print(describe)</span><br><span class=\"line\"></span><br><span class=\"line\">shape = movies.shape</span><br><span class=\"line\">print(shape)</span><br><span class=\"line\"></span><br><span class=\"line\">dtypes = movies.dtypes</span><br><span class=\"line\">print(dtypes)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(movies))</span><br><span class=\"line\"></span><br><span class=\"line\">movies.describe(include=[<span class=\"string\">'object'</span>])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在pandas-DataFrame-中重命名列名-源码见demo4-py\"><a href=\"#4-在pandas-DataFrame-中重命名列名-源码见demo4-py\" class=\"headerlink\" title=\"4. 在pandas DataFrame 中重命名列名(源码见demo4.py)\"></a>4. 在pandas DataFrame 中重命名列名(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo4.py\" target=\"_blank\" rel=\"noopener\">源码见demo4.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">head = ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.rename(columns=&#123;<span class=\"string\">'Colors Reported'</span>: <span class=\"string\">'Colors_Reported'</span>, <span class=\"string\">'Shape Reported'</span>: <span class=\"string\">'Shape_Reported'</span>&#125;, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo_cols = &#123;<span class=\"string\">'city'</span>, <span class=\"string\">'colors reported'</span>, <span class=\"string\">'shape reported'</span>, <span class=\"string\">'state'</span>, <span class=\"string\">'time'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo_cols</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>, names=ufo_cols, header=<span class=\"number\">0</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo.columns.str.replace(<span class=\"string\">' '</span>, <span class=\"string\">'_'</span>)</span><br><span class=\"line\">print(ufo.columns)</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\"><a href=\"#5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\" class=\"headerlink\" title=\"5.在pandas DataFrame 中移除指定的行和列(源码见demo5.py)\"></a>5.在pandas DataFrame 中移除指定的行和列(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo5.py\" target=\"_blank\" rel=\"noopener\">源码见demo5.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># axis=0 按行 axi=1 按列</span></span><br><span class=\"line\">ufo.drop(<span class=\"string\">'Colors Reported'</span>, axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"string\">'City'</span>, <span class=\"string\">'State'</span>], axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"number\">0</span>, <span class=\"number\">1</span>], axis=<span class=\"number\">0</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br></pre></td></tr></table></figure>\n\n<p>视频p4<br>讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上<code>shift+tab</code>键，<br>查看对应的说明。<br>视频p5<br>讲解了通过几种方法修改数据的列名<br>视频p6<br>讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗</p>\n"},{"title":"pandas学习笔记-3","date":"2018-09-26T08:19:09.000Z","_content":"\n#### 6.pandas数据排序([源码见demo6.py](https://github.com/junhuali/study-pandas/blob/master/demo6.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\n\nprint(movies['title'].sort_values(ascending=False))\n\nprint(movies['title'])\n\nprint(movies.sort_values('title'))\n\nprint(movies.sort_values('duration', ascending=False))\n\nprint(movies.head())\n\nprint(movies.sort_values(['content_rating', 'duration']))\n\n```\n#### 7.pandas通过列名过滤行数据([源码见demo7.py](https://github.com/junhuali/study-pandas/blob/master/demo7.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\nprint(movies.shape)\n\nprint(type(True))\n\nbooleans = []\nfor length in movies.duration:\n    if length >= 20:\n        booleans.append(True)\n    else:\n        booleans.append(False)\n\nbooleans[0:5]\n\nlen(booleans)\n\nis_long = pd.Series(booleans)\nis_long.head()\n\nis_long = movies.duration >= 200\nis_long.head()\nmovies['genre']\n\nmovies[movies.duration >= 200]['genre']\nmovies[is_long]\n```\n\np7\n讲解了使用sort_values() 方法对数据进行排序\np8\n讲解了通过指定的条件对数据进行筛选","source":"_posts/study-pandas-notes-3.md","raw":"---\ntitle: pandas学习笔记-3\ndate: 2018-09-26 16:19:09\ncategories: Python\ntags: pandas\n---\n\n#### 6.pandas数据排序([源码见demo6.py](https://github.com/junhuali/study-pandas/blob/master/demo6.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\n\nprint(movies['title'].sort_values(ascending=False))\n\nprint(movies['title'])\n\nprint(movies.sort_values('title'))\n\nprint(movies.sort_values('duration', ascending=False))\n\nprint(movies.head())\n\nprint(movies.sort_values(['content_rating', 'duration']))\n\n```\n#### 7.pandas通过列名过滤行数据([源码见demo7.py](https://github.com/junhuali/study-pandas/blob/master/demo7.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\nprint(movies.shape)\n\nprint(type(True))\n\nbooleans = []\nfor length in movies.duration:\n    if length >= 20:\n        booleans.append(True)\n    else:\n        booleans.append(False)\n\nbooleans[0:5]\n\nlen(booleans)\n\nis_long = pd.Series(booleans)\nis_long.head()\n\nis_long = movies.duration >= 200\nis_long.head()\nmovies['genre']\n\nmovies[movies.duration >= 200]['genre']\nmovies[is_long]\n```\n\np7\n讲解了使用sort_values() 方法对数据进行排序\np8\n讲解了通过指定的条件对数据进行筛选","slug":"study-pandas-notes-3","published":1,"updated":"2019-10-20T04:54:47.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9do004seos63col6rq9","content":"<h4 id=\"6-pandas数据排序-源码见demo6-py\"><a href=\"#6-pandas数据排序-源码见demo6-py\" class=\"headerlink\" title=\"6.pandas数据排序(源码见demo6.py)\"></a>6.pandas数据排序(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo6.py\" target=\"_blank\" rel=\"noopener\">源码见demo6.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>].sort_values(ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'title'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'duration'</span>, ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values([<span class=\"string\">'content_rating'</span>, <span class=\"string\">'duration'</span>]))</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-pandas通过列名过滤行数据-源码见demo7-py\"><a href=\"#7-pandas通过列名过滤行数据-源码见demo7-py\" class=\"headerlink\" title=\"7.pandas通过列名过滤行数据(源码见demo7.py)\"></a>7.pandas通过列名过滤行数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo7.py\" target=\"_blank\" rel=\"noopener\">源码见demo7.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\">print(movies.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">booleans = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> length <span class=\"keyword\">in</span> movies.duration:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">booleans[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">len(booleans)</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = pd.Series(booleans)</span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = movies.duration &gt;= <span class=\"number\">200</span></span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\">movies[<span class=\"string\">'genre'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">movies[movies.duration &gt;= <span class=\"number\">200</span>][<span class=\"string\">'genre'</span>]</span><br><span class=\"line\">movies[is_long]</span><br></pre></td></tr></table></figure>\n\n<p>p7<br>讲解了使用sort_values() 方法对数据进行排序<br>p8<br>讲解了通过指定的条件对数据进行筛选</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"6-pandas数据排序-源码见demo6-py\"><a href=\"#6-pandas数据排序-源码见demo6-py\" class=\"headerlink\" title=\"6.pandas数据排序(源码见demo6.py)\"></a>6.pandas数据排序(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo6.py\" target=\"_blank\" rel=\"noopener\">源码见demo6.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>].sort_values(ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'title'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'duration'</span>, ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values([<span class=\"string\">'content_rating'</span>, <span class=\"string\">'duration'</span>]))</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-pandas通过列名过滤行数据-源码见demo7-py\"><a href=\"#7-pandas通过列名过滤行数据-源码见demo7-py\" class=\"headerlink\" title=\"7.pandas通过列名过滤行数据(源码见demo7.py)\"></a>7.pandas通过列名过滤行数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo7.py\" target=\"_blank\" rel=\"noopener\">源码见demo7.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\">print(movies.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">booleans = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> length <span class=\"keyword\">in</span> movies.duration:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">booleans[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">len(booleans)</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = pd.Series(booleans)</span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = movies.duration &gt;= <span class=\"number\">200</span></span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\">movies[<span class=\"string\">'genre'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">movies[movies.duration &gt;= <span class=\"number\">200</span>][<span class=\"string\">'genre'</span>]</span><br><span class=\"line\">movies[is_long]</span><br></pre></td></tr></table></figure>\n\n<p>p7<br>讲解了使用sort_values() 方法对数据进行排序<br>p8<br>讲解了通过指定的条件对数据进行筛选</p>\n"},{"title":"pandas学习笔记","date":"2018-09-21T06:02:16.000Z","_content":"![pandas](study-pandas-notes/pandas.png)\n最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。\n\n什么是pandas\n> pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\n完整的文档可以查看pandas的[Cookbook](http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook)\n\n视频地址:\n[bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas](https://www.bilibili.com/video/av6785636/)\n\n### 环境安装\n- 安装python环境\n- 安装pandas\npython 环境的安装，可以看之前的文章，在centos7上安装python。\n\npandas安装：\n1.Mac上使用brew `brew cask install anaconda`\n2.python -m pip install pandas https://pypi.douban.com/simple/ \n推荐使用第一种，anaconda的方式安装，比较方便\n使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如`matplotlib`;\n### 视频使用的资源\n[百度网盘]](https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw) 密码：dr78 （来自bilibili用户）\n视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址\n\n### 目录\n#### 1.读取表格数据到pandas中([源码见demo1.py](https://github.com/junhuali/study-pandas/blob/master/demo1.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\n''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''\n\norders = pd.read_table('https://blog.searchinfogo.com/download/data/data/chipotle.tsv')\n\nprint(orders)\n\nhead = orders.head()\nprint(head)\n\nuser_cols = ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nusers = pd.read_table(\"https://blog.searchinfogo.com/download/data/data/u.user\", sep='|', header=None, names=user_cols)\nprint(users)\n\n```\n#### 2.从csv中读取数据([源码见demo2.py](https://github.com/junhuali/study-pandas/blob/master/demo2.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\ntype = type(ufo)\n\nprint(type)\n\nufo.head()\n\ntype(ufo['City'])\n\nprint(ufo['City'])\n\nufo.shape\n\nufo.City + ufo.State\n\nufo['Location'] = ufo.City + ',' + ufo.State\n\nprint(ufo['Location'])\n\n```\n总结：\n上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及\n生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到\npandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。\n\n\n\n\n","source":"_posts/study-pandas-notes.md","raw":"---\ntitle: pandas学习笔记\ndate: 2018-09-21 14:02:16\ncategories: Python\ntags: pandas\n---\n![pandas](study-pandas-notes/pandas.png)\n最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。\n\n什么是pandas\n> pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\n完整的文档可以查看pandas的[Cookbook](http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook)\n\n视频地址:\n[bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas](https://www.bilibili.com/video/av6785636/)\n\n### 环境安装\n- 安装python环境\n- 安装pandas\npython 环境的安装，可以看之前的文章，在centos7上安装python。\n\npandas安装：\n1.Mac上使用brew `brew cask install anaconda`\n2.python -m pip install pandas https://pypi.douban.com/simple/ \n推荐使用第一种，anaconda的方式安装，比较方便\n使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如`matplotlib`;\n### 视频使用的资源\n[百度网盘]](https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw) 密码：dr78 （来自bilibili用户）\n视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址\n\n### 目录\n#### 1.读取表格数据到pandas中([源码见demo1.py](https://github.com/junhuali/study-pandas/blob/master/demo1.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\n''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''\n\norders = pd.read_table('https://blog.searchinfogo.com/download/data/data/chipotle.tsv')\n\nprint(orders)\n\nhead = orders.head()\nprint(head)\n\nuser_cols = ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nusers = pd.read_table(\"https://blog.searchinfogo.com/download/data/data/u.user\", sep='|', header=None, names=user_cols)\nprint(users)\n\n```\n#### 2.从csv中读取数据([源码见demo2.py](https://github.com/junhuali/study-pandas/blob/master/demo2.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\ntype = type(ufo)\n\nprint(type)\n\nufo.head()\n\ntype(ufo['City'])\n\nprint(ufo['City'])\n\nufo.shape\n\nufo.City + ufo.State\n\nufo['Location'] = ufo.City + ',' + ufo.State\n\nprint(ufo['Location'])\n\n```\n总结：\n上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及\n生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到\npandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。\n\n\n\n\n","slug":"study-pandas-notes","published":1,"updated":"2019-10-20T04:54:47.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dq004weos6cdnh1ge0","content":"<p><img src=\"study-pandas-notes/pandas.png\" alt=\"pandas\"><br>最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。</p>\n<p>什么是pandas</p>\n<blockquote>\n<p>pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>\n</blockquote>\n<p>完整的文档可以查看pandas的<a href=\"http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook\" target=\"_blank\" rel=\"noopener\">Cookbook</a></p>\n<p>视频地址:<br><a href=\"https://www.bilibili.com/video/av6785636/\" target=\"_blank\" rel=\"noopener\">bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas</a></p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><ul>\n<li>安装python环境</li>\n<li>安装pandas<br>python 环境的安装，可以看之前的文章，在centos7上安装python。</li>\n</ul>\n<p>pandas安装：<br>1.Mac上使用brew <code>brew cask install anaconda</code><br>2.python -m pip install pandas <a href=\"https://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple/</a><br>推荐使用第一种，anaconda的方式安装，比较方便<br>使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如<code>matplotlib</code>;</p>\n<h3 id=\"视频使用的资源\"><a href=\"#视频使用的资源\" class=\"headerlink\" title=\"视频使用的资源\"></a>视频使用的资源</h3><p>[百度网盘]](<a href=\"https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw</a>) 密码：dr78 （来自bilibili用户）<br>视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><h4 id=\"1-读取表格数据到pandas中-源码见demo1-py\"><a href=\"#1-读取表格数据到pandas中-源码见demo1-py\" class=\"headerlink\" title=\"1.读取表格数据到pandas中(源码见demo1.py)\"></a>1.读取表格数据到pandas中(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo1.py\" target=\"_blank\" rel=\"noopener\">源码见demo1.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">orders = pd.read_table(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/chipotle.tsv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(orders)</span><br><span class=\"line\"></span><br><span class=\"line\">head = orders.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">user_cols = [<span class=\"string\">'user_id'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'gender'</span>, <span class=\"string\">'occupation'</span>, <span class=\"string\">'zip_code'</span>]</span><br><span class=\"line\">users = pd.read_table(<span class=\"string\">\"https://blog.searchinfogo.com/download/data/data/u.user\"</span>, sep=<span class=\"string\">'|'</span>, header=<span class=\"literal\">None</span>, names=user_cols)</span><br><span class=\"line\">print(users)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-从csv中读取数据-源码见demo2-py\"><a href=\"#2-从csv中读取数据-源码见demo2-py\" class=\"headerlink\" title=\"2.从csv中读取数据(源码见demo2.py)\"></a>2.从csv中读取数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo2.py\" target=\"_blank\" rel=\"noopener\">源码见demo2.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">type = type(ufo)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">type(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.shape</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.City + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">ufo[<span class=\"string\">'Location'</span>] = ufo.City + <span class=\"string\">','</span> + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'Location'</span>])</span><br></pre></td></tr></table></figure>\n<p>总结：<br>上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及<br>生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到<br>pandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"study-pandas-notes/pandas.png\" alt=\"pandas\"><br>最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。</p>\n<p>什么是pandas</p>\n<blockquote>\n<p>pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>\n</blockquote>\n<p>完整的文档可以查看pandas的<a href=\"http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook\" target=\"_blank\" rel=\"noopener\">Cookbook</a></p>\n<p>视频地址:<br><a href=\"https://www.bilibili.com/video/av6785636/\" target=\"_blank\" rel=\"noopener\">bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas</a></p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><ul>\n<li>安装python环境</li>\n<li>安装pandas<br>python 环境的安装，可以看之前的文章，在centos7上安装python。</li>\n</ul>\n<p>pandas安装：<br>1.Mac上使用brew <code>brew cask install anaconda</code><br>2.python -m pip install pandas <a href=\"https://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple/</a><br>推荐使用第一种，anaconda的方式安装，比较方便<br>使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如<code>matplotlib</code>;</p>\n<h3 id=\"视频使用的资源\"><a href=\"#视频使用的资源\" class=\"headerlink\" title=\"视频使用的资源\"></a>视频使用的资源</h3><p>[百度网盘]](<a href=\"https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw</a>) 密码：dr78 （来自bilibili用户）<br>视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><h4 id=\"1-读取表格数据到pandas中-源码见demo1-py\"><a href=\"#1-读取表格数据到pandas中-源码见demo1-py\" class=\"headerlink\" title=\"1.读取表格数据到pandas中(源码见demo1.py)\"></a>1.读取表格数据到pandas中(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo1.py\" target=\"_blank\" rel=\"noopener\">源码见demo1.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">orders = pd.read_table(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/chipotle.tsv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(orders)</span><br><span class=\"line\"></span><br><span class=\"line\">head = orders.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">user_cols = [<span class=\"string\">'user_id'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'gender'</span>, <span class=\"string\">'occupation'</span>, <span class=\"string\">'zip_code'</span>]</span><br><span class=\"line\">users = pd.read_table(<span class=\"string\">\"https://blog.searchinfogo.com/download/data/data/u.user\"</span>, sep=<span class=\"string\">'|'</span>, header=<span class=\"literal\">None</span>, names=user_cols)</span><br><span class=\"line\">print(users)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-从csv中读取数据-源码见demo2-py\"><a href=\"#2-从csv中读取数据-源码见demo2-py\" class=\"headerlink\" title=\"2.从csv中读取数据(源码见demo2.py)\"></a>2.从csv中读取数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo2.py\" target=\"_blank\" rel=\"noopener\">源码见demo2.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">type = type(ufo)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">type(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.shape</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.City + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">ufo[<span class=\"string\">'Location'</span>] = ufo.City + <span class=\"string\">','</span> + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'Location'</span>])</span><br></pre></td></tr></table></figure>\n<p>总结：<br>上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及<br>生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到<br>pandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。</p>\n"},{"title":"学习Shell命令行总结","date":"2018-04-02T12:38:29.000Z","_content":"\n### 了解linux系统内核\n内核的主要作用\n- 系统内存管理\n- 软件程序管理\n- 硬件设备管理\n- 文件系统管理\n\n什么是虚拟内存\n内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。\n平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用\nswap分区，原因是因为`开启SWAP可能会因频繁换页操作，导致IO性能下降`，如果内存足够的情况下，建议关闭\nswap 分区。\n\n软件程序管理\nLinux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。\n内核创建第一个进程称为`init进程`，来启动系统上其他进程，并将其加载到虚拟内存中。\n\n一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。\n另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。\n\nLinux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好\n的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）\n\nCentOS系统有7个运行级别(runlevel)\n\n运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆\n运行级别2：多用户状态(没有NFS)\n运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登陆后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n\n不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。\n\n硬件设备管理\n内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动\n- 编译进内核的设备驱动代码\n- 可插入内核的设备驱动代码（这种方式比较方便，利于维护）\n\n文件系统管理\nLinux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的\n支持。\n\n\nShell 的种类\n在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。\n- ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容\n- korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性\n- tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell\n- zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。\n\nLinux 图形化桌面 基本上用不到，就略过了。\n\n文件路径\n- 相对路径\n- 绝对路劲\n`pwd` 命令查询当前所在的目录\n`ls -F` 显示出文件夹和普通文件\n`ls -F -R` -R 递归文件夹\n\n文件拷贝\n`copy -R` 拷贝整个目录和文件\n\n链接文件\n- 符号链接\n- 硬链接\n`ln -s`\n`ln`\n\n2018年07月11日11:20:39（更新）\n### 环境变量\n- 全局变量\n- 局部变量\n\n\n","source":"_posts/study-shell.md","raw":"---\ntitle: 学习Shell命令行总结\ndate: 2018-04-02 20:38:29\ncategories: Shell\ntags: Shell\n---\n\n### 了解linux系统内核\n内核的主要作用\n- 系统内存管理\n- 软件程序管理\n- 硬件设备管理\n- 文件系统管理\n\n什么是虚拟内存\n内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。\n平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用\nswap分区，原因是因为`开启SWAP可能会因频繁换页操作，导致IO性能下降`，如果内存足够的情况下，建议关闭\nswap 分区。\n\n软件程序管理\nLinux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。\n内核创建第一个进程称为`init进程`，来启动系统上其他进程，并将其加载到虚拟内存中。\n\n一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。\n另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。\n\nLinux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好\n的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）\n\nCentOS系统有7个运行级别(runlevel)\n\n运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆\n运行级别2：多用户状态(没有NFS)\n运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登陆后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n\n不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。\n\n硬件设备管理\n内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动\n- 编译进内核的设备驱动代码\n- 可插入内核的设备驱动代码（这种方式比较方便，利于维护）\n\n文件系统管理\nLinux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的\n支持。\n\n\nShell 的种类\n在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。\n- ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容\n- korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性\n- tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell\n- zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。\n\nLinux 图形化桌面 基本上用不到，就略过了。\n\n文件路径\n- 相对路径\n- 绝对路劲\n`pwd` 命令查询当前所在的目录\n`ls -F` 显示出文件夹和普通文件\n`ls -F -R` -R 递归文件夹\n\n文件拷贝\n`copy -R` 拷贝整个目录和文件\n\n链接文件\n- 符号链接\n- 硬链接\n`ln -s`\n`ln`\n\n2018年07月11日11:20:39（更新）\n### 环境变量\n- 全局变量\n- 局部变量\n\n\n","slug":"study-shell","published":1,"updated":"2019-10-20T04:54:47.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dq004yeos64nse2tcj","content":"<h3 id=\"了解linux系统内核\"><a href=\"#了解linux系统内核\" class=\"headerlink\" title=\"了解linux系统内核\"></a>了解linux系统内核</h3><p>内核的主要作用</p>\n<ul>\n<li>系统内存管理</li>\n<li>软件程序管理</li>\n<li>硬件设备管理</li>\n<li>文件系统管理</li>\n</ul>\n<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>\n<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>\n<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>\n<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>\n<p>CentOS系统有7个运行级别(runlevel)</p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>\n<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>\n</ul>\n<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>\n<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>\n<ul>\n<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>\n<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>\n<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>\n<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>\n</ul>\n<p>Linux 图形化桌面 基本上用不到，就略过了。</p>\n<p>文件路径</p>\n<ul>\n<li>相对路径</li>\n<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>\n</ul>\n<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>\n<p>链接文件</p>\n<ul>\n<li>符号链接</li>\n<li>硬链接<br><code>ln -s</code><br><code>ln</code></li>\n</ul>\n<p>2018年07月11日11:20:39（更新）</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><ul>\n<li>全局变量</li>\n<li>局部变量</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"了解linux系统内核\"><a href=\"#了解linux系统内核\" class=\"headerlink\" title=\"了解linux系统内核\"></a>了解linux系统内核</h3><p>内核的主要作用</p>\n<ul>\n<li>系统内存管理</li>\n<li>软件程序管理</li>\n<li>硬件设备管理</li>\n<li>文件系统管理</li>\n</ul>\n<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>\n<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>\n<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>\n<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>\n<p>CentOS系统有7个运行级别(runlevel)</p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>\n<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>\n</ul>\n<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>\n<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>\n<ul>\n<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>\n<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>\n<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>\n<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>\n</ul>\n<p>Linux 图形化桌面 基本上用不到，就略过了。</p>\n<p>文件路径</p>\n<ul>\n<li>相对路径</li>\n<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>\n</ul>\n<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>\n<p>链接文件</p>\n<ul>\n<li>符号链接</li>\n<li>硬链接<br><code>ln -s</code><br><code>ln</code></li>\n</ul>\n<p>2018年07月11日11:20:39（更新）</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><ul>\n<li>全局变量</li>\n<li>局部变量</li>\n</ul>\n"},{"title":"swagger2.9.2的NumberFormatException","date":"2019-05-20T08:00:45.000Z","_content":"SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<!-- more -->\n``` java\n[ WARN ] [2019-05-20 16:39:47] [http-nio-8080-exec-6] i.s.m.p.AbstractSerializableParameter [421]  - Illegal DefaultValue 0 for parameter type integer\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n  .....\n```\n可以看到是在`Long.parseLong()`转换的时候报错了\n### 解决办法\n试了网上说的增加默认值，但是在我本地没有生效\n``` java\n@ApiModelProperty(value = \"id\",example = \"123\")\n```\n第二种方法\npom中增加新的依赖\n``` xml\n     # 默认的配置\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger-ui</artifactId>\n               <version>2.9.2</version>\n           </dependency>\n\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger2</artifactId>\n               <version>2</version>\n           </dependency>\n    # 增加两个配置\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-annotations</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-models</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n```\n增加上面的配置后，就不再报错了。\n#### 原因\n1.5.20的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n   public Object getExample() {\n       if (this.example == null) {\n           return null;\n       } else {\n           try {\n               if (\"integer\".equals(this.type)) {\n                   return Long.valueOf(this.example);\n               }\n\n               if (\"number\".equals(this.type)) {\n                   return Double.valueOf(this.example);\n               }\n\n               if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                   return Boolean.valueOf(this.example);\n               }\n           } catch (NumberFormatException var2) {\n               LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n           }\n\n           return this.example;\n       }\n   }\n```\n1.5.22 的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n    public Object getExample() {\n        if (this.example != null && !this.example.isEmpty()) {\n            try {\n                if (\"integer\".equals(this.type)) {\n                    return Long.valueOf(this.example);\n                }\n\n                if (\"number\".equals(this.type)) {\n                    return Double.valueOf(this.example);\n                }\n\n                if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                    return Boolean.valueOf(this.example);\n                }\n            } catch (NumberFormatException var2) {\n                LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n            }\n\n            return this.example;\n        } else {\n            return this.example;\n        }\n    }\n```\n从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。\n","source":"_posts/swagger-2.9.2-NumberFormatException.md","raw":"---\ntitle: swagger2.9.2的NumberFormatException\ndate: 2019-05-20 16:00:45\ncategories: Java\ntags: Swagger2\n---\nSpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<!-- more -->\n``` java\n[ WARN ] [2019-05-20 16:39:47] [http-nio-8080-exec-6] i.s.m.p.AbstractSerializableParameter [421]  - Illegal DefaultValue 0 for parameter type integer\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n  .....\n```\n可以看到是在`Long.parseLong()`转换的时候报错了\n### 解决办法\n试了网上说的增加默认值，但是在我本地没有生效\n``` java\n@ApiModelProperty(value = \"id\",example = \"123\")\n```\n第二种方法\npom中增加新的依赖\n``` xml\n     # 默认的配置\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger-ui</artifactId>\n               <version>2.9.2</version>\n           </dependency>\n\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger2</artifactId>\n               <version>2</version>\n           </dependency>\n    # 增加两个配置\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-annotations</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-models</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n```\n增加上面的配置后，就不再报错了。\n#### 原因\n1.5.20的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n   public Object getExample() {\n       if (this.example == null) {\n           return null;\n       } else {\n           try {\n               if (\"integer\".equals(this.type)) {\n                   return Long.valueOf(this.example);\n               }\n\n               if (\"number\".equals(this.type)) {\n                   return Double.valueOf(this.example);\n               }\n\n               if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                   return Boolean.valueOf(this.example);\n               }\n           } catch (NumberFormatException var2) {\n               LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n           }\n\n           return this.example;\n       }\n   }\n```\n1.5.22 的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n    public Object getExample() {\n        if (this.example != null && !this.example.isEmpty()) {\n            try {\n                if (\"integer\".equals(this.type)) {\n                    return Long.valueOf(this.example);\n                }\n\n                if (\"number\".equals(this.type)) {\n                    return Double.valueOf(this.example);\n                }\n\n                if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                    return Boolean.valueOf(this.example);\n                }\n            } catch (NumberFormatException var2) {\n                LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n            }\n\n            return this.example;\n        } else {\n            return this.example;\n        }\n    }\n```\n从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。\n","slug":"swagger-2.9.2-NumberFormatException","published":1,"updated":"2019-10-20T04:54:47.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dr0052eos64tht97nj","content":"<p>SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ WARN ] [<span class=\"number\">2019</span>-<span class=\"number\">05</span>-<span class=\"number\">20</span> <span class=\"number\">16</span>:<span class=\"number\">39</span>:<span class=\"number\">47</span>] [http-nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">6</span>] i.s.m.p.AbstractSerializableParameter [<span class=\"number\">421</span>]  - Illegal DefaultValue <span class=\"number\">0</span> <span class=\"keyword\">for</span> parameter type integer</span><br><span class=\"line\">java.lang.NumberFormatException: For input string: <span class=\"string\">\"\"</span></span><br><span class=\"line\">\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"number\">65</span>)</span><br><span class=\"line\">\tat java.lang.Long.parseLong(Long.java:<span class=\"number\">601</span>)</span><br><span class=\"line\">\tat java.lang.Long.valueOf(Long.java:<span class=\"number\">803</span>)</span><br><span class=\"line\">\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"number\">412</span>)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">  .....</span><br></pre></td></tr></table></figure>\n<p>可以看到是在<code>Long.parseLong()</code>转换的时候报错了</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>试了网上说的增加默认值，但是在我本地没有生效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"id\"</span>,example = <span class=\"string\">\"123\"</span>)</span><br></pre></td></tr></table></figure>\n<p>第二种方法<br>pom中增加新的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 默认的配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"># 增加两个配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-models<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>增加上面的配置后，就不再报错了。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>1.5.20的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">               LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>1.5.22 的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.example.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">                LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。</p>\n","site":{"data":{}},"excerpt":"<p>SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ WARN ] [<span class=\"number\">2019</span>-<span class=\"number\">05</span>-<span class=\"number\">20</span> <span class=\"number\">16</span>:<span class=\"number\">39</span>:<span class=\"number\">47</span>] [http-nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">6</span>] i.s.m.p.AbstractSerializableParameter [<span class=\"number\">421</span>]  - Illegal DefaultValue <span class=\"number\">0</span> <span class=\"keyword\">for</span> parameter type integer</span><br><span class=\"line\">java.lang.NumberFormatException: For input string: <span class=\"string\">\"\"</span></span><br><span class=\"line\">\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"number\">65</span>)</span><br><span class=\"line\">\tat java.lang.Long.parseLong(Long.java:<span class=\"number\">601</span>)</span><br><span class=\"line\">\tat java.lang.Long.valueOf(Long.java:<span class=\"number\">803</span>)</span><br><span class=\"line\">\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"number\">412</span>)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">  .....</span><br></pre></td></tr></table></figure>\n<p>可以看到是在<code>Long.parseLong()</code>转换的时候报错了</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>试了网上说的增加默认值，但是在我本地没有生效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"id\"</span>,example = <span class=\"string\">\"123\"</span>)</span><br></pre></td></tr></table></figure>\n<p>第二种方法<br>pom中增加新的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 默认的配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"># 增加两个配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-models<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>增加上面的配置后，就不再报错了。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>1.5.20的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">               LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>1.5.22 的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.example.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">                LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。</p>"},{"title":"Ubuntu安装LAMP","date":"2017-10-28T03:32:00.000Z","_content":"### LAMP\n Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<!-- more -->\n### 环境\n基于Ubuntu\n### 开始\n\n``` bash\n$ apt-get update && sudo apt-get upgrade #更新软件包\n```\n#### 安装MySQL\n```bash\n$ sudo apt-get install -y mysql-server\n$ sudo apt-get install -y mysql-client\n! 记得设置默认密码\n```\n\n\n ``` bash\n $ sudo netstat -tap | grep mysql #显示监听的端口即表示安装成功\n ```\n\n#### 配置远程连接\n``` bash\n$ vim /etc/mysql/mysql.conf.d/mysqld.cnf\n#bind-address = 127.0.0.1\n```\n#### 远程访问赋权\n``` bash\n$ mysql -u root -p\n$ grant all on *.* to root@'%' identified by 'root';\n$ flush privileges;  \n$ exit\n$ service mysql restart(or: $ /etc/init.d/mysql restart)# 重启\n```\n####安装Apache2\n\n```bash\n$ sudo apt-get install -y apache2\n```\n\n``` bash\n#修改apache2.conf配置\n$ vi /etc/apache2/apache2.conf\n$ KeepAlive Off\n#修改mpm_prefork.conf配置\n$ vim /etc/apache2/mods-available/mpm_prefork.conf\n <IfModule mpm_prefork_module>\n   StartServers            2\n   MinSpareServers         6\n   MaxSpareServers         12\n   MaxRequestWorkers       39\n   MaxConnectionsPerChild  3000\n</IfModule>\n\n#禁用和启动模块\n$ sudo a2dismod mpm_event\n$ sudo a2enmod mpm_prefork\n$ sudo systemctl restart apache2 #重启Apache\n```\n#### PHP 安装\n``` bash\n# 安装相关包\n$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y\n# 安装组件支持\napt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y\n# 重启服务\n$ sudo systemctl restart apache2\n\n```\n\n#### phpmyadmin 安装\n``` bash\n\n$ sudo apt-get install -y phpmyadmin\n#安装对应php包（如果没有安装对应的包）\n$ sudo apt-get install -y php-mbstring\n$ sudo apt-get install -y php-gettext\n#安装时选择自动配置数据库，输入数据库root账号的密码\n#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误\n\n#建立软连接\n$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n#重启apache\n$ sudo /etc/init.d/apache2 restart\n#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可\n```\n","source":"_posts/ubuntu-install-lamp.md","raw":"---\ntitle: Ubuntu安装LAMP\ndate: 2017-10-28 11:32:00\ncategories: Linux\ntag: Shell\n---\n### LAMP\n Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<!-- more -->\n### 环境\n基于Ubuntu\n### 开始\n\n``` bash\n$ apt-get update && sudo apt-get upgrade #更新软件包\n```\n#### 安装MySQL\n```bash\n$ sudo apt-get install -y mysql-server\n$ sudo apt-get install -y mysql-client\n! 记得设置默认密码\n```\n\n\n ``` bash\n $ sudo netstat -tap | grep mysql #显示监听的端口即表示安装成功\n ```\n\n#### 配置远程连接\n``` bash\n$ vim /etc/mysql/mysql.conf.d/mysqld.cnf\n#bind-address = 127.0.0.1\n```\n#### 远程访问赋权\n``` bash\n$ mysql -u root -p\n$ grant all on *.* to root@'%' identified by 'root';\n$ flush privileges;  \n$ exit\n$ service mysql restart(or: $ /etc/init.d/mysql restart)# 重启\n```\n####安装Apache2\n\n```bash\n$ sudo apt-get install -y apache2\n```\n\n``` bash\n#修改apache2.conf配置\n$ vi /etc/apache2/apache2.conf\n$ KeepAlive Off\n#修改mpm_prefork.conf配置\n$ vim /etc/apache2/mods-available/mpm_prefork.conf\n <IfModule mpm_prefork_module>\n   StartServers            2\n   MinSpareServers         6\n   MaxSpareServers         12\n   MaxRequestWorkers       39\n   MaxConnectionsPerChild  3000\n</IfModule>\n\n#禁用和启动模块\n$ sudo a2dismod mpm_event\n$ sudo a2enmod mpm_prefork\n$ sudo systemctl restart apache2 #重启Apache\n```\n#### PHP 安装\n``` bash\n# 安装相关包\n$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y\n# 安装组件支持\napt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y\n# 重启服务\n$ sudo systemctl restart apache2\n\n```\n\n#### phpmyadmin 安装\n``` bash\n\n$ sudo apt-get install -y phpmyadmin\n#安装对应php包（如果没有安装对应的包）\n$ sudo apt-get install -y php-mbstring\n$ sudo apt-get install -y php-gettext\n#安装时选择自动配置数据库，输入数据库root账号的密码\n#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误\n\n#建立软连接\n$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n#重启apache\n$ sudo /etc/init.d/apache2 restart\n#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可\n```\n","slug":"ubuntu-install-lamp","published":1,"updated":"2019-10-20T04:54:47.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dr0054eos69qf9ct22","content":"<h3 id=\"LAMP\"><a href=\"#LAMP\" class=\"headerlink\" title=\"LAMP\"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<a id=\"more\"></a></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于Ubuntu</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class=\"comment\">#更新软件包</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y mysql-server</span><br><span class=\"line\">$ sudo apt-get install -y mysql-client</span><br><span class=\"line\">! 记得设置默认密码</span><br></pre></td></tr></table></figure>\n\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tap | grep mysql <span class=\"comment\">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置远程连接\"><a href=\"#配置远程连接\" class=\"headerlink\" title=\"配置远程连接\"></a>配置远程连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"远程访问赋权\"><a href=\"#远程访问赋权\" class=\"headerlink\" title=\"远程访问赋权\"></a>远程访问赋权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">$ grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'root'</span>;</span><br><span class=\"line\">$ flush privileges;  </span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n<p>####安装Apache2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改apache2.conf配置</span></span><br><span class=\"line\">$ vi /etc/apache2/apache2.conf</span><br><span class=\"line\">$ KeepAlive Off</span><br><span class=\"line\"><span class=\"comment\">#修改mpm_prefork.conf配置</span></span><br><span class=\"line\">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class=\"line\"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class=\"line\">   StartServers            2</span><br><span class=\"line\">   MinSpareServers         6</span><br><span class=\"line\">   MaxSpareServers         12</span><br><span class=\"line\">   MaxRequestWorkers       39</span><br><span class=\"line\">   MaxConnectionsPerChild  3000</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用和启动模块</span></span><br><span class=\"line\">$ sudo a2dismod mpm_event</span><br><span class=\"line\">$ sudo a2enmod mpm_prefork</span><br><span class=\"line\">$ sudo systemctl restart apache2 <span class=\"comment\">#重启Apache</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装相关包</span></span><br><span class=\"line\">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class=\"line\"><span class=\"comment\"># 安装组件支持</span></span><br><span class=\"line\">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"phpmyadmin-安装\"><a href=\"#phpmyadmin-安装\" class=\"headerlink\" title=\"phpmyadmin 安装\"></a>phpmyadmin 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install -y phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#安装对应php包（如果没有安装对应的包）</span></span><br><span class=\"line\">$ sudo apt-get install -y php-mbstring</span><br><span class=\"line\">$ sudo apt-get install -y php-gettext</span><br><span class=\"line\"><span class=\"comment\">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class=\"line\"><span class=\"comment\">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立软连接</span></span><br><span class=\"line\">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#重启apache</span></span><br><span class=\"line\">$ sudo /etc/init.d/apache2 restart</span><br><span class=\"line\"><span class=\"comment\">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"LAMP\"><a href=\"#LAMP\" class=\"headerlink\" title=\"LAMP\"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。","more":"</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于Ubuntu</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class=\"comment\">#更新软件包</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y mysql-server</span><br><span class=\"line\">$ sudo apt-get install -y mysql-client</span><br><span class=\"line\">! 记得设置默认密码</span><br></pre></td></tr></table></figure>\n\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tap | grep mysql <span class=\"comment\">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置远程连接\"><a href=\"#配置远程连接\" class=\"headerlink\" title=\"配置远程连接\"></a>配置远程连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"远程访问赋权\"><a href=\"#远程访问赋权\" class=\"headerlink\" title=\"远程访问赋权\"></a>远程访问赋权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">$ grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'root'</span>;</span><br><span class=\"line\">$ flush privileges;  </span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n<p>####安装Apache2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改apache2.conf配置</span></span><br><span class=\"line\">$ vi /etc/apache2/apache2.conf</span><br><span class=\"line\">$ KeepAlive Off</span><br><span class=\"line\"><span class=\"comment\">#修改mpm_prefork.conf配置</span></span><br><span class=\"line\">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class=\"line\"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class=\"line\">   StartServers            2</span><br><span class=\"line\">   MinSpareServers         6</span><br><span class=\"line\">   MaxSpareServers         12</span><br><span class=\"line\">   MaxRequestWorkers       39</span><br><span class=\"line\">   MaxConnectionsPerChild  3000</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用和启动模块</span></span><br><span class=\"line\">$ sudo a2dismod mpm_event</span><br><span class=\"line\">$ sudo a2enmod mpm_prefork</span><br><span class=\"line\">$ sudo systemctl restart apache2 <span class=\"comment\">#重启Apache</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装相关包</span></span><br><span class=\"line\">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class=\"line\"><span class=\"comment\"># 安装组件支持</span></span><br><span class=\"line\">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"phpmyadmin-安装\"><a href=\"#phpmyadmin-安装\" class=\"headerlink\" title=\"phpmyadmin 安装\"></a>phpmyadmin 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install -y phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#安装对应php包（如果没有安装对应的包）</span></span><br><span class=\"line\">$ sudo apt-get install -y php-mbstring</span><br><span class=\"line\">$ sudo apt-get install -y php-gettext</span><br><span class=\"line\"><span class=\"comment\">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class=\"line\"><span class=\"comment\">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立软连接</span></span><br><span class=\"line\">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#重启apache</span></span><br><span class=\"line\">$ sudo /etc/init.d/apache2 restart</span><br><span class=\"line\"><span class=\"comment\">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>"},{"title":"使用模拟时间在Docker 中进行测试","date":"2019-07-02T12:49:48.000Z","_content":"在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：\n- 它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序\n- 反复更改系统时钟可能既费时又麻烦\n<!--More-->\n您可以为您的应用定义一个假系统时钟，而不是更改系统时钟。 在生产中，假系统时钟返回正常时间。 在测试过程中，伪造的系统时钟会在您需要有效测试覆盖时随时返回。\n\n为此，您需要定义各种不同的时钟实现，并能够轻松交换它们。 许多人会选择使用依赖注入工具，或者使用插件机制。\n为此，您必须永远不要直接引用默认系统时钟和时区，避免使用以下方法：\n\n- System.currentTimeMillis()\n- LocalDateTime.now() (或者类似的)\n- Date类的默认构造函数（后者又使用System.currentTimeMillis（））\n\n这需要一些规则，因为许多代码示例使用默认系统时钟（和时区），并且因为调用上述方法已成为习惯。\n假时钟的可能行为包括：\n- 跳到未来\n- 回到过去\n- 使用固定日期和固定时间\n- 使用固定日期，但仍然让时间变化\n- 每次看到时钟时都会增加一秒钟\n- 通过加速或减慢某个因素来改变时间的流逝率\n- 使用正常的系统时钟而无需改动\n\n根据您的需要，您可能必须在部分或全部这些地方使用假系统时钟：\n\n- 应用代码\n- 与数据库交互的代码\n- 日志输出\n- 框架类\n\n### 例子 for Java 8\njava.time包的Clock类允许您创建一个假的系统时钟。 它的固定方法可以让您快速创建一个常见类型的假时钟，它只是在给定时区内返回一个固定值。 通常，您需要扩展抽象Clock类，并实现其抽象方法。\n``` java\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Objects;\n\n/**\n Increment by 1 second each time you look at the clock.\n Starts with the default system clock's instant and time-zone.\n\n Example output:\n  2018-05-26T14:00:12.778Z\n  2018-05-26T14:00:13.778Z\n  2018-05-26T14:00:14.778Z\n  2018-05-26T14:00:15.778Z\n  2018-05-26T14:00:16.778Z\n\n @since Java 8.\n*/\npublic final class ClockTicker extends Clock {\n\n  /** Simple demo of the behaviour of this class. */\n  public static void main(String... args) {\n    ClockTicker ticker = new ClockTicker();\n    log(ticker.instant());\n    log(ticker.instant());\n    log(ticker.instant());\n    log(ticker.instant());\n    log(ticker.instant());\n  }\n  private static void log(Object msg){\n    System.out.println(Objects.toString(msg));\n  }\n\n  @Override public ZoneId getZone() {\n    return DEFAULT_TZONE;\n  }\n\n  @Override public Clock withZone(ZoneId zone) {\n    return Clock.fixed(WHEN_STARTED, zone);\n  }\n\n  @Override public Instant instant() {\n    return nextInstant();\n  }\n\n  //PRIVATE\n  private final Instant WHEN_STARTED = Instant.now();\n  private final ZoneId DEFAULT_TZONE = ZoneId.systemDefault();\n  private long count = 0;\n\n  private Instant nextInstant() {\n    ++count;\n    return WHEN_STARTED.plusSeconds(count);\n  }\n}\n\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.util.Objects;\n\n/**\n Set the starting date-time and time-zone, but then\n let the time vary normally.\n\n Example output:\n  2018-12-25T05:00:00Z\n  Sleep for 5 seconds...\n  2018-12-25T05:00:05.005Z\n  Done.\n\n @since Java 8.\n*/\npublic final class ClockTimeTravel extends Clock {\n\n  /** Simple demo of the behaviour of this class. */\n  public static void main(String[] args) throws InterruptedException {\n    ClockTimeTravel timeTravel = new ClockTimeTravel(\n      LocalDateTime.parse(\"2018-12-25T00:00:00\"), ZoneOffset.of(\"-05:00\")\n    );\n    log(timeTravel.instant());\n    log(\"Sleep for 5 seconds...\");\n    Thread.currentThread().sleep(5000);\n    log(timeTravel.instant());\n    log(\"Done.\");\n  }\n\n  private static void log(Object msg){\n    System.out.println(Objects.toString(msg));\n  }\n\n  public ClockTimeTravel(LocalDateTime t0, ZoneOffset zoneOffset){\n    this.zoneOffset = zoneOffset;\n    this.t0LocalDateTime = t0;\n    this.t0Instant = t0.toInstant(zoneOffset);\n    this.whenObjectCreatedInstant = Instant.now();\n  }\n\n  @Override public ZoneId getZone() {\n    return zoneOffset;\n  }\n\n  /** The caller needs to actually pass a ZoneOffset object here. */\n  @Override public Clock withZone(ZoneId zone) {\n    return new ClockTimeTravel(t0LocalDateTime, (ZoneOffset)zone);\n  }\n\n  @Override public Instant instant() {\n    return nextInstant();\n  }\n\n  //PRIVATE\n\n  /** t0 is the moment this clock object was created in Java-land. */\n  private final Instant t0Instant;\n  private final LocalDateTime t0LocalDateTime;\n\n  private final ZoneOffset zoneOffset;\n  private final Instant whenObjectCreatedInstant;\n\n  /**\n   Figure out how much time has elapsed between the moment this\n   object was created, and the moment when this method is being called.\n   Then, apply that diff to t0.\n  */\n  private Instant nextInstant() {\n    Instant now = Instant.now();\n    long diff = now.toEpochMilli() - whenObjectCreatedInstant.toEpochMilli();\n    return t0Instant.plusMillis(diff);\n  }\n}\n```\n\n### 例子 小于 Java8\n``` java\nThe TimeSource interface allows you to define various implementations of a fake system clock:\n\npublic interface TimeSource {\n\n  /** Return the system time. */  \n  long currentTimeMillis();\n\n}\nThis implementation mimics a system clock running one day in advance:\npublic final class TimeSrc implements TimeSource {\n\n  /** One day in advance of the actual time.*/\n  @Override public long currentTimeMillis() {\n    return System.currentTimeMillis() + ONE_DAY;\n  }\n\n  private static final long ONE_DAY = 24*60*60*1000;\n\n}\n```\n使用各种TimeSource实现，您可以模拟系统时钟的任何所需行为。\n配置JDK记录器以使用假系统时钟很简单。 一个简单的自定义Formatter可以使用TimeSource来改变LogRecord的时间：\n``` Java\nimport java.util.logging.LogRecord;\nimport java.util.logging.SimpleFormatter;\n\npublic final class SimpleFormatterTimeSource extends SimpleFormatter {\n\n  @Override public String format(LogRecord aLogRecord) {\n    aLogRecord.setMillis(fTimeSource.currentTimeMillis());\n    return super.format(aLogRecord);\n  }\n\n  private TimeSource fTimeSource = BuildImpl.forTimeSource();\n}\n\n```\n上面的文章机翻[Use a fake system clock](http://www.javapractices.com/topic/TopicAction.do?Id=234)\n\n### Docker 中修改时间\nDocker 是容器技术，不同于虚拟化技术是独立的系统，Docker是通过[NameSpace上](https://coolshell.cn/articles/17010.html)、[NameSpace下](https://coolshell.cn/articles/17029.html) 和[CGroup](https://coolshell.cn/articles/17049.html)来虚拟的系统，可以参考上面的几篇文章，可以让你让你了解为什么修改时间后，Docker会崩溃了（Docker 的时间其实是使用的宿主机时间）。我们一般测试的时候，需要将时间修改成指定的时间，所以只是修改时区的话，是满足不了我们的要求的。\n\n所以我们需要其他的解决方法。\n\n解决方案是在容器中伪造它。 这个lib 拦截所有系统调用程序用于检索当前时间和日期。\n实施很容易。根据需要为Dockerfile添加功能：\n``` shell\ncd WORKDIR /\ngit clone https://github.com/wolfcw/libfaketime.git\ncd  /libfaketime/src\nmake install\n```\n请记住设置环境变量 LD_PRELOAD 在运行应用程序之前，您需要应用伪造的时间。\n\n```\nCMD [\"/bin/sh\", \"-c\", \"LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 FAKETIME_NO_CACHE=1 python /srv/intercept/manage.py runserver 0.0.0.0:3000]\n```\n\n``` python\nimport os\ndef set_time(request):\n    print(datetime.today())\n    os.environ[\"FAKETIME\"] = \"2020-01-01\"  # Note: time of type string must be in the format \"YYYY-MM-DD hh:mm:ss\" or \"+15d\"\n    print(datetime.today())\n```\n\n> 上面的文章引用于 http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian\n\n后面会再单独写一篇使用Dockerfile 的详细示例。\n","source":"_posts/use-a-fake-system-clock-with-docker.md","raw":"---\ntitle: 使用模拟时间在Docker 中进行测试\ndate: 2019-07-02 20:49:48\ncategories: Java\ntag: Docker\n---\n在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：\n- 它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序\n- 反复更改系统时钟可能既费时又麻烦\n<!--More-->\n您可以为您的应用定义一个假系统时钟，而不是更改系统时钟。 在生产中，假系统时钟返回正常时间。 在测试过程中，伪造的系统时钟会在您需要有效测试覆盖时随时返回。\n\n为此，您需要定义各种不同的时钟实现，并能够轻松交换它们。 许多人会选择使用依赖注入工具，或者使用插件机制。\n为此，您必须永远不要直接引用默认系统时钟和时区，避免使用以下方法：\n\n- System.currentTimeMillis()\n- LocalDateTime.now() (或者类似的)\n- Date类的默认构造函数（后者又使用System.currentTimeMillis（））\n\n这需要一些规则，因为许多代码示例使用默认系统时钟（和时区），并且因为调用上述方法已成为习惯。\n假时钟的可能行为包括：\n- 跳到未来\n- 回到过去\n- 使用固定日期和固定时间\n- 使用固定日期，但仍然让时间变化\n- 每次看到时钟时都会增加一秒钟\n- 通过加速或减慢某个因素来改变时间的流逝率\n- 使用正常的系统时钟而无需改动\n\n根据您的需要，您可能必须在部分或全部这些地方使用假系统时钟：\n\n- 应用代码\n- 与数据库交互的代码\n- 日志输出\n- 框架类\n\n### 例子 for Java 8\njava.time包的Clock类允许您创建一个假的系统时钟。 它的固定方法可以让您快速创建一个常见类型的假时钟，它只是在给定时区内返回一个固定值。 通常，您需要扩展抽象Clock类，并实现其抽象方法。\n``` java\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.util.Objects;\n\n/**\n Increment by 1 second each time you look at the clock.\n Starts with the default system clock's instant and time-zone.\n\n Example output:\n  2018-05-26T14:00:12.778Z\n  2018-05-26T14:00:13.778Z\n  2018-05-26T14:00:14.778Z\n  2018-05-26T14:00:15.778Z\n  2018-05-26T14:00:16.778Z\n\n @since Java 8.\n*/\npublic final class ClockTicker extends Clock {\n\n  /** Simple demo of the behaviour of this class. */\n  public static void main(String... args) {\n    ClockTicker ticker = new ClockTicker();\n    log(ticker.instant());\n    log(ticker.instant());\n    log(ticker.instant());\n    log(ticker.instant());\n    log(ticker.instant());\n  }\n  private static void log(Object msg){\n    System.out.println(Objects.toString(msg));\n  }\n\n  @Override public ZoneId getZone() {\n    return DEFAULT_TZONE;\n  }\n\n  @Override public Clock withZone(ZoneId zone) {\n    return Clock.fixed(WHEN_STARTED, zone);\n  }\n\n  @Override public Instant instant() {\n    return nextInstant();\n  }\n\n  //PRIVATE\n  private final Instant WHEN_STARTED = Instant.now();\n  private final ZoneId DEFAULT_TZONE = ZoneId.systemDefault();\n  private long count = 0;\n\n  private Instant nextInstant() {\n    ++count;\n    return WHEN_STARTED.plusSeconds(count);\n  }\n}\n\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.util.Objects;\n\n/**\n Set the starting date-time and time-zone, but then\n let the time vary normally.\n\n Example output:\n  2018-12-25T05:00:00Z\n  Sleep for 5 seconds...\n  2018-12-25T05:00:05.005Z\n  Done.\n\n @since Java 8.\n*/\npublic final class ClockTimeTravel extends Clock {\n\n  /** Simple demo of the behaviour of this class. */\n  public static void main(String[] args) throws InterruptedException {\n    ClockTimeTravel timeTravel = new ClockTimeTravel(\n      LocalDateTime.parse(\"2018-12-25T00:00:00\"), ZoneOffset.of(\"-05:00\")\n    );\n    log(timeTravel.instant());\n    log(\"Sleep for 5 seconds...\");\n    Thread.currentThread().sleep(5000);\n    log(timeTravel.instant());\n    log(\"Done.\");\n  }\n\n  private static void log(Object msg){\n    System.out.println(Objects.toString(msg));\n  }\n\n  public ClockTimeTravel(LocalDateTime t0, ZoneOffset zoneOffset){\n    this.zoneOffset = zoneOffset;\n    this.t0LocalDateTime = t0;\n    this.t0Instant = t0.toInstant(zoneOffset);\n    this.whenObjectCreatedInstant = Instant.now();\n  }\n\n  @Override public ZoneId getZone() {\n    return zoneOffset;\n  }\n\n  /** The caller needs to actually pass a ZoneOffset object here. */\n  @Override public Clock withZone(ZoneId zone) {\n    return new ClockTimeTravel(t0LocalDateTime, (ZoneOffset)zone);\n  }\n\n  @Override public Instant instant() {\n    return nextInstant();\n  }\n\n  //PRIVATE\n\n  /** t0 is the moment this clock object was created in Java-land. */\n  private final Instant t0Instant;\n  private final LocalDateTime t0LocalDateTime;\n\n  private final ZoneOffset zoneOffset;\n  private final Instant whenObjectCreatedInstant;\n\n  /**\n   Figure out how much time has elapsed between the moment this\n   object was created, and the moment when this method is being called.\n   Then, apply that diff to t0.\n  */\n  private Instant nextInstant() {\n    Instant now = Instant.now();\n    long diff = now.toEpochMilli() - whenObjectCreatedInstant.toEpochMilli();\n    return t0Instant.plusMillis(diff);\n  }\n}\n```\n\n### 例子 小于 Java8\n``` java\nThe TimeSource interface allows you to define various implementations of a fake system clock:\n\npublic interface TimeSource {\n\n  /** Return the system time. */  \n  long currentTimeMillis();\n\n}\nThis implementation mimics a system clock running one day in advance:\npublic final class TimeSrc implements TimeSource {\n\n  /** One day in advance of the actual time.*/\n  @Override public long currentTimeMillis() {\n    return System.currentTimeMillis() + ONE_DAY;\n  }\n\n  private static final long ONE_DAY = 24*60*60*1000;\n\n}\n```\n使用各种TimeSource实现，您可以模拟系统时钟的任何所需行为。\n配置JDK记录器以使用假系统时钟很简单。 一个简单的自定义Formatter可以使用TimeSource来改变LogRecord的时间：\n``` Java\nimport java.util.logging.LogRecord;\nimport java.util.logging.SimpleFormatter;\n\npublic final class SimpleFormatterTimeSource extends SimpleFormatter {\n\n  @Override public String format(LogRecord aLogRecord) {\n    aLogRecord.setMillis(fTimeSource.currentTimeMillis());\n    return super.format(aLogRecord);\n  }\n\n  private TimeSource fTimeSource = BuildImpl.forTimeSource();\n}\n\n```\n上面的文章机翻[Use a fake system clock](http://www.javapractices.com/topic/TopicAction.do?Id=234)\n\n### Docker 中修改时间\nDocker 是容器技术，不同于虚拟化技术是独立的系统，Docker是通过[NameSpace上](https://coolshell.cn/articles/17010.html)、[NameSpace下](https://coolshell.cn/articles/17029.html) 和[CGroup](https://coolshell.cn/articles/17049.html)来虚拟的系统，可以参考上面的几篇文章，可以让你让你了解为什么修改时间后，Docker会崩溃了（Docker 的时间其实是使用的宿主机时间）。我们一般测试的时候，需要将时间修改成指定的时间，所以只是修改时区的话，是满足不了我们的要求的。\n\n所以我们需要其他的解决方法。\n\n解决方案是在容器中伪造它。 这个lib 拦截所有系统调用程序用于检索当前时间和日期。\n实施很容易。根据需要为Dockerfile添加功能：\n``` shell\ncd WORKDIR /\ngit clone https://github.com/wolfcw/libfaketime.git\ncd  /libfaketime/src\nmake install\n```\n请记住设置环境变量 LD_PRELOAD 在运行应用程序之前，您需要应用伪造的时间。\n\n```\nCMD [\"/bin/sh\", \"-c\", \"LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 FAKETIME_NO_CACHE=1 python /srv/intercept/manage.py runserver 0.0.0.0:3000]\n```\n\n``` python\nimport os\ndef set_time(request):\n    print(datetime.today())\n    os.environ[\"FAKETIME\"] = \"2020-01-01\"  # Note: time of type string must be in the format \"YYYY-MM-DD hh:mm:ss\" or \"+15d\"\n    print(datetime.today())\n```\n\n> 上面的文章引用于 http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian\n\n后面会再单独写一篇使用Dockerfile 的详细示例。\n","slug":"use-a-fake-system-clock-with-docker","published":1,"updated":"2019-10-20T04:54:47.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dt0057eos688mxdxuj","content":"<p>在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：</p>\n<ul>\n<li>它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序</li>\n<li>反复更改系统时钟可能既费时又麻烦<a id=\"more\"></a>\n您可以为您的应用定义一个假系统时钟，而不是更改系统时钟。 在生产中，假系统时钟返回正常时间。 在测试过程中，伪造的系统时钟会在您需要有效测试覆盖时随时返回。</li>\n</ul>\n<p>为此，您需要定义各种不同的时钟实现，并能够轻松交换它们。 许多人会选择使用依赖注入工具，或者使用插件机制。<br>为此，您必须永远不要直接引用默认系统时钟和时区，避免使用以下方法：</p>\n<ul>\n<li>System.currentTimeMillis()</li>\n<li>LocalDateTime.now() (或者类似的)</li>\n<li>Date类的默认构造函数（后者又使用System.currentTimeMillis（））</li>\n</ul>\n<p>这需要一些规则，因为许多代码示例使用默认系统时钟（和时区），并且因为调用上述方法已成为习惯。<br>假时钟的可能行为包括：</p>\n<ul>\n<li>跳到未来</li>\n<li>回到过去</li>\n<li>使用固定日期和固定时间</li>\n<li>使用固定日期，但仍然让时间变化</li>\n<li>每次看到时钟时都会增加一秒钟</li>\n<li>通过加速或减慢某个因素来改变时间的流逝率</li>\n<li>使用正常的系统时钟而无需改动</li>\n</ul>\n<p>根据您的需要，您可能必须在部分或全部这些地方使用假系统时钟：</p>\n<ul>\n<li>应用代码</li>\n<li>与数据库交互的代码</li>\n<li>日志输出</li>\n<li>框架类</li>\n</ul>\n<h3 id=\"例子-for-Java-8\"><a href=\"#例子-for-Java-8\" class=\"headerlink\" title=\"例子 for Java 8\"></a>例子 for Java 8</h3><p>java.time包的Clock类允许您创建一个假的系统时钟。 它的固定方法可以让您快速创建一个常见类型的假时钟，它只是在给定时区内返回一个固定值。 通常，您需要扩展抽象Clock类，并实现其抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.Clock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Increment by 1 second each time you look at the clock.</span></span><br><span class=\"line\"><span class=\"comment\"> Starts with the default system clock's instant and time-zone.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> Example output:</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:12.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:13.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:14.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:15.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:16.778Z</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> <span class=\"doctag\">@since</span> Java 8.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockTicker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Clock</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Simple demo of the behaviour of this class. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    ClockTicker ticker = <span class=\"keyword\">new</span> ClockTicker();</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(Objects.toString(msg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> ZoneId <span class=\"title\">getZone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DEFAULT_TZONE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Clock <span class=\"title\">withZone</span><span class=\"params\">(ZoneId zone)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Clock.fixed(WHEN_STARTED, zone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Instant <span class=\"title\">instant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextInstant();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//PRIVATE</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Instant WHEN_STARTED = Instant.now();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ZoneId DEFAULT_TZONE = ZoneId.systemDefault();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Instant <span class=\"title\">nextInstant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> WHEN_STARTED.plusSeconds(count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Clock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneOffset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Set the starting date-time and time-zone, but then</span></span><br><span class=\"line\"><span class=\"comment\"> let the time vary normally.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> Example output:</span></span><br><span class=\"line\"><span class=\"comment\">  2018-12-25T05:00:00Z</span></span><br><span class=\"line\"><span class=\"comment\">  Sleep for 5 seconds...</span></span><br><span class=\"line\"><span class=\"comment\">  2018-12-25T05:00:05.005Z</span></span><br><span class=\"line\"><span class=\"comment\">  Done.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> <span class=\"doctag\">@since</span> Java 8.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockTimeTravel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Clock</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Simple demo of the behaviour of this class. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    ClockTimeTravel timeTravel = <span class=\"keyword\">new</span> ClockTimeTravel(</span><br><span class=\"line\">      LocalDateTime.parse(<span class=\"string\">\"2018-12-25T00:00:00\"</span>), ZoneOffset.of(<span class=\"string\">\"-05:00\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    log(timeTravel.instant());</span><br><span class=\"line\">    log(<span class=\"string\">\"Sleep for 5 seconds...\"</span>);</span><br><span class=\"line\">    Thread.currentThread().sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">    log(timeTravel.instant());</span><br><span class=\"line\">    log(<span class=\"string\">\"Done.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(Objects.toString(msg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClockTimeTravel</span><span class=\"params\">(LocalDateTime t0, ZoneOffset zoneOffset)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.zoneOffset = zoneOffset;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.t0LocalDateTime = t0;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.t0Instant = t0.toInstant(zoneOffset);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.whenObjectCreatedInstant = Instant.now();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> ZoneId <span class=\"title\">getZone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zoneOffset;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** The caller needs to actually pass a ZoneOffset object here. */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Clock <span class=\"title\">withZone</span><span class=\"params\">(ZoneId zone)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClockTimeTravel(t0LocalDateTime, (ZoneOffset)zone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Instant <span class=\"title\">instant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextInstant();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//PRIVATE</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** t0 is the moment this clock object was created in Java-land. */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Instant t0Instant;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LocalDateTime t0LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ZoneOffset zoneOffset;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Instant whenObjectCreatedInstant;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   Figure out how much time has elapsed between the moment this</span></span><br><span class=\"line\"><span class=\"comment\">   object was created, and the moment when this method is being called.</span></span><br><span class=\"line\"><span class=\"comment\">   Then, apply that diff to t0.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Instant <span class=\"title\">nextInstant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Instant now = Instant.now();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> diff = now.toEpochMilli() - whenObjectCreatedInstant.toEpochMilli();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t0Instant.plusMillis(diff);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-小于-Java8\"><a href=\"#例子-小于-Java8\" class=\"headerlink\" title=\"例子 小于 Java8\"></a>例子 小于 Java8</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The TimeSource interface allows you to define various implementations of a fake system clock:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TimeSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Return the system time. */</span>  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">This implementation mimics a system clock running one day in advance:</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeSrc</span> <span class=\"keyword\">implements</span> <span class=\"title\">TimeSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** One day in advance of the actual time.*/</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> System.currentTimeMillis() + ONE_DAY;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ONE_DAY = <span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用各种TimeSource实现，您可以模拟系统时钟的任何所需行为。<br>配置JDK记录器以使用假系统时钟很简单。 一个简单的自定义Formatter可以使用TimeSource来改变LogRecord的时间：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.logging.LogRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.logging.SimpleFormatter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFormatterTimeSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleFormatter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">format</span><span class=\"params\">(LogRecord aLogRecord)</span> </span>&#123;</span><br><span class=\"line\">    aLogRecord.setMillis(fTimeSource.currentTimeMillis());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.format(aLogRecord);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> TimeSource fTimeSource = BuildImpl.forTimeSource();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的文章机翻<a href=\"http://www.javapractices.com/topic/TopicAction.do?Id=234\" target=\"_blank\" rel=\"noopener\">Use a fake system clock</a></p>\n<h3 id=\"Docker-中修改时间\"><a href=\"#Docker-中修改时间\" class=\"headerlink\" title=\"Docker 中修改时间\"></a>Docker 中修改时间</h3><p>Docker 是容器技术，不同于虚拟化技术是独立的系统，Docker是通过<a href=\"https://coolshell.cn/articles/17010.html\" target=\"_blank\" rel=\"noopener\">NameSpace上</a>、<a href=\"https://coolshell.cn/articles/17029.html\" target=\"_blank\" rel=\"noopener\">NameSpace下</a> 和<a href=\"https://coolshell.cn/articles/17049.html\" target=\"_blank\" rel=\"noopener\">CGroup</a>来虚拟的系统，可以参考上面的几篇文章，可以让你让你了解为什么修改时间后，Docker会崩溃了（Docker 的时间其实是使用的宿主机时间）。我们一般测试的时候，需要将时间修改成指定的时间，所以只是修改时区的话，是满足不了我们的要求的。</p>\n<p>所以我们需要其他的解决方法。</p>\n<p>解决方案是在容器中伪造它。 这个lib 拦截所有系统调用程序用于检索当前时间和日期。<br>实施很容易。根据需要为Dockerfile添加功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd WORKDIR /</span><br><span class=\"line\">git clone https://github.com/wolfcw/libfaketime.git</span><br><span class=\"line\">cd  /libfaketime/src</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>请记住设置环境变量 LD_PRELOAD 在运行应用程序之前，您需要应用伪造的时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, &quot;LD_PRELOAD&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;faketime&#x2F;libfaketime.so.1 FAKETIME_NO_CACHE&#x3D;1 python &#x2F;srv&#x2F;intercept&#x2F;manage.py runserver 0.0.0.0:3000]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_time</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    print(datetime.today())</span><br><span class=\"line\">    os.environ[<span class=\"string\">\"FAKETIME\"</span>] = <span class=\"string\">\"2020-01-01\"</span>  <span class=\"comment\"># Note: time of type string must be in the format \"YYYY-MM-DD hh:mm:ss\" or \"+15d\"</span></span><br><span class=\"line\">    print(datetime.today())</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的文章引用于 <a href=\"http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian\" target=\"_blank\" rel=\"noopener\">http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian</a></p>\n</blockquote>\n<p>后面会再单独写一篇使用Dockerfile 的详细示例。</p>\n","site":{"data":{}},"excerpt":"<p>在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：</p>\n<ul>\n<li>它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序</li>\n<li>反复更改系统时钟可能既费时又麻烦","more":"您可以为您的应用定义一个假系统时钟，而不是更改系统时钟。 在生产中，假系统时钟返回正常时间。 在测试过程中，伪造的系统时钟会在您需要有效测试覆盖时随时返回。</li>\n</ul>\n<p>为此，您需要定义各种不同的时钟实现，并能够轻松交换它们。 许多人会选择使用依赖注入工具，或者使用插件机制。<br>为此，您必须永远不要直接引用默认系统时钟和时区，避免使用以下方法：</p>\n<ul>\n<li>System.currentTimeMillis()</li>\n<li>LocalDateTime.now() (或者类似的)</li>\n<li>Date类的默认构造函数（后者又使用System.currentTimeMillis（））</li>\n</ul>\n<p>这需要一些规则，因为许多代码示例使用默认系统时钟（和时区），并且因为调用上述方法已成为习惯。<br>假时钟的可能行为包括：</p>\n<ul>\n<li>跳到未来</li>\n<li>回到过去</li>\n<li>使用固定日期和固定时间</li>\n<li>使用固定日期，但仍然让时间变化</li>\n<li>每次看到时钟时都会增加一秒钟</li>\n<li>通过加速或减慢某个因素来改变时间的流逝率</li>\n<li>使用正常的系统时钟而无需改动</li>\n</ul>\n<p>根据您的需要，您可能必须在部分或全部这些地方使用假系统时钟：</p>\n<ul>\n<li>应用代码</li>\n<li>与数据库交互的代码</li>\n<li>日志输出</li>\n<li>框架类</li>\n</ul>\n<h3 id=\"例子-for-Java-8\"><a href=\"#例子-for-Java-8\" class=\"headerlink\" title=\"例子 for Java 8\"></a>例子 for Java 8</h3><p>java.time包的Clock类允许您创建一个假的系统时钟。 它的固定方法可以让您快速创建一个常见类型的假时钟，它只是在给定时区内返回一个固定值。 通常，您需要扩展抽象Clock类，并实现其抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.Clock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Increment by 1 second each time you look at the clock.</span></span><br><span class=\"line\"><span class=\"comment\"> Starts with the default system clock's instant and time-zone.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> Example output:</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:12.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:13.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:14.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:15.778Z</span></span><br><span class=\"line\"><span class=\"comment\">  2018-05-26T14:00:16.778Z</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> <span class=\"doctag\">@since</span> Java 8.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockTicker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Clock</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Simple demo of the behaviour of this class. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    ClockTicker ticker = <span class=\"keyword\">new</span> ClockTicker();</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">    log(ticker.instant());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(Objects.toString(msg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> ZoneId <span class=\"title\">getZone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DEFAULT_TZONE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Clock <span class=\"title\">withZone</span><span class=\"params\">(ZoneId zone)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Clock.fixed(WHEN_STARTED, zone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Instant <span class=\"title\">instant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextInstant();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//PRIVATE</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Instant WHEN_STARTED = Instant.now();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ZoneId DEFAULT_TZONE = ZoneId.systemDefault();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Instant <span class=\"title\">nextInstant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ++count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> WHEN_STARTED.plusSeconds(count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Clock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneOffset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Set the starting date-time and time-zone, but then</span></span><br><span class=\"line\"><span class=\"comment\"> let the time vary normally.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> Example output:</span></span><br><span class=\"line\"><span class=\"comment\">  2018-12-25T05:00:00Z</span></span><br><span class=\"line\"><span class=\"comment\">  Sleep for 5 seconds...</span></span><br><span class=\"line\"><span class=\"comment\">  2018-12-25T05:00:05.005Z</span></span><br><span class=\"line\"><span class=\"comment\">  Done.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> <span class=\"doctag\">@since</span> Java 8.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClockTimeTravel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Clock</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Simple demo of the behaviour of this class. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    ClockTimeTravel timeTravel = <span class=\"keyword\">new</span> ClockTimeTravel(</span><br><span class=\"line\">      LocalDateTime.parse(<span class=\"string\">\"2018-12-25T00:00:00\"</span>), ZoneOffset.of(<span class=\"string\">\"-05:00\"</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    log(timeTravel.instant());</span><br><span class=\"line\">    log(<span class=\"string\">\"Sleep for 5 seconds...\"</span>);</span><br><span class=\"line\">    Thread.currentThread().sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">    log(timeTravel.instant());</span><br><span class=\"line\">    log(<span class=\"string\">\"Done.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(Object msg)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(Objects.toString(msg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClockTimeTravel</span><span class=\"params\">(LocalDateTime t0, ZoneOffset zoneOffset)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.zoneOffset = zoneOffset;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.t0LocalDateTime = t0;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.t0Instant = t0.toInstant(zoneOffset);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.whenObjectCreatedInstant = Instant.now();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> ZoneId <span class=\"title\">getZone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zoneOffset;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** The caller needs to actually pass a ZoneOffset object here. */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Clock <span class=\"title\">withZone</span><span class=\"params\">(ZoneId zone)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClockTimeTravel(t0LocalDateTime, (ZoneOffset)zone);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Instant <span class=\"title\">instant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextInstant();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//PRIVATE</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** t0 is the moment this clock object was created in Java-land. */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Instant t0Instant;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LocalDateTime t0LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ZoneOffset zoneOffset;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Instant whenObjectCreatedInstant;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   Figure out how much time has elapsed between the moment this</span></span><br><span class=\"line\"><span class=\"comment\">   object was created, and the moment when this method is being called.</span></span><br><span class=\"line\"><span class=\"comment\">   Then, apply that diff to t0.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Instant <span class=\"title\">nextInstant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Instant now = Instant.now();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> diff = now.toEpochMilli() - whenObjectCreatedInstant.toEpochMilli();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t0Instant.plusMillis(diff);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-小于-Java8\"><a href=\"#例子-小于-Java8\" class=\"headerlink\" title=\"例子 小于 Java8\"></a>例子 小于 Java8</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The TimeSource interface allows you to define various implementations of a fake system clock:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TimeSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Return the system time. */</span>  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">This implementation mimics a system clock running one day in advance:</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeSrc</span> <span class=\"keyword\">implements</span> <span class=\"title\">TimeSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** One day in advance of the actual time.*/</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> System.currentTimeMillis() + ONE_DAY;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ONE_DAY = <span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用各种TimeSource实现，您可以模拟系统时钟的任何所需行为。<br>配置JDK记录器以使用假系统时钟很简单。 一个简单的自定义Formatter可以使用TimeSource来改变LogRecord的时间：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.logging.LogRecord;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.logging.SimpleFormatter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFormatterTimeSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleFormatter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">format</span><span class=\"params\">(LogRecord aLogRecord)</span> </span>&#123;</span><br><span class=\"line\">    aLogRecord.setMillis(fTimeSource.currentTimeMillis());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.format(aLogRecord);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> TimeSource fTimeSource = BuildImpl.forTimeSource();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的文章机翻<a href=\"http://www.javapractices.com/topic/TopicAction.do?Id=234\" target=\"_blank\" rel=\"noopener\">Use a fake system clock</a></p>\n<h3 id=\"Docker-中修改时间\"><a href=\"#Docker-中修改时间\" class=\"headerlink\" title=\"Docker 中修改时间\"></a>Docker 中修改时间</h3><p>Docker 是容器技术，不同于虚拟化技术是独立的系统，Docker是通过<a href=\"https://coolshell.cn/articles/17010.html\" target=\"_blank\" rel=\"noopener\">NameSpace上</a>、<a href=\"https://coolshell.cn/articles/17029.html\" target=\"_blank\" rel=\"noopener\">NameSpace下</a> 和<a href=\"https://coolshell.cn/articles/17049.html\" target=\"_blank\" rel=\"noopener\">CGroup</a>来虚拟的系统，可以参考上面的几篇文章，可以让你让你了解为什么修改时间后，Docker会崩溃了（Docker 的时间其实是使用的宿主机时间）。我们一般测试的时候，需要将时间修改成指定的时间，所以只是修改时区的话，是满足不了我们的要求的。</p>\n<p>所以我们需要其他的解决方法。</p>\n<p>解决方案是在容器中伪造它。 这个lib 拦截所有系统调用程序用于检索当前时间和日期。<br>实施很容易。根据需要为Dockerfile添加功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd WORKDIR /</span><br><span class=\"line\">git clone https://github.com/wolfcw/libfaketime.git</span><br><span class=\"line\">cd  /libfaketime/src</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>请记住设置环境变量 LD_PRELOAD 在运行应用程序之前，您需要应用伪造的时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, &quot;LD_PRELOAD&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;faketime&#x2F;libfaketime.so.1 FAKETIME_NO_CACHE&#x3D;1 python &#x2F;srv&#x2F;intercept&#x2F;manage.py runserver 0.0.0.0:3000]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_time</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    print(datetime.today())</span><br><span class=\"line\">    os.environ[<span class=\"string\">\"FAKETIME\"</span>] = <span class=\"string\">\"2020-01-01\"</span>  <span class=\"comment\"># Note: time of type string must be in the format \"YYYY-MM-DD hh:mm:ss\" or \"+15d\"</span></span><br><span class=\"line\">    print(datetime.today())</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的文章引用于 <a href=\"http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian\" target=\"_blank\" rel=\"noopener\">http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian</a></p>\n</blockquote>\n<p>后面会再单独写一篇使用Dockerfile 的详细示例。</p>"},{"title":"使用frp微信本地调试","date":"2018-05-07T06:50:36.000Z","_content":"### frp 原理\nfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<!-- more -->\n### 本地调试微信\n微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。\n早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。\n### frp 服务端部署\n下载对应的包，客户端和服务端在一个包里面。系统centos7\n- 下载安装包\n``` bash\n# 使用64位的包\nwget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz\n```\n\n- 域名解析\n需要进行泛域名解析\n`A   *.frp.frpss.top  xx.xx.xx.xx`\n\n- 配置配置文件\n``` bash\n#修改服务端配置，frps_full.ini里面有所有的示例配置和说明\n#这里使用泛域名解析，这样可以多用户同时使用\n[common]\nbind_port = 7000\nvhost_http_port = 8089\nsubdomain_host=frp.frpss.top\ndashboard_port = 7500\n```\n为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了\n\n### frp 客户端配置\n``` bash\n[common]\n#服务端配置\nserver_addr = 118.24.62.41\nserver_port = 7000\n\n#需要自己起别名，注意不要和其他人重复\n[server]\ntype = http\n\n#端口\nlocal_port = 4000\n#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top\nsubdomain = test\n```\n### 启动\n\n``` bash\n# Mac 启动\n./frpc -c ./frpc.ini\n#Windows\n./frpc.exe -c ./frpc.ini\n```\n\n### 本地调试\n上面的端口配置的是`4000`根据自己的项目配置端口，然后使用`test.frp.frpss.top`进行访问\n\n\n\n安装包可以去github下载，也可以在http://share.frpss.top 下载\n","source":"_posts/use-frp.md","raw":"---\ntitle: 使用frp微信本地调试\ndate: 2018-05-07 14:50:36\ncategories: Linux\ntag: frp\n---\n### frp 原理\nfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<!-- more -->\n### 本地调试微信\n微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。\n早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。\n### frp 服务端部署\n下载对应的包，客户端和服务端在一个包里面。系统centos7\n- 下载安装包\n``` bash\n# 使用64位的包\nwget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz\n```\n\n- 域名解析\n需要进行泛域名解析\n`A   *.frp.frpss.top  xx.xx.xx.xx`\n\n- 配置配置文件\n``` bash\n#修改服务端配置，frps_full.ini里面有所有的示例配置和说明\n#这里使用泛域名解析，这样可以多用户同时使用\n[common]\nbind_port = 7000\nvhost_http_port = 8089\nsubdomain_host=frp.frpss.top\ndashboard_port = 7500\n```\n为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了\n\n### frp 客户端配置\n``` bash\n[common]\n#服务端配置\nserver_addr = 118.24.62.41\nserver_port = 7000\n\n#需要自己起别名，注意不要和其他人重复\n[server]\ntype = http\n\n#端口\nlocal_port = 4000\n#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top\nsubdomain = test\n```\n### 启动\n\n``` bash\n# Mac 启动\n./frpc -c ./frpc.ini\n#Windows\n./frpc.exe -c ./frpc.ini\n```\n\n### 本地调试\n上面的端口配置的是`4000`根据自己的项目配置端口，然后使用`test.frp.frpss.top`进行访问\n\n\n\n安装包可以去github下载，也可以在http://share.frpss.top 下载\n","slug":"use-frp","published":1,"updated":"2019-10-20T04:54:47.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9du005aeos65mrt4ttl","content":"<h3 id=\"frp-原理\"><a href=\"#frp-原理\" class=\"headerlink\" title=\"frp 原理\"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<a id=\"more\"></a></p>\n<h3 id=\"本地调试微信\"><a href=\"#本地调试微信\" class=\"headerlink\" title=\"本地调试微信\"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>\n<h3 id=\"frp-服务端部署\"><a href=\"#frp-服务端部署\" class=\"headerlink\" title=\"frp 服务端部署\"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>\n<ul>\n<li><p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用64位的包</span></span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>\n</li>\n<li><p>配置配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class=\"line\"><span class=\"comment\">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">vhost_http_port = 8089</span><br><span class=\"line\">subdomain_host=frp.frpss.top</span><br><span class=\"line\">dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>\n</li>\n</ul>\n<h3 id=\"frp-客户端配置\"><a href=\"#frp-客户端配置\" class=\"headerlink\" title=\"frp 客户端配置\"></a>frp 客户端配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"><span class=\"comment\">#服务端配置</span></span><br><span class=\"line\">server_addr = 118.24.62.41</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要自己起别名，注意不要和其他人重复</span></span><br><span class=\"line\">[server]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#端口</span></span><br><span class=\"line\">local_port = 4000</span><br><span class=\"line\"><span class=\"comment\">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class=\"line\">subdomain = <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mac 启动</span></span><br><span class=\"line\">./frpc -c ./frpc.ini</span><br><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>\n<p>安装包可以去github下载，也可以在<a href=\"http://share.frpss.top\" target=\"_blank\" rel=\"noopener\">http://share.frpss.top</a> 下载</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"frp-原理\"><a href=\"#frp-原理\" class=\"headerlink\" title=\"frp 原理\"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。","more":"</p>\n<h3 id=\"本地调试微信\"><a href=\"#本地调试微信\" class=\"headerlink\" title=\"本地调试微信\"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>\n<h3 id=\"frp-服务端部署\"><a href=\"#frp-服务端部署\" class=\"headerlink\" title=\"frp 服务端部署\"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>\n<ul>\n<li><p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用64位的包</span></span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>\n</li>\n<li><p>配置配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class=\"line\"><span class=\"comment\">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">vhost_http_port = 8089</span><br><span class=\"line\">subdomain_host=frp.frpss.top</span><br><span class=\"line\">dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>\n</li>\n</ul>\n<h3 id=\"frp-客户端配置\"><a href=\"#frp-客户端配置\" class=\"headerlink\" title=\"frp 客户端配置\"></a>frp 客户端配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"><span class=\"comment\">#服务端配置</span></span><br><span class=\"line\">server_addr = 118.24.62.41</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要自己起别名，注意不要和其他人重复</span></span><br><span class=\"line\">[server]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#端口</span></span><br><span class=\"line\">local_port = 4000</span><br><span class=\"line\"><span class=\"comment\">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class=\"line\">subdomain = <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mac 启动</span></span><br><span class=\"line\">./frpc -c ./frpc.ini</span><br><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>\n<p>安装包可以去github下载，也可以在<a href=\"http://share.frpss.top\" target=\"_blank\" rel=\"noopener\">http://share.frpss.top</a> 下载</p>"},{"title":"什么是Libra(天秤座)","date":"2019-07-12T13:45:20.000Z","_content":"什么是`Libra`,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。<!--more-->\n\n>Libra’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.\n\n上面的是Libra 对自己的描述，或者理解为定位，如果全球都使用同一种货币进行交易的话，里面会有多大的想象力以及前景，虽然现在Libra面临着各种各样的法律问题和风险，但是如果能慢慢解决的话，我还是非常看好它的前景的。\n\n`Libra` 使用Facebook开发的Move语言，接下来我们简单的来跑个demo，了解一下`Libra`，现在它只能在macOS和Linux 上运行\n\n### Move 语言的三大用处\n\n* 发行数字货币、Token、数字资产\n* 灵活处理区块链交易\n* 验证器（Validator）管理\n\n### Clone Libra\n\n下载代码到本地\n\n``` shell\ngit clone https://github.com/libra/libra.git && cd libra\n#结果\nCloning into 'libra'...\nremote: Enumerating objects: 3799, done.\nremote: Total 3799 (delta 0), reused 0 (delta 0), pack-reused 3799\nReceiving objects: 100% (3799/3799), 3.47 MiB | 1.09 MiB/s, done.\nResolving deltas: 100% (1874/1874), done.\n```\n\n### 安装依赖\n\n``` shell\n./scripts/dev_setup.sh\n#结果\nInstalling Rust......\ninfo: downloading installer\ninfo: syncing channel updates for 'stable-x86_64-apple-darwin'\ninfo: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)\ninfo: downloading component 'rustc'\n 82.2 MiB /  82.2 MiB (100 %)   8.8 MiB/s in 10s ETA:  0s\ninfo: downloading component 'rust-std'\n 55.8 MiB /  55.8 MiB (100 %)   8.6 MiB/s in  6s ETA:  0s\ninfo: downloading component 'cargo'\ninfo: downloading component 'rust-docs'\n 11.1 MiB /  11.1 MiB (100 %)   8.6 MiB/s in  1s ETA:  0s\ninfo: installing component 'rustc'\n 82.2 MiB /  82.2 MiB (100 %)  12.6 MiB/s in  6s ETA:  0s\ninfo: installing component 'rust-std'\n 55.8 MiB /  55.8 MiB (100 %)  16.2 MiB/s in  3s ETA:  0s\ninfo: installing component 'cargo'\ninfo: installing component 'rust-docs'\n 11.1 MiB /  11.1 MiB (100 %)   2.2 MiB/s in  5s ETA:  0s\ninfo: default toolchain set to 'stable'\n\n  stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)\n\n\nRust is installed now. Great!\n\nTo get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH \nenvironment variable. Next time you log in this will be done automatically.\n\nTo configure your current shell run source $HOME/.cargo/env\ninfo: syncing channel updates for 'stable-x86_64-apple-darwin'\ninfo: checking for self-updates\n\n  stable-x86_64-apple-darwin unchanged - rustc 1.36.0 (a53f9df32 2019-07-03)\n\ninfo: syncing channel updates for 'nightly-2019-07-08-x86_64-apple-darwin'\ninfo: latest update on 2019-07-08, rust version 1.38.0-nightly (6e310f2ab 2019-07-07)\ninfo: downloading component 'rustc'\n 58.9 MiB /  58.9 MiB (100 %)   1.5 MiB/s in 57s ETA:  0s     \ninfo: downloading component 'rust-std'\n168.6 MiB / 168.6 MiB (100 %)   2.2 MiB/s in  1m  5s ETA:  0s\ninfo: downloading component 'cargo'\n  3.6 MiB /   3.6 MiB (100 %)   2.8 MiB/s in  1s ETA:  0s\ninfo: downloading component 'rust-docs'\n 11.6 MiB /  11.6 MiB (100 %)   2.3 MiB/s in  5s ETA:  0s\ninfo: installing component 'rustc'\n 58.9 MiB /  58.9 MiB (100 %)  12.7 MiB/s in  4s ETA:  0s\ninfo: installing component 'rust-std'\n168.6 MiB / 168.6 MiB (100 %)  26.8 MiB/s in  6s ETA:  0s\ninfo: installing component 'cargo'\ninfo: installing component 'rust-docs'\n 11.6 MiB /  11.6 MiB (100 %)   2.2 MiB/s in  4s ETA:  0s\ninfo: downloading component 'rustfmt'\n  2.0 MiB /   2.0 MiB (100 %) 1005.6 KiB/s in  3s ETA:  0s\ninfo: installing component 'rustfmt'\ninfo: downloading component 'clippy'\n  1.3 MiB /   1.3 MiB (100 %) 383.7 KiB/s in  5s ETA:  0s\ninfo: installing component 'clippy'\nInstalling CMake......\nFinished installing all dependencies.\n\nYou should now be able to build the project by running:\n    source /Users/xxx/.cargo/env\n    cargo build\n#如果出现下面的错误，需要安装 protobuf\nerror: failed to run custom build command for `network v0.1.0\nbrew install protobuf\n```\n\n出现错误可以查看 [roubleshooting](https://developers.libra.org/docs/my-first-transaction#setup-libra-core) 解决\n上面的过程取决与你的网速，有可能会很慢，通过上面的一系列操作，基本的环境配置好了，接下来就可以在测试网络上开始交易了（现在还是测试网络，现在还没有办法支持10亿人的交易需求，后面会慢慢转向私有的联盟链）\n\n### 命令行运行\n\n``` shell\n./scripts/cli/start_cli_testnet.sh\n#结果\nxxxxxxxx\n Finished dev [unoptimized + debuginfo] target(s) in 3m 31s\n     Running `target/debug/client --host ac.testnet.libra.org --port 8000 -s ./scripts/cli/trusted_peers.config.toml`\nConnected to validator at: ac.testnet.libra.org:8000\nusage: <command> <args>\n\nUse the following commands:\n\naccount | a\n    Account operations\nquery | q\n    Query operations\ntransfer | transferb | t | tb\n    <sender_account_address>|<sender_account_ref_id> <receiver_account_address>|<receiver_account_ref_id> <number_of_coins> [gas_unit_price_in_micro_libras (default=0)] [max_gas_amount_in_micro_libras (default 10000)] Suffix 'b' is for blocking.\n    Transfer coins (in libra) from account to another.\nsubmit | submitb | s | sb\n    <signer_account_address>|<signer_account_ref_id> <path_to_raw_transaction> Suffix 'b' is for blocking. \n    Load a RawTransaction from file and submit to the network\nhelp | h\n    Prints this help\nquit | q!\n    Exit this client\nPlease, input commands:\n```\n\n使用上面的命令可以构建和运行客户端，并将客户端连接到`test`网络，并列出了常用的命令\n\n### 运行你第一笔交易\n\n#### 创建两个账户\n\n``` shell\nlibra% account\nusage: account <arg>\n\nUse the following args for this command:\n\ncreate | c \n\tCreate an account. Returns reference ID to use in other operations\nlist | la \n\tPrint all accounts that were created or loaded\nrecover | r <file_path>\n\tRecover Libra wallet from the file path\nwrite | w <file_path>\n\tSave Libra wallet mnemonic recovery seed to disk\nmint | mintb | m | mb <receiver_account_ref_id>|<receiver_account_address> <number_of_coins>\n\tMint coins to the account. Suffix 'b' is for blocking\nlibra% account create\n>> Creating/retrieving next account from wallet\nCreated/retrieved account #0 address 4be45f015f45a2968d68a2ac56ebd1bfa05a43f87fefb2f5327bea292c354ece\nlibra% account create\n>> Creating/retrieving next account from wallet\nCreated/retrieved account #1 address b83ef4576f74faa787abc8233a501540dcbb9ede236ee967535051ac8c8f6fab\n```\n\n`#0`是账户索引，十六进制字符串是账号地址\n\n#### 转账\n\n``` shell\nlibra% account mint 0 110\n>> Minting coins\nMint request submitted\n```\n\n* 0 是账户索引\n* 110 是往账户添加的金额\n\n第二个账户也进行相同的操作，需要注意的是，只是发出了命令进行增加，还需要确认账户中的金额\n\n``` shell\nlibra% query balance 0\nBalance is: 110.000000\nlibra% query balance 1\nBalance is: 52.000000\n```\n\n可以看到对应的金额已经添加到账户\n\n#### 提交交易\n\n``` shell\nlibra% query sequence 0\n>> Getting current sequence number\nSequence number is: 0\nlibra% query sequence 1\n>> Getting current sequence number\nSequence number is: 0\n\nlibra% transfer 0 1 10\n>> Transferring\nTransaction submitted to validator\nTo query for transaction status, run: query txn_acc_seq 0 0 <fetch_events=true|false>\nlibra% query sequence 0\n>> Getting current sequence number\nSequence number is: 1\nlibra% query balance 0\nBalance is: 100.000000\nlibra% query balance 1\nBalance is: 62.000000\n```\n\n* 0 是第一个账户\n* 1是第二个账户\n* 10是要从第一个转账到第二个账户的金额\n\n通过查询账户，可以看到对应的金额已经变更\n\n整个过程非常的简单，试想一下，如果全球都支持使用`Libra`进行支付，支付将会变的更加便捷，当然支付宝也可以完成类似的操作，但是背后所涉及的交易结算是非常复杂的，还需要支付额外的手续费。那`Libra`是如何维持生存呢，看了一下，靠发币是抵押的法币产生的利息支付运营成本，不过这玩意要是真的流行，那就是全球羊毛收割机了，未来谁知道呢。\n","source":"_posts/what-is-libra.md","raw":"---\ntitle: 什么是Libra(天秤座)\ndate: 2019-07-12 21:45:20\ncategories: Cryptocurrency\ntags: Libra\n---\n什么是`Libra`,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。<!--more-->\n\n>Libra’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.\n\n上面的是Libra 对自己的描述，或者理解为定位，如果全球都使用同一种货币进行交易的话，里面会有多大的想象力以及前景，虽然现在Libra面临着各种各样的法律问题和风险，但是如果能慢慢解决的话，我还是非常看好它的前景的。\n\n`Libra` 使用Facebook开发的Move语言，接下来我们简单的来跑个demo，了解一下`Libra`，现在它只能在macOS和Linux 上运行\n\n### Move 语言的三大用处\n\n* 发行数字货币、Token、数字资产\n* 灵活处理区块链交易\n* 验证器（Validator）管理\n\n### Clone Libra\n\n下载代码到本地\n\n``` shell\ngit clone https://github.com/libra/libra.git && cd libra\n#结果\nCloning into 'libra'...\nremote: Enumerating objects: 3799, done.\nremote: Total 3799 (delta 0), reused 0 (delta 0), pack-reused 3799\nReceiving objects: 100% (3799/3799), 3.47 MiB | 1.09 MiB/s, done.\nResolving deltas: 100% (1874/1874), done.\n```\n\n### 安装依赖\n\n``` shell\n./scripts/dev_setup.sh\n#结果\nInstalling Rust......\ninfo: downloading installer\ninfo: syncing channel updates for 'stable-x86_64-apple-darwin'\ninfo: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)\ninfo: downloading component 'rustc'\n 82.2 MiB /  82.2 MiB (100 %)   8.8 MiB/s in 10s ETA:  0s\ninfo: downloading component 'rust-std'\n 55.8 MiB /  55.8 MiB (100 %)   8.6 MiB/s in  6s ETA:  0s\ninfo: downloading component 'cargo'\ninfo: downloading component 'rust-docs'\n 11.1 MiB /  11.1 MiB (100 %)   8.6 MiB/s in  1s ETA:  0s\ninfo: installing component 'rustc'\n 82.2 MiB /  82.2 MiB (100 %)  12.6 MiB/s in  6s ETA:  0s\ninfo: installing component 'rust-std'\n 55.8 MiB /  55.8 MiB (100 %)  16.2 MiB/s in  3s ETA:  0s\ninfo: installing component 'cargo'\ninfo: installing component 'rust-docs'\n 11.1 MiB /  11.1 MiB (100 %)   2.2 MiB/s in  5s ETA:  0s\ninfo: default toolchain set to 'stable'\n\n  stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)\n\n\nRust is installed now. Great!\n\nTo get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH \nenvironment variable. Next time you log in this will be done automatically.\n\nTo configure your current shell run source $HOME/.cargo/env\ninfo: syncing channel updates for 'stable-x86_64-apple-darwin'\ninfo: checking for self-updates\n\n  stable-x86_64-apple-darwin unchanged - rustc 1.36.0 (a53f9df32 2019-07-03)\n\ninfo: syncing channel updates for 'nightly-2019-07-08-x86_64-apple-darwin'\ninfo: latest update on 2019-07-08, rust version 1.38.0-nightly (6e310f2ab 2019-07-07)\ninfo: downloading component 'rustc'\n 58.9 MiB /  58.9 MiB (100 %)   1.5 MiB/s in 57s ETA:  0s     \ninfo: downloading component 'rust-std'\n168.6 MiB / 168.6 MiB (100 %)   2.2 MiB/s in  1m  5s ETA:  0s\ninfo: downloading component 'cargo'\n  3.6 MiB /   3.6 MiB (100 %)   2.8 MiB/s in  1s ETA:  0s\ninfo: downloading component 'rust-docs'\n 11.6 MiB /  11.6 MiB (100 %)   2.3 MiB/s in  5s ETA:  0s\ninfo: installing component 'rustc'\n 58.9 MiB /  58.9 MiB (100 %)  12.7 MiB/s in  4s ETA:  0s\ninfo: installing component 'rust-std'\n168.6 MiB / 168.6 MiB (100 %)  26.8 MiB/s in  6s ETA:  0s\ninfo: installing component 'cargo'\ninfo: installing component 'rust-docs'\n 11.6 MiB /  11.6 MiB (100 %)   2.2 MiB/s in  4s ETA:  0s\ninfo: downloading component 'rustfmt'\n  2.0 MiB /   2.0 MiB (100 %) 1005.6 KiB/s in  3s ETA:  0s\ninfo: installing component 'rustfmt'\ninfo: downloading component 'clippy'\n  1.3 MiB /   1.3 MiB (100 %) 383.7 KiB/s in  5s ETA:  0s\ninfo: installing component 'clippy'\nInstalling CMake......\nFinished installing all dependencies.\n\nYou should now be able to build the project by running:\n    source /Users/xxx/.cargo/env\n    cargo build\n#如果出现下面的错误，需要安装 protobuf\nerror: failed to run custom build command for `network v0.1.0\nbrew install protobuf\n```\n\n出现错误可以查看 [roubleshooting](https://developers.libra.org/docs/my-first-transaction#setup-libra-core) 解决\n上面的过程取决与你的网速，有可能会很慢，通过上面的一系列操作，基本的环境配置好了，接下来就可以在测试网络上开始交易了（现在还是测试网络，现在还没有办法支持10亿人的交易需求，后面会慢慢转向私有的联盟链）\n\n### 命令行运行\n\n``` shell\n./scripts/cli/start_cli_testnet.sh\n#结果\nxxxxxxxx\n Finished dev [unoptimized + debuginfo] target(s) in 3m 31s\n     Running `target/debug/client --host ac.testnet.libra.org --port 8000 -s ./scripts/cli/trusted_peers.config.toml`\nConnected to validator at: ac.testnet.libra.org:8000\nusage: <command> <args>\n\nUse the following commands:\n\naccount | a\n    Account operations\nquery | q\n    Query operations\ntransfer | transferb | t | tb\n    <sender_account_address>|<sender_account_ref_id> <receiver_account_address>|<receiver_account_ref_id> <number_of_coins> [gas_unit_price_in_micro_libras (default=0)] [max_gas_amount_in_micro_libras (default 10000)] Suffix 'b' is for blocking.\n    Transfer coins (in libra) from account to another.\nsubmit | submitb | s | sb\n    <signer_account_address>|<signer_account_ref_id> <path_to_raw_transaction> Suffix 'b' is for blocking. \n    Load a RawTransaction from file and submit to the network\nhelp | h\n    Prints this help\nquit | q!\n    Exit this client\nPlease, input commands:\n```\n\n使用上面的命令可以构建和运行客户端，并将客户端连接到`test`网络，并列出了常用的命令\n\n### 运行你第一笔交易\n\n#### 创建两个账户\n\n``` shell\nlibra% account\nusage: account <arg>\n\nUse the following args for this command:\n\ncreate | c \n\tCreate an account. Returns reference ID to use in other operations\nlist | la \n\tPrint all accounts that were created or loaded\nrecover | r <file_path>\n\tRecover Libra wallet from the file path\nwrite | w <file_path>\n\tSave Libra wallet mnemonic recovery seed to disk\nmint | mintb | m | mb <receiver_account_ref_id>|<receiver_account_address> <number_of_coins>\n\tMint coins to the account. Suffix 'b' is for blocking\nlibra% account create\n>> Creating/retrieving next account from wallet\nCreated/retrieved account #0 address 4be45f015f45a2968d68a2ac56ebd1bfa05a43f87fefb2f5327bea292c354ece\nlibra% account create\n>> Creating/retrieving next account from wallet\nCreated/retrieved account #1 address b83ef4576f74faa787abc8233a501540dcbb9ede236ee967535051ac8c8f6fab\n```\n\n`#0`是账户索引，十六进制字符串是账号地址\n\n#### 转账\n\n``` shell\nlibra% account mint 0 110\n>> Minting coins\nMint request submitted\n```\n\n* 0 是账户索引\n* 110 是往账户添加的金额\n\n第二个账户也进行相同的操作，需要注意的是，只是发出了命令进行增加，还需要确认账户中的金额\n\n``` shell\nlibra% query balance 0\nBalance is: 110.000000\nlibra% query balance 1\nBalance is: 52.000000\n```\n\n可以看到对应的金额已经添加到账户\n\n#### 提交交易\n\n``` shell\nlibra% query sequence 0\n>> Getting current sequence number\nSequence number is: 0\nlibra% query sequence 1\n>> Getting current sequence number\nSequence number is: 0\n\nlibra% transfer 0 1 10\n>> Transferring\nTransaction submitted to validator\nTo query for transaction status, run: query txn_acc_seq 0 0 <fetch_events=true|false>\nlibra% query sequence 0\n>> Getting current sequence number\nSequence number is: 1\nlibra% query balance 0\nBalance is: 100.000000\nlibra% query balance 1\nBalance is: 62.000000\n```\n\n* 0 是第一个账户\n* 1是第二个账户\n* 10是要从第一个转账到第二个账户的金额\n\n通过查询账户，可以看到对应的金额已经变更\n\n整个过程非常的简单，试想一下，如果全球都支持使用`Libra`进行支付，支付将会变的更加便捷，当然支付宝也可以完成类似的操作，但是背后所涉及的交易结算是非常复杂的，还需要支付额外的手续费。那`Libra`是如何维持生存呢，看了一下，靠发币是抵押的法币产生的利息支付运营成本，不过这玩意要是真的流行，那就是全球羊毛收割机了，未来谁知道呢。\n","slug":"what-is-libra","published":1,"updated":"2019-10-20T04:54:47.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dv005eeos6654zcz3a","content":"<p>什么是<code>Libra</code>,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。<a id=\"more\"></a></p>\n<blockquote>\n<p>Libra’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.</p>\n</blockquote>\n<p>上面的是Libra 对自己的描述，或者理解为定位，如果全球都使用同一种货币进行交易的话，里面会有多大的想象力以及前景，虽然现在Libra面临着各种各样的法律问题和风险，但是如果能慢慢解决的话，我还是非常看好它的前景的。</p>\n<p><code>Libra</code> 使用Facebook开发的Move语言，接下来我们简单的来跑个demo，了解一下<code>Libra</code>，现在它只能在macOS和Linux 上运行</p>\n<h3 id=\"Move-语言的三大用处\"><a href=\"#Move-语言的三大用处\" class=\"headerlink\" title=\"Move 语言的三大用处\"></a>Move 语言的三大用处</h3><ul>\n<li>发行数字货币、Token、数字资产</li>\n<li>灵活处理区块链交易</li>\n<li>验证器（Validator）管理</li>\n</ul>\n<h3 id=\"Clone-Libra\"><a href=\"#Clone-Libra\" class=\"headerlink\" title=\"Clone Libra\"></a>Clone Libra</h3><p>下载代码到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/libra/libra.git &amp;&amp; cd libra</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">结果</span></span><br><span class=\"line\">Cloning into 'libra'...</span><br><span class=\"line\">remote: Enumerating objects: 3799, done.</span><br><span class=\"line\">remote: Total 3799 (delta 0), reused 0 (delta 0), pack-reused 3799</span><br><span class=\"line\">Receiving objects: 100% (3799/3799), 3.47 MiB | 1.09 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (1874/1874), done.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/dev_setup.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">结果</span></span><br><span class=\"line\">Installing Rust......</span><br><span class=\"line\">info: downloading installer</span><br><span class=\"line\">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class=\"line\">info: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)</span><br><span class=\"line\">info: downloading component 'rustc'</span><br><span class=\"line\"> 82.2 MiB /  82.2 MiB (100 %)   8.8 MiB/s in 10s ETA:  0s</span><br><span class=\"line\">info: downloading component 'rust-std'</span><br><span class=\"line\"> 55.8 MiB /  55.8 MiB (100 %)   8.6 MiB/s in  6s ETA:  0s</span><br><span class=\"line\">info: downloading component 'cargo'</span><br><span class=\"line\">info: downloading component 'rust-docs'</span><br><span class=\"line\"> 11.1 MiB /  11.1 MiB (100 %)   8.6 MiB/s in  1s ETA:  0s</span><br><span class=\"line\">info: installing component 'rustc'</span><br><span class=\"line\"> 82.2 MiB /  82.2 MiB (100 %)  12.6 MiB/s in  6s ETA:  0s</span><br><span class=\"line\">info: installing component 'rust-std'</span><br><span class=\"line\"> 55.8 MiB /  55.8 MiB (100 %)  16.2 MiB/s in  3s ETA:  0s</span><br><span class=\"line\">info: installing component 'cargo'</span><br><span class=\"line\">info: installing component 'rust-docs'</span><br><span class=\"line\"> 11.1 MiB /  11.1 MiB (100 %)   2.2 MiB/s in  5s ETA:  0s</span><br><span class=\"line\">info: default toolchain set to 'stable'</span><br><span class=\"line\"></span><br><span class=\"line\">  stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Rust is installed now. Great!</span><br><span class=\"line\"></span><br><span class=\"line\">To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH </span><br><span class=\"line\">environment variable. Next time you log in this will be done automatically.</span><br><span class=\"line\"></span><br><span class=\"line\">To configure your current shell run source $HOME/.cargo/env</span><br><span class=\"line\">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class=\"line\">info: checking for self-updates</span><br><span class=\"line\"></span><br><span class=\"line\">  stable-x86_64-apple-darwin unchanged - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class=\"line\"></span><br><span class=\"line\">info: syncing channel updates for 'nightly-2019-07-08-x86_64-apple-darwin'</span><br><span class=\"line\">info: latest update on 2019-07-08, rust version 1.38.0-nightly (6e310f2ab 2019-07-07)</span><br><span class=\"line\">info: downloading component 'rustc'</span><br><span class=\"line\"> 58.9 MiB /  58.9 MiB (100 %)   1.5 MiB/s in 57s ETA:  0s     </span><br><span class=\"line\">info: downloading component 'rust-std'</span><br><span class=\"line\">168.6 MiB / 168.6 MiB (100 %)   2.2 MiB/s in  1m  5s ETA:  0s</span><br><span class=\"line\">info: downloading component 'cargo'</span><br><span class=\"line\">  3.6 MiB /   3.6 MiB (100 %)   2.8 MiB/s in  1s ETA:  0s</span><br><span class=\"line\">info: downloading component 'rust-docs'</span><br><span class=\"line\"> 11.6 MiB /  11.6 MiB (100 %)   2.3 MiB/s in  5s ETA:  0s</span><br><span class=\"line\">info: installing component 'rustc'</span><br><span class=\"line\"> 58.9 MiB /  58.9 MiB (100 %)  12.7 MiB/s in  4s ETA:  0s</span><br><span class=\"line\">info: installing component 'rust-std'</span><br><span class=\"line\">168.6 MiB / 168.6 MiB (100 %)  26.8 MiB/s in  6s ETA:  0s</span><br><span class=\"line\">info: installing component 'cargo'</span><br><span class=\"line\">info: installing component 'rust-docs'</span><br><span class=\"line\"> 11.6 MiB /  11.6 MiB (100 %)   2.2 MiB/s in  4s ETA:  0s</span><br><span class=\"line\">info: downloading component 'rustfmt'</span><br><span class=\"line\">  2.0 MiB /   2.0 MiB (100 %) 1005.6 KiB/s in  3s ETA:  0s</span><br><span class=\"line\">info: installing component 'rustfmt'</span><br><span class=\"line\">info: downloading component 'clippy'</span><br><span class=\"line\">  1.3 MiB /   1.3 MiB (100 %) 383.7 KiB/s in  5s ETA:  0s</span><br><span class=\"line\">info: installing component 'clippy'</span><br><span class=\"line\">Installing CMake......</span><br><span class=\"line\">Finished installing all dependencies.</span><br><span class=\"line\"></span><br><span class=\"line\">You should now be able to build the project by running:</span><br><span class=\"line\">    source /Users/xxx/.cargo/env</span><br><span class=\"line\">    cargo build</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现下面的错误，需要安装 protobuf</span></span><br><span class=\"line\">error: failed to run custom build command for `network v0.1.0</span><br><span class=\"line\">brew install protobuf</span><br></pre></td></tr></table></figure>\n\n<p>出现错误可以查看 <a href=\"https://developers.libra.org/docs/my-first-transaction#setup-libra-core\" target=\"_blank\" rel=\"noopener\">roubleshooting</a> 解决<br>上面的过程取决与你的网速，有可能会很慢，通过上面的一系列操作，基本的环境配置好了，接下来就可以在测试网络上开始交易了（现在还是测试网络，现在还没有办法支持10亿人的交易需求，后面会慢慢转向私有的联盟链）</p>\n<h3 id=\"命令行运行\"><a href=\"#命令行运行\" class=\"headerlink\" title=\"命令行运行\"></a>命令行运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/cli/start_cli_testnet.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">结果</span></span><br><span class=\"line\">xxxxxxxx</span><br><span class=\"line\"> Finished dev [unoptimized + debuginfo] target(s) in 3m 31s</span><br><span class=\"line\">     Running `target/debug/client --host ac.testnet.libra.org --port 8000 -s ./scripts/cli/trusted_peers.config.toml`</span><br><span class=\"line\">Connected to validator at: ac.testnet.libra.org:8000</span><br><span class=\"line\">usage: &lt;command&gt; &lt;args&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Use the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\">account | a</span><br><span class=\"line\">    Account operations</span><br><span class=\"line\">query | q</span><br><span class=\"line\">    Query operations</span><br><span class=\"line\">transfer | transferb | t | tb</span><br><span class=\"line\">    &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;receiver_account_address&gt;|&lt;receiver_account_ref_id&gt; &lt;number_of_coins&gt; [gas_unit_price_in_micro_libras (default=0)] [max_gas_amount_in_micro_libras (default 10000)] Suffix 'b' is for blocking.</span><br><span class=\"line\">    Transfer coins (in libra) from account to another.</span><br><span class=\"line\">submit | submitb | s | sb</span><br><span class=\"line\">    &lt;signer_account_address&gt;|&lt;signer_account_ref_id&gt; &lt;path_to_raw_transaction&gt; Suffix 'b' is for blocking. </span><br><span class=\"line\">    Load a RawTransaction from file and submit to the network</span><br><span class=\"line\">help | h</span><br><span class=\"line\">    Prints this help</span><br><span class=\"line\">quit | q!</span><br><span class=\"line\">    Exit this client</span><br><span class=\"line\">Please, input commands:</span><br></pre></td></tr></table></figure>\n\n<p>使用上面的命令可以构建和运行客户端，并将客户端连接到<code>test</code>网络，并列出了常用的命令</p>\n<h3 id=\"运行你第一笔交易\"><a href=\"#运行你第一笔交易\" class=\"headerlink\" title=\"运行你第一笔交易\"></a>运行你第一笔交易</h3><h4 id=\"创建两个账户\"><a href=\"#创建两个账户\" class=\"headerlink\" title=\"创建两个账户\"></a>创建两个账户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account</span></span><br><span class=\"line\">usage: account &lt;arg&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Use the following args for this command:</span><br><span class=\"line\"></span><br><span class=\"line\">create | c </span><br><span class=\"line\">\tCreate an account. Returns reference ID to use in other operations</span><br><span class=\"line\">list | la </span><br><span class=\"line\">\tPrint all accounts that were created or loaded</span><br><span class=\"line\">recover | r &lt;file_path&gt;</span><br><span class=\"line\">\tRecover Libra wallet from the file path</span><br><span class=\"line\">write | w &lt;file_path&gt;</span><br><span class=\"line\">\tSave Libra wallet mnemonic recovery seed to disk</span><br><span class=\"line\">mint | mintb | m | mb &lt;receiver_account_ref_id&gt;|&lt;receiver_account_address&gt; &lt;number_of_coins&gt;</span><br><span class=\"line\">\tMint coins to the account. Suffix 'b' is for blocking</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account create</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Creating/retrieving next account from wallet</span></span><br><span class=\"line\">Created/retrieved account #0 address 4be45f015f45a2968d68a2ac56ebd1bfa05a43f87fefb2f5327bea292c354ece</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account create</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Creating/retrieving next account from wallet</span></span><br><span class=\"line\">Created/retrieved account #1 address b83ef4576f74faa787abc8233a501540dcbb9ede236ee967535051ac8c8f6fab</span><br></pre></td></tr></table></figure>\n\n<p><code>#0</code>是账户索引，十六进制字符串是账号地址</p>\n<h4 id=\"转账\"><a href=\"#转账\" class=\"headerlink\" title=\"转账\"></a>转账</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account mint 0 110</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Minting coins</span></span><br><span class=\"line\">Mint request submitted</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>0 是账户索引</li>\n<li>110 是往账户添加的金额</li>\n</ul>\n<p>第二个账户也进行相同的操作，需要注意的是，只是发出了命令进行增加，还需要确认账户中的金额</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 0</span></span><br><span class=\"line\">Balance is: 110.000000</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 1</span></span><br><span class=\"line\">Balance is: 52.000000</span><br></pre></td></tr></table></figure>\n\n<p>可以看到对应的金额已经添加到账户</p>\n<h4 id=\"提交交易\"><a href=\"#提交交易\" class=\"headerlink\" title=\"提交交易\"></a>提交交易</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query sequence 0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Getting current sequence number</span></span><br><span class=\"line\">Sequence number is: 0</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query sequence 1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Getting current sequence number</span></span><br><span class=\"line\">Sequence number is: 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> transfer 0 1 10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Transferring</span></span><br><span class=\"line\">Transaction submitted to validator</span><br><span class=\"line\">To query for transaction status, run: query txn_acc_seq 0 0 &lt;fetch_events=true|false&gt;</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query sequence 0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Getting current sequence number</span></span><br><span class=\"line\">Sequence number is: 1</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 0</span></span><br><span class=\"line\">Balance is: 100.000000</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 1</span></span><br><span class=\"line\">Balance is: 62.000000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>0 是第一个账户</li>\n<li>1是第二个账户</li>\n<li>10是要从第一个转账到第二个账户的金额</li>\n</ul>\n<p>通过查询账户，可以看到对应的金额已经变更</p>\n<p>整个过程非常的简单，试想一下，如果全球都支持使用<code>Libra</code>进行支付，支付将会变的更加便捷，当然支付宝也可以完成类似的操作，但是背后所涉及的交易结算是非常复杂的，还需要支付额外的手续费。那<code>Libra</code>是如何维持生存呢，看了一下，靠发币是抵押的法币产生的利息支付运营成本，不过这玩意要是真的流行，那就是全球羊毛收割机了，未来谁知道呢。</p>\n","site":{"data":{}},"excerpt":"<p>什么是<code>Libra</code>,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。","more":"</p>\n<blockquote>\n<p>Libra’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.</p>\n</blockquote>\n<p>上面的是Libra 对自己的描述，或者理解为定位，如果全球都使用同一种货币进行交易的话，里面会有多大的想象力以及前景，虽然现在Libra面临着各种各样的法律问题和风险，但是如果能慢慢解决的话，我还是非常看好它的前景的。</p>\n<p><code>Libra</code> 使用Facebook开发的Move语言，接下来我们简单的来跑个demo，了解一下<code>Libra</code>，现在它只能在macOS和Linux 上运行</p>\n<h3 id=\"Move-语言的三大用处\"><a href=\"#Move-语言的三大用处\" class=\"headerlink\" title=\"Move 语言的三大用处\"></a>Move 语言的三大用处</h3><ul>\n<li>发行数字货币、Token、数字资产</li>\n<li>灵活处理区块链交易</li>\n<li>验证器（Validator）管理</li>\n</ul>\n<h3 id=\"Clone-Libra\"><a href=\"#Clone-Libra\" class=\"headerlink\" title=\"Clone Libra\"></a>Clone Libra</h3><p>下载代码到本地</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/libra/libra.git &amp;&amp; cd libra</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">结果</span></span><br><span class=\"line\">Cloning into 'libra'...</span><br><span class=\"line\">remote: Enumerating objects: 3799, done.</span><br><span class=\"line\">remote: Total 3799 (delta 0), reused 0 (delta 0), pack-reused 3799</span><br><span class=\"line\">Receiving objects: 100% (3799/3799), 3.47 MiB | 1.09 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (1874/1874), done.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/dev_setup.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">结果</span></span><br><span class=\"line\">Installing Rust......</span><br><span class=\"line\">info: downloading installer</span><br><span class=\"line\">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class=\"line\">info: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)</span><br><span class=\"line\">info: downloading component 'rustc'</span><br><span class=\"line\"> 82.2 MiB /  82.2 MiB (100 %)   8.8 MiB/s in 10s ETA:  0s</span><br><span class=\"line\">info: downloading component 'rust-std'</span><br><span class=\"line\"> 55.8 MiB /  55.8 MiB (100 %)   8.6 MiB/s in  6s ETA:  0s</span><br><span class=\"line\">info: downloading component 'cargo'</span><br><span class=\"line\">info: downloading component 'rust-docs'</span><br><span class=\"line\"> 11.1 MiB /  11.1 MiB (100 %)   8.6 MiB/s in  1s ETA:  0s</span><br><span class=\"line\">info: installing component 'rustc'</span><br><span class=\"line\"> 82.2 MiB /  82.2 MiB (100 %)  12.6 MiB/s in  6s ETA:  0s</span><br><span class=\"line\">info: installing component 'rust-std'</span><br><span class=\"line\"> 55.8 MiB /  55.8 MiB (100 %)  16.2 MiB/s in  3s ETA:  0s</span><br><span class=\"line\">info: installing component 'cargo'</span><br><span class=\"line\">info: installing component 'rust-docs'</span><br><span class=\"line\"> 11.1 MiB /  11.1 MiB (100 %)   2.2 MiB/s in  5s ETA:  0s</span><br><span class=\"line\">info: default toolchain set to 'stable'</span><br><span class=\"line\"></span><br><span class=\"line\">  stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Rust is installed now. Great!</span><br><span class=\"line\"></span><br><span class=\"line\">To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH </span><br><span class=\"line\">environment variable. Next time you log in this will be done automatically.</span><br><span class=\"line\"></span><br><span class=\"line\">To configure your current shell run source $HOME/.cargo/env</span><br><span class=\"line\">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class=\"line\">info: checking for self-updates</span><br><span class=\"line\"></span><br><span class=\"line\">  stable-x86_64-apple-darwin unchanged - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class=\"line\"></span><br><span class=\"line\">info: syncing channel updates for 'nightly-2019-07-08-x86_64-apple-darwin'</span><br><span class=\"line\">info: latest update on 2019-07-08, rust version 1.38.0-nightly (6e310f2ab 2019-07-07)</span><br><span class=\"line\">info: downloading component 'rustc'</span><br><span class=\"line\"> 58.9 MiB /  58.9 MiB (100 %)   1.5 MiB/s in 57s ETA:  0s     </span><br><span class=\"line\">info: downloading component 'rust-std'</span><br><span class=\"line\">168.6 MiB / 168.6 MiB (100 %)   2.2 MiB/s in  1m  5s ETA:  0s</span><br><span class=\"line\">info: downloading component 'cargo'</span><br><span class=\"line\">  3.6 MiB /   3.6 MiB (100 %)   2.8 MiB/s in  1s ETA:  0s</span><br><span class=\"line\">info: downloading component 'rust-docs'</span><br><span class=\"line\"> 11.6 MiB /  11.6 MiB (100 %)   2.3 MiB/s in  5s ETA:  0s</span><br><span class=\"line\">info: installing component 'rustc'</span><br><span class=\"line\"> 58.9 MiB /  58.9 MiB (100 %)  12.7 MiB/s in  4s ETA:  0s</span><br><span class=\"line\">info: installing component 'rust-std'</span><br><span class=\"line\">168.6 MiB / 168.6 MiB (100 %)  26.8 MiB/s in  6s ETA:  0s</span><br><span class=\"line\">info: installing component 'cargo'</span><br><span class=\"line\">info: installing component 'rust-docs'</span><br><span class=\"line\"> 11.6 MiB /  11.6 MiB (100 %)   2.2 MiB/s in  4s ETA:  0s</span><br><span class=\"line\">info: downloading component 'rustfmt'</span><br><span class=\"line\">  2.0 MiB /   2.0 MiB (100 %) 1005.6 KiB/s in  3s ETA:  0s</span><br><span class=\"line\">info: installing component 'rustfmt'</span><br><span class=\"line\">info: downloading component 'clippy'</span><br><span class=\"line\">  1.3 MiB /   1.3 MiB (100 %) 383.7 KiB/s in  5s ETA:  0s</span><br><span class=\"line\">info: installing component 'clippy'</span><br><span class=\"line\">Installing CMake......</span><br><span class=\"line\">Finished installing all dependencies.</span><br><span class=\"line\"></span><br><span class=\"line\">You should now be able to build the project by running:</span><br><span class=\"line\">    source /Users/xxx/.cargo/env</span><br><span class=\"line\">    cargo build</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果出现下面的错误，需要安装 protobuf</span></span><br><span class=\"line\">error: failed to run custom build command for `network v0.1.0</span><br><span class=\"line\">brew install protobuf</span><br></pre></td></tr></table></figure>\n\n<p>出现错误可以查看 <a href=\"https://developers.libra.org/docs/my-first-transaction#setup-libra-core\" target=\"_blank\" rel=\"noopener\">roubleshooting</a> 解决<br>上面的过程取决与你的网速，有可能会很慢，通过上面的一系列操作，基本的环境配置好了，接下来就可以在测试网络上开始交易了（现在还是测试网络，现在还没有办法支持10亿人的交易需求，后面会慢慢转向私有的联盟链）</p>\n<h3 id=\"命令行运行\"><a href=\"#命令行运行\" class=\"headerlink\" title=\"命令行运行\"></a>命令行运行</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/cli/start_cli_testnet.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">结果</span></span><br><span class=\"line\">xxxxxxxx</span><br><span class=\"line\"> Finished dev [unoptimized + debuginfo] target(s) in 3m 31s</span><br><span class=\"line\">     Running `target/debug/client --host ac.testnet.libra.org --port 8000 -s ./scripts/cli/trusted_peers.config.toml`</span><br><span class=\"line\">Connected to validator at: ac.testnet.libra.org:8000</span><br><span class=\"line\">usage: &lt;command&gt; &lt;args&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Use the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\">account | a</span><br><span class=\"line\">    Account operations</span><br><span class=\"line\">query | q</span><br><span class=\"line\">    Query operations</span><br><span class=\"line\">transfer | transferb | t | tb</span><br><span class=\"line\">    &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;receiver_account_address&gt;|&lt;receiver_account_ref_id&gt; &lt;number_of_coins&gt; [gas_unit_price_in_micro_libras (default=0)] [max_gas_amount_in_micro_libras (default 10000)] Suffix 'b' is for blocking.</span><br><span class=\"line\">    Transfer coins (in libra) from account to another.</span><br><span class=\"line\">submit | submitb | s | sb</span><br><span class=\"line\">    &lt;signer_account_address&gt;|&lt;signer_account_ref_id&gt; &lt;path_to_raw_transaction&gt; Suffix 'b' is for blocking. </span><br><span class=\"line\">    Load a RawTransaction from file and submit to the network</span><br><span class=\"line\">help | h</span><br><span class=\"line\">    Prints this help</span><br><span class=\"line\">quit | q!</span><br><span class=\"line\">    Exit this client</span><br><span class=\"line\">Please, input commands:</span><br></pre></td></tr></table></figure>\n\n<p>使用上面的命令可以构建和运行客户端，并将客户端连接到<code>test</code>网络，并列出了常用的命令</p>\n<h3 id=\"运行你第一笔交易\"><a href=\"#运行你第一笔交易\" class=\"headerlink\" title=\"运行你第一笔交易\"></a>运行你第一笔交易</h3><h4 id=\"创建两个账户\"><a href=\"#创建两个账户\" class=\"headerlink\" title=\"创建两个账户\"></a>创建两个账户</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account</span></span><br><span class=\"line\">usage: account &lt;arg&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Use the following args for this command:</span><br><span class=\"line\"></span><br><span class=\"line\">create | c </span><br><span class=\"line\">\tCreate an account. Returns reference ID to use in other operations</span><br><span class=\"line\">list | la </span><br><span class=\"line\">\tPrint all accounts that were created or loaded</span><br><span class=\"line\">recover | r &lt;file_path&gt;</span><br><span class=\"line\">\tRecover Libra wallet from the file path</span><br><span class=\"line\">write | w &lt;file_path&gt;</span><br><span class=\"line\">\tSave Libra wallet mnemonic recovery seed to disk</span><br><span class=\"line\">mint | mintb | m | mb &lt;receiver_account_ref_id&gt;|&lt;receiver_account_address&gt; &lt;number_of_coins&gt;</span><br><span class=\"line\">\tMint coins to the account. Suffix 'b' is for blocking</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account create</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Creating/retrieving next account from wallet</span></span><br><span class=\"line\">Created/retrieved account #0 address 4be45f015f45a2968d68a2ac56ebd1bfa05a43f87fefb2f5327bea292c354ece</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account create</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Creating/retrieving next account from wallet</span></span><br><span class=\"line\">Created/retrieved account #1 address b83ef4576f74faa787abc8233a501540dcbb9ede236ee967535051ac8c8f6fab</span><br></pre></td></tr></table></figure>\n\n<p><code>#0</code>是账户索引，十六进制字符串是账号地址</p>\n<h4 id=\"转账\"><a href=\"#转账\" class=\"headerlink\" title=\"转账\"></a>转账</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> account mint 0 110</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Minting coins</span></span><br><span class=\"line\">Mint request submitted</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>0 是账户索引</li>\n<li>110 是往账户添加的金额</li>\n</ul>\n<p>第二个账户也进行相同的操作，需要注意的是，只是发出了命令进行增加，还需要确认账户中的金额</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 0</span></span><br><span class=\"line\">Balance is: 110.000000</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 1</span></span><br><span class=\"line\">Balance is: 52.000000</span><br></pre></td></tr></table></figure>\n\n<p>可以看到对应的金额已经添加到账户</p>\n<h4 id=\"提交交易\"><a href=\"#提交交易\" class=\"headerlink\" title=\"提交交易\"></a>提交交易</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query sequence 0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Getting current sequence number</span></span><br><span class=\"line\">Sequence number is: 0</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query sequence 1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Getting current sequence number</span></span><br><span class=\"line\">Sequence number is: 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> transfer 0 1 10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Transferring</span></span><br><span class=\"line\">Transaction submitted to validator</span><br><span class=\"line\">To query for transaction status, run: query txn_acc_seq 0 0 &lt;fetch_events=true|false&gt;</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query sequence 0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt; Getting current sequence number</span></span><br><span class=\"line\">Sequence number is: 1</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 0</span></span><br><span class=\"line\">Balance is: 100.000000</span><br><span class=\"line\"><span class=\"meta\">libra%</span><span class=\"bash\"> query balance 1</span></span><br><span class=\"line\">Balance is: 62.000000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>0 是第一个账户</li>\n<li>1是第二个账户</li>\n<li>10是要从第一个转账到第二个账户的金额</li>\n</ul>\n<p>通过查询账户，可以看到对应的金额已经变更</p>\n<p>整个过程非常的简单，试想一下，如果全球都支持使用<code>Libra</code>进行支付，支付将会变的更加便捷，当然支付宝也可以完成类似的操作，但是背后所涉及的交易结算是非常复杂的，还需要支付额外的手续费。那<code>Libra</code>是如何维持生存呢，看了一下，靠发币是抵押的法币产生的利息支付运营成本，不过这玩意要是真的流行，那就是全球羊毛收割机了，未来谁知道呢。</p>"},{"title":"centos yum 安装nginx 后增加模块","date":"2017-10-01T15:30:30.000Z","_content":"### yum 和 源码安装的区别\n\nyum 安装是在线安装，优点：安装方式简单，快捷；\n\n源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<!-- more -->\n\n### yum安装nginx\n系统版本：CentOS Linux release 7.4.1708 (Core)\n\n#### 1.增加对应的源\n``` shell\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n#### 2.查看nginx信息\n\n``` shell\nyum info nginx  (查看nginx 版本方便后面下载对应版本)\n```\n#### 3.yum安装nginx\n``` shell\nyum -y install nginx\n```\n\n### nginx 相关的命令\n#### 1.查看安装路径\n``` shell\nrpm -ql nginx\n```\n#### 2.查看编译参数\n``` shell\nnginx -V\n```\n#### 3.nginx 启动、停止、重启\n``` shell\nsystemctl start nginx #启动 nginx 服务\nsystemctl stop nginx #停止 nginx 服务\nsystemctl restart nginx #重启 nginx 服务\n```\n\n### 启动检查是否启动成功\n``` shell\ncurl -i localhost\n```\n\n#### 如下显示说明正常启动：\n``` html\n···\n<h1>Welcome to nginx!</h1>\n···\n```\n\n### 安装第三方模块\n其实`yum`安装`nginx` 后想要添加第三方模块，只需对`yum`安装的`nginx`相同版本的源码进行编译后替换\n#### 1.安装源码安装需要的第三方包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n#### 2.下载对应的源码\n通过`nginx -V` 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码\n``` shell\ncd /opt\nwget http://nginx.org/download/nginx-1.12.1.tar.gz\n```\n#### 3.查看对应configure\n``` shell\ntar xf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\nnginx -V\nconfigure arguments:  --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n```\n#### 4.增加对应的模块\n``` shell\n./configure --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n            --add-module=../headers-more-nginx-module\n```\n#### 5.编译\n``` shell\nmake && make install\n```\n#### 6.对可执行文件进行备份替换\n``` shell\ncp /usr/sbin/nginx /usr/sbin/nginx.bak #备份\ncp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换\nsystemctl restart nginx #重启 nginx 服务\n```\n大功告成\n","source":"_posts/yum-install-nginx-add-modules.md","raw":"---\ntitle: centos yum 安装nginx 后增加模块\ndate: 2017-10-01 23:30:30\ncategories: Linux\ntag: Nginx\n---\n### yum 和 源码安装的区别\n\nyum 安装是在线安装，优点：安装方式简单，快捷；\n\n源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<!-- more -->\n\n### yum安装nginx\n系统版本：CentOS Linux release 7.4.1708 (Core)\n\n#### 1.增加对应的源\n``` shell\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n#### 2.查看nginx信息\n\n``` shell\nyum info nginx  (查看nginx 版本方便后面下载对应版本)\n```\n#### 3.yum安装nginx\n``` shell\nyum -y install nginx\n```\n\n### nginx 相关的命令\n#### 1.查看安装路径\n``` shell\nrpm -ql nginx\n```\n#### 2.查看编译参数\n``` shell\nnginx -V\n```\n#### 3.nginx 启动、停止、重启\n``` shell\nsystemctl start nginx #启动 nginx 服务\nsystemctl stop nginx #停止 nginx 服务\nsystemctl restart nginx #重启 nginx 服务\n```\n\n### 启动检查是否启动成功\n``` shell\ncurl -i localhost\n```\n\n#### 如下显示说明正常启动：\n``` html\n···\n<h1>Welcome to nginx!</h1>\n···\n```\n\n### 安装第三方模块\n其实`yum`安装`nginx` 后想要添加第三方模块，只需对`yum`安装的`nginx`相同版本的源码进行编译后替换\n#### 1.安装源码安装需要的第三方包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n#### 2.下载对应的源码\n通过`nginx -V` 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码\n``` shell\ncd /opt\nwget http://nginx.org/download/nginx-1.12.1.tar.gz\n```\n#### 3.查看对应configure\n``` shell\ntar xf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\nnginx -V\nconfigure arguments:  --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n```\n#### 4.增加对应的模块\n``` shell\n./configure --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n            --add-module=../headers-more-nginx-module\n```\n#### 5.编译\n``` shell\nmake && make install\n```\n#### 6.对可执行文件进行备份替换\n``` shell\ncp /usr/sbin/nginx /usr/sbin/nginx.bak #备份\ncp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换\nsystemctl restart nginx #重启 nginx 服务\n```\n大功告成\n","slug":"yum-install-nginx-add-modules","published":1,"updated":"2019-10-20T04:54:47.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb8sn9dw005heos641iq6w4a","content":"<h3 id=\"yum-和-源码安装的区别\"><a href=\"#yum-和-源码安装的区别\" class=\"headerlink\" title=\"yum 和 源码安装的区别\"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>\n<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<a id=\"more\"></a></p>\n<h3 id=\"yum安装nginx\"><a href=\"#yum安装nginx\" class=\"headerlink\" title=\"yum安装nginx\"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>\n<h4 id=\"1-增加对应的源\"><a href=\"#1-增加对应的源\" class=\"headerlink\" title=\"1.增加对应的源\"></a>1.增加对应的源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看nginx信息\"><a href=\"#2-查看nginx信息\" class=\"headerlink\" title=\"2.查看nginx信息\"></a>2.查看nginx信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-yum安装nginx\"><a href=\"#3-yum安装nginx\" class=\"headerlink\" title=\"3.yum安装nginx\"></a>3.yum安装nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-相关的命令\"><a href=\"#nginx-相关的命令\" class=\"headerlink\" title=\"nginx 相关的命令\"></a>nginx 相关的命令</h3><h4 id=\"1-查看安装路径\"><a href=\"#1-查看安装路径\" class=\"headerlink\" title=\"1.查看安装路径\"></a>1.查看安装路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看编译参数\"><a href=\"#2-查看编译参数\" class=\"headerlink\" title=\"2.查看编译参数\"></a>2.查看编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-nginx-启动、停止、重启\"><a href=\"#3-nginx-启动、停止、重启\" class=\"headerlink\" title=\"3.nginx 启动、停止、重启\"></a>3.nginx 启动、停止、重启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx #启动 nginx 服务</span><br><span class=\"line\">systemctl stop nginx #停止 nginx 服务</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动检查是否启动成功\"><a href=\"#启动检查是否启动成功\" class=\"headerlink\" title=\"启动检查是否启动成功\"></a>启动检查是否启动成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i localhost</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如下显示说明正常启动：\"><a href=\"#如下显示说明正常启动：\" class=\"headerlink\" title=\"如下显示说明正常启动：\"></a>如下显示说明正常启动：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>\n<h4 id=\"1-安装源码安装需要的第三方包\"><a href=\"#1-安装源码安装需要的第三方包\" class=\"headerlink\" title=\"1.安装源码安装需要的第三方包\"></a>1.安装源码安装需要的第三方包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载对应的源码\"><a href=\"#2-下载对应的源码\" class=\"headerlink\" title=\"2.下载对应的源码\"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-查看对应configure\"><a href=\"#3-查看对应configure\" class=\"headerlink\" title=\"3.查看对应configure\"></a>3.查看对应configure</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nginx-1.12.1.tar.gz</span><br><span class=\"line\">cd nginx-1.12.1</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">configure arguments:  --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-增加对应的模块\"><a href=\"#4-增加对应的模块\" class=\"headerlink\" title=\"4.增加对应的模块\"></a>4.增加对应的模块</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-编译\"><a href=\"#5-编译\" class=\"headerlink\" title=\"5.编译\"></a>5.编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-对可执行文件进行备份替换\"><a href=\"#6-对可执行文件进行备份替换\" class=\"headerlink\" title=\"6.对可执行文件进行备份替换\"></a>6.对可执行文件进行备份替换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class=\"line\">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n<p>大功告成</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"yum-和-源码安装的区别\"><a href=\"#yum-和-源码安装的区别\" class=\"headerlink\" title=\"yum 和 源码安装的区别\"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>\n<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等","more":"</p>\n<h3 id=\"yum安装nginx\"><a href=\"#yum安装nginx\" class=\"headerlink\" title=\"yum安装nginx\"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>\n<h4 id=\"1-增加对应的源\"><a href=\"#1-增加对应的源\" class=\"headerlink\" title=\"1.增加对应的源\"></a>1.增加对应的源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看nginx信息\"><a href=\"#2-查看nginx信息\" class=\"headerlink\" title=\"2.查看nginx信息\"></a>2.查看nginx信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-yum安装nginx\"><a href=\"#3-yum安装nginx\" class=\"headerlink\" title=\"3.yum安装nginx\"></a>3.yum安装nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-相关的命令\"><a href=\"#nginx-相关的命令\" class=\"headerlink\" title=\"nginx 相关的命令\"></a>nginx 相关的命令</h3><h4 id=\"1-查看安装路径\"><a href=\"#1-查看安装路径\" class=\"headerlink\" title=\"1.查看安装路径\"></a>1.查看安装路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看编译参数\"><a href=\"#2-查看编译参数\" class=\"headerlink\" title=\"2.查看编译参数\"></a>2.查看编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-nginx-启动、停止、重启\"><a href=\"#3-nginx-启动、停止、重启\" class=\"headerlink\" title=\"3.nginx 启动、停止、重启\"></a>3.nginx 启动、停止、重启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx #启动 nginx 服务</span><br><span class=\"line\">systemctl stop nginx #停止 nginx 服务</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动检查是否启动成功\"><a href=\"#启动检查是否启动成功\" class=\"headerlink\" title=\"启动检查是否启动成功\"></a>启动检查是否启动成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i localhost</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如下显示说明正常启动：\"><a href=\"#如下显示说明正常启动：\" class=\"headerlink\" title=\"如下显示说明正常启动：\"></a>如下显示说明正常启动：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>\n<h4 id=\"1-安装源码安装需要的第三方包\"><a href=\"#1-安装源码安装需要的第三方包\" class=\"headerlink\" title=\"1.安装源码安装需要的第三方包\"></a>1.安装源码安装需要的第三方包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载对应的源码\"><a href=\"#2-下载对应的源码\" class=\"headerlink\" title=\"2.下载对应的源码\"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-查看对应configure\"><a href=\"#3-查看对应configure\" class=\"headerlink\" title=\"3.查看对应configure\"></a>3.查看对应configure</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nginx-1.12.1.tar.gz</span><br><span class=\"line\">cd nginx-1.12.1</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">configure arguments:  --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-增加对应的模块\"><a href=\"#4-增加对应的模块\" class=\"headerlink\" title=\"4.增加对应的模块\"></a>4.增加对应的模块</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-编译\"><a href=\"#5-编译\" class=\"headerlink\" title=\"5.编译\"></a>5.编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-对可执行文件进行备份替换\"><a href=\"#6-对可执行文件进行备份替换\" class=\"headerlink\" title=\"6.对可执行文件进行备份替换\"></a>6.对可执行文件进行备份替换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class=\"line\">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n<p>大功告成</p>"}],"PostAsset":[{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","slug":"WX20180318-122540@2x.png","post":"ckb8sn9ca0008eos6gfn8ech2","modified":1,"renderable":0},{"_id":"source/_posts/first-flutter-app/WX20190711-203810@2x.png","slug":"WX20190711-203810@2x.png","post":"ckb8sn9cx0021eos65z47fxk4","modified":1,"renderable":0},{"_id":"source/_posts/first-flutter-app/WX20190711-204747@2x.png","slug":"WX20190711-204747@2x.png","post":"ckb8sn9cx0021eos65z47fxk4","modified":1,"renderable":0},{"_id":"source/_posts/nginx-study-1/WX20200605-151113@2x.png","post":"ckb8sn9d70033eos6dbxn5gj9","slug":"WX20200605-151113@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/some-pressure-measuring-tools/WX20190628-171039@2x.png","slug":"WX20190628-171039@2x.png","post":"ckb8sn9di0046eos6fc2s6v39","modified":1,"renderable":0},{"_id":"source/_posts/spring-seluth-zipkin/WX20200319-113846.png","post":"ckb8sn9dk004beos624hhcsll","slug":"WX20200319-113846.png","modified":1,"renderable":1},{"_id":"source/_posts/study-pandas-notes/pandas.png","post":"ckb8sn9dq004weos6cdnh1ge0","slug":"pandas.png","modified":1,"renderable":1},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","post":"ckb8sn9ca0008eos6gfn8ech2","slug":"WX20180318-120435@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/study-elastic-stack-1/elk-stack-elkb-diagram.png","post":"ckb8sn9dm004ieos6dv217rfb","slug":"elk-stack-elkb-diagram.png","modified":1,"renderable":1},{"_id":"source/_posts/study-elastic-stack-1/elk-stack-elkb-diagram.svg","post":"ckb8sn9dm004ieos6dv217rfb","slug":"elk-stack-elkb-diagram.svg","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-113942.png","post":"ckb8sn9df003teos6eyx4gfpf","slug":"WX20180418-113942.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-114759@2x.png","post":"ckb8sn9df003teos6eyx4gfpf","slug":"WX20180418-114759@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-115544@2x.png","post":"ckb8sn9df003teos6eyx4gfpf","slug":"WX20180418-115544@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163439@2x.png","post":"ckb8sn9cy0024eos69dr3962h","slug":"WX20180225-163439@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163748@2x.png","post":"ckb8sn9cy0024eos69dr3962h","slug":"WX20180225-163748@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-164721@2x.png","slug":"WX20180225-164721@2x.png","post":"ckb8sn9cy0024eos69dr3962h","modified":1,"renderable":0},{"_id":"source/_posts/gitee-with-webhook/image-2018-153940@2x.png","post":"ckb8sn9cy0024eos69dr3962h","slug":"image-2018-153940@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174110.png","post":"ckb8sn9cs001heos6el5j5b5p","slug":"WX20180227-174110.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174208.png","post":"ckb8sn9cs001heos6el5j5b5p","slug":"WX20180227-174208.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203234.png","post":"ckb8sn9cs001heos6el5j5b5p","slug":"WX20180227-203234.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203815.png","post":"ckb8sn9cs001heos6el5j5b5p","slug":"WX20180227-203815.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-204116.png","post":"ckb8sn9cs001heos6el5j5b5p","slug":"WX20180227-204116.png","modified":1,"renderable":1},{"_id":"source/_posts/first-flutter-app/WX20190711-203332@2x.png","slug":"WX20190711-203332@2x.png","post":"ckb8sn9cx0021eos65z47fxk4","modified":1,"renderable":0},{"_id":"source/_posts/first-flutter-app/WX20190711-212257@2x.png","slug":"WX20190711-212257@2x.png","post":"ckb8sn9cx0021eos65z47fxk4","modified":1,"renderable":0},{"_id":"source/_posts/first-flutter-app/WX20190711-212915@2x.png","slug":"WX20190711-212915@2x.png","post":"ckb8sn9cx0021eos65z47fxk4","modified":1,"renderable":0},{"_id":"source/_posts/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","post":"ckb8sn9cr001deos6cr1q1hzc","slug":"191500078c0b39a29f95.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","post":"ckb8sn9cr001deos6cr1q1hzc","slug":"1916000764d774a3eee4.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","post":"ckb8sn9cr001deos6cr1q1hzc","slug":"191700078c8d4238617c.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","post":"ckb8sn9cr001deos6cr1q1hzc","slug":"191800078ffdfe660fb3.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191b000762026287366b.jpeg","post":"ckb8sn9cr001deos6cr1q1hzc","slug":"191b000762026287366b.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","post":"ckb8sn9cr001deos6cr1q1hzc","slug":"v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckb8sn9c50001eos6bm324il4","category_id":"ckb8sn9c80005eos61in8dimn","_id":"ckb8sn9cg000feos6aopbc1uj"},{"post_id":"ckb8sn9c70003eos67vc1dmam","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9cj000meos6gumzdm69"},{"post_id":"ckb8sn9cf000eeos61g1d9kte","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9cj000peos65bd7d9bx"},{"post_id":"ckb8sn9ch000ieos6dmqi347z","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9ck000seos671gk6g24"},{"post_id":"ckb8sn9ca0007eos6485vde23","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9cl000weos6ekj62zzy"},{"post_id":"ckb8sn9cj000oeos6ffyp0j6w","category_id":"ckb8sn9ci000leos6hb4z5nwm","_id":"ckb8sn9cm000zeos62eih1y5s"},{"post_id":"ckb8sn9ca0008eos6gfn8ech2","category_id":"ckb8sn9ci000leos6hb4z5nwm","_id":"ckb8sn9cn0013eos6f9jmc6c2"},{"post_id":"ckb8sn9cb0009eos6hatugsu2","category_id":"ckb8sn9ck000teos6fanhgkug","_id":"ckb8sn9co0017eos6dqhx15ut"},{"post_id":"ckb8sn9cn0015eos61avlhxdj","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cr001eeos68dgj5nn1"},{"post_id":"ckb8sn9ce000deos6d9nifz33","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cs001ieos67bvr4cnu"},{"post_id":"ckb8sn9co0018eos63bdt7lyp","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9ct001leos69hds4ezl"},{"post_id":"ckb8sn9cq001beos6hmv71wgo","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cu001peos6gaq1cp4c"},{"post_id":"ckb8sn9ci000keos68z9ldjvg","category_id":"ckb8sn9cq0019eos620d1di8w","_id":"ckb8sn9cv001seos6gyoic9c4"},{"post_id":"ckb8sn9ck000reos61gkf7cej","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cw001veos6athseoyy"},{"post_id":"ckb8sn9ct001keos64qilcb7w","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cx001zeos664wwbbop"},{"post_id":"ckb8sn9cu001oeos6ccbt4ua8","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cx0022eos6f3ythh3n"},{"post_id":"ckb8sn9cl000veos66xs27b4h","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cy0025eos6391tfeu7"},{"post_id":"ckb8sn9cu001reos64ck288gd","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9cz0029eos69v109i7e"},{"post_id":"ckb8sn9cv001ueos6f2dnezus","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9d0002ceos6f94b9lae"},{"post_id":"ckb8sn9cl000yeos65rtuerjn","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9d1002geos6d70mhiuz"},{"post_id":"ckb8sn9cw001yeos65q0ablq9","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9d2002jeos63vh1alhi"},{"post_id":"ckb8sn9cm0011eos6c6zv0kdr","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9d3002neos60pgvaz0a"},{"post_id":"ckb8sn9cy0024eos69dr3962h","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9d4002peos6gzvrckjr"},{"post_id":"ckb8sn9cz0028eos6dbi24cib","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9d5002ueos68cma67j6"},{"post_id":"ckb8sn9cr001deos6cr1q1hzc","category_id":"ckb8sn9cy0027eos6fzwo4q63","_id":"ckb8sn9d6002xeos6di7khich"},{"post_id":"ckb8sn9d0002feos6fceyh65q","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9d70030eos6f1m41dd2"},{"post_id":"ckb8sn9cs001heos6el5j5b5p","category_id":"ckb8sn9cy0027eos6fzwo4q63","_id":"ckb8sn9d70034eos65lyv8zyh"},{"post_id":"ckb8sn9d1002ieos63upwb8x6","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9d80038eos681btfo9g"},{"post_id":"ckb8sn9cx0021eos65z47fxk4","category_id":"ckb8sn9d2002keos69itl5l3j","_id":"ckb8sn9d9003beos6c9s22s1l"},{"post_id":"ckb8sn9d3002oeos63mcb0zbo","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9da003feos65qdtdgsg"},{"post_id":"ckb8sn9d5002teos6453f6l1p","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9db003ieos6e6slh8md"},{"post_id":"ckb8sn9d0002beos6bvijb5of","category_id":"ckb8sn9d4002seos69iybanac","_id":"ckb8sn9dd003neos67xo554dt"},{"post_id":"ckb8sn9d6002zeos60uckdbt7","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9de003qeos657nheeqh"},{"post_id":"ckb8sn9d70033eos6dbxn5gj9","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dg003veos6ganbd17d"},{"post_id":"ckb8sn9d3002meos6eqwq7s2p","category_id":"ckb8sn9d70031eos6036ydic1","_id":"ckb8sn9dg003yeos6ciy1885q"},{"post_id":"ckb8sn9d80037eos6f4fdb8is","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dh0042eos60q96dxhd"},{"post_id":"ckb8sn9d9003aeos617zk87bs","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9di0045eos6cgzcf9ah"},{"post_id":"ckb8sn9da003heos612cs461r","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9di0047eos67n0rche3"},{"post_id":"ckb8sn9d9003eeos63mtj3qed","category_id":"ckb8sn9db003keos6b70z851q","_id":"ckb8sn9dl004ceos6h93i3xvx"},{"post_id":"ckb8sn9df003teos6eyx4gfpf","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dm004feos6grvm6q19"},{"post_id":"ckb8sn9db003meos633u2dkkv","category_id":"ckb8sn9df003ueos69hxh23ps","_id":"ckb8sn9dn004jeos6520j8mo6"},{"post_id":"ckb8sn9dh0041eos6frcggqfu","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dn004neos68d5mdb6n"},{"post_id":"ckb8sn9dh0044eos6140g2q3y","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9do004reos6ahcah19g"},{"post_id":"ckb8sn9dd003peos681r3b1e4","category_id":"ckb8sn9df003ueos69hxh23ps","_id":"ckb8sn9dp004teos64zs4hjh1"},{"post_id":"ckb8sn9di0046eos6fc2s6v39","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dq004xeos6cshla4yg"},{"post_id":"ckb8sn9dk004beos624hhcsll","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dq004zeos6bnew7oex"},{"post_id":"ckb8sn9dg003xeos6g1i40ohh","category_id":"ckb8sn9dj0049eos62d97247h","_id":"ckb8sn9dr0053eos618r38u5g"},{"post_id":"ckb8sn9dm004ieos6dv217rfb","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dt0055eos61wk4gmi4"},{"post_id":"ckb8sn9dn004meos63g1p8uvf","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9du0058eos69e5phwyd"},{"post_id":"ckb8sn9do004qeos6gn86b1l2","category_id":"ckb8sn9df003ueos69hxh23ps","_id":"ckb8sn9dv005beos6famld4aa"},{"post_id":"ckb8sn9dl004eeos63xqb84ej","category_id":"ckb8sn9dn004keos60i5x7b3z","_id":"ckb8sn9dv005feos63wz68dqw"},{"post_id":"ckb8sn9do004seos63col6rq9","category_id":"ckb8sn9df003ueos69hxh23ps","_id":"ckb8sn9dw005ieos62d707enr"},{"post_id":"ckb8sn9dq004weos6cdnh1ge0","category_id":"ckb8sn9df003ueos69hxh23ps","_id":"ckb8sn9dx005leos68v553ivk"},{"post_id":"ckb8sn9dq004yeos64nse2tcj","category_id":"ckb8sn9ci000leos6hb4z5nwm","_id":"ckb8sn9dx005neos66xw7h8ak"},{"post_id":"ckb8sn9dr0052eos64tht97nj","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9dx005peos6ay06gfqm"},{"post_id":"ckb8sn9dr0054eos69qf9ct22","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dy005seos61efphr5t"},{"post_id":"ckb8sn9dt0057eos688mxdxuj","category_id":"ckb8sn9cc000aeos6df1z92ts","_id":"ckb8sn9dy005teos65eih2kki"},{"post_id":"ckb8sn9du005aeos65mrt4ttl","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dy005veos6f4tq8h6b"},{"post_id":"ckb8sn9dw005heos641iq6w4a","category_id":"ckb8sn9cm0010eos68rh367k3","_id":"ckb8sn9dy005xeos6bk7539ma"},{"post_id":"ckb8sn9dv005eeos6654zcz3a","category_id":"ckb8sn9dw005jeos6hnovhtnt","_id":"ckb8sn9dz005zeos62jzzfx1q"}],"PostTag":[{"post_id":"ckb8sn9c50001eos6bm324il4","tag_id":"ckb8sn9c90006eos60hxy8huy","_id":"ckb8sn9cd000ceos6edc05g55"},{"post_id":"ckb8sn9c70003eos67vc1dmam","tag_id":"ckb8sn9cc000beos6fdx7gnp7","_id":"ckb8sn9ci000jeos609a35lvv"},{"post_id":"ckb8sn9ca0007eos6485vde23","tag_id":"ckb8sn9cg000heos6dwhe0xx5","_id":"ckb8sn9cj000qeos64be0eybh"},{"post_id":"ckb8sn9ca0008eos6gfn8ech2","tag_id":"ckb8sn9cj000neos62f2qci2b","_id":"ckb8sn9cl000xeos64kde6azi"},{"post_id":"ckb8sn9cl000yeos65rtuerjn","tag_id":"ckb8sn9cc000beos6fdx7gnp7","_id":"ckb8sn9cn0014eos6gq7sfhkf"},{"post_id":"ckb8sn9cb0009eos6hatugsu2","tag_id":"ckb8sn9ck000ueos60ua337v0","_id":"ckb8sn9co0016eos63toi5ay3"},{"post_id":"ckb8sn9ce000deos6d9nifz33","tag_id":"ckb8sn9cn0012eos6eod49wk3","_id":"ckb8sn9cr001ceos69dz7bnfg"},{"post_id":"ckb8sn9cf000eeos61g1d9kte","tag_id":"ckb8sn9cq001aeos6efv8gc03","_id":"ckb8sn9cs001jeos67x1s758f"},{"post_id":"ckb8sn9ch000ieos6dmqi347z","tag_id":"ckb8sn9cs001geos6f1zmewol","_id":"ckb8sn9cu001qeos6gpsq9yqo"},{"post_id":"ckb8sn9ci000keos68z9ldjvg","tag_id":"ckb8sn9ct001neos62yev9k0l","_id":"ckb8sn9cw001xeos6crhe4tyn"},{"post_id":"ckb8sn9cj000oeos6ffyp0j6w","tag_id":"ckb8sn9cw001weos67m2b2oih","_id":"ckb8sn9cy0026eos6aewg888e"},{"post_id":"ckb8sn9ck000reos61gkf7cej","tag_id":"ckb8sn9cy0023eos61hfdh454","_id":"ckb8sn9d0002deos6data1ea6"},{"post_id":"ckb8sn9cl000veos66xs27b4h","tag_id":"ckb8sn9cz002aeos6exx4g37x","_id":"ckb8sn9d2002leos6c5zifa0p"},{"post_id":"ckb8sn9d3002meos6eqwq7s2p","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9d4002reos6dat0d009"},{"post_id":"ckb8sn9cm0011eos6c6zv0kdr","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9d5002veos627saeaq9"},{"post_id":"ckb8sn9cn0015eos61avlhxdj","tag_id":"ckb8sn9d4002qeos623qzdskg","_id":"ckb8sn9d70032eos6fpcecpvq"},{"post_id":"ckb8sn9d6002zeos60uckdbt7","tag_id":"ckb8sn9cn0012eos6eod49wk3","_id":"ckb8sn9d80036eos62s1bbkwr"},{"post_id":"ckb8sn9co0018eos63bdt7lyp","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9d80039eos60578e4fr"},{"post_id":"ckb8sn9d70033eos6dbxn5gj9","tag_id":"ckb8sn9cn0012eos6eod49wk3","_id":"ckb8sn9d9003deos6gtmiaxgk"},{"post_id":"ckb8sn9d80037eos6f4fdb8is","tag_id":"ckb8sn9cn0012eos6eod49wk3","_id":"ckb8sn9da003geos6bn5hhmek"},{"post_id":"ckb8sn9cq001beos6hmv71wgo","tag_id":"ckb8sn9d80035eos66ojyegbg","_id":"ckb8sn9db003leos6f2lyavis"},{"post_id":"ckb8sn9d9003aeos617zk87bs","tag_id":"ckb8sn9d80035eos66ojyegbg","_id":"ckb8sn9dd003oeos6a9xm0kz9"},{"post_id":"ckb8sn9cr001deos6cr1q1hzc","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9df003seos6b48u3k25"},{"post_id":"ckb8sn9db003meos633u2dkkv","tag_id":"ckb8sn9d4002qeos623qzdskg","_id":"ckb8sn9dg003weos6afcv7sy1"},{"post_id":"ckb8sn9dd003peos681r3b1e4","tag_id":"ckb8sn9d4002qeos623qzdskg","_id":"ckb8sn9dg003zeos695st30rr"},{"post_id":"ckb8sn9cs001heos6el5j5b5p","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9dk004aeos6aoe9bux4"},{"post_id":"ckb8sn9cs001heos6el5j5b5p","tag_id":"ckb8sn9de003reos63kh4a1zj","_id":"ckb8sn9dl004deos6fyt4cfie"},{"post_id":"ckb8sn9cs001heos6el5j5b5p","tag_id":"ckb8sn9dg0040eos65q0e9bjm","_id":"ckb8sn9dm004heos64k655o22"},{"post_id":"ckb8sn9ct001keos64qilcb7w","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9dn004leos6h82s7wus"},{"post_id":"ckb8sn9cu001oeos6ccbt4ua8","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9do004peos6fpkgcqux"},{"post_id":"ckb8sn9cu001reos64ck288gd","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9dq004veos6e2yz92pm"},{"post_id":"ckb8sn9cv001ueos6f2dnezus","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9dr0051eos6hv1m183d"},{"post_id":"ckb8sn9cw001yeos65q0ablq9","tag_id":"ckb8sn9dr0050eos6bsoj2gt6","_id":"ckb8sn9du0059eos63klm8h2m"},{"post_id":"ckb8sn9dt0057eos688mxdxuj","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9dv005deos6dm40giqt"},{"post_id":"ckb8sn9cx0021eos65z47fxk4","tag_id":"ckb8sn9dt0056eos6d94s4v1y","_id":"ckb8sn9dw005geos6871r4xez"},{"post_id":"ckb8sn9cy0024eos69dr3962h","tag_id":"ckb8sn9dv005ceos6h6myfdx0","_id":"ckb8sn9dx005meos6cvwq0w71"},{"post_id":"ckb8sn9dw005heos641iq6w4a","tag_id":"ckb8sn9cn0012eos6eod49wk3","_id":"ckb8sn9dx005oeos64eyj3vjg"},{"post_id":"ckb8sn9cz0028eos6dbi24cib","tag_id":"ckb8sn9dx005keos69ppzc9v7","_id":"ckb8sn9dy005reos6ga0k2j3g"},{"post_id":"ckb8sn9d0002beos6bvijb5of","tag_id":"ckb8sn9dy005qeos6hh0d95z8","_id":"ckb8sn9dy005weos6e5jper7u"},{"post_id":"ckb8sn9d0002feos6fceyh65q","tag_id":"ckb8sn9dy005ueos6g4qb3zkv","_id":"ckb8sn9dz0060eos6c4ly2suz"},{"post_id":"ckb8sn9d1002ieos63upwb8x6","tag_id":"ckb8sn9d1002heos61xbg3d12","_id":"ckb8sn9dz0062eos67gald0ef"},{"post_id":"ckb8sn9d3002oeos63mcb0zbo","tag_id":"ckb8sn9dv005ceos6h6myfdx0","_id":"ckb8sn9dz0064eos6aazj61be"},{"post_id":"ckb8sn9d5002teos6453f6l1p","tag_id":"ckb8sn9dz0063eos64gyw6ryx","_id":"ckb8sn9dz0066eos674fkgmgr"},{"post_id":"ckb8sn9d9003eeos63mtj3qed","tag_id":"ckb8sn9dz0065eos6g4mz4ips","_id":"ckb8sn9e00068eos69r5775g6"},{"post_id":"ckb8sn9da003heos612cs461r","tag_id":"ckb8sn9e00067eos6eh4pf45o","_id":"ckb8sn9e0006aeos60cj4e0y9"},{"post_id":"ckb8sn9df003teos6eyx4gfpf","tag_id":"ckb8sn9e00069eos6966n76fx","_id":"ckb8sn9e0006ceos61v2s82wk"},{"post_id":"ckb8sn9dg003xeos6g1i40ohh","tag_id":"ckb8sn9e0006beos6362gdyx2","_id":"ckb8sn9e0006eeos6fft1b1k5"},{"post_id":"ckb8sn9dh0041eos6frcggqfu","tag_id":"ckb8sn9e00069eos6966n76fx","_id":"ckb8sn9e1006geos69xr8asp0"},{"post_id":"ckb8sn9dh0044eos6140g2q3y","tag_id":"ckb8sn9e1006feos67xbahx4x","_id":"ckb8sn9e1006ieos6cdrp2qkw"},{"post_id":"ckb8sn9di0046eos6fc2s6v39","tag_id":"ckb8sn9e1006heos697n343gy","_id":"ckb8sn9e1006keos63ypw8zro"},{"post_id":"ckb8sn9dk004beos624hhcsll","tag_id":"ckb8sn9e1006jeos6ahm09xnn","_id":"ckb8sn9e1006meos60femdfcz"},{"post_id":"ckb8sn9dl004eeos63xqb84ej","tag_id":"ckb8sn9e1006leos6ah9z189o","_id":"ckb8sn9e2006oeos6hwx244um"},{"post_id":"ckb8sn9dm004ieos6dv217rfb","tag_id":"ckb8sn9e1006neos6ci81hk7u","_id":"ckb8sn9e2006qeos6afqk3e6q"},{"post_id":"ckb8sn9dn004meos63g1p8uvf","tag_id":"ckb8sn9e1006neos6ci81hk7u","_id":"ckb8sn9e2006seos63r07e5lj"},{"post_id":"ckb8sn9do004qeos6gn86b1l2","tag_id":"ckb8sn9e2006reos636fy5fhg","_id":"ckb8sn9e2006ueos67c0p3x6n"},{"post_id":"ckb8sn9do004seos63col6rq9","tag_id":"ckb8sn9e2006reos636fy5fhg","_id":"ckb8sn9e3006weos67twifozf"},{"post_id":"ckb8sn9dq004weos6cdnh1ge0","tag_id":"ckb8sn9e2006reos636fy5fhg","_id":"ckb8sn9e3006yeos69c7ifq9t"},{"post_id":"ckb8sn9dq004yeos64nse2tcj","tag_id":"ckb8sn9e00069eos6966n76fx","_id":"ckb8sn9e30070eos6ez7xew22"},{"post_id":"ckb8sn9dr0052eos64tht97nj","tag_id":"ckb8sn9e3006zeos65wo4gcgt","_id":"ckb8sn9e40072eos6e5sgf2a8"},{"post_id":"ckb8sn9dr0054eos69qf9ct22","tag_id":"ckb8sn9e00069eos6966n76fx","_id":"ckb8sn9e40074eos6huuwbw6r"},{"post_id":"ckb8sn9du005aeos65mrt4ttl","tag_id":"ckb8sn9e40073eos6dj19hfh0","_id":"ckb8sn9e40076eos6eqopaa3p"},{"post_id":"ckb8sn9dv005eeos6654zcz3a","tag_id":"ckb8sn9e40075eos6cyi1bbbl","_id":"ckb8sn9e40077eos6516tge7w"}],"Tag":[{"name":"数字货币","_id":"ckb8sn9c90006eos60hxy8huy"},{"name":"Redis","_id":"ckb8sn9cc000beos6fdx7gnp7"},{"name":"String","_id":"ckb8sn9cg000heos6dwhe0xx5"},{"name":"Domain","_id":"ckb8sn9cj000neos62f2qci2b"},{"name":"Machine Learning","_id":"ckb8sn9ck000ueos60ua337v0"},{"name":"Nginx","_id":"ckb8sn9cn0012eos6eod49wk3"},{"name":"Spring","_id":"ckb8sn9cq001aeos6efv8gc03"},{"name":"Apollo、Feign","_id":"ckb8sn9cs001geos6f1zmewol"},{"name":"Ark","_id":"ckb8sn9ct001neos62yev9k0l"},{"name":"Brew","_id":"ckb8sn9cw001weos67m2b2oih"},{"name":"app 分发","_id":"ckb8sn9cy0023eos61hfdh454"},{"name":"Git","_id":"ckb8sn9cz002aeos6exx4g37x"},{"name":"Docker","_id":"ckb8sn9d1002heos61xbg3d12"},{"name":"Python","_id":"ckb8sn9d4002qeos623qzdskg"},{"name":"Node","_id":"ckb8sn9d80035eos66ojyegbg"},{"name":"SpringBoot","_id":"ckb8sn9de003reos63kh4a1zj"},{"name":"Maven","_id":"ckb8sn9dg0040eos65q0e9bjm"},{"name":"Feign","_id":"ckb8sn9dr0050eos6bsoj2gt6"},{"name":"flutter","_id":"ckb8sn9dt0056eos6d94s4v1y"},{"name":"Linux","_id":"ckb8sn9dv005ceos6h6myfdx0"},{"name":"hexo","_id":"ckb8sn9dx005keos69ppzc9v7"},{"name":"工作经历","_id":"ckb8sn9dy005qeos6hh0d95z8"},{"name":"concurrency","_id":"ckb8sn9dy005ueos6g4qb3zkv"},{"name":"加密","_id":"ckb8sn9dz0063eos64gyw6ryx"},{"name":"rabbitmq","_id":"ckb8sn9dz0065eos6g4mz4ips"},{"name":"okhttp","_id":"ckb8sn9e00067eos6eh4pf45o"},{"name":"Shell","_id":"ckb8sn9e00069eos6966n76fx"},{"name":"Regular","_id":"ckb8sn9e0006beos6362gdyx2"},{"name":"Socks5","_id":"ckb8sn9e1006feos67xbahx4x"},{"name":"性能测试工具","_id":"ckb8sn9e1006heos697n343gy"},{"name":"调用链监控","_id":"ckb8sn9e1006jeos6ahm09xnn"},{"name":"Dart","_id":"ckb8sn9e1006leos6ah9z189o"},{"name":"Docker、Elastic","_id":"ckb8sn9e1006neos6ci81hk7u"},{"name":"pandas","_id":"ckb8sn9e2006reos636fy5fhg"},{"name":"Swagger2","_id":"ckb8sn9e3006zeos65wo4gcgt"},{"name":"frp","_id":"ckb8sn9e40073eos6dj19hfh0"},{"name":"Libra","_id":"ckb8sn9e40075eos6cyi1bbbl"}]}}