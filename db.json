{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1526881570464},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1520511386221},{"_id":"themes/next/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1526881570465},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1520511386223},{"_id":"source/googleb85119e82958b681.html","hash":"a2834452b4f535256e4ffdb8302bb872ca97a399","modified":1519625303938},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1520511386225},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1526881570465},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1520511386221},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1526881570466},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1526881570466},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1526881570466},{"_id":"themes/next/_config.yml","hash":"ec21594839dc8b9e826052420eefd05d1cb39174","modified":1526882512929},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1520511386221},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1520511386225},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1526881570481},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1520511386233},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name.md","hash":"b28cc6734533bbd8f50d67a025b7a102e0d35746","modified":1521358422949},{"_id":"source/_posts/.DS_Store","hash":"ea513138a131c72456ee1dcc559f57d3f012f66b","modified":1519545760177},{"_id":"source/_posts/Could-not-get-a-resource-from-the-pool.md","hash":"883ae69b1caeb61118687f8c8fbbb27c12ca54d9","modified":1518144222074},{"_id":"source/_posts/BTC-Tutorial.md","hash":"3de1227ff7da10f6df47d47b72004beeee7aed69","modified":1524215217684},{"_id":"source/_posts/brew-upgrade-error.md","hash":"4fab8679d9c09f376bf469eb14c9e523afd28b4e","modified":1525317068752},{"_id":"source/_posts/Linux.md","hash":"2acb3897d985e8ba003f59b9716509ba14a51b6c","modified":1524195393321},{"_id":"source/_posts/Machine-Learning-in-Java-1.md","hash":"8cf911ad6a141f536c79fac4a561ac3c9ad2a9ad","modified":1518144212667},{"_id":"source/_posts/centos-install-git.md","hash":"6be2271067e4c6d7c24fbc89d8a42be17e8519eb","modified":1518144224081},{"_id":"source/_posts/common-commonds.md","hash":"f1451ecf7f79e7e88affb3a56f7e594afd35ded2","modified":1518144223065},{"_id":"source/_posts/config-npm-registry.md","hash":"5a9b65cf61bfa14a96073ba915c158058a0ffc0b","modified":1525318299279},{"_id":"source/_posts/cnetos-install-pyenv.md","hash":"ec903f18659fd81e0958b78a35d1282bffe11aee","modified":1519714407074},{"_id":"source/_posts/devops-1-environmental-configuration.md","hash":"0ecb4bd5915ac161c8495036608466dba98dd08b","modified":1519714731931},{"_id":"source/_posts/devops-2-springboot-docker-integrated.md","hash":"2873e6abe8514b7faefaf0b5f6752154e71d1d22","modified":1519736029785},{"_id":"source/_posts/docker-install-MongoDB.md","hash":"4b2fcbf3cb2105354bd2369ad4e099d8d50d6f6b","modified":1518144220699},{"_id":"source/_posts/docker-install-nexus.md","hash":"7e9ac2715f9209b58666c77ee95ec6f3f957008f","modified":1518144219594},{"_id":"source/_posts/docker-install-rabbitmq-cluster.md","hash":"6018fea9c56f1085b2aaf57f23b6dd3e04c30595","modified":1518144218434},{"_id":"source/_posts/docker-create-mysql.md","hash":"5690de534df1b4e18ddf91999345992226533616","modified":1518153999833},{"_id":"source/_posts/hexo-can't-find-module.md","hash":"d8a9cb4cfc68a1e2884183eeb6fb6921d165665d","modified":1518144216793},{"_id":"source/_posts/kubeadm-install-kubernetes.md","hash":"961f9d71147a847da41a13b098e14885f3fd5905","modified":1518144215250},{"_id":"source/_posts/life.md","hash":"5f0da4af9d8025c6dcbfc9fb4111367fb9713c20","modified":1518144214484},{"_id":"source/_posts/gitee-with-webhook.md","hash":"13d5f8987d84ea39e0ac60ebda43aafb6f5d15e7","modified":1519549486659},{"_id":"source/_posts/netty-study.md","hash":"3d11c3109ac37130814f00942727a477f8f5ac64","modified":1524022568821},{"_id":"source/_posts/nginx-load-balance-strategy.md","hash":"bcaef3ceb1cac33201c6ce091ca6f8e692efba2e","modified":1518144211854},{"_id":"source/_posts/pthon-tutorial.md","hash":"3f08f180d36aca5a9cc46a67ddf09c74082053d5","modified":1520488989441},{"_id":"source/_posts/node-install.md","hash":"f21cca3c2f8b1937b1760551bf8d8cb9353c27ed","modified":1519542009576},{"_id":"source/_posts/python-requirements.md","hash":"7a89ca59c66ab241f0aadee7dc2382035d484122","modified":1520394728362},{"_id":"source/_posts/raise-github-clone-speed.md","hash":"c35389d7aacd6ceeba3835697b09a195609042ab","modified":1524024162280},{"_id":"source/_posts/server-over-the-wall.md","hash":"6c3b01f1fef68057cfd207f2e97fbb0b0c57b71b","modified":1518144209961},{"_id":"source/_posts/regular-expression-basic.md","hash":"8aed187da9260b18fbfa0df3c0400f324bc885e5","modified":1518144210912},{"_id":"source/_posts/use-frp.md","hash":"eefda3a9533039558844102d2415bf9825388d32","modified":1525689152803},{"_id":"source/_posts/socks5-server.md","hash":"73c6ef5e32dfda218276387b21509555e151184b","modified":1518153993601},{"_id":"source/_posts/study-shell.md","hash":"0cb6a6abb361a1d03165c399ec8d9b3556ec12f6","modified":1524483326746},{"_id":"source/_posts/ubuntu-install-lamp.md","hash":"04578ab0bea96f4af8176653f480612fe751f9cd","modified":1518144208761},{"_id":"source/_posts/yum-install-nginx-add-modules.md","hash":"406fb8e6a786f7c975aca2efbc5c0ab7988113cc","modified":1518144200252},{"_id":"source/categories/index.md","hash":"634b044ed66071664ef9485f1fd78f868503fc30","modified":1518143691173},{"_id":"source/tags/index.md","hash":"3517dc6dfe54d62bf2f22e037b652c9ebcee9b97","modified":1518143689231},{"_id":"source/about/index.md","hash":"927f7be84f3942669ca0750b93de4b97f4a1378d","modified":1519887605229},{"_id":"themes/next/.git/FETCH_HEAD","hash":"0a7ee5ff3d4637d1b6fe66cd2e0d617390fd4d70","modified":1526881570445},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518271950973},{"_id":"themes/next/.git/ORIG_HEAD","hash":"735d9f1ec5f15b3a67278cbe0a42b8114b7c4bbb","modified":1526881570458},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1518271950975},{"_id":"themes/next/.git/index","hash":"9e4a40718027a4f1c85c86167635b6bb6d930e0e","modified":1526881570485},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518271948677},{"_id":"themes/next/.git/packed-refs","hash":"75abf188b66ef0605f3769d1d2d1649e17d9e31e","modified":1518271950972},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1526881570464},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1526881570465},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1526881570465},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1520511386223},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1520511386223},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1520511405974},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1526881570467},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1520511386228},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1520511386228},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1526881570467},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1520511386228},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1526881570467},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1520511386229},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1520511386229},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1520511386229},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1526881570469},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1526881570470},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1526881570470},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1526881570470},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1526881570470},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1526881570470},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1526881570471},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1526881570471},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1526881570471},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1526881570471},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1526881570471},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1526881570472},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1526881570472},{"_id":"themes/next/languages/zh-CN.yml","hash":"e80d09eed78c93d9a83f078c616875872faca94c","modified":1526882204183},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1526881570472},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1526881570473},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1526881570473},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1526881570473},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1526881570480},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1526881570480},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1526881570480},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1526881570480},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1526881570481},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1526881570481},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1526881570481},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1526881570481},{"_id":"themes/next/scripts/image-stream.js","hash":"a0f1cc437f62c97c1bbb4ba76a6ce75ab2c7b7a3","modified":1520242511398},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1526881570481},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1520511386267},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1520511386324},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1520511386324},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1520511386324},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386302},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","hash":"76a26a5afb52b2c543239b8eaf1f94cc848690e0","modified":1523589176784},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521357504089},{"_id":"source/_posts/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","hash":"bf8253b3b123ad8d1a31477279c81d5d3656ae44","modified":1519632280050},{"_id":"source/_posts/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","hash":"7e153fb751346f4885dde3221d5d90b4a86e7f32","modified":1519632288848},{"_id":"source/_posts/devops-1-environmental-configuration/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1519632571250},{"_id":"source/_posts/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","hash":"350a21551ae37433ca465e3bfa65292f98e6ef0f","modified":1519632297002},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174110.png","hash":"7eedb7da5e2fdd8b3015c3112abbe86fa9331fa2","modified":1519724472231},{"_id":"source/_posts/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","hash":"2cf2d5dc049895e1d637585c5fddade524cb5242","modified":1519632269090},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174208.png","hash":"1b942b703548a1dec40863a7b49d8ea2cc9fb83f","modified":1523589222287},{"_id":"source/_posts/devops-1-environmental-configuration/191b000762026287366b.jpeg","hash":"b5a2e2b35c0668f64642ba3c87a0774ccc94b000","modified":1519632555448},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203234.png","hash":"c93c1a9404d7e4ad17675f4c4aa57b9b2f3892f1","modified":1519734756150},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203815.png","hash":"b08a4c9f5b810d91dbec8edb04beaed6741c551e","modified":1519735097011},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-204116.png","hash":"5355b4ab2dc62f73f63276874a1f4081e149568d","modified":1519735280189},{"_id":"source/_posts/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","hash":"6a85f547b4dc2ee3773b60da5eac28ae66dbfb92","modified":1519629692408},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163748@2x.png","hash":"f62a3bc80769f86084993ecba84ee959a7635288","modified":1519547872650},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163439@2x.png","hash":"0b4e62dda96e20e22f40558bdd4aab5c3aaf22e0","modified":1523589125355},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-113942.png","hash":"392554f3c7c29badcae1a5afc4e98d5b0303ead2","modified":1524022835752},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518271948677},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518271948678},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518271948677},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518271948679},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518271948679},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518271948678},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518271948679},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1518271948678},{"_id":"themes/next/.git/logs/HEAD","hash":"f606c581f4ff31f0ec4977fde4a0d400c3cb2b67","modified":1526881570487},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518271948679},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518271948679},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518271948679},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1520511386230},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1526881570468},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1520511386230},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1520511386230},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1526881570468},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1526881570468},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1526881570468},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1526881570469},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1526881570469},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1520511386231},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1526881570469},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1520511386231},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1520511386232},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1520511386247},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1520511386247},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1520511386247},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1520511386248},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1526881570474},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1520511386248},{"_id":"themes/next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1526881570474},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1526881570474},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1526881570475},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1526881570475},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1520511405977},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1520511386250},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1526881570475},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1520511405977},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1526881570476},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1526881570477},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1526881570477},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1520511386254},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1520511386255},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1520511386259},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1526881570478},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1526881570479},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1520511386261},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1520511386262},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1520511386262},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1520511386263},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1520511386263},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1526881570479},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1520511405979},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1520511405979},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1520511405979},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1520511405980},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1520511405980},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1520511405980},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1520511405980},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1520511405981},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1520511405981},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1520511386271},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1520511386302},{"_id":"themes/next/source/images/avatar.jpg","hash":"33d81e502d7e39220ede500f480c1025b852e6cb","modified":1499010812000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1520511386303},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520511386304},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1520511386304},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520511386303},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1520511386305},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1520511386306},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1520511386306},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1520511386305},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520511386307},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520511386307},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1520511386306},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1520511386306},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520511386307},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1520511386307},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520511386308},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520511386308},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1520511386308},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1520511386308},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-114759@2x.png","hash":"d6f9d7c37608b15e42c339429f0184169d494586","modified":1524023302434},{"_id":"source/_posts/gitee-with-webhook/image-2018-153940@2x.png","hash":"f659353b32bf59165db6f55fd74d4b37a65dcf25","modified":1523589099513},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-115544@2x.png","hash":"01b343692972469db6ec65954cc8e477d731c623","modified":1524023764256},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386255},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386255},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386294},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386294},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386295},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386301},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520511386302},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","hash":"b36ff8cc4b64172122bf00c0abbd715361d0176c","modified":1523589193609},{"_id":"themes/next/.git/objects/pack/pack-d91a09d4167ad9a9c9ff2484b2aa565759352141.idx","hash":"a46d59b922461811f7a5d05696e08bf97d91da39","modified":1526881458481},{"_id":"themes/next/.git/objects/pack/pack-e02a210e7d18998d803d276d8c61144698673a46.idx","hash":"3a95a57637379d997c2baa55f0e0a10def850172","modified":1520511054863},{"_id":"themes/next/.git/refs/heads/master","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1526881570486},{"_id":"themes/next/.git/refs/tags/v6.0.4","hash":"970d0b8d2ae0a09ecb78c5b3b195ed4f19e68d9c","modified":1520511054883},{"_id":"themes/next/.git/refs/tags/v6.0.5","hash":"5cabae7037c56a42dc3ee8fc38d90faf7f3d9642","modified":1520511054892},{"_id":"themes/next/.git/refs/tags/v6.0.6","hash":"b8d542012c19aa43e5fa988f88309f5986136b93","modified":1526881458516},{"_id":"themes/next/.git/refs/tags/v6.1.0","hash":"81c10f37e3a9a23c145030d84bf03adc71f603f1","modified":1526881458516},{"_id":"themes/next/.git/refs/tags/v6.2.0","hash":"57d5b7117be39f63695e4953bac380a207633779","modified":1526881458517},{"_id":"themes/next/.git/refs/tags/v6.3.0","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1526881458503},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1526881570473},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1526881570474},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1520511386250},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1526881570475},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1526881570476},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1526881570476},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1526881570476},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1526881570476},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1526881570476},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1526881570477},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1520511386252},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1520511386252},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1520511386252},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1520511386253},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1520511386253},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1520511386253},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1520511386253},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1526881570477},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1526881570477},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1526881570478},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1520511386256},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1520511386256},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1520511386256},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1520511386256},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1520511386257},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1520511386257},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1520511386257},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1520511386257},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1520511386258},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1526881570478},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1520511386258},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1520511386258},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1520511386259},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1520511386259},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1526881570478},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1520511386260},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1520511386260},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1520511386260},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1520511386260},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1520511405978},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1520511386261},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1520511386261},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1520511386262},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1526881570479},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1520511386264},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1520511386264},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1520511386264},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1520511386265},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1520511386293},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1520511405983},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1520511386294},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1520511386294},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1520511386301},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1520511386301},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1520511386301},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1520511386302},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1520511386309},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1520511386309},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1526881570485},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1520511386310},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1520511386310},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1520511386310},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1520511386310},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1520511386311},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1520511386311},{"_id":"themes/next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1526881570485},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1520511386312},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1520511386312},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1520511386313},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1520511386312},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1520511386312},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1518273583635},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1518273583635},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1518273583638},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1518273583638},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1518273583638},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1518273583638},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1520511386323},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1520511386324},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1520511386323},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1518272702469},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1518272702468},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"bf7819cbb879bb82ec1097513d8f799df8835e0f","modified":1518272702469},{"_id":"themes/next/.git/objects/pack/pack-e02a210e7d18998d803d276d8c61144698673a46.pack","hash":"47f3ceea9d30cdb0a9cecfb41779a7953b91149c","modified":1520511054863},{"_id":"themes/next/.git/objects/pack/pack-ebba45649b657c0871867d3af57fd07e7249d210.idx","hash":"6f10e6eaca0a6d163d2c4f5439dfab94a683e6ef","modified":1518271950964},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520511386319},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f606c581f4ff31f0ec4977fde4a0d400c3cb2b67","modified":1526881570487},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518271950973},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"66c3c5ab92177bc9836db643abc6303b68928d7c","modified":1526881458498},{"_id":"themes/next/.git/refs/remotes/origin/i18n","hash":"83c3d59c3e3eb453009e1372aeb15764be8652c9","modified":1526881458501},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1526881458496},{"_id":"themes/next/.git/refs/remotes/origin/sub-menu-feature","hash":"510bceb8f79779f784f1c0d16e08748c208e8270","modified":1520511054882},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1526881570479},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1520511386264},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1520511386272},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1520511386272},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1520511386272},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1520511386273},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1520511386278},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1520511386285},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1520511386291},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1520511405982},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1520511386292},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1520511386293},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1520511386293},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1520511405983},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1526881570483},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1520511386292},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1520511386271},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1520511405983},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1520511386296},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1520511386296},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1526881570484},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1526881570484},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1520511386297},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1520511386297},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1520511386298},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1520511386298},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1520511386298},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1520511386298},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1520511386299},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1520511386299},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1520511386299},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1526881570484},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1526881570484},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1520511386300},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1520511386300},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1520511386300},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1520511386311},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1520511386313},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1520511386313},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1520511386314},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518273583628},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1518273583630},{"_id":"themes/next/source/lib/pace/.git/index","hash":"10b5c9216a84cb20af6b619bf9d4a97860b1c569","modified":1518273583639},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518273581683},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"bb3c30cf521feaa7ac447fee70f54cdcbd1892a1","modified":1518273583627},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1520511386320},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1520511386319},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1518272702462},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518272702460},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"1223a2f4eeb427a25a44fb56efe86c50c44c0426","modified":1518272702469},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"6effea4548320c5523c283dd1461578daaf24713","modified":1518272702456},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520511386318},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520511386317},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1520511386322},{"_id":"source/_posts/gitee-with-webhook/WX20180225-164721@2x.png","hash":"b1668d2cc7395c1fc87e14b093abcb2a64cdef16","modified":1523589158675},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"e84c32fedd584aab2284a4d5e4461c593d5ca482","modified":1526881458498},{"_id":"themes/next/.git/logs/refs/remotes/origin/i18n","hash":"715cca5adabcaab3bcbf614a2b5aa92d4d121d0a","modified":1526881458501},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"bcc8d64befe7873ef723ca48e20ab1264717a010","modified":1526881458497},{"_id":"themes/next/.git/refs/remotes/origin/ivan/feat-custom-lang","hash":"b5b5ff88c34b6d04d252b597a3bb43df8ff607b9","modified":1526881458502},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"2afcdadd62b97ccac8a17749f96031b875df6375","modified":1518271950973},{"_id":"themes/next/.git/logs/refs/remotes/origin/sub-menu-feature","hash":"6592e4715d0b7fb9064c3508a7563af84466e935","modified":1520511054882},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1526881570482},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1520511386276},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1526881570482},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1520511386277},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1520511386275},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1520511386274},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1520511386275},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1520511386276},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1520511386275},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1520511386277},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1520511405981},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1520511386277},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1520511405982},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1520511386278},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1520511386278},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1520511405981},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1520511386283},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1520511386283},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1526881570483},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1520511386284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1520511386285},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1520511386284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1520511386285},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1520511386285},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1520511386285},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1520511386279},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1520511386279},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1520511386284},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1520511386279},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1520511405982},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1520511386280},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1526881570482},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1520511386280},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1520511386282},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1520511386282},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1526881570483},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1520511386282},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1520511386279},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1520511386281},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1520511386281},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1520511386283},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1520511386286},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1520511386286},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1520511386282},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1520511386286},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1520511386287},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1520511386287},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1520511386288},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1520511386288},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1526881570483},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1520511386288},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1520511386286},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1520511386287},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1520511386289},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1520511386289},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1520511386290},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1520511386290},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1520511386289},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1520511386291},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1520511386290},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1520511386291},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1520511386297},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1520511386297},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1520511386299},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"0096224d5d1b9692466901f4f9a853e6e73c44e6","modified":1518273583629},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518273581685},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520511386315},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518273581683},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"95c0047effa6076441491feee6c71ab827eb4997","modified":1518272702461},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518272701239},{"_id":"themes/next/.git/objects/pack/pack-d91a09d4167ad9a9c9ff2484b2aa565759352141.pack","hash":"e1bdb6db81e003cedc05af7076977ab0ab75ca0f","modified":1526881458480},{"_id":"themes/next/.git/logs/refs/remotes/origin/ivan/feat-custom-lang","hash":"4558d15dc9690b7036cdf8cfa398505913203a06","modified":1526881458502},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1518273583620},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1518273583619},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1518273583614},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1518273583612},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1518273583621},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1518273583611},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1518273583619},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1518273583617},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1518273583610},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1518273583618},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1518273583616},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1518273583610},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1518273583615},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1518273583609},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1518273583613},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1518273583616},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1518273583612},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1518273583617},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1518273583615},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1518273583613},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1518273583620},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"3190f62cf3c4f9eccb1e54c8f7289ed7e6955767","modified":1518273583629},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1518272702290},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1518272702289},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1518272702287},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1518272702288},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1518272702286},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1518272702288},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1518272702289},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1518272702285},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1518272702285},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1518272702286},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1518272702284},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"5442226ab36d787824e89f50241336839b376133","modified":1518272702461},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518273583628},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"95c0047effa6076441491feee6c71ab827eb4997","modified":1518272702461},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"0096224d5d1b9692466901f4f9a853e6e73c44e6","modified":1518273583629},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518272702460},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"0096224d5d1b9692466901f4f9a853e6e73c44e6","modified":1518273583628},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"95c0047effa6076441491feee6c71ab827eb4997","modified":1518272702460},{"_id":"themes/next/.git/objects/pack/pack-ebba45649b657c0871867d3af57fd07e7249d210.pack","hash":"b2b0dfd73ef5a96aaf65b07eee025149cdeb2f23","modified":1518271950963},{"_id":"public/googleb85119e82958b681.html","hash":"33200cd680123c40e8384624eb30ad9d75a6e24f","modified":1526883948046},{"_id":"public/baidusitemap.xml","hash":"c3ded9b9637106a2981480c5463c4b02d175ad12","modified":1526883948069},{"_id":"public/search.xml","hash":"a1daef3392a209dcf492001525d5eacf404e064f","modified":1526883948069},{"_id":"public/sitemap.xml","hash":"2ade3ca8c6e0bc3cc6907e557c9d2f230cd4297f","modified":1526883948069},{"_id":"public/categories/index.html","hash":"88aac34edf77aec913a5bb46357823620a6f5f53","modified":1526883948079},{"_id":"public/tags/index.html","hash":"3c76684e893d1920ea37c38baf0c44b2aee4b3cc","modified":1526883948079},{"_id":"public/about/index.html","hash":"b15fcd4bd12c9cc808d2f280f1c266e8cdf3c223","modified":1526883948079},{"_id":"public/2018/05/07/use-frp/index.html","hash":"07b879acc7311ed95fe03d69025aac197fb78e70","modified":1526883948079},{"_id":"public/2018/05/03/brew-upgrade-error/index.html","hash":"8a84de5a29f34c75d436eeb96b11cfe82a41df6a","modified":1526883948079},{"_id":"public/2018/05/03/config-npm-registry/index.html","hash":"ee86092531d5ea857a7610e090878258b91118e3","modified":1526883948079},{"_id":"public/2018/04/18/raise-github-clone-speed/index.html","hash":"4f244a2d611551d4d16266b461ea7749e5cd37c0","modified":1526883948079},{"_id":"public/2018/04/11/netty-study/index.html","hash":"078d1a09870ee8efd266b725810a0e4610a7c356","modified":1526883948079},{"_id":"public/2018/04/02/study-shell/index.html","hash":"78e99cce6effa21746b3ced3596a3d4afd024a5c","modified":1526883948079},{"_id":"public/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/index.html","hash":"a81c1ef3b4e8f810195f502f5b2cc7efb3969246","modified":1526883948079},{"_id":"public/2018/03/07/python-requirements/index.html","hash":"3b29f3ad7e1eb89862ec7432d5b10a28eb679cfb","modified":1526883948079},{"_id":"public/2018/03/07/pthon-tutorial/index.html","hash":"96fa72eda80348697fe0e7af6a9d3e20aaf7198d","modified":1526883948079},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/index.html","hash":"d31f6048e48f486b1c9edff6e78c63d5855ecc9a","modified":1526883948080},{"_id":"public/2018/02/27/cnetos-install-pyenv/index.html","hash":"23055773206418dbd3c97da539ffee46dcc50f56","modified":1526883948080},{"_id":"public/2018/02/26/devops-1-environmental-configuration/index.html","hash":"5c72fb812e65ec03a555d63c768e16d59f5df78b","modified":1526883948080},{"_id":"public/2018/02/25/gitee-with-webhook/index.html","hash":"d1beef137d432ea02883585893bb2f1464fb9eb9","modified":1526883948080},{"_id":"public/2018/02/09/node-install/index.html","hash":"dda90a182bceb861810e1adc0d7596a9fc4ffb10","modified":1526883948080},{"_id":"public/2018/01/17/docker-create-mysql/index.html","hash":"c120dd03db95a008f0ebffc33be86cad873e3fb7","modified":1526883948080},{"_id":"public/2018/01/15/socks5-server/index.html","hash":"179c04729bf10afd3fba26cb2fb545997b8b2012","modified":1526883948080},{"_id":"public/2018/01/04/BTC-Tutorial/index.html","hash":"d43aed0b022125fd992fec41282db9c807121149","modified":1526883948080},{"_id":"public/2017/12/07/regular-expression-basic/index.html","hash":"61dfbab8bc97fe52404741b165589b74e8135406","modified":1526883948080},{"_id":"public/2017/12/04/docker-install-rabbitmq-cluster/index.html","hash":"c865a55a26bd57a14f612484679ec857a664ab49","modified":1526883948080},{"_id":"public/2017/12/02/kubeadm-install-kubernetes/index.html","hash":"fe01066534d6ed742ea136a2a1fa450ef627aa68","modified":1526883948080},{"_id":"public/2017/12/02/server-over-the-wall/index.html","hash":"5df10e408d190a21841e6ec730893f51f747ebd2","modified":1526883948080},{"_id":"public/2017/11/30/common-commonds/index.html","hash":"d80277651beec0d013f6f0e780f81e49f1c2f7a9","modified":1526883948080},{"_id":"public/2017/11/20/Machine-Learning-in-Java-1/index.html","hash":"b0975be7269ceab32c5d028d37107bc5486d22b6","modified":1526883948080},{"_id":"public/2017/11/06/centos-install-git/index.html","hash":"5ed2b8b1ccd33f486a349f19e31dca96ee79beee","modified":1526883948080},{"_id":"public/2017/10/28/ubuntu-install-lamp/index.html","hash":"33facd4fae9244678a57a3f22b8ea37d55014c5e","modified":1526883948080},{"_id":"public/2017/10/12/nginx-load-balance-strategy/index.html","hash":"eb731f2b83b26edc65f1f75507c14bef3d9923cf","modified":1526883948080},{"_id":"public/2017/10/01/yum-install-nginx-add-modules/index.html","hash":"808edf5d85686dc464229d03f20e4fac42e67127","modified":1526883948080},{"_id":"public/2017/09/30/hexo-can't-find-module/index.html","hash":"8ad3b40e27c06b58c282afcbae1647e4234de832","modified":1526883948081},{"_id":"public/2017/09/30/docker-install-nexus/index.html","hash":"973ccc102b1817b2a7069c220c7d0d493cf12bb7","modified":1526883948081},{"_id":"public/2017/09/23/docker-install-MongoDB/index.html","hash":"a9cebf2b3714d365b6ae6df94414ca5c40d1dc0c","modified":1526883948081},{"_id":"public/2017/09/23/Could-not-get-a-resource-from-the-pool/index.html","hash":"201a44d9f7e3759de38a5cfa86449d9e1a875440","modified":1526883948081},{"_id":"public/2017/09/23/life/index.html","hash":"60b2779c9f6d3701cd95d302242c6565d04785ef","modified":1526883948081},{"_id":"public/2017/09/22/Linux/index.html","hash":"3468afec5b393ad37b02bb0646dff42316cdaae6","modified":1526883948081},{"_id":"public/archives/index.html","hash":"be743a6de8753530ea05114447ae139d90e43ecf","modified":1526883948081},{"_id":"public/archives/page/2/index.html","hash":"ea7f933ffd882c4fd3b4f0c4f89504d7171b16a8","modified":1526883948081},{"_id":"public/archives/page/3/index.html","hash":"a86aa9e932fe0bad8274583e65425b9fb84152fc","modified":1526883948081},{"_id":"public/archives/page/4/index.html","hash":"80a4a1b49ca24d31ca93a6f758dc439235247f4b","modified":1526883948081},{"_id":"public/archives/2017/index.html","hash":"46cbe27762bc6ef70f51185cbc5a4c2b06a7f695","modified":1526883948081},{"_id":"public/archives/2017/page/2/index.html","hash":"be1adbe4f7cd822c2b46885efa18302fe6c0fe0d","modified":1526883948081},{"_id":"public/archives/2017/09/index.html","hash":"0e964a0874151cb9c02f30c536a2c7da78c78d4c","modified":1526883948081},{"_id":"public/archives/2017/10/index.html","hash":"5be8540e37656751e0e7784f7f9d6f131f3aad1f","modified":1526883948081},{"_id":"public/archives/2017/11/index.html","hash":"1645dc46546b0df91032e6711bc11b0396f37974","modified":1526883948081},{"_id":"public/archives/2017/12/index.html","hash":"cd07aa97aba158f0c80ef24e1e03ae2d8d2ef780","modified":1526883948081},{"_id":"public/archives/2018/index.html","hash":"341d209b69d8dc8cc00ecd3ba72e4d59d05335fd","modified":1526883948081},{"_id":"public/archives/2018/page/2/index.html","hash":"d86f855fd9ca9bb9cd0e6e3455b13d6f910b1456","modified":1526883948081},{"_id":"public/archives/2018/01/index.html","hash":"a776b7baf446e71d80b398e4bba0b34364f325c2","modified":1526883948081},{"_id":"public/archives/2018/02/index.html","hash":"1239bb27b56ff08e7394d939f4d20540d623f5e8","modified":1526883948081},{"_id":"public/archives/2018/03/index.html","hash":"23cdd60748ecfa1bf582b164d2a2f3e56ccd8e5f","modified":1526883948082},{"_id":"public/archives/2018/04/index.html","hash":"2372ea8fdf329bc99db19fcd3b65454149881217","modified":1526883948082},{"_id":"public/archives/2018/05/index.html","hash":"9829d450eb58458bb91cb9dfc5f6b8cafe34d4ec","modified":1526883948082},{"_id":"public/categories/Shell/index.html","hash":"831a3428f250abc6d394d7fb9f140b44b1adb083","modified":1526883948082},{"_id":"public/categories/Java/index.html","hash":"b266e4c3d7fdb08ad31777edf550ff5e7854452a","modified":1526883948082},{"_id":"public/categories/数字货币/index.html","hash":"68c9e670e6761e8ee68541c114fc43f42ba0eaa3","modified":1526883948082},{"_id":"public/categories/Linux/index.html","hash":"6f4da6e57c2a14fbf812d74a63e03a7c3d8dd44b","modified":1526883948082},{"_id":"public/categories/Linux/page/2/index.html","hash":"9ac3526cdf770379df7c88875029ceb5f2b0fd3b","modified":1526883948082},{"_id":"public/categories/Machine-Learning/index.html","hash":"0c260988fcaee8da78c1822e4f09f0257805b886","modified":1526883948082},{"_id":"public/categories/DevOps/index.html","hash":"c02cfeb89ee7fe7b8c9e262f8655cf6f29d278ae","modified":1526883948082},{"_id":"public/categories/Other/index.html","hash":"0a9217db299e54b544cee82b884c639350832fef","modified":1526883948082},{"_id":"public/categories/Python/index.html","hash":"4f3fdc023327dd1d69392a9913d465a2fad67d21","modified":1526883948082},{"_id":"public/categories/Regular/index.html","hash":"de994b3eead12e1086df19883c37bb52b82d25af","modified":1526883948083},{"_id":"public/index.html","hash":"17dd214ff643fb67324ab786f0f7eb3fe850aa1c","modified":1526883948083},{"_id":"public/page/3/index.html","hash":"fdc21d8ee79c0f888503b81bde18618d1be7414c","modified":1526883948083},{"_id":"public/page/2/index.html","hash":"6369c9316cd6bc7a077b4c3f571115b9fc02af7e","modified":1526883948083},{"_id":"public/page/4/index.html","hash":"e19bfe57649bd164680f6f0c61186771240c89cc","modified":1526883948083},{"_id":"public/tags/Domain/index.html","hash":"0582dedcd04a9f0afc9a2b30561943d7b39adcb8","modified":1526883948083},{"_id":"public/tags/Redis/index.html","hash":"585bde48aa3a290f2dab06cee7bf26bc41900aa5","modified":1526883948083},{"_id":"public/tags/数字货币/index.html","hash":"cdf0520a183027ef0dfcc5849c7998913943bd7a","modified":1526883948083},{"_id":"public/tags/Brew/index.html","hash":"e6b2399c5f9aafb1a80e2ac25e82c6695aacb120","modified":1526883948083},{"_id":"public/tags/Nginx/index.html","hash":"e0cf201fcc1125c8f0d65663cf0e5d9745b605cc","modified":1526883948083},{"_id":"public/tags/Machine-Learning/index.html","hash":"2364c78d870397e7e4c07c050194a5858d06f5b6","modified":1526883948083},{"_id":"public/tags/Git/index.html","hash":"e64b92522d94e4d43993afc34ad4155c1904e103","modified":1526883948083},{"_id":"public/tags/Docker/index.html","hash":"0d9b35eef62785c2d12ec8bdde15e3ed379e9979","modified":1526883948084},{"_id":"public/tags/Node/index.html","hash":"1c634de917767a50975ae86b055832cf6409fde1","modified":1526883948084},{"_id":"public/tags/Python/index.html","hash":"41461ccfdad58f161ac37a21594cf5d6dd2bbefc","modified":1526883948084},{"_id":"public/tags/SpringBoot/index.html","hash":"0c931d1b01f0faa946414a915d531c5c1cb6db37","modified":1526883948084},{"_id":"public/tags/Maven/index.html","hash":"9b9ae0df4c253bf138d1222bd93b5a4cb316c923","modified":1526883948084},{"_id":"public/tags/hexo/index.html","hash":"7a5b18d00a6aa89d2dff824540acfb48aec97e0e","modified":1526883948084},{"_id":"public/tags/Linux/index.html","hash":"30d57b01674e964be1f29ec87fef27f8472da740","modified":1526883948084},{"_id":"public/tags/Shell/index.html","hash":"9b5750466d7196d3e7c8af2eb1c9cf4ae631894a","modified":1526883948085},{"_id":"public/tags/Regular/index.html","hash":"815450e9b9755da3f9d1fa83ae98c5fad106f56a","modified":1526883948085},{"_id":"public/tags/frp/index.html","hash":"1fe7367249b42adf749541124f131968abd70b3e","modified":1526883948085},{"_id":"public/tags/Socks5/index.html","hash":"866f05ada8e2fef206b807c16020883a281ba310","modified":1526883948085},{"_id":"public/images/avatar.jpg","hash":"33d81e502d7e39220ede500f480c1025b852e6cb","modified":1526883948092},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526883948092},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526883948092},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526883948092},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526883948092},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526883948092},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526883948092},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526883948092},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526883948092},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526883948092},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526883948092},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526883948092},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526883948092},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526883948092},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1526883948092},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526883948092},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526883948092},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526883948092},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526883948093},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526883948093},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1526883948093},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1526883948093},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526883948093},{"_id":"public/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","hash":"76a26a5afb52b2c543239b8eaf1f94cc848690e0","modified":1526883948093},{"_id":"public/2018/04/18/raise-github-clone-speed/WX20180418-113942.png","hash":"392554f3c7c29badcae1a5afc4e98d5b0303ead2","modified":1526883948093},{"_id":"public/2018/02/25/gitee-with-webhook/WX20180225-163439@2x.png","hash":"0b4e62dda96e20e22f40558bdd4aab5c3aaf22e0","modified":1526883948093},{"_id":"public/2018/02/25/gitee-with-webhook/WX20180225-163748@2x.png","hash":"f62a3bc80769f86084993ecba84ee959a7635288","modified":1526883948093},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174110.png","hash":"7eedb7da5e2fdd8b3015c3112abbe86fa9331fa2","modified":1526883948093},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174208.png","hash":"1b942b703548a1dec40863a7b49d8ea2cc9fb83f","modified":1526883948093},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203234.png","hash":"c93c1a9404d7e4ad17675f4c4aa57b9b2f3892f1","modified":1526883948093},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203815.png","hash":"b08a4c9f5b810d91dbec8edb04beaed6741c551e","modified":1526883948093},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-204116.png","hash":"5355b4ab2dc62f73f63276874a1f4081e149568d","modified":1526883948093},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","hash":"bf8253b3b123ad8d1a31477279c81d5d3656ae44","modified":1526883948093},{"_id":"public/2018/02/26/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","hash":"7e153fb751346f4885dde3221d5d90b4a86e7f32","modified":1526883948093},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","hash":"350a21551ae37433ca465e3bfa65292f98e6ef0f","modified":1526883948093},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","hash":"2cf2d5dc049895e1d637585c5fddade524cb5242","modified":1526883948093},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191b000762026287366b.jpeg","hash":"b5a2e2b35c0668f64642ba3c87a0774ccc94b000","modified":1526883948094},{"_id":"public/2018/02/26/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","hash":"6a85f547b4dc2ee3773b60da5eac28ae66dbfb92","modified":1526883948094},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526883948516},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526883948519},{"_id":"public/2018/04/18/raise-github-clone-speed/WX20180418-114759@2x.png","hash":"d6f9d7c37608b15e42c339429f0184169d494586","modified":1526883948519},{"_id":"public/2018/04/18/raise-github-clone-speed/WX20180418-115544@2x.png","hash":"01b343692972469db6ec65954cc8e477d731c623","modified":1526883948519},{"_id":"public/2018/02/25/gitee-with-webhook/image-2018-153940@2x.png","hash":"f659353b32bf59165db6f55fd74d4b37a65dcf25","modified":1526883948519},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526883948525},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526883948525},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1526883948526},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526883948526},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1526883948526},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526883948526},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526883948526},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526883948526},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1526883948526},{"_id":"public/lib/pace/README.html","hash":"58f2105ada5cc52dff5aabcecb92569ee84493a0","modified":1526883948526},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526883948526},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526883948526},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526883948526},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526883948526},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526883948527},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526883948527},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526883948527},{"_id":"public/lib/canvas-nest/README.html","hash":"9bb29b415d0859e097fdfcc6689b235c0e699224","modified":1526883948527},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526883948527},{"_id":"public/css/main.css","hash":"7fa0eb1c1089330213500ad3c63a47fd0bcc2904","modified":1526883948527},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526883948527},{"_id":"public/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","hash":"b36ff8cc4b64172122bf00c0abbd715361d0176c","modified":1526883948527},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1526883948531},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1526883948531},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526883948531},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1526883948531},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526883948532},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526883948532},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526883948532},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526883948533},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526883948538},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526883948538},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526883948538},{"_id":"public/2018/02/25/gitee-with-webhook/WX20180225-164721@2x.png","hash":"b1668d2cc7395c1fc87e14b093abcb2a64cdef16","modified":1526883948544},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526883948567},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526883948581}],"Category":[{"name":"Shell","_id":"cjhfv9zg40003jms62q83dbk8"},{"name":"Java","_id":"cjhfv9zgg0008jms6r0dwofoy"},{"name":"数字货币","_id":"cjhfv9zgj000ejms64ac4lpwx"},{"name":"Linux","_id":"cjhfv9zgm000ljms6bi7dvlca"},{"name":"Machine Learning","_id":"cjhfv9zgr000rjms6c79s3opj"},{"name":"DevOps","_id":"cjhfv9zh1001jjms6opuehfph"},{"name":"Other","_id":"cjhfv9zh6001zjms6mkw8j5jh"},{"name":"Python","_id":"cjhfv9zh90027jms6l05z6oei"},{"name":"Regular","_id":"cjhfv9zhe002njms61vw3428j"}],"Data":[],"Page":[{"layout":"false","_content":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","source":"googleb85119e82958b681.html","raw":"layout: false\n---\ngoogle-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","date":"2018-03-17T04:49:13.187Z","updated":"2018-02-26T06:08:23.938Z","path":"googleb85119e82958b681.html","title":"","comments":1,"_id":"cjhfv9zeo0000jms6jwrk5qi5","content":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","site":{"data":{}},"excerpt":"","more":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n"},{"title":"分类","date":"2018-02-08T08:12:56.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-08 16:12:56\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-02-09T02:34:51.173Z","path":"categories/index.html","layout":"page","_id":"cjhfv9zm4003xjms6cwvmy69c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-08T08:15:54.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-08 16:15:54\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-02-09T02:34:49.231Z","path":"tags/index.html","layout":"page","_id":"cjhfv9zm5003yjms6l522tv9j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2017-09-23T05:57:23.000Z","comments":0,"_content":"\n\n### 自我介绍\n\n- 目前就职于一家互联网金融公司\n\n- Java 开发工程师（4年工作经验）\n\n- 邮箱 <mailto:junhuali.dev@gmail.com>\n\n- [个人简历](http://image.searchinfogo.com/resume.docx)\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-09-23 13:57:23\ncomments: false\n---\n\n\n### 自我介绍\n\n- 目前就职于一家互联网金融公司\n\n- Java 开发工程师（4年工作经验）\n\n- 邮箱 <mailto:junhuali.dev@gmail.com>\n\n- [个人简历](http://image.searchinfogo.com/resume.docx)\n","updated":"2018-03-01T07:00:05.229Z","path":"about/index.html","layout":"page","_id":"cjhfv9zm70040jms609p1qqx7","content":"<h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><ul>\n<li><p>目前就职于一家互联网金融公司</p>\n</li>\n<li><p>Java 开发工程师（4年工作经验）</p>\n</li>\n<li><p>邮箱 <a href=\"&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#106;&#x75;&#x6e;&#x68;&#x75;&#x61;&#108;&#x69;&#x2e;&#100;&#x65;&#118;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;\">&#106;&#x75;&#x6e;&#x68;&#x75;&#x61;&#108;&#x69;&#x2e;&#100;&#x65;&#118;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n</li>\n<li><p><a href=\"http://image.searchinfogo.com/resume.docx\" target=\"_blank\" rel=\"noopener\">个人简历</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><ul>\n<li><p>目前就职于一家互联网金融公司</p>\n</li>\n<li><p>Java 开发工程师（4年工作经验）</p>\n</li>\n<li><p>邮箱 <a href=\"&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#106;&#x75;&#x6e;&#x68;&#x75;&#x61;&#108;&#x69;&#x2e;&#100;&#x65;&#118;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;\">&#106;&#x75;&#x6e;&#x68;&#x75;&#x61;&#108;&#x69;&#x2e;&#100;&#x65;&#118;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n</li>\n<li><p><a href=\"http://image.searchinfogo.com/resume.docx\" target=\"_blank\" rel=\"noopener\">个人简历</a></p>\n</li>\n</ul>\n"}],"Post":[{"title":"使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）","date":"2018-03-17T09:38:33.000Z","_content":"网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL\n证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let's Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。\n\n### 申请域名\n为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。\n\n免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。\n\n我申请的域名是`rubys.ml`,可以免费使用一年，续费的话不到10刀/年。\n\n### 配置Let's Encrypt 单域名\n首先访问[Let's Cncrypt官网](https://letsencrypt.org/)，`Get Started`，然后会提供两种方式，`With Shell Access`和`Without Shell Access`，\n\n- With Shell Access(官方推荐通过shell进行部署)\n使用`Certbot ACME`客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png)\n访问[certbot](https://certbot.eff.org/),选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。\n- 安装系统扩展包\n``` bash\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -ivh epel-release-latest-7.noarch.rpm\nyum -y install yum-utils\nyum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n```\n- 安装certbot\n``` bash\nsudo yum install certbot-nginx\n```\n- 运行certbot插件生成证书\n``` bash\nsudo certbot --nginx\n```\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png)\n\n- 重启nginx\n``` bash\nsystemctl restart nginx\n```\n访问[www.rubys.ml](www.rubys.ml),发现链接自动定向到https://www.rubys.ml\n\n增加自动续期\n``` bash\ncrontab -e\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew\n```\n\n上面的方法是单域名证书的创建\n### 配置Let's Encrypt 泛域名\n如果配置泛域名，还需要安装一个 `Certbot's DNS plugins` 插件\n目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持\n- certbot-dns-cloudflare\n- certbot-dns-cloudxns\n- certbot-dns-digitalocean\n- certbot-dns-dnsimple\n- certbot-dns-dnsmadeeasy\n- certbot-dns-google\n- certbot-dns-luadns\n- certbot-dns-nsone\n- certbot-dns-rfc2136\n- certbot-dns-route53\n\n目前支持的云服务商还不多\n阿里云的话可以使用如下脚本\nhttps://github.com/Neilpang/acme.sh\n从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。\n\n未完待续。。。\n","source":"_posts/Lets-Encrypt-free-wildcard-domain-name.md","raw":"---\ntitle: 使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）\ndate: 2018-03-17 17:38:33\ncategories: Shell\ntag: Domain\n---\n网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL\n证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let's Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。\n\n### 申请域名\n为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。\n\n免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。\n\n我申请的域名是`rubys.ml`,可以免费使用一年，续费的话不到10刀/年。\n\n### 配置Let's Encrypt 单域名\n首先访问[Let's Cncrypt官网](https://letsencrypt.org/)，`Get Started`，然后会提供两种方式，`With Shell Access`和`Without Shell Access`，\n\n- With Shell Access(官方推荐通过shell进行部署)\n使用`Certbot ACME`客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png)\n访问[certbot](https://certbot.eff.org/),选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。\n- 安装系统扩展包\n``` bash\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -ivh epel-release-latest-7.noarch.rpm\nyum -y install yum-utils\nyum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n```\n- 安装certbot\n``` bash\nsudo yum install certbot-nginx\n```\n- 运行certbot插件生成证书\n``` bash\nsudo certbot --nginx\n```\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png)\n\n- 重启nginx\n``` bash\nsystemctl restart nginx\n```\n访问[www.rubys.ml](www.rubys.ml),发现链接自动定向到https://www.rubys.ml\n\n增加自动续期\n``` bash\ncrontab -e\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew\n```\n\n上面的方法是单域名证书的创建\n### 配置Let's Encrypt 泛域名\n如果配置泛域名，还需要安装一个 `Certbot's DNS plugins` 插件\n目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持\n- certbot-dns-cloudflare\n- certbot-dns-cloudxns\n- certbot-dns-digitalocean\n- certbot-dns-dnsimple\n- certbot-dns-dnsmadeeasy\n- certbot-dns-google\n- certbot-dns-luadns\n- certbot-dns-nsone\n- certbot-dns-rfc2136\n- certbot-dns-route53\n\n目前支持的云服务商还不多\n阿里云的话可以使用如下脚本\nhttps://github.com/Neilpang/acme.sh\n从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。\n\n未完待续。。。\n","slug":"Lets-Encrypt-free-wildcard-domain-name","published":1,"updated":"2018-03-18T07:33:42.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zfz0001jms6e66k4e9l","content":"<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。</p>\n<h3 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>\n<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>\n<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>\n<h3 id=\"配置Let’s-Encrypt-单域名\"><a href=\"#配置Let’s-Encrypt-单域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 单域名\"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>\n<ul>\n<li>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src=\"/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png\" alt=\"certbot\"><br>访问<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</li>\n<li><p>安装系统扩展包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">yum -y install yum-utils</span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装certbot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行certbot插件生成证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png\" alt=\"certbot\"></p>\n<ul>\n<li>重启nginx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问<a href=\"www.rubys.ml\">www.rubys.ml</a>,发现链接自动定向到<a href=\"https://www.rubys.ml\" target=\"_blank\" rel=\"noopener\">https://www.rubys.ml</a></p>\n<p>增加自动续期<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0 0,12 * * * python -c <span class=\"string\">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure></p>\n<p>上面的方法是单域名证书的创建</p>\n<h3 id=\"配置Let’s-Encrypt-泛域名\"><a href=\"#配置Let’s-Encrypt-泛域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 泛域名\"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>\n<ul>\n<li>certbot-dns-cloudflare</li>\n<li>certbot-dns-cloudxns</li>\n<li>certbot-dns-digitalocean</li>\n<li>certbot-dns-dnsimple</li>\n<li>certbot-dns-dnsmadeeasy</li>\n<li>certbot-dns-google</li>\n<li>certbot-dns-luadns</li>\n<li>certbot-dns-nsone</li>\n<li>certbot-dns-rfc2136</li>\n<li>certbot-dns-route53</li>\n</ul>\n<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>\n<p>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。</p>\n<h3 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>\n<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>\n<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>\n<h3 id=\"配置Let’s-Encrypt-单域名\"><a href=\"#配置Let’s-Encrypt-单域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 单域名\"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>\n<ul>\n<li>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src=\"/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png\" alt=\"certbot\"><br>访问<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</li>\n<li><p>安装系统扩展包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">yum -y install yum-utils</span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装certbot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行certbot插件生成证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png\" alt=\"certbot\"></p>\n<ul>\n<li>重启nginx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>访问<a href=\"www.rubys.ml\">www.rubys.ml</a>,发现链接自动定向到<a href=\"https://www.rubys.ml\" target=\"_blank\" rel=\"noopener\">https://www.rubys.ml</a></p>\n<p>增加自动续期<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0 0,12 * * * python -c <span class=\"string\">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure></p>\n<p>上面的方法是单域名证书的创建</p>\n<h3 id=\"配置Let’s-Encrypt-泛域名\"><a href=\"#配置Let’s-Encrypt-泛域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 泛域名\"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>\n<ul>\n<li>certbot-dns-cloudflare</li>\n<li>certbot-dns-cloudxns</li>\n<li>certbot-dns-digitalocean</li>\n<li>certbot-dns-dnsimple</li>\n<li>certbot-dns-dnsmadeeasy</li>\n<li>certbot-dns-google</li>\n<li>certbot-dns-luadns</li>\n<li>certbot-dns-nsone</li>\n<li>certbot-dns-rfc2136</li>\n<li>certbot-dns-route53</li>\n</ul>\n<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>\n<p>未完待续。。。</p>\n"},{"title":"Redis连接池连接没有正常释放报错","date":"2017-09-23T07:56:45.000Z","_content":"\n\n``` log\n Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool\n\tat redis.clients.util.Pool.getResource(Pool.java:51)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)\n\tat org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)\n\t... 71 common frames omitted\n\n\n```\n\n前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源\n\n### redisTemplate 和 jedis 不同\n\nredisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放\n\n``` Java\npublic boolean setNX(final String key, final String value) throws RedisException {\n        return redisTemplate.execute(new RedisCallback<Boolean>() {\n            @Override\n            public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                return redisConnection.setNX(key.getBytes(), value.getBytes());\n            }\n        });\n    }\n\n```\n所以实现分布式锁的时候需要调用`redisTemplate.execute` 让 `redisTemplate` 帮我们释放资源，具体的可以看redisTemplate 的源码。\n","source":"_posts/Could-not-get-a-resource-from-the-pool.md","raw":"---\ntitle: Redis连接池连接没有正常释放报错\ndate: 2017-09-23 15:56:45\ncategories: Java\ntag: Redis\n---\n\n\n``` log\n Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool\n\tat redis.clients.util.Pool.getResource(Pool.java:51)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)\n\tat org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)\n\t... 71 common frames omitted\n\n\n```\n\n前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源\n\n### redisTemplate 和 jedis 不同\n\nredisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放\n\n``` Java\npublic boolean setNX(final String key, final String value) throws RedisException {\n        return redisTemplate.execute(new RedisCallback<Boolean>() {\n            @Override\n            public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                return redisConnection.setNX(key.getBytes(), value.getBytes());\n            }\n        });\n    }\n\n```\n所以实现分布式锁的时候需要调用`redisTemplate.execute` 让 `redisTemplate` 帮我们释放资源，具体的可以看redisTemplate 的源码。\n","slug":"Could-not-get-a-resource-from-the-pool","published":1,"updated":"2018-02-09T02:43:42.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zg20002jms6zdthqf8z","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class=\"line\">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class=\"line\">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class=\"line\">... 71 common frames omitted</span><br></pre></td></tr></table></figure>\n<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>\n<h3 id=\"redisTemplate-和-jedis-不同\"><a href=\"#redisTemplate-和-jedis-不同\" class=\"headerlink\" title=\"redisTemplate 和 jedis 不同\"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setNX</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String value)</span> <span class=\"keyword\">throws</span> RedisException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection redisConnection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class=\"line\">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class=\"line\">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class=\"line\">... 71 common frames omitted</span><br></pre></td></tr></table></figure>\n<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>\n<h3 id=\"redisTemplate-和-jedis-不同\"><a href=\"#redisTemplate-和-jedis-不同\" class=\"headerlink\" title=\"redisTemplate 和 jedis 不同\"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setNX</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String value)</span> <span class=\"keyword\">throws</span> RedisException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection redisConnection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>\n"},{"title":"数字货币入门","date":"2018-01-04T02:45:41.000Z","_content":"### 前言\n最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。\n### 怎么入场\n交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要\n进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所\n平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。\n我主要是在火币进行兑换，也叫OTC（场外交易）\n\nhttps://www.huobipro.pro\n如果请求不到，可以使用\nhttps://www.huobi.br.com/zh-cn/\n\n\n2018年04月20日11:38:10\n市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。\n","source":"_posts/BTC-Tutorial.md","raw":"---\ntitle: 数字货币入门\ndate: 2018-01-04 10:45:41\ncategories: 数字货币\ntag: 数字货币\n---\n### 前言\n最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。\n### 怎么入场\n交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要\n进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所\n平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。\n我主要是在火币进行兑换，也叫OTC（场外交易）\n\nhttps://www.huobipro.pro\n如果请求不到，可以使用\nhttps://www.huobi.br.com/zh-cn/\n\n\n2018年04月20日11:38:10\n市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。\n","slug":"BTC-Tutorial","published":1,"updated":"2018-04-20T09:06:57.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zg60005jms6nkofg9ir","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。</p>\n<h3 id=\"怎么入场\"><a href=\"#怎么入场\" class=\"headerlink\" title=\"怎么入场\"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>\n<p><a href=\"https://www.huobipro.pro\" target=\"_blank\" rel=\"noopener\">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href=\"https://www.huobi.br.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/</a></p>\n<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。</p>\n<h3 id=\"怎么入场\"><a href=\"#怎么入场\" class=\"headerlink\" title=\"怎么入场\"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>\n<p><a href=\"https://www.huobipro.pro\" target=\"_blank\" rel=\"noopener\">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href=\"https://www.huobi.br.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/</a></p>\n<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>\n"},{"title":"brew 升级应用错误","date":"2018-05-03T03:01:00.000Z","_content":"定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。\n### brew 升级\n最近在使用`brew upgrade` 的过程中，喷到了一个问题几率一下。\n``` shell\nError: An unexpected error occurred during the `brew link` step\nThe formula built, but is not symlinked into /usr/local\nPermission denied @ dir_s_mkdir - /usr/local/Frameworks\nError: Permission denied @ dir_s_mkdir - /usr/local/Frameworks\n```\n如上所示，需要创建`/usr/local/Frameworks` 目录，但是没有对应的权限\n\n### 解决方法\n``` Shell\n sudo mkdir /usr/local/Frameworks\n sudo chown $(whoami):admin /usr/local/Frameworks\n```\n手动创建，赋权，之后就可以愉快的` brew upgrade` 了。\n\n\n最后`brew cleanup` 清理废弃的文件，释放空间。\n","source":"_posts/brew-upgrade-error.md","raw":"---\ntitle: brew 升级应用错误\ndate: 2018-05-03 11:01:00\ncategories: Shell\ntags: Brew\n---\n定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。\n### brew 升级\n最近在使用`brew upgrade` 的过程中，喷到了一个问题几率一下。\n``` shell\nError: An unexpected error occurred during the `brew link` step\nThe formula built, but is not symlinked into /usr/local\nPermission denied @ dir_s_mkdir - /usr/local/Frameworks\nError: Permission denied @ dir_s_mkdir - /usr/local/Frameworks\n```\n如上所示，需要创建`/usr/local/Frameworks` 目录，但是没有对应的权限\n\n### 解决方法\n``` Shell\n sudo mkdir /usr/local/Frameworks\n sudo chown $(whoami):admin /usr/local/Frameworks\n```\n手动创建，赋权，之后就可以愉快的` brew upgrade` 了。\n\n\n最后`brew cleanup` 清理废弃的文件，释放空间。\n","slug":"brew-upgrade-error","published":1,"updated":"2018-05-03T03:11:08.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zge0006jms6sjtns4af","content":"<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。</p>\n<h3 id=\"brew-升级\"><a href=\"#brew-升级\" class=\"headerlink\" title=\"brew 升级\"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，喷到了一个问题几率一下。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: An unexpected error occurred during the `brew link` step</span><br><span class=\"line\">The formula built, but is not symlinked into /usr/local</span><br><span class=\"line\">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class=\"line\">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure></p>\n<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/local/Frameworks</span><br><span class=\"line\">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>\n<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。</p>\n<h3 id=\"brew-升级\"><a href=\"#brew-升级\" class=\"headerlink\" title=\"brew 升级\"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，喷到了一个问题几率一下。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: An unexpected error occurred during the `brew link` step</span><br><span class=\"line\">The formula built, but is not symlinked into /usr/local</span><br><span class=\"line\">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class=\"line\">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure></p>\n<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/local/Frameworks</span><br><span class=\"line\">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>\n<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>\n"},{"title":"Nginx 504 Gateway Time-out","date":"2017-09-22T12:49:29.000Z","_content":"\n\n今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置\n``` Shell\n\tproxy_connect_timeout = 3;\n```\n时间过小导致的，最好用默认参数\n","source":"_posts/Linux.md","raw":"---\ntitle: Nginx 504 Gateway Time-out\ndate: 2017-09-22 20:49:29\ncategories: Linux\ntag: Nginx\n\n---\n\n\n今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置\n``` Shell\n\tproxy_connect_timeout = 3;\n```\n时间过小导致的，最好用默认参数\n","slug":"Linux","published":1,"updated":"2018-04-20T03:36:33.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgg0007jms6xfm0k84d","content":"<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure></p>\n<p>时间过小导致的，最好用默认参数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure></p>\n<p>时间过小导致的，最好用默认参数</p>\n"},{"title":"Machine-Learning-in-Java-1","date":"2017-11-20T09:00:53.000Z","_content":"### 机器学习的主要方法\n- 监督学习\n- 无监督学习\n- 强化学习\n\n####  监督学习\n检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。\n####  无监督学习\n无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。\n#### 强化学习\n强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n### 机器学习应用流程\n（1） 数据与问题定义\n（2）数据收集\n（3）数据预处理\n（4）利用无监督学习与监督学习进行数据分析与建模\n（5）模型评价\n\n特性 | 称名 | 顺序 | 等距 | 等比 |\n\n| 特性 | 称名 | 顺序 | 等距 | 等比 |\n| :- | :-: | :-: | :-: | :-: |\n| 频率分布 | √| √ | √ | √ |\n| 中位数和众数 |  | √ | √ | √ |\n| 值顺序已知 |   | √ | √ | √ |\n| 每个值之间的不同可以量化 | | √ | √ | √ |\n| 值可以加减 |  |  | √ | √ |\n| 值可以乘除 |  |  |  | √ |\n| 拥有真0点 |  |  |  | √ |\n\n### 获取数据的方式\n- 维基百科\n- 网页抓取\n- IMDb\n- Million Song Dataset\n\n### 数据采集\n陷阱 幸存者偏差\n数据清洗\n填充缺失值\n剔除异常值\n数据转换\n## 数据归纳\n奇异值分解（SVD）\n主成分分析（PCA）\n神经网络自动编码器（Neural nets auto encoders）\n\n\n### 无监督学习\nn维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。\n\nL2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。\n它是两个元素在每个维度上差的平方和的平方根，计算公式如下:\n\n\n\n\n\n\n\n\n\n注： 以上数据来自 Machine Learning in Java\n","source":"_posts/Machine-Learning-in-Java-1.md","raw":"---\ntitle: Machine-Learning-in-Java-1\ndate: 2017-11-20 17:00:53\ncategories: Machine Learning\ntag: Machine Learning\n---\n### 机器学习的主要方法\n- 监督学习\n- 无监督学习\n- 强化学习\n\n####  监督学习\n检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。\n####  无监督学习\n无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。\n#### 强化学习\n强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n### 机器学习应用流程\n（1） 数据与问题定义\n（2）数据收集\n（3）数据预处理\n（4）利用无监督学习与监督学习进行数据分析与建模\n（5）模型评价\n\n特性 | 称名 | 顺序 | 等距 | 等比 |\n\n| 特性 | 称名 | 顺序 | 等距 | 等比 |\n| :- | :-: | :-: | :-: | :-: |\n| 频率分布 | √| √ | √ | √ |\n| 中位数和众数 |  | √ | √ | √ |\n| 值顺序已知 |   | √ | √ | √ |\n| 每个值之间的不同可以量化 | | √ | √ | √ |\n| 值可以加减 |  |  | √ | √ |\n| 值可以乘除 |  |  |  | √ |\n| 拥有真0点 |  |  |  | √ |\n\n### 获取数据的方式\n- 维基百科\n- 网页抓取\n- IMDb\n- Million Song Dataset\n\n### 数据采集\n陷阱 幸存者偏差\n数据清洗\n填充缺失值\n剔除异常值\n数据转换\n## 数据归纳\n奇异值分解（SVD）\n主成分分析（PCA）\n神经网络自动编码器（Neural nets auto encoders）\n\n\n### 无监督学习\nn维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。\n\nL2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。\n它是两个元素在每个维度上差的平方和的平方根，计算公式如下:\n\n\n\n\n\n\n\n\n\n注： 以上数据来自 Machine Learning in Java\n","slug":"Machine-Learning-in-Java-1","published":1,"updated":"2018-02-09T02:43:32.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgh000bjms6ceb3b894","content":"<h3 id=\"机器学习的主要方法\"><a href=\"#机器学习的主要方法\" class=\"headerlink\" title=\"机器学习的主要方法\"></a>机器学习的主要方法</h3><ul>\n<li>监督学习</li>\n<li>无监督学习</li>\n<li>强化学习</li>\n</ul>\n<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4><p>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。</p>\n<h4 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h4><p>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。</p>\n<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4><p>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。</p>\n<h3 id=\"机器学习应用流程\"><a href=\"#机器学习应用流程\" class=\"headerlink\" title=\"机器学习应用流程\"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>\n<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:center\">称名</th>\n<th style=\"text-align:center\">顺序</th>\n<th style=\"text-align:center\">等距</th>\n<th style=\"text-align:center\">等比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">频率分布</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中位数和众数</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">值顺序已知</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">每个值之间的不同可以量化</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">值可以加减</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">值可以乘除</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拥有真0点</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取数据的方式\"><a href=\"#获取数据的方式\" class=\"headerlink\" title=\"获取数据的方式\"></a>获取数据的方式</h3><ul>\n<li>维基百科</li>\n<li>网页抓取</li>\n<li>IMDb</li>\n<li>Million Song Dataset</li>\n</ul>\n<h3 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>\n<h2 id=\"数据归纳\"><a href=\"#数据归纳\" class=\"headerlink\" title=\"数据归纳\"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>\n<h3 id=\"无监督学习-1\"><a href=\"#无监督学习-1\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>\n<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>\n<p>注： 以上数据来自 Machine Learning in Java</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"机器学习的主要方法\"><a href=\"#机器学习的主要方法\" class=\"headerlink\" title=\"机器学习的主要方法\"></a>机器学习的主要方法</h3><ul>\n<li>监督学习</li>\n<li>无监督学习</li>\n<li>强化学习</li>\n</ul>\n<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4><p>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。</p>\n<h4 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h4><p>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。</p>\n<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4><p>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。</p>\n<h3 id=\"机器学习应用流程\"><a href=\"#机器学习应用流程\" class=\"headerlink\" title=\"机器学习应用流程\"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>\n<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:center\">称名</th>\n<th style=\"text-align:center\">顺序</th>\n<th style=\"text-align:center\">等距</th>\n<th style=\"text-align:center\">等比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">频率分布</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中位数和众数</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">值顺序已知</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">每个值之间的不同可以量化</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">值可以加减</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">值可以乘除</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拥有真0点</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取数据的方式\"><a href=\"#获取数据的方式\" class=\"headerlink\" title=\"获取数据的方式\"></a>获取数据的方式</h3><ul>\n<li>维基百科</li>\n<li>网页抓取</li>\n<li>IMDb</li>\n<li>Million Song Dataset</li>\n</ul>\n<h3 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>\n<h2 id=\"数据归纳\"><a href=\"#数据归纳\" class=\"headerlink\" title=\"数据归纳\"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>\n<h3 id=\"无监督学习-1\"><a href=\"#无监督学习-1\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>\n<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>\n<p>注： 以上数据来自 Machine Learning in Java</p>\n"},{"title":"CentOS 安装 git","date":"2017-11-06T07:11:35.000Z","_content":"\n### 源码安装\n- 安装对应的依赖\n``` bash\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install gcc perl-ExtUtils-MakeMaker\n```\n- 下载源码编译安装\n#### 确保系统git 已经被卸载\n``` bash\nyum remove git(先执行本选项，确保卸载掉git)\n```\n\n``` bash\ncd /usr/src\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz\ntar xzf git-2.9.3.tar.gz\ncd git-2.9.3\nmake prefix=/usr/bin/git all\nmake prefix=/usr/bin/git install\necho \"export PATH=$PATH:/usr/bin/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\ngit --version (查看是否安装完成)\n```\n### rpm 安装（基于CentOS7）\n\n``` bash\n# 下载最新rpm\nwget https://centos7.iuscommunity.org/ius-release.rpm\n# 安装依赖（可能会少包，按提示安装）\nrpm -Uvh ius-release*rpm\n# 安装git\nyum --enablerepo=ius-archive install git2u\ngit --version\n```\n### yum 安装(安装2.x 可以yum search git 搜索到)\n``` bash\nyum install git2u\ngit --version\n```\n","source":"_posts/centos-install-git.md","raw":"---\ntitle: CentOS 安装 git\ndate: 2017-11-06 15:11:35\ncategories: Linux\ntag: Git\n---\n\n### 源码安装\n- 安装对应的依赖\n``` bash\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install gcc perl-ExtUtils-MakeMaker\n```\n- 下载源码编译安装\n#### 确保系统git 已经被卸载\n``` bash\nyum remove git(先执行本选项，确保卸载掉git)\n```\n\n``` bash\ncd /usr/src\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz\ntar xzf git-2.9.3.tar.gz\ncd git-2.9.3\nmake prefix=/usr/bin/git all\nmake prefix=/usr/bin/git install\necho \"export PATH=$PATH:/usr/bin/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\ngit --version (查看是否安装完成)\n```\n### rpm 安装（基于CentOS7）\n\n``` bash\n# 下载最新rpm\nwget https://centos7.iuscommunity.org/ius-release.rpm\n# 安装依赖（可能会少包，按提示安装）\nrpm -Uvh ius-release*rpm\n# 安装git\nyum --enablerepo=ius-archive install git2u\ngit --version\n```\n### yum 安装(安装2.x 可以yum search git 搜索到)\n``` bash\nyum install git2u\ngit --version\n```\n","slug":"centos-install-git","published":1,"updated":"2018-02-09T02:43:44.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgj000cjms69wtagp34","content":"<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ul>\n<li><p>安装对应的依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载源码编译安装</p>\n<h4 id=\"确保系统git-已经被卸载\"><a href=\"#确保系统git-已经被卸载\" class=\"headerlink\" title=\"确保系统git 已经被卸载\"></a>确保系统git 已经被卸载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class=\"line\">tar xzf git-2.9.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.9.3</span><br><span class=\"line\">make prefix=/usr/bin/git all</span><br><span class=\"line\">make prefix=/usr/bin/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/bin/git/bin\"</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br><span class=\"line\">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>\n<h3 id=\"rpm-安装（基于CentOS7）\"><a href=\"#rpm-安装（基于CentOS7）\" class=\"headerlink\" title=\"rpm 安装（基于CentOS7）\"></a>rpm 安装（基于CentOS7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新rpm</span></span><br><span class=\"line\">wget https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖（可能会少包，按提示安装）</span></span><br><span class=\"line\">rpm -Uvh ius-release*rpm</span><br><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum --enablerepo=ius-archive install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"yum-安装-安装2-x-可以yum-search-git-搜索到\"><a href=\"#yum-安装-安装2-x-可以yum-search-git-搜索到\" class=\"headerlink\" title=\"yum 安装(安装2.x 可以yum search git 搜索到)\"></a>yum 安装(安装2.x 可以yum search git 搜索到)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ul>\n<li><p>安装对应的依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载源码编译安装</p>\n<h4 id=\"确保系统git-已经被卸载\"><a href=\"#确保系统git-已经被卸载\" class=\"headerlink\" title=\"确保系统git 已经被卸载\"></a>确保系统git 已经被卸载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class=\"line\">tar xzf git-2.9.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.9.3</span><br><span class=\"line\">make prefix=/usr/bin/git all</span><br><span class=\"line\">make prefix=/usr/bin/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/bin/git/bin\"</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br><span class=\"line\">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>\n<h3 id=\"rpm-安装（基于CentOS7）\"><a href=\"#rpm-安装（基于CentOS7）\" class=\"headerlink\" title=\"rpm 安装（基于CentOS7）\"></a>rpm 安装（基于CentOS7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载最新rpm</span></span><br><span class=\"line\">wget https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖（可能会少包，按提示安装）</span></span><br><span class=\"line\">rpm -Uvh ius-release*rpm</span><br><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum --enablerepo=ius-archive install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"yum-安装-安装2-x-可以yum-search-git-搜索到\"><a href=\"#yum-安装-安装2-x-可以yum-search-git-搜索到\" class=\"headerlink\" title=\"yum 安装(安装2.x 可以yum search git 搜索到)\"></a>yum 安装(安装2.x 可以yum search git 搜索到)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n"},{"title":"Docker 常用命令(待完善)","date":"2017-11-30T07:32:29.000Z","_content":"#### 列出所有并删除已停止容器\n``` bash\n$ docker rm -v $(docker ps -aq -f status=exited)\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\n#### 创建数据卷\n``` bash\n$ docker volume create --name data\n```\n","source":"_posts/common-commonds.md","raw":"---\ntitle: Docker 常用命令(待完善)\ndate: 2017-11-30 15:32:29\ncategories: Linux\ntag: Docker\n---\n#### 列出所有并删除已停止容器\n``` bash\n$ docker rm -v $(docker ps -aq -f status=exited)\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\n#### 创建数据卷\n``` bash\n$ docker volume create --name data\n```\n","slug":"common-commonds","published":1,"updated":"2018-02-09T02:43:43.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgk000gjms64t9gc89m","content":"<h4 id=\"列出所有并删除已停止容器\"><a href=\"#列出所有并删除已停止容器\" class=\"headerlink\" title=\"列出所有并删除已停止容器\"></a>列出所有并删除已停止容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\">$ docker volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create --name data</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"列出所有并删除已停止容器\"><a href=\"#列出所有并删除已停止容器\" class=\"headerlink\" title=\"列出所有并删除已停止容器\"></a>列出所有并删除已停止容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\">$ docker volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create --name data</span><br></pre></td></tr></table></figure>\n"},{"title":"npm 更换源","date":"2018-05-03T02:17:09.000Z","_content":"由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。\n\n### 换源\n- 临时使用\n``` bash\nnpm --registry https://registry.npm.taobao.org install express --save\n```\n- 持久使用\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n- 验证\n``` bash\nnpm config get registry\n```\n- 官方源\n``` bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n### 通过 nrm 更换源\n最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了`nrm -- NPM registry manager`，它可以帮你快速的帮你在不同的源之间切换，现在包括`npm`、`cnpm`、`taobao`、`nj(nodejitsu)`、`rednpm`，还可以加入你自己的私有源。\n\n- 安装\n``` shell\nnpm install -g nrm\n```\n- 例子\n``` bash\n$ nrm ls\n* npm -----  https://registry.npmjs.org/\n  cnpm ----  http://r.cnpmjs.org/\n  taobao --  https://registry.npm.taobao.org/\n  nj ------  https://registry.nodejitsu.com/\n  rednpm -- http://registry.mirror.cqupt.edu.cn\n  skimdb -- https://skimdb.npmjs.com/registry\n# 使用\n$ nrm use cnpm  #switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/\n```\n\n通过nrm换源，体验一下就提升了很多，工作更有效率了。\n","source":"_posts/config-npm-registry.md","raw":"---\ntitle: npm 更换源\ndate: 2018-05-03 10:17:09\ncategories: Linux\ntags: Node\n---\n由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。\n\n### 换源\n- 临时使用\n``` bash\nnpm --registry https://registry.npm.taobao.org install express --save\n```\n- 持久使用\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n- 验证\n``` bash\nnpm config get registry\n```\n- 官方源\n``` bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n### 通过 nrm 更换源\n最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了`nrm -- NPM registry manager`，它可以帮你快速的帮你在不同的源之间切换，现在包括`npm`、`cnpm`、`taobao`、`nj(nodejitsu)`、`rednpm`，还可以加入你自己的私有源。\n\n- 安装\n``` shell\nnpm install -g nrm\n```\n- 例子\n``` bash\n$ nrm ls\n* npm -----  https://registry.npmjs.org/\n  cnpm ----  http://r.cnpmjs.org/\n  taobao --  https://registry.npm.taobao.org/\n  nj ------  https://registry.nodejitsu.com/\n  rednpm -- http://registry.mirror.cqupt.edu.cn\n  skimdb -- https://skimdb.npmjs.com/registry\n# 使用\n$ nrm use cnpm  #switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/\n```\n\n通过nrm换源，体验一下就提升了很多，工作更有效率了。\n","slug":"config-npm-registry","published":1,"updated":"2018-05-03T03:31:39.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgl000jjms6215nl5n6","content":"<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。</p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><ul>\n<li><p>临时使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>持久使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>官方源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"通过-nrm-更换源\"><a href=\"#通过-nrm-更换源\" class=\"headerlink\" title=\"通过 nrm 更换源\"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nrm ls</span><br><span class=\"line\">* npm -----  https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm ----  http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao --  https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ------  https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class=\"line\">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ nrm use cnpm  <span class=\"comment\">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。</p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><ul>\n<li><p>临时使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>持久使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>官方源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"通过-nrm-更换源\"><a href=\"#通过-nrm-更换源\" class=\"headerlink\" title=\"通过 nrm 更换源\"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nrm ls</span><br><span class=\"line\">* npm -----  https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm ----  http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao --  https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ------  https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class=\"line\">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ nrm use cnpm  <span class=\"comment\">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>\n"},{"title":"Centos7 安装 pyenv","date":"2018-02-27T03:38:38.000Z","_content":"> 人生苦短，我用Python\n\nPython 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。\n\n### 安装Pyenv\n``` bash\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  #安装所需的包\n```\n\n\n``` bash\n#创建目录、安装\nmkdir ~/.pyenv\ngit clone git://github.com/yyuu/pyenv.git ~/.pyenv  \n#配置环境变量\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc  \necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc  \necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc  \nexec $SHELL -l\n```\n```\n\n``` bash\n#列出所有版本\npyenv install --list\n\n#安装python 3.5.2\npyenv install 3.5.2\n\n#全局使用\npyenv global 3.5.2\n\n#检查版本\npython --version\n```\n\n通过环境管理，一台服务器上可以存在多个环境，方便部署。\n","source":"_posts/cnetos-install-pyenv.md","raw":"---\ntitle: Centos7 安装 pyenv\ndate: 2018-02-27 11:38:38\ncategories: Linux\ntags: Python\n---\n> 人生苦短，我用Python\n\nPython 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。\n\n### 安装Pyenv\n``` bash\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  #安装所需的包\n```\n\n\n``` bash\n#创建目录、安装\nmkdir ~/.pyenv\ngit clone git://github.com/yyuu/pyenv.git ~/.pyenv  \n#配置环境变量\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc  \necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc  \necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc  \nexec $SHELL -l\n```\n```\n\n``` bash\n#列出所有版本\npyenv install --list\n\n#安装python 3.5.2\npyenv install 3.5.2\n\n#全局使用\npyenv global 3.5.2\n\n#检查版本\npython --version\n```\n\n通过环境管理，一台服务器上可以存在多个环境，方便部署。\n","slug":"cnetos-install-pyenv","published":1,"updated":"2018-02-27T06:53:27.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgm000njms67z84keqr","content":"<blockquote>\n<p>人生苦短，我用Python</p>\n</blockquote>\n<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。</p>\n<h3 id=\"安装Pyenv\"><a href=\"#安装Pyenv\" class=\"headerlink\" title=\"安装Pyenv\"></a>安装Pyenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class=\"comment\">#安装所需的包</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建目录、安装</span></span><br><span class=\"line\">mkdir ~/.pyenv</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class=\"line\"><span class=\"comment\">#配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span> -l</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">#列出所有版本</span><br><span class=\"line\">pyenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\">#安装python 3.5.2</span><br><span class=\"line\">pyenv install 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#全局使用</span><br><span class=\"line\">pyenv global 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#检查版本</span><br><span class=\"line\">python --version</span><br></pre></td></tr></table></figure>\n<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>人生苦短，我用Python</p>\n</blockquote>\n<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。</p>\n<h3 id=\"安装Pyenv\"><a href=\"#安装Pyenv\" class=\"headerlink\" title=\"安装Pyenv\"></a>安装Pyenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class=\"comment\">#安装所需的包</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建目录、安装</span></span><br><span class=\"line\">mkdir ~/.pyenv</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class=\"line\"><span class=\"comment\">#配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span> -l</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">#列出所有版本</span><br><span class=\"line\">pyenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\">#安装python 3.5.2</span><br><span class=\"line\">pyenv install 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#全局使用</span><br><span class=\"line\">pyenv global 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#检查版本</span><br><span class=\"line\">python --version</span><br></pre></td></tr></table></figure>\n<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>\n"},{"title":"DevOps实践1:基本概念和环境配置","date":"2018-02-26T07:14:03.000Z","_content":"### 什么是DevOps\n> DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。\n\n![](devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg)\n我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。\n\n### DevOps各个阶段\n1. 第一阶段：流程化\n基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。\n2. 第二阶段：自动化服务（部分）\n基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。\n3. 第三阶段：智能化\n根据实际的业务情况，通过DevOps提升开发、测试、运维效率\n\n![如何一步步实现DevOps](devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg)\n![CI/CD](devops-1-environmental-configuration/191500078c0b39a29f95.jpeg)\n![自动化测试](devops-1-environmental-configuration/1916000764d774a3eee4.jpeg)\n![持续集成](devops-1-environmental-configuration/191700078c8d4238617c.jpeg)\n![微服务最佳实践](devops-1-environmental-configuration/191b000762026287366b.jpeg)\n\n### 工具说明\n目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。\n所需要用到的软件和工具:\n- Jenkins\n- Dokcer\n- IDEA\n- Git\n主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。\n\n### Docker 环境配置\n因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。\n- Windows 环境\n\nDocker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。\n`https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi`\n参考'http://www.widuu.com/docker/installation/windows.html'\n\n\n- Mac 环境\n\nDocker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。\n`https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg`\n可参考：`http://blog.csdn.net/jiang_xinxing/article/details/58025417`\n\n- Linux 环境\n\n```\n#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。\n`https://get.daocloud.io/toolbox/` (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)\n\n### Docker 常用命令\n```\ndocker search XXX  #查询docker镜像\n```\n\n```\ndocker pull XXX #拉取docker 镜像\n```\n\n```\ndocker images #查看已下载的docker镜像\n```\n\n```\ndocker run XXX #运行docker容器\n```\n\n```\ndocker ps #查看正在运行的docker容器\n```\n\n```\ndocker stop XXX #停止正在运行的容器\n```\n\n```\ndocker rm -f XXX #删除容器\n```\n要想更好的使用Docker和各种技术需要不断充电和探索。\n\n部分图片来自 `http://blog.csdn.net/ghostcloud2016/article/details/62426612`\n","source":"_posts/devops-1-environmental-configuration.md","raw":"---\ntitle: DevOps实践1:基本概念和环境配置\ndate: 2018-02-26 15:14:03\ncategories: DevOps\ntag: Docker\n---\n### 什么是DevOps\n> DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。\n\n![](devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg)\n我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。\n\n### DevOps各个阶段\n1. 第一阶段：流程化\n基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。\n2. 第二阶段：自动化服务（部分）\n基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。\n3. 第三阶段：智能化\n根据实际的业务情况，通过DevOps提升开发、测试、运维效率\n\n![如何一步步实现DevOps](devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg)\n![CI/CD](devops-1-environmental-configuration/191500078c0b39a29f95.jpeg)\n![自动化测试](devops-1-environmental-configuration/1916000764d774a3eee4.jpeg)\n![持续集成](devops-1-environmental-configuration/191700078c8d4238617c.jpeg)\n![微服务最佳实践](devops-1-environmental-configuration/191b000762026287366b.jpeg)\n\n### 工具说明\n目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。\n所需要用到的软件和工具:\n- Jenkins\n- Dokcer\n- IDEA\n- Git\n主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。\n\n### Docker 环境配置\n因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。\n- Windows 环境\n\nDocker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。\n`https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi`\n参考'http://www.widuu.com/docker/installation/windows.html'\n\n\n- Mac 环境\n\nDocker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。\n`https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg`\n可参考：`http://blog.csdn.net/jiang_xinxing/article/details/58025417`\n\n- Linux 环境\n\n```\n#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。\n`https://get.daocloud.io/toolbox/` (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)\n\n### Docker 常用命令\n```\ndocker search XXX  #查询docker镜像\n```\n\n```\ndocker pull XXX #拉取docker 镜像\n```\n\n```\ndocker images #查看已下载的docker镜像\n```\n\n```\ndocker run XXX #运行docker容器\n```\n\n```\ndocker ps #查看正在运行的docker容器\n```\n\n```\ndocker stop XXX #停止正在运行的容器\n```\n\n```\ndocker rm -f XXX #删除容器\n```\n要想更好的使用Docker和各种技术需要不断充电和探索。\n\n部分图片来自 `http://blog.csdn.net/ghostcloud2016/article/details/62426612`\n","slug":"devops-1-environmental-configuration","published":1,"updated":"2018-02-27T06:58:51.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgq000pjms6rco66wmn","content":"<h3 id=\"什么是DevOps\"><a href=\"#什么是DevOps\" class=\"headerlink\" title=\"什么是DevOps\"></a>什么是DevOps</h3><blockquote>\n<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。</p>\n</blockquote>\n<p><img src=\"/2018/02/26/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg\" alt=\"\"><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>\n<h3 id=\"DevOps各个阶段\"><a href=\"#DevOps各个阶段\" class=\"headerlink\" title=\"DevOps各个阶段\"></a>DevOps各个阶段</h3><ol>\n<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>\n<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>\n<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>\n</ol>\n<p><img src=\"/2018/02/26/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg\" alt=\"如何一步步实现DevOps\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg\" alt=\"CI/CD\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg\" alt=\"自动化测试\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/191700078c8d4238617c.jpeg\" alt=\"持续集成\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/191b000762026287366b.jpeg\" alt=\"微服务最佳实践\"></p>\n<h3 id=\"工具说明\"><a href=\"#工具说明\" class=\"headerlink\" title=\"工具说明\"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>\n<ul>\n<li>Jenkins</li>\n<li>Dokcer</li>\n<li>IDEA</li>\n<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>\n</ul>\n<h3 id=\"Docker-环境配置\"><a href=\"#Docker-环境配置\" class=\"headerlink\" title=\"Docker 环境配置\"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>\n<ul>\n<li>Windows 环境</li>\n</ul>\n<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href=\"http://www.widuu.com/docker/installation/windows.html\" target=\"_blank\" rel=\"noopener\">http://www.widuu.com/docker/installation/windows.html</a>‘</p>\n<ul>\n<li>Mac 环境</li>\n</ul>\n<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>\n<ul>\n<li>Linux 环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>\n<h3 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>\n<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>\n<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是DevOps\"><a href=\"#什么是DevOps\" class=\"headerlink\" title=\"什么是DevOps\"></a>什么是DevOps</h3><blockquote>\n<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。</p>\n</blockquote>\n<p><img src=\"/2018/02/26/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg\" alt=\"\"><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>\n<h3 id=\"DevOps各个阶段\"><a href=\"#DevOps各个阶段\" class=\"headerlink\" title=\"DevOps各个阶段\"></a>DevOps各个阶段</h3><ol>\n<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>\n<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>\n<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>\n</ol>\n<p><img src=\"/2018/02/26/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg\" alt=\"如何一步步实现DevOps\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg\" alt=\"CI/CD\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg\" alt=\"自动化测试\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/191700078c8d4238617c.jpeg\" alt=\"持续集成\"><br><img src=\"/2018/02/26/devops-1-environmental-configuration/191b000762026287366b.jpeg\" alt=\"微服务最佳实践\"></p>\n<h3 id=\"工具说明\"><a href=\"#工具说明\" class=\"headerlink\" title=\"工具说明\"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>\n<ul>\n<li>Jenkins</li>\n<li>Dokcer</li>\n<li>IDEA</li>\n<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>\n</ul>\n<h3 id=\"Docker-环境配置\"><a href=\"#Docker-环境配置\" class=\"headerlink\" title=\"Docker 环境配置\"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>\n<ul>\n<li>Windows 环境</li>\n</ul>\n<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href=\"http://www.widuu.com/docker/installation/windows.html\" target=\"_blank\" rel=\"noopener\">http://www.widuu.com/docker/installation/windows.html</a>‘</p>\n<ul>\n<li>Mac 环境</li>\n</ul>\n<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>\n<ul>\n<li>Linux 环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>\n<h3 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>\n<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>\n<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>\n"},{"title":"Docker安装MongoDB(Mongo3.x)","date":"2017-09-23T08:04:51.000Z","_content":"\n### 使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\n\n#### 创建Volume 命名为mongo-data\n``` Shell\ndocker volume create --name mongo-data\n```\n\n#### 拉取镜像\n```\ndocker pull mongo\n```\n\n#### 运行\n```\ndocker run --restart=\"always\" \\\n          -d \\\n          --name mongo\\\n          -p 17017:27017\\\n          -v mongo-data:/data/db\\\n          -v /etc/localtime:/etc/localtime\\\n          mongo:latest --storageEngine wiredTiger -auth\n```\n\n` --storageEngine` MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘\n`-auth` 设置Mongo的权限\n\n#### 进入mongo镜像\n```\ndocker exec -it mongo mongo admin\n```\n\n### 创建用户 user123 密码:123456\n```\ndb.createUser({user: \"user123\",pwd: \"123456\",roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]})\n```\n\n至此，MongDB 安装完成\n","source":"_posts/docker-install-MongoDB.md","raw":"---\ntitle: Docker安装MongoDB(Mongo3.x)\ndate: 2017-09-23 16:04:51\ncategories: Linux\ntag: Docker\n---\n\n### 使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\n\n#### 创建Volume 命名为mongo-data\n``` Shell\ndocker volume create --name mongo-data\n```\n\n#### 拉取镜像\n```\ndocker pull mongo\n```\n\n#### 运行\n```\ndocker run --restart=\"always\" \\\n          -d \\\n          --name mongo\\\n          -p 17017:27017\\\n          -v mongo-data:/data/db\\\n          -v /etc/localtime:/etc/localtime\\\n          mongo:latest --storageEngine wiredTiger -auth\n```\n\n` --storageEngine` MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘\n`-auth` 设置Mongo的权限\n\n#### 进入mongo镜像\n```\ndocker exec -it mongo mongo admin\n```\n\n### 创建用户 user123 密码:123456\n```\ndb.createUser({user: \"user123\",pwd: \"123456\",roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]})\n```\n\n至此，MongDB 安装完成\n","slug":"docker-install-MongoDB","published":1,"updated":"2018-02-09T02:43:40.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgr000tjms6js6w5ahn","content":"<h3 id=\"使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\"><a href=\"#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\" class=\"headerlink\" title=\"使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)</h3><h4 id=\"创建Volume-命名为mongo-data\"><a href=\"#创建Volume-命名为mongo-data\" class=\"headerlink\" title=\"创建Volume 命名为mongo-data\"></a>创建Volume 命名为mongo-data</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=&quot;always&quot; \\</span><br><span class=\"line\">          -d \\</span><br><span class=\"line\">          --name mongo\\</span><br><span class=\"line\">          -p 17017:27017\\</span><br><span class=\"line\">          -v mongo-data:/data/db\\</span><br><span class=\"line\">          -v /etc/localtime:/etc/localtime\\</span><br><span class=\"line\">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>\n<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>\n<h4 id=\"进入mongo镜像\"><a href=\"#进入mongo镜像\" class=\"headerlink\" title=\"进入mongo镜像\"></a>进入mongo镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户-user123-密码-123456\"><a href=\"#创建用户-user123-密码-123456\" class=\"headerlink\" title=\"创建用户 user123 密码:123456\"></a>创建用户 user123 密码:123456</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>\n<p>至此，MongDB 安装完成</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\"><a href=\"#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\" class=\"headerlink\" title=\"使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)</h3><h4 id=\"创建Volume-命名为mongo-data\"><a href=\"#创建Volume-命名为mongo-data\" class=\"headerlink\" title=\"创建Volume 命名为mongo-data\"></a>创建Volume 命名为mongo-data</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=&quot;always&quot; \\</span><br><span class=\"line\">          -d \\</span><br><span class=\"line\">          --name mongo\\</span><br><span class=\"line\">          -p 17017:27017\\</span><br><span class=\"line\">          -v mongo-data:/data/db\\</span><br><span class=\"line\">          -v /etc/localtime:/etc/localtime\\</span><br><span class=\"line\">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>\n<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>\n<h4 id=\"进入mongo镜像\"><a href=\"#进入mongo镜像\" class=\"headerlink\" title=\"进入mongo镜像\"></a>进入mongo镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户-user123-密码-123456\"><a href=\"#创建用户-user123-密码-123456\" class=\"headerlink\" title=\"创建用户 user123 密码:123456\"></a>创建用户 user123 密码:123456</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>\n<p>至此，MongDB 安装完成</p>\n"},{"title":"DevOps实践2:Spring Boot集成Docker环境","date":"2018-02-27T06:56:50.000Z","_content":"> 知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）\n\n我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。\n\n### 创建项目进行集成\n创建一个Spring Boot 项目\n\n![名称](devops-2-springboot-docker-integrated/WX20180227-174110.png)\n\n![web服务](devops-2-springboot-docker-integrated/WX20180227-174208.png)\n\n### 增加项目对Docker的支持\n1. 修改pom.xml配置，增加对应的插件，可以使用Maven进行打包\n``` bash\n#Docker 镜像前缀，放在<properties> 标签中\n <docker.image.prefix>devops</docker.image.prefix>\n```\n2. 添加视图模板支持\n``` xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n3. 增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId>\n``` xml\n<build>\n  <finalName>devops</finalName>  \n  <plugins>\n    <plugin>\n      <groupId>org.springframework.boot</groupId>  \n      <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>  \n    <!-- docker打包 -->  \n    <plugin>\n      <groupId>com.spotify</groupId>  \n      <artifactId>docker-maven-plugin</artifactId>  \n      <version>1.0.0</version>  \n      <configuration>\n        <serverId>docker-hosted</serverId>  \n        <!-- docker仓库地址，用于推送镜像 -->  \n        <registryUrl>${docker.repository}</registryUrl>\n        <!-- 设置为false，避免自动推送镜像 -->\n        <pushImage>false</pushImage>  \n        <!-- Dockerfile路径 -->  \n        <dockerDirectory>src/main/docker</dockerDirectory>  \n        <!-- 构建的镜像名称 -->  \n        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>  \n        <imageTags>\n          <imageTag>latest</imageTag>\n        </imageTags>  \n        <resources>\n          <resource>\n            <targetPath>/</targetPath>  \n            <directory>${project.build.directory}</directory>  \n            <include>${project.build.finalName}.jar</include>\n          </resource>\n        </resources>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n4. 修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）\n``` xml\n<pluginGroups>\n  <pluginGroup>com.spotify</pluginGroup>\n</pluginGroups>\n\n#本地私服的配置\n</profiles>\n <profile>    \n   <id>nexus</id>    \n   <properties>\n   <docker.repository>http://192.168.100.77:8081/repository/docker</docker.repository>\n   </properties>\n </profile>\n</profiles>\n#激活私服配置\n<activeProfiles>    \n  <activeProfile>nexus</activeProfile>    \n</activeProfiles>\n```\n\n上面基本的pom配置就完成了，之后开始配置Docker相关的脚本\n\n### Docker脚本配置\n在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径\n创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本\n``` shell\nFROM java:8  #基本镜像\nVOLUME /tmp  #挂载文件位置，/tmp 为临时目录\nADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口\n```\n\n### 打包、运行镜像\n创建对应的测试文件，打包\n``` shell\nmvn clean package docker:build  # 一气呵成O(∩_∩)O~~\n```\n在运行docker命令前，先确认电脑上的docker环境是否配置成\n``` shell\ndocker version\n# 会有如下显示\nClient:\n Version:\t17.12.0-ce\n API version:\t1.35\n Go version:\tgo1.9.2\n Git commit:\tc97c6d6\n Built:\tWed Dec 27 20:03:51 2017\n OS/Arch:\tdarwin/amd64\n\nServer:\n Engine:\n  Version:\t17.12.0-ce\n  API version:\t1.35 (minimum version 1.12)\n  Go version:\tgo1.9.2\n  Git commit:\tc97c6d6\n  Built:\tWed Dec 27 20:12:29 2017\n  OS/Arch:\tlinux/amd64\n  Experimental:\ttrue\n```\n上面说明Docker是正常启动的\n\n然后查看镜像\n``` shell\ndocker images\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203234.png)\n上图说明我们的镜像打包成功\n然后运行一下，检查镜像是否能够正常启动\n``` shell\n#启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像\ndocker run -d  -p 8080:8080 --name devops devops/devops:latest\n#执行docker ps 查看镜像是否运行\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203815.png)\n如果，说明服务是正常启动了，之后请求\n[http://localhost:8080/index?name=World](http://localhost:8080/index?name=World)\n![web服务](devops-2-springboot-docker-integrated/WX20180227-204116.png)\n能够请求成功，说明镜像部署成功\n\n### 停止释放镜像\n``` shell\n# 养成好习惯，停止释放镜像\ndocker stop 2026e45bc2ce\ndocker rm 2026e45bc2ce\n```\n\n代码可在[https://github.com/junhuali/devops-springboot](https://github.com/junhuali/devops-springboot) 下载\n","source":"_posts/devops-2-springboot-docker-integrated.md","raw":"---\ntitle: DevOps实践2:Spring Boot集成Docker环境\ndate: 2018-02-27 14:56:50\ncategories: DevOps\ntag:\n   - Docker\n   - SpringBoot\n   - Maven\n---\n> 知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）\n\n我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。\n\n### 创建项目进行集成\n创建一个Spring Boot 项目\n\n![名称](devops-2-springboot-docker-integrated/WX20180227-174110.png)\n\n![web服务](devops-2-springboot-docker-integrated/WX20180227-174208.png)\n\n### 增加项目对Docker的支持\n1. 修改pom.xml配置，增加对应的插件，可以使用Maven进行打包\n``` bash\n#Docker 镜像前缀，放在<properties> 标签中\n <docker.image.prefix>devops</docker.image.prefix>\n```\n2. 添加视图模板支持\n``` xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n3. 增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId>\n``` xml\n<build>\n  <finalName>devops</finalName>  \n  <plugins>\n    <plugin>\n      <groupId>org.springframework.boot</groupId>  \n      <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>  \n    <!-- docker打包 -->  \n    <plugin>\n      <groupId>com.spotify</groupId>  \n      <artifactId>docker-maven-plugin</artifactId>  \n      <version>1.0.0</version>  \n      <configuration>\n        <serverId>docker-hosted</serverId>  \n        <!-- docker仓库地址，用于推送镜像 -->  \n        <registryUrl>${docker.repository}</registryUrl>\n        <!-- 设置为false，避免自动推送镜像 -->\n        <pushImage>false</pushImage>  \n        <!-- Dockerfile路径 -->  \n        <dockerDirectory>src/main/docker</dockerDirectory>  \n        <!-- 构建的镜像名称 -->  \n        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>  \n        <imageTags>\n          <imageTag>latest</imageTag>\n        </imageTags>  \n        <resources>\n          <resource>\n            <targetPath>/</targetPath>  \n            <directory>${project.build.directory}</directory>  \n            <include>${project.build.finalName}.jar</include>\n          </resource>\n        </resources>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n4. 修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）\n``` xml\n<pluginGroups>\n  <pluginGroup>com.spotify</pluginGroup>\n</pluginGroups>\n\n#本地私服的配置\n</profiles>\n <profile>    \n   <id>nexus</id>    \n   <properties>\n   <docker.repository>http://192.168.100.77:8081/repository/docker</docker.repository>\n   </properties>\n </profile>\n</profiles>\n#激活私服配置\n<activeProfiles>    \n  <activeProfile>nexus</activeProfile>    \n</activeProfiles>\n```\n\n上面基本的pom配置就完成了，之后开始配置Docker相关的脚本\n\n### Docker脚本配置\n在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径\n创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本\n``` shell\nFROM java:8  #基本镜像\nVOLUME /tmp  #挂载文件位置，/tmp 为临时目录\nADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口\n```\n\n### 打包、运行镜像\n创建对应的测试文件，打包\n``` shell\nmvn clean package docker:build  # 一气呵成O(∩_∩)O~~\n```\n在运行docker命令前，先确认电脑上的docker环境是否配置成\n``` shell\ndocker version\n# 会有如下显示\nClient:\n Version:\t17.12.0-ce\n API version:\t1.35\n Go version:\tgo1.9.2\n Git commit:\tc97c6d6\n Built:\tWed Dec 27 20:03:51 2017\n OS/Arch:\tdarwin/amd64\n\nServer:\n Engine:\n  Version:\t17.12.0-ce\n  API version:\t1.35 (minimum version 1.12)\n  Go version:\tgo1.9.2\n  Git commit:\tc97c6d6\n  Built:\tWed Dec 27 20:12:29 2017\n  OS/Arch:\tlinux/amd64\n  Experimental:\ttrue\n```\n上面说明Docker是正常启动的\n\n然后查看镜像\n``` shell\ndocker images\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203234.png)\n上图说明我们的镜像打包成功\n然后运行一下，检查镜像是否能够正常启动\n``` shell\n#启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像\ndocker run -d  -p 8080:8080 --name devops devops/devops:latest\n#执行docker ps 查看镜像是否运行\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203815.png)\n如果，说明服务是正常启动了，之后请求\n[http://localhost:8080/index?name=World](http://localhost:8080/index?name=World)\n![web服务](devops-2-springboot-docker-integrated/WX20180227-204116.png)\n能够请求成功，说明镜像部署成功\n\n### 停止释放镜像\n``` shell\n# 养成好习惯，停止释放镜像\ndocker stop 2026e45bc2ce\ndocker rm 2026e45bc2ce\n```\n\n代码可在[https://github.com/junhuali/devops-springboot](https://github.com/junhuali/devops-springboot) 下载\n","slug":"devops-2-springboot-docker-integrated","published":1,"updated":"2018-02-27T12:53:49.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgs000vjms6cm1vlmpc","content":"<blockquote>\n<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>\n</blockquote>\n<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。</p>\n<h3 id=\"创建项目进行集成\"><a href=\"#创建项目进行集成\" class=\"headerlink\" title=\"创建项目进行集成\"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174110.png\" alt=\"名称\"></p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174208.png\" alt=\"web服务\"></p>\n<h3 id=\"增加项目对Docker的支持\"><a href=\"#增加项目对Docker的支持\" class=\"headerlink\" title=\"增加项目对Docker的支持\"></a>增加项目对Docker的支持</h3><ol>\n<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class=\"line\"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加视图模板支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupid>com.spotify</groupid></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>devops<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- docker打包 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serverId</span>&gt;</span>docker-hosted<span class=\"tag\">&lt;/<span class=\"name\">serverId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class=\"tag\">&lt;/<span class=\"name\">registryUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pushImage</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">pushImage</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroup</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">pluginGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#本地私服的配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class=\"tag\">&lt;/<span class=\"name\">docker.repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">#激活私服配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>\n<h3 id=\"Docker脚本配置\"><a href=\"#Docker脚本配置\" class=\"headerlink\" title=\"Docker脚本配置\"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8  #基本镜像</span><br><span class=\"line\">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class=\"line\">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class=\"line\">ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"打包、运行镜像\"><a href=\"#打包、运行镜像\" class=\"headerlink\" title=\"打包、运行镜像\"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure></p>\n<p>在运行docker命令前，先确认电脑上的docker环境是否配置成<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 会有如下显示</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:\t17.12.0-ce</span><br><span class=\"line\"> API version:\t1.35</span><br><span class=\"line\"> Go version:\tgo1.9.2</span><br><span class=\"line\"> Git commit:\tc97c6d6</span><br><span class=\"line\"> Built:\tWed Dec 27 20:03:51 2017</span><br><span class=\"line\"> OS/Arch:\tdarwin/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:\t17.12.0-ce</span><br><span class=\"line\">  API version:\t1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:\tgo1.9.2</span><br><span class=\"line\">  Git commit:\tc97c6d6</span><br><span class=\"line\">  Built:\tWed Dec 27 20:12:29 2017</span><br><span class=\"line\">  OS/Arch:\tlinux/amd64</span><br><span class=\"line\">  Experimental:\ttrue</span><br></pre></td></tr></table></figure></p>\n<p>上面说明Docker是正常启动的</p>\n<p>然后查看镜像<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203234.png\" alt=\"web服务\"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class=\"line\">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203815.png\" alt=\"web服务\"><br>如果，说明服务是正常启动了，之后请求<br><a href=\"http://localhost:8080/index?name=World\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index?name=World</a><br><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-204116.png\" alt=\"web服务\"><br>能够请求成功，说明镜像部署成功</p>\n<h3 id=\"停止释放镜像\"><a href=\"#停止释放镜像\" class=\"headerlink\" title=\"停止释放镜像\"></a>停止释放镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 养成好习惯，停止释放镜像</span></span><br><span class=\"line\">docker stop 2026e45bc2ce</span><br><span class=\"line\">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>\n<p>代码可在<a href=\"https://github.com/junhuali/devops-springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/junhuali/devops-springboot</a> 下载</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>\n</blockquote>\n<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。</p>\n<h3 id=\"创建项目进行集成\"><a href=\"#创建项目进行集成\" class=\"headerlink\" title=\"创建项目进行集成\"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174110.png\" alt=\"名称\"></p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174208.png\" alt=\"web服务\"></p>\n<h3 id=\"增加项目对Docker的支持\"><a href=\"#增加项目对Docker的支持\" class=\"headerlink\" title=\"增加项目对Docker的支持\"></a>增加项目对Docker的支持</h3><ol>\n<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class=\"line\"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加视图模板支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupid>com.spotify</groupid></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>devops<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- docker打包 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serverId</span>&gt;</span>docker-hosted<span class=\"tag\">&lt;/<span class=\"name\">serverId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class=\"tag\">&lt;/<span class=\"name\">registryUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pushImage</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">pushImage</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroup</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">pluginGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#本地私服的配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class=\"tag\">&lt;/<span class=\"name\">docker.repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">#激活私服配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>\n<h3 id=\"Docker脚本配置\"><a href=\"#Docker脚本配置\" class=\"headerlink\" title=\"Docker脚本配置\"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8  #基本镜像</span><br><span class=\"line\">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class=\"line\">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class=\"line\">ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"打包、运行镜像\"><a href=\"#打包、运行镜像\" class=\"headerlink\" title=\"打包、运行镜像\"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure></p>\n<p>在运行docker命令前，先确认电脑上的docker环境是否配置成<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 会有如下显示</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:\t17.12.0-ce</span><br><span class=\"line\"> API version:\t1.35</span><br><span class=\"line\"> Go version:\tgo1.9.2</span><br><span class=\"line\"> Git commit:\tc97c6d6</span><br><span class=\"line\"> Built:\tWed Dec 27 20:03:51 2017</span><br><span class=\"line\"> OS/Arch:\tdarwin/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:\t17.12.0-ce</span><br><span class=\"line\">  API version:\t1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:\tgo1.9.2</span><br><span class=\"line\">  Git commit:\tc97c6d6</span><br><span class=\"line\">  Built:\tWed Dec 27 20:12:29 2017</span><br><span class=\"line\">  OS/Arch:\tlinux/amd64</span><br><span class=\"line\">  Experimental:\ttrue</span><br></pre></td></tr></table></figure></p>\n<p>上面说明Docker是正常启动的</p>\n<p>然后查看镜像<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203234.png\" alt=\"web服务\"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class=\"line\">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203815.png\" alt=\"web服务\"><br>如果，说明服务是正常启动了，之后请求<br><a href=\"http://localhost:8080/index?name=World\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index?name=World</a><br><img src=\"/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-204116.png\" alt=\"web服务\"><br>能够请求成功，说明镜像部署成功</p>\n<h3 id=\"停止释放镜像\"><a href=\"#停止释放镜像\" class=\"headerlink\" title=\"停止释放镜像\"></a>停止释放镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 养成好习惯，停止释放镜像</span></span><br><span class=\"line\">docker stop 2026e45bc2ce</span><br><span class=\"line\">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>\n<p>代码可在<a href=\"https://github.com/junhuali/devops-springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/junhuali/devops-springboot</a> 下载</p>\n"},{"title":"Docker 搭建Nexus 私服","date":"2017-09-30T05:46:02.000Z","_content":"### 创建数据卷\n``` shell\ndocker volume create --name nexus-data\n```\n### 拉取Nexus 镜像\n``` shell\ndocker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n### 访问网址打开(账号/密码   admin/admin123)\nhttp://localhost:8081\n\n参考https://hub.docker.com/r/sonatype/nexus3/\n","source":"_posts/docker-install-nexus.md","raw":"---\ntitle: Docker 搭建Nexus 私服\ndate: 2017-09-30 13:46:02\ncategories: Linux\ntag: Docker\n---\n### 创建数据卷\n``` shell\ndocker volume create --name nexus-data\n```\n### 拉取Nexus 镜像\n``` shell\ndocker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n### 访问网址打开(账号/密码   admin/admin123)\nhttp://localhost:8081\n\n参考https://hub.docker.com/r/sonatype/nexus3/\n","slug":"docker-install-nexus","published":1,"updated":"2018-02-09T02:43:39.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgt000xjms675z2kr8f","content":"<h3 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取Nexus-镜像\"><a href=\"#拉取Nexus-镜像\" class=\"headerlink\" title=\"拉取Nexus 镜像\"></a>拉取Nexus 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问网址打开-账号-密码-admin-admin123\"><a href=\"#访问网址打开-账号-密码-admin-admin123\" class=\"headerlink\" title=\"访问网址打开(账号/密码   admin/admin123)\"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></p>\n<p>参考<a href=\"https://hub.docker.com/r/sonatype/nexus3/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus3/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"拉取Nexus-镜像\"><a href=\"#拉取Nexus-镜像\" class=\"headerlink\" title=\"拉取Nexus 镜像\"></a>拉取Nexus 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问网址打开-账号-密码-admin-admin123\"><a href=\"#访问网址打开-账号-密码-admin-admin123\" class=\"headerlink\" title=\"访问网址打开(账号/密码   admin/admin123)\"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></p>\n<p>参考<a href=\"https://hub.docker.com/r/sonatype/nexus3/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus3/</a></p>\n"},{"title":"Docker 安装 RabbitMQ 集群","date":"2017-12-04T02:31:55.000Z","_content":"Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。\n### 安装docker-compose\n- 检查是否安装过docker-compose\n``` bash\n$ docker-compose -v #出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功\n```\n- 如果没有安装docker-compose，进行安装\n``` bash\n#服务器安装\n$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n- 在windows 和 Mac 下载对应的安装包进行安装\n[Windows下载地址](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)\n[Mac下载地址](https://download.docker.com/mac/stable/Docker.dmg)\n\n### 下载对应的脚本\n``` bash\n$ git clone https://github.com/bijukunjummen/docker-rabbitmq-cluster.git\n```\n### 启动\n``` bash\n$ cd docker-rabbitmq-cluster/cluster/\n$ docker-compose up -d #启动\n```\n### 备注\n- 登录的账号密码（可以自行在脚本里面修改）\nuser: myuser\npassword: mypass\n然后访问`localhost:15672`进行访问\n\n以上使用bijukunjummen 的脚本，可参见[github](https://github.com/bijukunjummen/docker-rabbitmq-cluster)\n以及[daocloud](http://get.daocloud.io/#install-docker) docker-compose脚本\n","source":"_posts/docker-install-rabbitmq-cluster.md","raw":"---\ntitle: Docker 安装 RabbitMQ 集群\ndate: 2017-12-04 10:31:55\ncategories: Linux\ntag: Docker\n---\nDocker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。\n### 安装docker-compose\n- 检查是否安装过docker-compose\n``` bash\n$ docker-compose -v #出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功\n```\n- 如果没有安装docker-compose，进行安装\n``` bash\n#服务器安装\n$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n- 在windows 和 Mac 下载对应的安装包进行安装\n[Windows下载地址](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)\n[Mac下载地址](https://download.docker.com/mac/stable/Docker.dmg)\n\n### 下载对应的脚本\n``` bash\n$ git clone https://github.com/bijukunjummen/docker-rabbitmq-cluster.git\n```\n### 启动\n``` bash\n$ cd docker-rabbitmq-cluster/cluster/\n$ docker-compose up -d #启动\n```\n### 备注\n- 登录的账号密码（可以自行在脚本里面修改）\nuser: myuser\npassword: mypass\n然后访问`localhost:15672`进行访问\n\n以上使用bijukunjummen 的脚本，可参见[github](https://github.com/bijukunjummen/docker-rabbitmq-cluster)\n以及[daocloud](http://get.daocloud.io/#install-docker) docker-compose脚本\n","slug":"docker-install-rabbitmq-cluster","published":1,"updated":"2018-02-09T02:43:38.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgv0012jms66uvm4e5t","content":"<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。</p>\n<h3 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h3><ul>\n<li><p>检查是否安装过docker-compose</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose -v <span class=\"comment\">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果没有安装docker-compose，进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#服务器安装</span></span><br><span class=\"line\">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在windows 和 Mac 下载对应的安装包进行安装<br><a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a><br><a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">Mac下载地址</a></p>\n</li>\n</ul>\n<h3 id=\"下载对应的脚本\"><a href=\"#下载对应的脚本\" class=\"headerlink\" title=\"下载对应的脚本\"></a>下载对应的脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class=\"line\">$ docker-compose up -d <span class=\"comment\">#启动</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>\n</ul>\n<p>以上使用bijukunjummen 的脚本，可参见<a href=\"https://github.com/bijukunjummen/docker-rabbitmq-cluster\" target=\"_blank\" rel=\"noopener\">github</a><br>以及<a href=\"http://get.daocloud.io/#install-docker\" target=\"_blank\" rel=\"noopener\">daocloud</a> docker-compose脚本</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。</p>\n<h3 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h3><ul>\n<li><p>检查是否安装过docker-compose</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose -v <span class=\"comment\">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果没有安装docker-compose，进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#服务器安装</span></span><br><span class=\"line\">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在windows 和 Mac 下载对应的安装包进行安装<br><a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a><br><a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">Mac下载地址</a></p>\n</li>\n</ul>\n<h3 id=\"下载对应的脚本\"><a href=\"#下载对应的脚本\" class=\"headerlink\" title=\"下载对应的脚本\"></a>下载对应的脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class=\"line\">$ docker-compose up -d <span class=\"comment\">#启动</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>\n</ul>\n<p>以上使用bijukunjummen 的脚本，可参见<a href=\"https://github.com/bijukunjummen/docker-rabbitmq-cluster\" target=\"_blank\" rel=\"noopener\">github</a><br>以及<a href=\"http://get.daocloud.io/#install-docker\" target=\"_blank\" rel=\"noopener\">daocloud</a> docker-compose脚本</p>\n"},{"title":"Docker 创建MySQL","date":"2018-01-17T05:24:31.000Z","_content":"### 不要在生产环境中使用，在开发和测试阶段使用比较方便\n\n### 拉取镜像\n``` shell\ndocker pull mysql\n```\n### 创建volume （比较方便，用完方便删除）\n``` shell\ndocker volume create --name mysql-data\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/localtime:/etc/localtime \\\n  -p 0.0.0.0:3306:3306 --name mysql \\\n  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\\n  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n`restart=\"always\"` docker 重启后自动启动\n` /etc/localtime:/etc/localtime` 解决mysql 时区问题\n`MYSQL_ROOT_PASSWORD` 设置你自己的密码，默认用户名root\n`--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci` 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定\n","source":"_posts/docker-create-mysql.md","raw":"---\ntitle: Docker 创建MySQL\ndate: 2018-01-17 13:24:31\ncategories: Linux\ntags: Docker\n---\n### 不要在生产环境中使用，在开发和测试阶段使用比较方便\n\n### 拉取镜像\n``` shell\ndocker pull mysql\n```\n### 创建volume （比较方便，用完方便删除）\n``` shell\ndocker volume create --name mysql-data\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/localtime:/etc/localtime \\\n  -p 0.0.0.0:3306:3306 --name mysql \\\n  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\\n  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n`restart=\"always\"` docker 重启后自动启动\n` /etc/localtime:/etc/localtime` 解决mysql 时区问题\n`MYSQL_ROOT_PASSWORD` 设置你自己的密码，默认用户名root\n`--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci` 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定\n","slug":"docker-create-mysql","published":1,"updated":"2018-02-09T05:26:39.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgw0014jms6p9xnt3ea","content":"<h3 id=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"><a href=\"#不要在生产环境中使用，在开发和测试阶段使用比较方便\" class=\"headerlink\" title=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便</h3><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建volume-（比较方便，用完方便删除）\"><a href=\"#创建volume-（比较方便，用完方便删除）\" class=\"headerlink\" title=\"创建volume （比较方便，用完方便删除）\"></a>创建volume （比较方便，用完方便删除）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">  -p 0.0.0.0:3306:3306 --name mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\</span><br><span class=\"line\">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"><a href=\"#不要在生产环境中使用，在开发和测试阶段使用比较方便\" class=\"headerlink\" title=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便</h3><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建volume-（比较方便，用完方便删除）\"><a href=\"#创建volume-（比较方便，用完方便删除）\" class=\"headerlink\" title=\"创建volume （比较方便，用完方便删除）\"></a>创建volume （比较方便，用完方便删除）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">  -p 0.0.0.0:3306:3306 --name mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\</span><br><span class=\"line\">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>\n"},{"title":"Cannot find module './build/Release/DTraceProviderBindings'","date":"2017-09-30T10:03:00.000Z","_content":"有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩_∩)O哈哈~_)\n报错如下：\n``` log\n{ Error: Cannot find module './build/Release/DTraceProviderBindings'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:476:23)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)\n    at Module._compile (module.js:624:30) code: 'MODULE_NOT_FOUND' }\nINFO  Deleted database.\n```\n上面的错误看的非常的影响心情有木有？\n\n找了网上的很多方法，最后选择了一种比较粗暴的方法\n删除hexo目录下的`node_modules`目录，之后执行以下命令：\n``` shell\nnpm install --registry=https://registry.npm.taobao.org\n```\n然后执行hexo server，就会惊喜的发现错误没有了 O(∩_∩)O~~_)\n","source":"_posts/hexo-can't-find-module.md","raw":"---\ntitle: Cannot find module './build/Release/DTraceProviderBindings'\ndate: 2017-09-30 18:03:00\ncategories: Linux\ntag: hexo\n---\n有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩_∩)O哈哈~_)\n报错如下：\n``` log\n{ Error: Cannot find module './build/Release/DTraceProviderBindings'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:476:23)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)\n    at Module._compile (module.js:624:30) code: 'MODULE_NOT_FOUND' }\nINFO  Deleted database.\n```\n上面的错误看的非常的影响心情有木有？\n\n找了网上的很多方法，最后选择了一种比较粗暴的方法\n删除hexo目录下的`node_modules`目录，之后执行以下命令：\n``` shell\nnpm install --registry=https://registry.npm.taobao.org\n```\n然后执行hexo server，就会惊喜的发现错误没有了 O(∩_∩)O~~_)\n","slug":"hexo-can't-find-module","published":1,"updated":"2018-02-09T02:43:36.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgy0018jms61jlgd028","content":"<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>)<br>报错如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br><span class=\"line\">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class=\"line\">    at Function.Module._load (module.js:476:23)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)</span><br><span class=\"line\">    at Module._compile (module.js:624:30) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">INFO  Deleted database.</span><br></pre></td></tr></table></figure></p>\n<p>上面的错误看的非常的影响心情有木有？</p>\n<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>)<br>报错如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br><span class=\"line\">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class=\"line\">    at Function.Module._load (module.js:476:23)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)</span><br><span class=\"line\">    at Module._compile (module.js:624:30) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">INFO  Deleted database.</span><br></pre></td></tr></table></figure></p>\n<p>上面的错误看的非常的影响心情有木有？</p>\n<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>\n"},{"title":"使用kubeadm安装kubernetes集群(待续)","date":"2017-12-02T08:57:06.000Z","_content":"因为国内服务器无法访问google，所以服务器需要科学上网\n可以看我之前的文章，服务器科学上网\n### 安装docker\n建议使用daocloud提供的脚本进行安装，速度很快\n``` bash\n$ curl -sSL https://get.daocloud.io/docker | sh #适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源\n$ systemctl enable docker && systemctl start docker #设置开机启动，启动docker\n```\n### 安装kubeadm, kubelet and kubectl\n``` bash\n$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n$ setenforce 0 #关闭SELinux\n$ yum install -y kubelet kubeadm kubectl\n$ systemctl enable kubelet && systemctl start kubelet # 设置开机启动，启动\n```\n安装的过程有失败，提示执行yum --enablerepo=kubernetes clean metadata\n``` bash\n$ yum --enablerepo=kubernetes clean metadata # 如果还是不行，需要先清理缓存\n$ yum clean metadata\n$ yum clean all\n$ rm -rf /var/cache/yum\n```\n### 使用 kubeadm 创建集群\n``` bash\n$ kubeadm init #初始化\n```\n待续。。。\n","source":"_posts/kubeadm-install-kubernetes.md","raw":"---\ntitle: 使用kubeadm安装kubernetes集群(待续)\ndate: 2017-12-02 16:57:06\ncategories: Linux\ntag: Docker\n---\n因为国内服务器无法访问google，所以服务器需要科学上网\n可以看我之前的文章，服务器科学上网\n### 安装docker\n建议使用daocloud提供的脚本进行安装，速度很快\n``` bash\n$ curl -sSL https://get.daocloud.io/docker | sh #适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源\n$ systemctl enable docker && systemctl start docker #设置开机启动，启动docker\n```\n### 安装kubeadm, kubelet and kubectl\n``` bash\n$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n$ setenforce 0 #关闭SELinux\n$ yum install -y kubelet kubeadm kubectl\n$ systemctl enable kubelet && systemctl start kubelet # 设置开机启动，启动\n```\n安装的过程有失败，提示执行yum --enablerepo=kubernetes clean metadata\n``` bash\n$ yum --enablerepo=kubernetes clean metadata # 如果还是不行，需要先清理缓存\n$ yum clean metadata\n$ yum clean all\n$ rm -rf /var/cache/yum\n```\n### 使用 kubeadm 创建集群\n``` bash\n$ kubeadm init #初始化\n```\n待续。。。\n","slug":"kubeadm-install-kubernetes","published":1,"updated":"2018-02-09T02:43:35.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zgy001bjms6u6hzfry8","content":"<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网</p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.daocloud.io/docker | sh <span class=\"comment\">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker <span class=\"comment\">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装kubeadm-kubelet-and-kubectl\"><a href=\"#安装kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"安装kubeadm, kubelet and kubectl\"></a>安装kubeadm, kubelet and kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\">#关闭SELinux</span></span><br><span class=\"line\">$ yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class=\"comment\"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>\n<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --enablerepo=kubernetes clean metadata <span class=\"comment\"># 如果还是不行，需要先清理缓存</span></span><br><span class=\"line\">$ yum clean metadata</span><br><span class=\"line\">$ yum clean all</span><br><span class=\"line\">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-kubeadm-创建集群\"><a href=\"#使用-kubeadm-创建集群\" class=\"headerlink\" title=\"使用 kubeadm 创建集群\"></a>使用 kubeadm 创建集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init <span class=\"comment\">#初始化</span></span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网</p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.daocloud.io/docker | sh <span class=\"comment\">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker <span class=\"comment\">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装kubeadm-kubelet-and-kubectl\"><a href=\"#安装kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"安装kubeadm, kubelet and kubectl\"></a>安装kubeadm, kubelet and kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\">#关闭SELinux</span></span><br><span class=\"line\">$ yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class=\"comment\"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>\n<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --enablerepo=kubernetes clean metadata <span class=\"comment\"># 如果还是不行，需要先清理缓存</span></span><br><span class=\"line\">$ yum clean metadata</span><br><span class=\"line\">$ yum clean all</span><br><span class=\"line\">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-kubeadm-创建集群\"><a href=\"#使用-kubeadm-创建集群\" class=\"headerlink\" title=\"使用 kubeadm 创建集群\"></a>使用 kubeadm 创建集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init <span class=\"comment\">#初始化</span></span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n"},{"title":"生活","date":"2017-09-23T05:48:08.000Z","_content":"\n\n### 日常生活趣事记录\n","source":"_posts/life.md","raw":"---\ntitle: 生活\ndate: 2017-09-23 13:48:08\ncategories: Other\ntag: Docker\n---\n\n\n### 日常生活趣事记录\n","slug":"life","published":1,"updated":"2018-02-09T02:43:34.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh0001fjms6i7q8fzci","content":"<h3 id=\"日常生活趣事记录\"><a href=\"#日常生活趣事记录\" class=\"headerlink\" title=\"日常生活趣事记录\"></a>日常生活趣事记录</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"日常生活趣事记录\"><a href=\"#日常生活趣事记录\" class=\"headerlink\" title=\"日常生活趣事记录\"></a>日常生活趣事记录</h3>"},{"title":"gitee码云使用webhook","date":"2018-02-25T06:57:34.000Z","_content":"### 原因\n我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。\n### 什么是webhook\n>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。\n\n>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。\n\n### 配置webhook\n知道什么是webhook 后我们就要开始配置我们自己的项目了。\n环境：\n   CentOS7\n   Gitee（网上GitHub的教程比较多，这个基于码云）\n- 配置项目公私钥\n1. 生产公钥\n``` bash\nssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n# Generating public/private rsa key pair...\n# 三次回车即可生成 ssh key\n```\n2. 查看公钥\n``` bash\ncat ~/.ssh/id_rsa.pub\n# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n```\n3. 添加公钥\n![步骤](gitee-with-webhook/image-2018-153940@2x.png)\n4. 测试\n``` bash\nssh -T git@gitee.com\nWelcome to Gitee.com, yourname! # 返回，说明正常\n```\n\n- 配置服务器node环境\n1. 安装nvm，服务器上使用nvm 方便多版本node切换\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\nsource /etc/profile\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\n```\n2. 配置相关的脚本\n安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)\n``` bash\nmkdir /opt/webhook #创建目录\ncd /opt/webhook\nnpm install -g gitee-webhook-handler # 当前的版本为v0.1.2\n```\n3. 创建对应的webhook服务\n``` bash\nvim webhook.js\n\nvar http = require('http')\nvar createHandler = require('gitee-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: '123456' })# post 所需要用到的秘钥\n\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('Push Hook', function (event) {  # 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });# 需要执行的脚本位置\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666) # 服务监听的端口，可以自行修改\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n4. 创建需要执行的脚本\n``` bash\nvim deploy.sh\ngit pull xxxxx  # 根据自己的需要自行编写\n```\n5. 测试服务\n![](gitee-with-webhook/WX20180225-163439@2x.png)\n![](gitee-with-webhook/WX20180225-163748@2x.png)\n显示ok，说明成功\n\n### 使用pm2应用进程管理器\n使用node 启动服务不是很方便，推荐使用pm2\n``` bash\nnpm install -g pm2\npm2 start webhook.js\npm2 monit # 可以通过此命令查看服务的状态\n```\n![](gitee-with-webhook/WX20180225-164721@2x.png)\n上图显示了一些应用的基本信息，可以更好的观察到服务的状态\n\n### 结束\n配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。\n\n\n参考：https://www.npmjs.com/package/gitee-webhook-handler\n","source":"_posts/gitee-with-webhook.md","raw":"---\ntitle: gitee码云使用webhook\ndate: 2018-02-25 14:57:34\ncategories: Linux\ntags: Linux\n---\n### 原因\n我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。\n### 什么是webhook\n>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。\n\n>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。\n\n### 配置webhook\n知道什么是webhook 后我们就要开始配置我们自己的项目了。\n环境：\n   CentOS7\n   Gitee（网上GitHub的教程比较多，这个基于码云）\n- 配置项目公私钥\n1. 生产公钥\n``` bash\nssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n# Generating public/private rsa key pair...\n# 三次回车即可生成 ssh key\n```\n2. 查看公钥\n``` bash\ncat ~/.ssh/id_rsa.pub\n# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n```\n3. 添加公钥\n![步骤](gitee-with-webhook/image-2018-153940@2x.png)\n4. 测试\n``` bash\nssh -T git@gitee.com\nWelcome to Gitee.com, yourname! # 返回，说明正常\n```\n\n- 配置服务器node环境\n1. 安装nvm，服务器上使用nvm 方便多版本node切换\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\nsource /etc/profile\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\n```\n2. 配置相关的脚本\n安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)\n``` bash\nmkdir /opt/webhook #创建目录\ncd /opt/webhook\nnpm install -g gitee-webhook-handler # 当前的版本为v0.1.2\n```\n3. 创建对应的webhook服务\n``` bash\nvim webhook.js\n\nvar http = require('http')\nvar createHandler = require('gitee-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: '123456' })# post 所需要用到的秘钥\n\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('Push Hook', function (event) {  # 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });# 需要执行的脚本位置\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666) # 服务监听的端口，可以自行修改\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n4. 创建需要执行的脚本\n``` bash\nvim deploy.sh\ngit pull xxxxx  # 根据自己的需要自行编写\n```\n5. 测试服务\n![](gitee-with-webhook/WX20180225-163439@2x.png)\n![](gitee-with-webhook/WX20180225-163748@2x.png)\n显示ok，说明成功\n\n### 使用pm2应用进程管理器\n使用node 启动服务不是很方便，推荐使用pm2\n``` bash\nnpm install -g pm2\npm2 start webhook.js\npm2 monit # 可以通过此命令查看服务的状态\n```\n![](gitee-with-webhook/WX20180225-164721@2x.png)\n上图显示了一些应用的基本信息，可以更好的观察到服务的状态\n\n### 结束\n配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。\n\n\n参考：https://www.npmjs.com/package/gitee-webhook-handler\n","slug":"gitee-with-webhook","published":1,"updated":"2018-02-25T09:04:46.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh1001ijms6scdfjhk0","content":"<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。</p>\n<h3 id=\"什么是webhook\"><a href=\"#什么是webhook\" class=\"headerlink\" title=\"什么是webhook\"></a>什么是webhook</h3><blockquote>\n<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>\n<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>\n</blockquote>\n<h3 id=\"配置webhook\"><a href=\"#配置webhook\" class=\"headerlink\" title=\"配置webhook\"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>\n<ul>\n<li>配置项目公私钥</li>\n</ul>\n<ol>\n<li><p>生产公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xxxxx@xxxxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair...</span></span><br><span class=\"line\"><span class=\"comment\"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加公钥<br><img src=\"/2018/02/25/gitee-with-webhook/image-2018-153940@2x.png\" alt=\"步骤\"></p>\n</li>\n<li>测试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">Welcome to Gitee.com, yourname! <span class=\"comment\"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>配置服务器node环境</li>\n</ul>\n<ol>\n<li><p>安装nvm，服务器上使用nvm 方便多版本node切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/webhook <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/webhook</span><br><span class=\"line\">npm install -g gitee-webhook-handler <span class=\"comment\"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对应的webhook服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim webhook.js</span><br><span class=\"line\"></span><br><span class=\"line\">var http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">var createHandler = require(<span class=\"string\">'gitee-webhook-handler'</span>)</span><br><span class=\"line\">var handler = createHandler(&#123; path: <span class=\"string\">'/webhooks_push'</span>, secret: <span class=\"string\">'123456'</span> &#125;)<span class=\"comment\"># post 所需要用到的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(<span class=\"string\">'Push Hook'</span>, <span class=\"keyword\">function</span> (event) &#123;  <span class=\"comment\"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class=\"line\">  console.log(<span class=\"string\">'Received a push event for %s to %s'</span>,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(<span class=\"string\">'sh'</span>, [<span class=\"string\">'./deploy.sh'</span>], <span class=\"keyword\">function</span>(text)&#123; console.log(text) &#125;);<span class=\"comment\"># 需要执行的脚本位置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(<span class=\"keyword\">function</span> (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(<span class=\"string\">'no such location'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666) <span class=\"comment\"># 服务监听的端口，可以自行修改</span></span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建需要执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.sh</span><br><span class=\"line\">git pull xxxxx  <span class=\"comment\"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试服务<br><img src=\"/2018/02/25/gitee-with-webhook/WX20180225-163439@2x.png\" alt=\"\"><br><img src=\"/2018/02/25/gitee-with-webhook/WX20180225-163748@2x.png\" alt=\"\"><br>显示ok，说明成功</p>\n</li>\n</ol>\n<h3 id=\"使用pm2应用进程管理器\"><a href=\"#使用pm2应用进程管理器\" class=\"headerlink\" title=\"使用pm2应用进程管理器\"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 start webhook.js</span><br><span class=\"line\">pm2 monit <span class=\"comment\"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/25/gitee-with-webhook/WX20180225-164721@2x.png\" alt=\"\"><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>\n<p>参考：<a href=\"https://www.npmjs.com/package/gitee-webhook-handler\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/gitee-webhook-handler</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。</p>\n<h3 id=\"什么是webhook\"><a href=\"#什么是webhook\" class=\"headerlink\" title=\"什么是webhook\"></a>什么是webhook</h3><blockquote>\n<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>\n<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>\n</blockquote>\n<h3 id=\"配置webhook\"><a href=\"#配置webhook\" class=\"headerlink\" title=\"配置webhook\"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>\n<ul>\n<li>配置项目公私钥</li>\n</ul>\n<ol>\n<li><p>生产公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xxxxx@xxxxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair...</span></span><br><span class=\"line\"><span class=\"comment\"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加公钥<br><img src=\"/2018/02/25/gitee-with-webhook/image-2018-153940@2x.png\" alt=\"步骤\"></p>\n</li>\n<li>测试<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">Welcome to Gitee.com, yourname! <span class=\"comment\"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>配置服务器node环境</li>\n</ul>\n<ol>\n<li><p>安装nvm，服务器上使用nvm 方便多版本node切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/webhook <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/webhook</span><br><span class=\"line\">npm install -g gitee-webhook-handler <span class=\"comment\"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对应的webhook服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim webhook.js</span><br><span class=\"line\"></span><br><span class=\"line\">var http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">var createHandler = require(<span class=\"string\">'gitee-webhook-handler'</span>)</span><br><span class=\"line\">var handler = createHandler(&#123; path: <span class=\"string\">'/webhooks_push'</span>, secret: <span class=\"string\">'123456'</span> &#125;)<span class=\"comment\"># post 所需要用到的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(<span class=\"string\">'Push Hook'</span>, <span class=\"keyword\">function</span> (event) &#123;  <span class=\"comment\"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class=\"line\">  console.log(<span class=\"string\">'Received a push event for %s to %s'</span>,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(<span class=\"string\">'sh'</span>, [<span class=\"string\">'./deploy.sh'</span>], <span class=\"keyword\">function</span>(text)&#123; console.log(text) &#125;);<span class=\"comment\"># 需要执行的脚本位置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(<span class=\"keyword\">function</span> (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(<span class=\"string\">'no such location'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666) <span class=\"comment\"># 服务监听的端口，可以自行修改</span></span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建需要执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.sh</span><br><span class=\"line\">git pull xxxxx  <span class=\"comment\"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试服务<br><img src=\"/2018/02/25/gitee-with-webhook/WX20180225-163439@2x.png\" alt=\"\"><br><img src=\"/2018/02/25/gitee-with-webhook/WX20180225-163748@2x.png\" alt=\"\"><br>显示ok，说明成功</p>\n</li>\n</ol>\n<h3 id=\"使用pm2应用进程管理器\"><a href=\"#使用pm2应用进程管理器\" class=\"headerlink\" title=\"使用pm2应用进程管理器\"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 start webhook.js</span><br><span class=\"line\">pm2 monit <span class=\"comment\"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/02/25/gitee-with-webhook/WX20180225-164721@2x.png\" alt=\"\"><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>\n<p>参考：<a href=\"https://www.npmjs.com/package/gitee-webhook-handler\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/gitee-webhook-handler</a></p>\n"},{"title":"Netty 学习记录","date":"2018-04-11T02:44:49.000Z","_content":"### Netty 核心组件\n- Channel\n- 回调\n- Future\n- 事件和ChannelHandler\n#### Channel\nChannel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。\n#### 回调\n一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。\n####  Future\nFuture 提供了另一种在操作完成时通知应用程序的方式。\n#### ChannelHandler\nChannelHandler 是 Netty\n","source":"_posts/netty-study.md","raw":"---\ntitle: Netty 学习记录\ndate: 2018-04-11 10:44:49\ntags:\n---\n### Netty 核心组件\n- Channel\n- 回调\n- Future\n- 事件和ChannelHandler\n#### Channel\nChannel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。\n#### 回调\n一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。\n####  Future\nFuture 提供了另一种在操作完成时通知应用程序的方式。\n#### ChannelHandler\nChannelHandler 是 Netty\n","slug":"netty-study","published":1,"updated":"2018-04-18T03:36:08.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh2001njms6wm1ahlvk","content":"<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><ul>\n<li>Channel</li>\n<li>回调</li>\n<li>Future</li>\n<li>事件和ChannelHandler<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><ul>\n<li>Channel</li>\n<li>回调</li>\n<li>Future</li>\n<li>事件和ChannelHandler<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>\n</ul>\n"},{"title":"Nginx 负载均衡策略","date":"2017-10-12T09:12:01.000Z","_content":"Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 `注：负载均衡至少需要两台机器`\n### 负载均衡\n负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。\n\n### 负载均衡策略\n负载均衡的策略可以大致分为两大类：`内置策略` 和`扩展策略`\n内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接\n扩展策略：fair、url hash等\n#### 内置策略\n- 轮询策略（轮询加权/round-robin）</br>\n`到应用服务器的请求以round-robin/轮询的方式被分发`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080 weight=1 fail_timeout=20s;\n        server 192.168.0.101:8080 weight=2 fail_timeout=20s;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- ip hash </br>\n`使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        ip_hash;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- 最少连接（least_conn) </br>\n`下一个请求将被分派到活动连接数量最少的服务器`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        least_conn;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n#### 扩展策略\n- fair</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        fair;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- url hash</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        hash $request_uri;\n        hash_method crc32;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n\nweight=1; (weight 默认为1.weight越大，负载的权重就越大)\ndown; (down 表示单前的server暂时不参与负载)\nbackup; (其它所有的非backup机器down或者忙的时候，请求backup机器)\nmax_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\nfail_timeout:max_fails次失败后，暂停的时间\n\n### 最后\n``` bash\nnginx -s reload #重启nginx\n```\n","source":"_posts/nginx-load-balance-strategy.md","raw":"---\ntitle: Nginx 负载均衡策略\ndate: 2017-10-12 17:12:01\ncategories: Linux\ntag: Nginx\n---\nNginx 作为高性能web服务器，负载均衡是其基本功能之一。 `注：负载均衡至少需要两台机器`\n### 负载均衡\n负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。\n\n### 负载均衡策略\n负载均衡的策略可以大致分为两大类：`内置策略` 和`扩展策略`\n内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接\n扩展策略：fair、url hash等\n#### 内置策略\n- 轮询策略（轮询加权/round-robin）</br>\n`到应用服务器的请求以round-robin/轮询的方式被分发`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080 weight=1 fail_timeout=20s;\n        server 192.168.0.101:8080 weight=2 fail_timeout=20s;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- ip hash </br>\n`使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        ip_hash;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- 最少连接（least_conn) </br>\n`下一个请求将被分派到活动连接数量最少的服务器`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        least_conn;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n#### 扩展策略\n- fair</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        fair;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- url hash</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        hash $request_uri;\n        hash_method crc32;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n\nweight=1; (weight 默认为1.weight越大，负载的权重就越大)\ndown; (down 表示单前的server暂时不参与负载)\nbackup; (其它所有的非backup机器down或者忙的时候，请求backup机器)\nmax_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\nfail_timeout:max_fails次失败后，暂停的时间\n\n### 最后\n``` bash\nnginx -s reload #重启nginx\n```\n","slug":"nginx-load-balance-strategy","published":1,"updated":"2018-02-09T02:43:31.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh3001qjms6xrwse2q4","content":"<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code></p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>\n<h4 id=\"内置策略\"><a href=\"#内置策略\" class=\"headerlink\" title=\"内置策略\"></a>内置策略</h4><ul>\n<li><p>轮询策略（轮询加权/round-robin）<br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class=\"line\">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ip hash <br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最少连接（least_conn) <br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"扩展策略\"><a href=\"#扩展策略\" class=\"headerlink\" title=\"扩展策略\"></a>扩展策略</h4><ul>\n<li><p>fair<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        fair;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url hash<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        hash_method crc32;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload <span class=\"comment\">#重启nginx</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code></p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>\n<h4 id=\"内置策略\"><a href=\"#内置策略\" class=\"headerlink\" title=\"内置策略\"></a>内置策略</h4><ul>\n<li><p>轮询策略（轮询加权/round-robin）<br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class=\"line\">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ip hash <br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最少连接（least_conn) <br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"扩展策略\"><a href=\"#扩展策略\" class=\"headerlink\" title=\"扩展策略\"></a>扩展策略</h4><ul>\n<li><p>fair<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        fair;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url hash<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        hash_method crc32;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload <span class=\"comment\">#重启nginx</span></span><br></pre></td></tr></table></figure>\n"},{"title":"python 入门","date":"2018-03-07T02:55:06.000Z","_content":"> Life is short, you need Python.\n\n上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。\n\n### 基本数据类型\n了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。\n\nPython 基本数据类型（6个标注数据类型）\n- Number (数字)\n- String (字符串)\n- List   (列表)\n- Tuple  (元组)\n- Sets   (集合)\n- Dictionary (字典)\n\n### 待续。。。\n","source":"_posts/pthon-tutorial.md","raw":"---\ntitle: python 入门\ndate: 2018-03-07 10:55:06\ncategories: Python\ntags: Python\n---\n> Life is short, you need Python.\n\n上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。\n\n### 基本数据类型\n了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。\n\nPython 基本数据类型（6个标注数据类型）\n- Number (数字)\n- String (字符串)\n- List   (列表)\n- Tuple  (元组)\n- Sets   (集合)\n- Dictionary (字典)\n\n### 待续。。。\n","slug":"pthon-tutorial","published":1,"updated":"2018-03-08T06:03:09.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh5001tjms662eq0527","content":"<blockquote>\n<p>Life is short, you need Python.</p>\n</blockquote>\n<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>\n<p>Python 基本数据类型（6个标注数据类型）</p>\n<ul>\n<li>Number (数字)</li>\n<li>String (字符串)</li>\n<li>List   (列表)</li>\n<li>Tuple  (元组)</li>\n<li>Sets   (集合)</li>\n<li>Dictionary (字典)</li>\n</ul>\n<h3 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Life is short, you need Python.</p>\n</blockquote>\n<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>\n<p>Python 基本数据类型（6个标注数据类型）</p>\n<ul>\n<li>Number (数字)</li>\n<li>String (字符串)</li>\n<li>List   (列表)</li>\n<li>Tuple  (元组)</li>\n<li>Sets   (集合)</li>\n<li>Dictionary (字典)</li>\n</ul>\n<h3 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h3>"},{"title":"CentOS 安装 node","date":"2018-02-09T05:05:14.000Z","_content":"### 下载node\n``` bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz\n```\n### 解压&配置\n``` bash\ntar xvJf node-v8.9.4-linux-x64.tar.xz\nmv node-v8.9.4-linux-x64 /opt\n```\n``` bash\nvim /etc/profile\n```\n``` bash\n#设置node 环境变量\nexport NODE_HOME=/opt/node-v8.9.4-linux-x64\nexport PATH=$NODE_HOME/bin:$PATH\nsource /etc/profile\n```\n### 测试是否成功\n``` bash\nnode -v\n```\n或者安装nvm\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm、\nsource /etc/profile\n```\n### 检查是否安装成功\n``` shell\n nvm --version\n```\n\n### 安装node\n``` bash\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\nnvm ls # 列出所有版本\n```\n","source":"_posts/node-install.md","raw":"---\ntitle: CentOS 安装 node\ndate: 2018-02-09 13:05:14\ncategories: Linux\ntags: Node\n---\n### 下载node\n``` bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz\n```\n### 解压&配置\n``` bash\ntar xvJf node-v8.9.4-linux-x64.tar.xz\nmv node-v8.9.4-linux-x64 /opt\n```\n``` bash\nvim /etc/profile\n```\n``` bash\n#设置node 环境变量\nexport NODE_HOME=/opt/node-v8.9.4-linux-x64\nexport PATH=$NODE_HOME/bin:$PATH\nsource /etc/profile\n```\n### 测试是否成功\n``` bash\nnode -v\n```\n或者安装nvm\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm、\nsource /etc/profile\n```\n### 检查是否安装成功\n``` shell\n nvm --version\n```\n\n### 安装node\n``` bash\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\nnvm ls # 列出所有版本\n```\n","slug":"node-install","published":1,"updated":"2018-02-25T07:00:09.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh6001xjms6jny56wue","content":"<h3 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压-amp-配置\"><a href=\"#解压-amp-配置\" class=\"headerlink\" title=\"解压&amp;配置\"></a>解压&amp;配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置node 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p>或者安装nvm<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm、</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br><span class=\"line\">nvm ls <span class=\"comment\"># 列出所有版本</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压-amp-配置\"><a href=\"#解压-amp-配置\" class=\"headerlink\" title=\"解压&amp;配置\"></a>解压&amp;配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置node 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p>或者安装nvm<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm、</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br><span class=\"line\">nvm ls <span class=\"comment\"># 列出所有版本</span></span><br></pre></td></tr></table></figure>\n"},{"title":"python通过使用requirements.txt文件记录管理依赖包","date":"2018-03-07T03:38:55.000Z","_content":"python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。\n\n### 使用\n``` shell\n# 进入项目目录创建requirements.txt文件\ntouch requirements.txt\n# 将项目中使用的包冻结（freeze）到requirements.txt文件中\npip freeze >requirements.txt\n```\n当把项目上传到服务器以后可以执行下面的命令安装对应的包\n``` shell\n#通过requirements.txt 文件中的记录安装依赖\npip install -r requirements.txt\n```\n通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。\n","source":"_posts/python-requirements.md","raw":"---\ntitle: python通过使用requirements.txt文件记录管理依赖包\ndate: 2018-03-07 11:38:55\ncategories: Python\ntags: Python\n---\npython在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。\n\n### 使用\n``` shell\n# 进入项目目录创建requirements.txt文件\ntouch requirements.txt\n# 将项目中使用的包冻结（freeze）到requirements.txt文件中\npip freeze >requirements.txt\n```\n当把项目上传到服务器以后可以执行下面的命令安装对应的包\n``` shell\n#通过requirements.txt 文件中的记录安装依赖\npip install -r requirements.txt\n```\n通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。\n","slug":"python-requirements","published":1,"updated":"2018-03-07T03:52:08.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh70021jms6ps15x38k","content":"<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入项目目录创建requirements.txt文件</span></span><br><span class=\"line\">touch requirements.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class=\"line\">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>\n<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入项目目录创建requirements.txt文件</span></span><br><span class=\"line\">touch requirements.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class=\"line\">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>\n<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p>\n<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>\n"},{"title":"提升国内服务器Github clone速度的方法","date":"2018-04-18T03:24:25.000Z","_content":"### Github 速度慢\n众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。\n\n### 修改hosts\n从`http://github.global.ssl.fastly.net.ipaddress.com/` 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。\n\n![fastly](raise-github-clone-speed/WX20180418-113942.png)\n``` Shell\nvim /etc/hosts\n# GitHub Start\n151.101.185.194 github.global.ssl.fastly.net\n```\n保存后自动生效\n\n![fastly](raise-github-clone-speed/WX20180418-114759@2x.png)\n通过下载Spring Boot 的源码，见上图，速度还不错。\n\n### 通过代理提升本地的速度\n一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。\n``` Shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n![socks5](raise-github-clone-speed/WX20180418-115544@2x.png)\n\n上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成`socks5://127.0.0.1:1086`。\n\n通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。\n","source":"_posts/raise-github-clone-speed.md","raw":"---\ntitle: 提升国内服务器Github clone速度的方法\ndate: 2018-04-18 11:24:25\ncategories: Linux\ntags: Shell\n---\n### Github 速度慢\n众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。\n\n### 修改hosts\n从`http://github.global.ssl.fastly.net.ipaddress.com/` 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。\n\n![fastly](raise-github-clone-speed/WX20180418-113942.png)\n``` Shell\nvim /etc/hosts\n# GitHub Start\n151.101.185.194 github.global.ssl.fastly.net\n```\n保存后自动生效\n\n![fastly](raise-github-clone-speed/WX20180418-114759@2x.png)\n通过下载Spring Boot 的源码，见上图，速度还不错。\n\n### 通过代理提升本地的速度\n一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。\n``` Shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n![socks5](raise-github-clone-speed/WX20180418-115544@2x.png)\n\n上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成`socks5://127.0.0.1:1086`。\n\n通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。\n","slug":"raise-github-clone-speed","published":1,"updated":"2018-04-18T04:02:42.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh80025jms64agvfh3g","content":"<h3 id=\"Github-速度慢\"><a href=\"#Github-速度慢\" class=\"headerlink\" title=\"Github 速度慢\"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。</p>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>\n<p><img src=\"/2018/04/18/raise-github-clone-speed/WX20180418-113942.png\" alt=\"fastly\"><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> GitHub Start</span></span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure></p>\n<p>保存后自动生效</p>\n<p><img src=\"/2018/04/18/raise-github-clone-speed/WX20180418-114759@2x.png\" alt=\"fastly\"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>\n<h3 id=\"通过代理提升本地的速度\"><a href=\"#通过代理提升本地的速度\" class=\"headerlink\" title=\"通过代理提升本地的速度\"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class=\"line\">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/04/18/raise-github-clone-speed/WX20180418-115544@2x.png\" alt=\"socks5\"></p>\n<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>\n<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Github-速度慢\"><a href=\"#Github-速度慢\" class=\"headerlink\" title=\"Github 速度慢\"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。</p>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>\n<p><img src=\"/2018/04/18/raise-github-clone-speed/WX20180418-113942.png\" alt=\"fastly\"><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> GitHub Start</span></span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure></p>\n<p>保存后自动生效</p>\n<p><img src=\"/2018/04/18/raise-github-clone-speed/WX20180418-114759@2x.png\" alt=\"fastly\"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>\n<h3 id=\"通过代理提升本地的速度\"><a href=\"#通过代理提升本地的速度\" class=\"headerlink\" title=\"通过代理提升本地的速度\"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class=\"line\">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/04/18/raise-github-clone-speed/WX20180418-115544@2x.png\" alt=\"socks5\"></p>\n<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>\n<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>\n"},{"title":"服务器科学上网","date":"2017-12-02T08:19:31.000Z","_content":"因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。\n### 准备\n- 两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4\n- privoxy 包\n\n### 开始\n先用ssh 命令进行服务器socks5 连接接\n``` bash\n$ ssh -f -N -D bindaddress:port name@server\n$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77\n```\n- -f\n输入密码后进入后台模式\n(Requests ssh to go to background just before command execution.)\n- -N\n不执行远程命令,用于端口转发\n( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)\n- -D\nsocket5代理\n(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)\n- -L\ntcp转发\n(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)\n- -C\n使用数据压缩,网速快时会影响速度\n(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)\n\nbindaddress ：指定绑定ip地址\nport ： 指定侦听端口\nname： ssh服务器登录名\nserver： ssh服务器地址\n\n运行完上面的命令就进行socks5连接了\n可以执行下面的命令查看端口是否打开\n``` bash\n$ netstat -nltp\n```\n如果能看到指定的端口打开(1080端口)就说明正常连接了。\n\n### 安装privoxy\n``` bash\n$ yum install privoxy  -y # 使用yum 安装比较方便，也可以使用源码安装\n```\n安装完成后需要进行配置，否则无法正常访问\n``` bash\n$ vim /etc/privoxy/config\n# :783: 找到 783行，去掉前面的注释符号，端口可以随便改\n$ listen-address 127.0.0.1:8118\n#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致\n$ forward-socks5t / 127.0.0.1:1080\n```\n### 修改环境变量开启代理\n``` bash\nvi /ect/profile\nexport https_proxy=http://127.0.0.1:8118\nexport http_proxy=http://127.0.0.1:8118\n# 之后执行source /etc/profile 使配置生效\n```\n\n### 启动privoxy、测试\n``` bash\n$ privoxy /etc/privoxy/config  #netstat -ntlp 查看8118端口\n$ wget www.google.com # 如果能下载则说明成功\n```\n### 后记\n使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢\n注释掉`/etc/profile` 内的内容，刷新配置。\n","source":"_posts/server-over-the-wall.md","raw":"---\ntitle: 服务器科学上网\ndate: 2017-12-02 16:19:31\ncategories: Linux\ntag: Shell\n---\n因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。\n### 准备\n- 两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4\n- privoxy 包\n\n### 开始\n先用ssh 命令进行服务器socks5 连接接\n``` bash\n$ ssh -f -N -D bindaddress:port name@server\n$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77\n```\n- -f\n输入密码后进入后台模式\n(Requests ssh to go to background just before command execution.)\n- -N\n不执行远程命令,用于端口转发\n( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)\n- -D\nsocket5代理\n(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)\n- -L\ntcp转发\n(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)\n- -C\n使用数据压缩,网速快时会影响速度\n(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)\n\nbindaddress ：指定绑定ip地址\nport ： 指定侦听端口\nname： ssh服务器登录名\nserver： ssh服务器地址\n\n运行完上面的命令就进行socks5连接了\n可以执行下面的命令查看端口是否打开\n``` bash\n$ netstat -nltp\n```\n如果能看到指定的端口打开(1080端口)就说明正常连接了。\n\n### 安装privoxy\n``` bash\n$ yum install privoxy  -y # 使用yum 安装比较方便，也可以使用源码安装\n```\n安装完成后需要进行配置，否则无法正常访问\n``` bash\n$ vim /etc/privoxy/config\n# :783: 找到 783行，去掉前面的注释符号，端口可以随便改\n$ listen-address 127.0.0.1:8118\n#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致\n$ forward-socks5t / 127.0.0.1:1080\n```\n### 修改环境变量开启代理\n``` bash\nvi /ect/profile\nexport https_proxy=http://127.0.0.1:8118\nexport http_proxy=http://127.0.0.1:8118\n# 之后执行source /etc/profile 使配置生效\n```\n\n### 启动privoxy、测试\n``` bash\n$ privoxy /etc/privoxy/config  #netstat -ntlp 查看8118端口\n$ wget www.google.com # 如果能下载则说明成功\n```\n### 后记\n使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢\n注释掉`/etc/profile` 内的内容，刷新配置。\n","slug":"server-over-the-wall","published":1,"updated":"2018-02-09T02:43:29.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zh90029jms6ecw0yk54","content":"<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>\n<li>privoxy 包</li>\n</ul>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -f -N -D bindaddress:port name@server</span><br><span class=\"line\">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>\n<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>\n<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>\n<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>\n<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>\n</ul>\n<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>\n<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -nltp</span><br></pre></td></tr></table></figure></p>\n<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>\n<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install privoxy  -y <span class=\"comment\"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>\n<p>安装完成后需要进行配置，否则无法正常访问<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/privoxy/config</span><br><span class=\"line\"><span class=\"comment\"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class=\"line\">$ listen-address 127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class=\"line\">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改环境变量开启代理\"><a href=\"#修改环境变量开启代理\" class=\"headerlink\" title=\"修改环境变量开启代理\"></a>修改环境变量开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /ect/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动privoxy、测试\"><a href=\"#启动privoxy、测试\" class=\"headerlink\" title=\"启动privoxy、测试\"></a>启动privoxy、测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ privoxy /etc/privoxy/config  <span class=\"comment\">#netstat -ntlp 查看8118端口</span></span><br><span class=\"line\">$ wget www.google.com <span class=\"comment\"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>\n<li>privoxy 包</li>\n</ul>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -f -N -D bindaddress:port name@server</span><br><span class=\"line\">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>\n<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>\n<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>\n<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>\n<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>\n</ul>\n<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>\n<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -nltp</span><br></pre></td></tr></table></figure></p>\n<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>\n<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install privoxy  -y <span class=\"comment\"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>\n<p>安装完成后需要进行配置，否则无法正常访问<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/privoxy/config</span><br><span class=\"line\"><span class=\"comment\"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class=\"line\">$ listen-address 127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class=\"line\">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改环境变量开启代理\"><a href=\"#修改环境变量开启代理\" class=\"headerlink\" title=\"修改环境变量开启代理\"></a>修改环境变量开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /ect/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动privoxy、测试\"><a href=\"#启动privoxy、测试\" class=\"headerlink\" title=\"启动privoxy、测试\"></a>启动privoxy、测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ privoxy /etc/privoxy/config  <span class=\"comment\">#netstat -ntlp 查看8118端口</span></span><br><span class=\"line\">$ wget www.google.com <span class=\"comment\"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>\n"},{"title":"正则表达式基础知识总结","date":"2017-12-07T07:48:36.000Z","_content":"最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch\n（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下\nGitHub，选择了[code4craft](https://github.com/code4craft)的[webmagic](https://github.com/code4craft/webmagic)\n作为项目的基础组件。\n\n对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取\n这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。\n\n[0-9]这种形式的正则表达式称作字符组、字符集。\n\\d 字符组简写。\n(.) 匹配任意字符，通配符，一般不匹配行起始符。\n","source":"_posts/regular-expression-basic.md","raw":"---\ntitle: 正则表达式基础知识总结\ndate: 2017-12-07 15:48:36\ncategories: Regular\ntag: Regular\n---\n最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch\n（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下\nGitHub，选择了[code4craft](https://github.com/code4craft)的[webmagic](https://github.com/code4craft/webmagic)\n作为项目的基础组件。\n\n对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取\n这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。\n\n[0-9]这种形式的正则表达式称作字符组、字符集。\n\\d 字符组简写。\n(.) 匹配任意字符，通配符，一般不匹配行起始符。\n","slug":"regular-expression-basic","published":1,"updated":"2018-02-09T02:43:30.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zha002djms6tugsfhfg","content":"<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a>的<a href=\"https://github.com/code4craft/webmagic\" target=\"_blank\" rel=\"noopener\">webmagic</a><br>作为项目的基础组件。</p>\n<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>\n<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a>的<a href=\"https://github.com/code4craft/webmagic\" target=\"_blank\" rel=\"noopener\">webmagic</a><br>作为项目的基础组件。</p>\n<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>\n<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>\n"},{"title":"使用frp微信本地调试","date":"2018-05-07T06:50:36.000Z","_content":"### frp 原理\nfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。\n### 本地调试微信\n微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。\n早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。\n### frp 服务端部署\n下载对应的包，客户端和服务端在一个包里面。系统centos7\n- 下载安装包\n``` bash\n# 使用64位的包\nwget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz\n```\n\n- 域名解析\n需要进行泛域名解析\n`A   *.frp.frpss.top  xx.xx.xx.xx`\n\n- 配置配置文件\n``` bash\n#修改服务端配置，frps_full.ini里面有所有的示例配置和说明\n#这里使用泛域名解析，这样可以多用户同时使用\n[common]\nbind_port = 7000\nvhost_http_port = 8089\nsubdomain_host=frp.frpss.top\ndashboard_port = 7500\n```\n为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了\n\n### frp 客户端配置\n``` bash\n[common]\n#服务端配置\nserver_addr = 118.24.62.41\nserver_port = 7000\n\n#需要自己起别名，注意不要和其他人重复\n[server]\ntype = http\n\n#端口\nlocal_port = 4000\n#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top\nsubdomain = test\n```\n### 启动\n\n``` bash\n# Mac 启动\n./frpc -c ./frpc.ini\n#Windows\n./frpc.exe -c ./frpc.ini\n```\n\n### 本地调试\n上面的端口配置的是`4000`根据自己的项目配置端口，然后使用`test.frp.frpss.top`进行访问\n\n\n\n安装包可以去github下载，也可以在http://share.frpss.top 下载\n","source":"_posts/use-frp.md","raw":"---\ntitle: 使用frp微信本地调试\ndate: 2018-05-07 14:50:36\ncategories: Linux\ntag: frp\n---\n### frp 原理\nfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。\n### 本地调试微信\n微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。\n早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。\n### frp 服务端部署\n下载对应的包，客户端和服务端在一个包里面。系统centos7\n- 下载安装包\n``` bash\n# 使用64位的包\nwget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz\n```\n\n- 域名解析\n需要进行泛域名解析\n`A   *.frp.frpss.top  xx.xx.xx.xx`\n\n- 配置配置文件\n``` bash\n#修改服务端配置，frps_full.ini里面有所有的示例配置和说明\n#这里使用泛域名解析，这样可以多用户同时使用\n[common]\nbind_port = 7000\nvhost_http_port = 8089\nsubdomain_host=frp.frpss.top\ndashboard_port = 7500\n```\n为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了\n\n### frp 客户端配置\n``` bash\n[common]\n#服务端配置\nserver_addr = 118.24.62.41\nserver_port = 7000\n\n#需要自己起别名，注意不要和其他人重复\n[server]\ntype = http\n\n#端口\nlocal_port = 4000\n#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top\nsubdomain = test\n```\n### 启动\n\n``` bash\n# Mac 启动\n./frpc -c ./frpc.ini\n#Windows\n./frpc.exe -c ./frpc.ini\n```\n\n### 本地调试\n上面的端口配置的是`4000`根据自己的项目配置端口，然后使用`test.frp.frpss.top`进行访问\n\n\n\n安装包可以去github下载，也可以在http://share.frpss.top 下载\n","slug":"use-frp","published":1,"updated":"2018-05-07T10:32:32.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zhb002hjms6v8tbz1fv","content":"<h3 id=\"frp-原理\"><a href=\"#frp-原理\" class=\"headerlink\" title=\"frp 原理\"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>\n<h3 id=\"本地调试微信\"><a href=\"#本地调试微信\" class=\"headerlink\" title=\"本地调试微信\"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>\n<h3 id=\"frp-服务端部署\"><a href=\"#frp-服务端部署\" class=\"headerlink\" title=\"frp 服务端部署\"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>\n<ul>\n<li><p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用64位的包</span></span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>\n</li>\n<li><p>配置配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class=\"line\"><span class=\"comment\">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">vhost_http_port = 8089</span><br><span class=\"line\">subdomain_host=frp.frpss.top</span><br><span class=\"line\">dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>\n<h3 id=\"frp-客户端配置\"><a href=\"#frp-客户端配置\" class=\"headerlink\" title=\"frp 客户端配置\"></a>frp 客户端配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"><span class=\"comment\">#服务端配置</span></span><br><span class=\"line\">server_addr = 118.24.62.41</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要自己起别名，注意不要和其他人重复</span></span><br><span class=\"line\">[server]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#端口</span></span><br><span class=\"line\">local_port = 4000</span><br><span class=\"line\"><span class=\"comment\">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class=\"line\">subdomain = <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mac 启动</span></span><br><span class=\"line\">./frpc -c ./frpc.ini</span><br><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>\n<p>安装包可以去github下载，也可以在<a href=\"http://share.frpss.top\" target=\"_blank\" rel=\"noopener\">http://share.frpss.top</a> 下载</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"frp-原理\"><a href=\"#frp-原理\" class=\"headerlink\" title=\"frp 原理\"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>\n<h3 id=\"本地调试微信\"><a href=\"#本地调试微信\" class=\"headerlink\" title=\"本地调试微信\"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>\n<h3 id=\"frp-服务端部署\"><a href=\"#frp-服务端部署\" class=\"headerlink\" title=\"frp 服务端部署\"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>\n<ul>\n<li><p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用64位的包</span></span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>\n</li>\n<li><p>配置配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class=\"line\"><span class=\"comment\">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">vhost_http_port = 8089</span><br><span class=\"line\">subdomain_host=frp.frpss.top</span><br><span class=\"line\">dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>\n<h3 id=\"frp-客户端配置\"><a href=\"#frp-客户端配置\" class=\"headerlink\" title=\"frp 客户端配置\"></a>frp 客户端配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"><span class=\"comment\">#服务端配置</span></span><br><span class=\"line\">server_addr = 118.24.62.41</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要自己起别名，注意不要和其他人重复</span></span><br><span class=\"line\">[server]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#端口</span></span><br><span class=\"line\">local_port = 4000</span><br><span class=\"line\"><span class=\"comment\">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class=\"line\">subdomain = <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mac 启动</span></span><br><span class=\"line\">./frpc -c ./frpc.ini</span><br><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>\n<p>安装包可以去github下载，也可以在<a href=\"http://share.frpss.top\" target=\"_blank\" rel=\"noopener\">http://share.frpss.top</a> 下载</p>\n"},{"title":"CentOS7搭建socks5 服务","date":"2018-01-15T02:06:00.000Z","_content":"\n### 环境\n基于centsOS 7\nss5-3.8.9-8\n### 下载源文件\n``` shell\nwget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz\n\n#配置编译环境及安装编译SS5依赖组件\nyum -y install gcc automake make\nyum install gcc openldap-devel pam-devel openssl-devel\n```\n### 安装\n``` shell\ntar xf ss5-3.8.9-8.tar.gz\nmv ss5-3.8.9-8 ss5\ncd  ss5\n./configure\nmake && make install\n```\n### 启动脚本加执行权限\n``` shell\nchmod +x /etc/init.d/ss5\n```\n### 进行配置并启动\n``` shell\nvi /etc/sysconfig/ss5  \nSS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080\nsystemctl start ss5 #启动服务\n\n#增加用户登录权限\nvi /etc/opt/ss5/ss5.conf  \nauth 0.0.0.0/0 - u  \npermit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -\n\n#设置用户名和密码，一个用户和密码一行，用空格间隔\nvi /etc/opt/ss5/ss5.passwd  \nuser1 123456\nuser2 123456\n\n```\n","source":"_posts/socks5-server.md","raw":"---\ntitle: CentOS7搭建socks5 服务\ndate: 2018-01-15 10:06:00\ncategories: Linux\ntags: Socks5\n---\n\n### 环境\n基于centsOS 7\nss5-3.8.9-8\n### 下载源文件\n``` shell\nwget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz\n\n#配置编译环境及安装编译SS5依赖组件\nyum -y install gcc automake make\nyum install gcc openldap-devel pam-devel openssl-devel\n```\n### 安装\n``` shell\ntar xf ss5-3.8.9-8.tar.gz\nmv ss5-3.8.9-8 ss5\ncd  ss5\n./configure\nmake && make install\n```\n### 启动脚本加执行权限\n``` shell\nchmod +x /etc/init.d/ss5\n```\n### 进行配置并启动\n``` shell\nvi /etc/sysconfig/ss5  \nSS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080\nsystemctl start ss5 #启动服务\n\n#增加用户登录权限\nvi /etc/opt/ss5/ss5.conf  \nauth 0.0.0.0/0 - u  \npermit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -\n\n#设置用户名和密码，一个用户和密码一行，用空格间隔\nvi /etc/opt/ss5/ss5.passwd  \nuser1 123456\nuser2 123456\n\n```\n","slug":"socks5-server","published":1,"updated":"2018-02-09T05:26:33.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zhd002kjms6l2tuocrt","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置编译环境及安装编译SS5依赖组件</span></span><br><span class=\"line\">yum -y install gcc automake make</span><br><span class=\"line\">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf ss5-3.8.9-8.tar.gz</span><br><span class=\"line\">mv ss5-3.8.9-8 ss5</span><br><span class=\"line\">cd  ss5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动脚本加执行权限\"><a href=\"#启动脚本加执行权限\" class=\"headerlink\" title=\"启动脚本加执行权限\"></a>启动脚本加执行权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行配置并启动\"><a href=\"#进行配置并启动\" class=\"headerlink\" title=\"进行配置并启动\"></a>进行配置并启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/ss5  </span><br><span class=\"line\">SS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080</span><br><span class=\"line\">systemctl start ss5 #启动服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加用户登录权限</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.conf  </span><br><span class=\"line\">auth 0.0.0.0/0 - u  </span><br><span class=\"line\">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.passwd  </span><br><span class=\"line\">user1 123456</span><br><span class=\"line\">user2 123456</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置编译环境及安装编译SS5依赖组件</span></span><br><span class=\"line\">yum -y install gcc automake make</span><br><span class=\"line\">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf ss5-3.8.9-8.tar.gz</span><br><span class=\"line\">mv ss5-3.8.9-8 ss5</span><br><span class=\"line\">cd  ss5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动脚本加执行权限\"><a href=\"#启动脚本加执行权限\" class=\"headerlink\" title=\"启动脚本加执行权限\"></a>启动脚本加执行权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行配置并启动\"><a href=\"#进行配置并启动\" class=\"headerlink\" title=\"进行配置并启动\"></a>进行配置并启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/ss5  </span><br><span class=\"line\">SS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080</span><br><span class=\"line\">systemctl start ss5 #启动服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加用户登录权限</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.conf  </span><br><span class=\"line\">auth 0.0.0.0/0 - u  </span><br><span class=\"line\">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.passwd  </span><br><span class=\"line\">user1 123456</span><br><span class=\"line\">user2 123456</span><br></pre></td></tr></table></figure>\n"},{"title":"Ubuntu安装LAMP","date":"2017-10-28T03:32:00.000Z","_content":"### LAMP\n Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。\n### 环境\n基于Ubuntu\n### 开始\n\n``` bash\n$ apt-get update && sudo apt-get upgrade #更新软件包\n```\n#### 安装MySQL\n```bash\n$ sudo apt-get install -y mysql-server\n$ sudo apt-get install -y mysql-client\n! 记得设置默认密码\n```\n\n\n ``` bash\n $ sudo netstat -tap | grep mysql #显示监听的端口即表示安装成功\n ```\n\n#### 配置远程连接\n``` bash\n$ vim /etc/mysql/mysql.conf.d/mysqld.cnf\n#bind-address = 127.0.0.1\n```\n#### 远程访问赋权\n``` bash\n$ mysql -u root -p\n$ grant all on *.* to root@'%' identified by 'root';\n$ flush privileges;  \n$ exit\n$ service mysql restart(or: $ /etc/init.d/mysql restart)# 重启\n```\n####安装Apache2\n\n```bash\n$ sudo apt-get install -y apache2\n```\n\n``` bash\n#修改apache2.conf配置\n$ vi /etc/apache2/apache2.conf\n$ KeepAlive Off\n#修改mpm_prefork.conf配置\n$ vim /etc/apache2/mods-available/mpm_prefork.conf\n <IfModule mpm_prefork_module>\n   StartServers            2\n   MinSpareServers         6\n   MaxSpareServers         12\n   MaxRequestWorkers       39\n   MaxConnectionsPerChild  3000\n</IfModule>\n\n#禁用和启动模块\n$ sudo a2dismod mpm_event\n$ sudo a2enmod mpm_prefork\n$ sudo systemctl restart apache2 #重启Apache\n```\n#### PHP 安装\n``` bash\n# 安装相关包\n$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y\n# 安装组件支持\napt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y\n# 重启服务\n$ sudo systemctl restart apache2\n\n```\n\n#### phpmyadmin 安装\n``` bash\n\n$ sudo apt-get install -y phpmyadmin\n#安装对应php包（如果没有安装对应的包）\n$ sudo apt-get install -y php-mbstring\n$ sudo apt-get install -y php-gettext\n#安装时选择自动配置数据库，输入数据库root账号的密码\n#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误\n\n#建立软连接\n$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n#重启apache\n$ sudo /etc/init.d/apache2 restart\n#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可\n```\n","source":"_posts/ubuntu-install-lamp.md","raw":"---\ntitle: Ubuntu安装LAMP\ndate: 2017-10-28 11:32:00\ncategories: Linux\ntag: Shell\n---\n### LAMP\n Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。\n### 环境\n基于Ubuntu\n### 开始\n\n``` bash\n$ apt-get update && sudo apt-get upgrade #更新软件包\n```\n#### 安装MySQL\n```bash\n$ sudo apt-get install -y mysql-server\n$ sudo apt-get install -y mysql-client\n! 记得设置默认密码\n```\n\n\n ``` bash\n $ sudo netstat -tap | grep mysql #显示监听的端口即表示安装成功\n ```\n\n#### 配置远程连接\n``` bash\n$ vim /etc/mysql/mysql.conf.d/mysqld.cnf\n#bind-address = 127.0.0.1\n```\n#### 远程访问赋权\n``` bash\n$ mysql -u root -p\n$ grant all on *.* to root@'%' identified by 'root';\n$ flush privileges;  \n$ exit\n$ service mysql restart(or: $ /etc/init.d/mysql restart)# 重启\n```\n####安装Apache2\n\n```bash\n$ sudo apt-get install -y apache2\n```\n\n``` bash\n#修改apache2.conf配置\n$ vi /etc/apache2/apache2.conf\n$ KeepAlive Off\n#修改mpm_prefork.conf配置\n$ vim /etc/apache2/mods-available/mpm_prefork.conf\n <IfModule mpm_prefork_module>\n   StartServers            2\n   MinSpareServers         6\n   MaxSpareServers         12\n   MaxRequestWorkers       39\n   MaxConnectionsPerChild  3000\n</IfModule>\n\n#禁用和启动模块\n$ sudo a2dismod mpm_event\n$ sudo a2enmod mpm_prefork\n$ sudo systemctl restart apache2 #重启Apache\n```\n#### PHP 安装\n``` bash\n# 安装相关包\n$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y\n# 安装组件支持\napt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y\n# 重启服务\n$ sudo systemctl restart apache2\n\n```\n\n#### phpmyadmin 安装\n``` bash\n\n$ sudo apt-get install -y phpmyadmin\n#安装对应php包（如果没有安装对应的包）\n$ sudo apt-get install -y php-mbstring\n$ sudo apt-get install -y php-gettext\n#安装时选择自动配置数据库，输入数据库root账号的密码\n#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误\n\n#建立软连接\n$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n#重启apache\n$ sudo /etc/init.d/apache2 restart\n#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可\n```\n","slug":"ubuntu-install-lamp","published":1,"updated":"2018-02-09T02:43:28.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zhe002ojms6eij8gvo8","content":"<h3 id=\"LAMP\"><a href=\"#LAMP\" class=\"headerlink\" title=\"LAMP\"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于Ubuntu</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class=\"comment\">#更新软件包</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y mysql-server</span><br><span class=\"line\">$ sudo apt-get install -y mysql-client</span><br><span class=\"line\">! 记得设置默认密码</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tap | grep mysql <span class=\"comment\">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置远程连接\"><a href=\"#配置远程连接\" class=\"headerlink\" title=\"配置远程连接\"></a>配置远程连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"远程访问赋权\"><a href=\"#远程访问赋权\" class=\"headerlink\" title=\"远程访问赋权\"></a>远程访问赋权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">$ grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'root'</span>;</span><br><span class=\"line\">$ flush privileges;  </span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n<p>####安装Apache2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改apache2.conf配置</span></span><br><span class=\"line\">$ vi /etc/apache2/apache2.conf</span><br><span class=\"line\">$ KeepAlive Off</span><br><span class=\"line\"><span class=\"comment\">#修改mpm_prefork.conf配置</span></span><br><span class=\"line\">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class=\"line\"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class=\"line\">   StartServers            2</span><br><span class=\"line\">   MinSpareServers         6</span><br><span class=\"line\">   MaxSpareServers         12</span><br><span class=\"line\">   MaxRequestWorkers       39</span><br><span class=\"line\">   MaxConnectionsPerChild  3000</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用和启动模块</span></span><br><span class=\"line\">$ sudo a2dismod mpm_event</span><br><span class=\"line\">$ sudo a2enmod mpm_prefork</span><br><span class=\"line\">$ sudo systemctl restart apache2 <span class=\"comment\">#重启Apache</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装相关包</span></span><br><span class=\"line\">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class=\"line\"><span class=\"comment\"># 安装组件支持</span></span><br><span class=\"line\">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n<h4 id=\"phpmyadmin-安装\"><a href=\"#phpmyadmin-安装\" class=\"headerlink\" title=\"phpmyadmin 安装\"></a>phpmyadmin 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install -y phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#安装对应php包（如果没有安装对应的包）</span></span><br><span class=\"line\">$ sudo apt-get install -y php-mbstring</span><br><span class=\"line\">$ sudo apt-get install -y php-gettext</span><br><span class=\"line\"><span class=\"comment\">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class=\"line\"><span class=\"comment\">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立软连接</span></span><br><span class=\"line\">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#重启apache</span></span><br><span class=\"line\">$ sudo /etc/init.d/apache2 restart</span><br><span class=\"line\"><span class=\"comment\">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"LAMP\"><a href=\"#LAMP\" class=\"headerlink\" title=\"LAMP\"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于Ubuntu</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class=\"comment\">#更新软件包</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y mysql-server</span><br><span class=\"line\">$ sudo apt-get install -y mysql-client</span><br><span class=\"line\">! 记得设置默认密码</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tap | grep mysql <span class=\"comment\">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置远程连接\"><a href=\"#配置远程连接\" class=\"headerlink\" title=\"配置远程连接\"></a>配置远程连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"远程访问赋权\"><a href=\"#远程访问赋权\" class=\"headerlink\" title=\"远程访问赋权\"></a>远程访问赋权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">$ grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'root'</span>;</span><br><span class=\"line\">$ flush privileges;  </span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n<p>####安装Apache2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改apache2.conf配置</span></span><br><span class=\"line\">$ vi /etc/apache2/apache2.conf</span><br><span class=\"line\">$ KeepAlive Off</span><br><span class=\"line\"><span class=\"comment\">#修改mpm_prefork.conf配置</span></span><br><span class=\"line\">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class=\"line\"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class=\"line\">   StartServers            2</span><br><span class=\"line\">   MinSpareServers         6</span><br><span class=\"line\">   MaxSpareServers         12</span><br><span class=\"line\">   MaxRequestWorkers       39</span><br><span class=\"line\">   MaxConnectionsPerChild  3000</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用和启动模块</span></span><br><span class=\"line\">$ sudo a2dismod mpm_event</span><br><span class=\"line\">$ sudo a2enmod mpm_prefork</span><br><span class=\"line\">$ sudo systemctl restart apache2 <span class=\"comment\">#重启Apache</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装相关包</span></span><br><span class=\"line\">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class=\"line\"><span class=\"comment\"># 安装组件支持</span></span><br><span class=\"line\">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n<h4 id=\"phpmyadmin-安装\"><a href=\"#phpmyadmin-安装\" class=\"headerlink\" title=\"phpmyadmin 安装\"></a>phpmyadmin 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install -y phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#安装对应php包（如果没有安装对应的包）</span></span><br><span class=\"line\">$ sudo apt-get install -y php-mbstring</span><br><span class=\"line\">$ sudo apt-get install -y php-gettext</span><br><span class=\"line\"><span class=\"comment\">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class=\"line\"><span class=\"comment\">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立软连接</span></span><br><span class=\"line\">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#重启apache</span></span><br><span class=\"line\">$ sudo /etc/init.d/apache2 restart</span><br><span class=\"line\"><span class=\"comment\">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>\n"},{"title":"学习Shell命令行总结","date":"2018-04-02T12:38:29.000Z","_content":"\n### 了解linux系统内核\n内核的主要作用\n- 系统内存管理\n- 软件程序管理\n- 硬件设备管理\n- 文件系统管理\n\n什么是虚拟内存\n内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。\n平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用\nswap分区，原因是因为`开启SWAP可能会因频繁换页操作，导致IO性能下降`，如果内存足够的情况下，建议关闭\nswap 分区。\n\n软件程序管理\nLinux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。\n内核创建第一个进程称为`init进程`，来启动系统上其他进程，并将其加载到虚拟内存中。\n\n一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。\n另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。\n\nLinux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好\n的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）\n\nCentOS系统有7个运行级别(runlevel)\n\n运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆\n运行级别2：多用户状态(没有NFS)\n运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登陆后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n\n不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。\n\n硬件设备管理\n内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动\n- 编译进内核的设备驱动代码\n- 可插入内核的设备驱动代码（这种方式比较方便，利于维护）\n\n文件系统管理\nLinux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的\n支持。\n\n\nShell 的种类\n在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。\n- ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容\n- korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性\n- tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell\n- zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。\n\nLinux 图形化桌面 基本上用不到，就略过了。\n\n文件路径\n- 相对路径\n- 绝对路劲\n`pwd` 命令查询当前所在的目录\n`ls -F` 显示出文件夹和普通文件\n`ls -F -R` -R 递归文件夹\n\n文件拷贝\n`copy -R` 拷贝整个目录和文件\n\n链接文件\n- 符号链接\n- 硬链接\n","source":"_posts/study-shell.md","raw":"---\ntitle: 学习Shell命令行总结\ndate: 2018-04-02 20:38:29\ncategories: Shell\ntags: Shell\n---\n\n### 了解linux系统内核\n内核的主要作用\n- 系统内存管理\n- 软件程序管理\n- 硬件设备管理\n- 文件系统管理\n\n什么是虚拟内存\n内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。\n平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用\nswap分区，原因是因为`开启SWAP可能会因频繁换页操作，导致IO性能下降`，如果内存足够的情况下，建议关闭\nswap 分区。\n\n软件程序管理\nLinux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。\n内核创建第一个进程称为`init进程`，来启动系统上其他进程，并将其加载到虚拟内存中。\n\n一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。\n另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。\n\nLinux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好\n的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）\n\nCentOS系统有7个运行级别(runlevel)\n\n运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆\n运行级别2：多用户状态(没有NFS)\n运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登陆后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n\n不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。\n\n硬件设备管理\n内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动\n- 编译进内核的设备驱动代码\n- 可插入内核的设备驱动代码（这种方式比较方便，利于维护）\n\n文件系统管理\nLinux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的\n支持。\n\n\nShell 的种类\n在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。\n- ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容\n- korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性\n- tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell\n- zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。\n\nLinux 图形化桌面 基本上用不到，就略过了。\n\n文件路径\n- 相对路径\n- 绝对路劲\n`pwd` 命令查询当前所在的目录\n`ls -F` 显示出文件夹和普通文件\n`ls -F -R` -R 递归文件夹\n\n文件拷贝\n`copy -R` 拷贝整个目录和文件\n\n链接文件\n- 符号链接\n- 硬链接\n","slug":"study-shell","published":1,"updated":"2018-04-23T11:35:26.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zhf002rjms6258ig203","content":"<h3 id=\"了解linux系统内核\"><a href=\"#了解linux系统内核\" class=\"headerlink\" title=\"了解linux系统内核\"></a>了解linux系统内核</h3><p>内核的主要作用</p>\n<ul>\n<li>系统内存管理</li>\n<li>软件程序管理</li>\n<li>硬件设备管理</li>\n<li>文件系统管理</li>\n</ul>\n<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>\n<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>\n<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>\n<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>\n<p>CentOS系统有7个运行级别(runlevel)</p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>\n<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>\n</ul>\n<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>\n<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>\n<ul>\n<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>\n<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>\n<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>\n<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>\n</ul>\n<p>Linux 图形化桌面 基本上用不到，就略过了。</p>\n<p>文件路径</p>\n<ul>\n<li>相对路径</li>\n<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>\n</ul>\n<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>\n<p>链接文件</p>\n<ul>\n<li>符号链接</li>\n<li>硬链接</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"了解linux系统内核\"><a href=\"#了解linux系统内核\" class=\"headerlink\" title=\"了解linux系统内核\"></a>了解linux系统内核</h3><p>内核的主要作用</p>\n<ul>\n<li>系统内存管理</li>\n<li>软件程序管理</li>\n<li>硬件设备管理</li>\n<li>文件系统管理</li>\n</ul>\n<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>\n<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>\n<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>\n<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>\n<p>CentOS系统有7个运行级别(runlevel)</p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>\n<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>\n</ul>\n<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>\n<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>\n<ul>\n<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>\n<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>\n<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>\n<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>\n</ul>\n<p>Linux 图形化桌面 基本上用不到，就略过了。</p>\n<p>文件路径</p>\n<ul>\n<li>相对路径</li>\n<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>\n</ul>\n<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>\n<p>链接文件</p>\n<ul>\n<li>符号链接</li>\n<li>硬链接</li>\n</ul>\n"},{"title":"centos yum 安装nginx 后增加模块","date":"2017-10-01T15:30:30.000Z","_content":"### yum 和 源码安装的区别\n\nyum 安装是在线安装，优点：安装方式简单，快捷；\n\n源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等\n\n### yum安装nginx\n系统版本：CentOS Linux release 7.4.1708 (Core)\n\n#### 1.增加对应的源\n``` shell\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n#### 2.查看nginx信息\n\n``` shell\nyum info nginx  (查看nginx 版本方便后面下载对应版本)\n```\n#### 3.yum安装nginx\n``` shell\nyum -y install nginx\n```\n\n### nginx 相关的命令\n#### 1.查看安装路径\n``` shell\nrpm -ql nginx\n```\n#### 2.查看编译参数\n``` shell\nnginx -V\n```\n#### 3.nginx 启动、停止、重启\n``` shell\nsystemctl start nginx #启动 nginx 服务\nsystemctl stop nginx #停止 nginx 服务\nsystemctl restart nginx #重启 nginx 服务\n```\n\n### 启动检查是否启动成功\n``` shell\ncurl -i localhost\n```\n\n#### 如下显示说明正常启动：\n``` html\n···\n<h1>Welcome to nginx!</h1>\n···\n```\n\n### 安装第三方模块\n其实`yum`安装`nginx` 后想要添加第三方模块，只需对`yum`安装的`nginx`相同版本的源码进行编译后替换\n#### 1.安装源码安装需要的第三方包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n#### 2.下载对应的源码\n通过`nginx -V` 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码\n``` shell\ncd /opt\nwget http://nginx.org/download/nginx-1.12.1.tar.gz\n```\n#### 3.查看对应configure\n``` shell\ntar xf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\nnginx -V\nconfigure arguments:  --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n```\n#### 4.增加对应的模块\n``` shell\n./configure --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n            --add-module=../headers-more-nginx-module\n```\n#### 5.编译\n``` shell\nmake && make install\n```\n#### 6.对可执行文件进行备份替换\n``` shell\ncp /usr/sbin/nginx /usr/sbin/nginx.bak #备份\ncp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换\nsystemctl restart nginx #重启 nginx 服务\n```\n大功告成\n","source":"_posts/yum-install-nginx-add-modules.md","raw":"---\ntitle: centos yum 安装nginx 后增加模块\ndate: 2017-10-01 23:30:30\ncategories: Linux\ntag: Nginx\n---\n### yum 和 源码安装的区别\n\nyum 安装是在线安装，优点：安装方式简单，快捷；\n\n源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等\n\n### yum安装nginx\n系统版本：CentOS Linux release 7.4.1708 (Core)\n\n#### 1.增加对应的源\n``` shell\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n#### 2.查看nginx信息\n\n``` shell\nyum info nginx  (查看nginx 版本方便后面下载对应版本)\n```\n#### 3.yum安装nginx\n``` shell\nyum -y install nginx\n```\n\n### nginx 相关的命令\n#### 1.查看安装路径\n``` shell\nrpm -ql nginx\n```\n#### 2.查看编译参数\n``` shell\nnginx -V\n```\n#### 3.nginx 启动、停止、重启\n``` shell\nsystemctl start nginx #启动 nginx 服务\nsystemctl stop nginx #停止 nginx 服务\nsystemctl restart nginx #重启 nginx 服务\n```\n\n### 启动检查是否启动成功\n``` shell\ncurl -i localhost\n```\n\n#### 如下显示说明正常启动：\n``` html\n···\n<h1>Welcome to nginx!</h1>\n···\n```\n\n### 安装第三方模块\n其实`yum`安装`nginx` 后想要添加第三方模块，只需对`yum`安装的`nginx`相同版本的源码进行编译后替换\n#### 1.安装源码安装需要的第三方包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n#### 2.下载对应的源码\n通过`nginx -V` 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码\n``` shell\ncd /opt\nwget http://nginx.org/download/nginx-1.12.1.tar.gz\n```\n#### 3.查看对应configure\n``` shell\ntar xf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\nnginx -V\nconfigure arguments:  --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n```\n#### 4.增加对应的模块\n``` shell\n./configure --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n            --add-module=../headers-more-nginx-module\n```\n#### 5.编译\n``` shell\nmake && make install\n```\n#### 6.对可执行文件进行备份替换\n``` shell\ncp /usr/sbin/nginx /usr/sbin/nginx.bak #备份\ncp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换\nsystemctl restart nginx #重启 nginx 服务\n```\n大功告成\n","slug":"yum-install-nginx-add-modules","published":1,"updated":"2018-02-09T02:43:20.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhfv9zm3003wjms6h61hoyc2","content":"<h3 id=\"yum-和-源码安装的区别\"><a href=\"#yum-和-源码安装的区别\" class=\"headerlink\" title=\"yum 和 源码安装的区别\"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>\n<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等</p>\n<h3 id=\"yum安装nginx\"><a href=\"#yum安装nginx\" class=\"headerlink\" title=\"yum安装nginx\"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>\n<h4 id=\"1-增加对应的源\"><a href=\"#1-增加对应的源\" class=\"headerlink\" title=\"1.增加对应的源\"></a>1.增加对应的源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看nginx信息\"><a href=\"#2-查看nginx信息\" class=\"headerlink\" title=\"2.查看nginx信息\"></a>2.查看nginx信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-yum安装nginx\"><a href=\"#3-yum安装nginx\" class=\"headerlink\" title=\"3.yum安装nginx\"></a>3.yum安装nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-相关的命令\"><a href=\"#nginx-相关的命令\" class=\"headerlink\" title=\"nginx 相关的命令\"></a>nginx 相关的命令</h3><h4 id=\"1-查看安装路径\"><a href=\"#1-查看安装路径\" class=\"headerlink\" title=\"1.查看安装路径\"></a>1.查看安装路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看编译参数\"><a href=\"#2-查看编译参数\" class=\"headerlink\" title=\"2.查看编译参数\"></a>2.查看编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-nginx-启动、停止、重启\"><a href=\"#3-nginx-启动、停止、重启\" class=\"headerlink\" title=\"3.nginx 启动、停止、重启\"></a>3.nginx 启动、停止、重启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx #启动 nginx 服务</span><br><span class=\"line\">systemctl stop nginx #停止 nginx 服务</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动检查是否启动成功\"><a href=\"#启动检查是否启动成功\" class=\"headerlink\" title=\"启动检查是否启动成功\"></a>启动检查是否启动成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i localhost</span><br></pre></td></tr></table></figure>\n<h4 id=\"如下显示说明正常启动：\"><a href=\"#如下显示说明正常启动：\" class=\"headerlink\" title=\"如下显示说明正常启动：\"></a>如下显示说明正常启动：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>\n<h4 id=\"1-安装源码安装需要的第三方包\"><a href=\"#1-安装源码安装需要的第三方包\" class=\"headerlink\" title=\"1.安装源码安装需要的第三方包\"></a>1.安装源码安装需要的第三方包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载对应的源码\"><a href=\"#2-下载对应的源码\" class=\"headerlink\" title=\"2.下载对应的源码\"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-查看对应configure\"><a href=\"#3-查看对应configure\" class=\"headerlink\" title=\"3.查看对应configure\"></a>3.查看对应configure</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nginx-1.12.1.tar.gz</span><br><span class=\"line\">cd nginx-1.12.1</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">configure arguments:  --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-增加对应的模块\"><a href=\"#4-增加对应的模块\" class=\"headerlink\" title=\"4.增加对应的模块\"></a>4.增加对应的模块</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-编译\"><a href=\"#5-编译\" class=\"headerlink\" title=\"5.编译\"></a>5.编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-对可执行文件进行备份替换\"><a href=\"#6-对可执行文件进行备份替换\" class=\"headerlink\" title=\"6.对可执行文件进行备份替换\"></a>6.对可执行文件进行备份替换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class=\"line\">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n<p>大功告成</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"yum-和-源码安装的区别\"><a href=\"#yum-和-源码安装的区别\" class=\"headerlink\" title=\"yum 和 源码安装的区别\"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>\n<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等</p>\n<h3 id=\"yum安装nginx\"><a href=\"#yum安装nginx\" class=\"headerlink\" title=\"yum安装nginx\"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>\n<h4 id=\"1-增加对应的源\"><a href=\"#1-增加对应的源\" class=\"headerlink\" title=\"1.增加对应的源\"></a>1.增加对应的源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看nginx信息\"><a href=\"#2-查看nginx信息\" class=\"headerlink\" title=\"2.查看nginx信息\"></a>2.查看nginx信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-yum安装nginx\"><a href=\"#3-yum安装nginx\" class=\"headerlink\" title=\"3.yum安装nginx\"></a>3.yum安装nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-相关的命令\"><a href=\"#nginx-相关的命令\" class=\"headerlink\" title=\"nginx 相关的命令\"></a>nginx 相关的命令</h3><h4 id=\"1-查看安装路径\"><a href=\"#1-查看安装路径\" class=\"headerlink\" title=\"1.查看安装路径\"></a>1.查看安装路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查看编译参数\"><a href=\"#2-查看编译参数\" class=\"headerlink\" title=\"2.查看编译参数\"></a>2.查看编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-nginx-启动、停止、重启\"><a href=\"#3-nginx-启动、停止、重启\" class=\"headerlink\" title=\"3.nginx 启动、停止、重启\"></a>3.nginx 启动、停止、重启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx #启动 nginx 服务</span><br><span class=\"line\">systemctl stop nginx #停止 nginx 服务</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动检查是否启动成功\"><a href=\"#启动检查是否启动成功\" class=\"headerlink\" title=\"启动检查是否启动成功\"></a>启动检查是否启动成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i localhost</span><br></pre></td></tr></table></figure>\n<h4 id=\"如下显示说明正常启动：\"><a href=\"#如下显示说明正常启动：\" class=\"headerlink\" title=\"如下显示说明正常启动：\"></a>如下显示说明正常启动：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>\n<h4 id=\"1-安装源码安装需要的第三方包\"><a href=\"#1-安装源码安装需要的第三方包\" class=\"headerlink\" title=\"1.安装源码安装需要的第三方包\"></a>1.安装源码安装需要的第三方包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-下载对应的源码\"><a href=\"#2-下载对应的源码\" class=\"headerlink\" title=\"2.下载对应的源码\"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-查看对应configure\"><a href=\"#3-查看对应configure\" class=\"headerlink\" title=\"3.查看对应configure\"></a>3.查看对应configure</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nginx-1.12.1.tar.gz</span><br><span class=\"line\">cd nginx-1.12.1</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">configure arguments:  --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-增加对应的模块\"><a href=\"#4-增加对应的模块\" class=\"headerlink\" title=\"4.增加对应的模块\"></a>4.增加对应的模块</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-编译\"><a href=\"#5-编译\" class=\"headerlink\" title=\"5.编译\"></a>5.编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-对可执行文件进行备份替换\"><a href=\"#6-对可执行文件进行备份替换\" class=\"headerlink\" title=\"6.对可执行文件进行备份替换\"></a>6.对可执行文件进行备份替换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class=\"line\">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n<p>大功告成</p>\n"}],"PostAsset":[{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","slug":"WX20180318-122540@2x.png","post":"cjhfv9zfz0001jms6e66k4e9l","modified":1,"renderable":0},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","post":"cjhfv9zfz0001jms6e66k4e9l","slug":"WX20180318-120435@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-113942.png","post":"cjhfv9zh80025jms64agvfh3g","slug":"WX20180418-113942.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-114759@2x.png","post":"cjhfv9zh80025jms64agvfh3g","slug":"WX20180418-114759@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-115544@2x.png","post":"cjhfv9zh80025jms64agvfh3g","slug":"WX20180418-115544@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163439@2x.png","post":"cjhfv9zh1001ijms6scdfjhk0","slug":"WX20180225-163439@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163748@2x.png","post":"cjhfv9zh1001ijms6scdfjhk0","slug":"WX20180225-163748@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-164721@2x.png","slug":"WX20180225-164721@2x.png","post":"cjhfv9zh1001ijms6scdfjhk0","modified":1,"renderable":0},{"_id":"source/_posts/gitee-with-webhook/image-2018-153940@2x.png","post":"cjhfv9zh1001ijms6scdfjhk0","slug":"image-2018-153940@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174110.png","post":"cjhfv9zgs000vjms6cm1vlmpc","slug":"WX20180227-174110.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174208.png","post":"cjhfv9zgs000vjms6cm1vlmpc","slug":"WX20180227-174208.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203234.png","post":"cjhfv9zgs000vjms6cm1vlmpc","slug":"WX20180227-203234.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203815.png","post":"cjhfv9zgs000vjms6cm1vlmpc","slug":"WX20180227-203815.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-204116.png","post":"cjhfv9zgs000vjms6cm1vlmpc","slug":"WX20180227-204116.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","post":"cjhfv9zgq000pjms6rco66wmn","slug":"191500078c0b39a29f95.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","post":"cjhfv9zgq000pjms6rco66wmn","slug":"1916000764d774a3eee4.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","post":"cjhfv9zgq000pjms6rco66wmn","slug":"191700078c8d4238617c.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","post":"cjhfv9zgq000pjms6rco66wmn","slug":"191800078ffdfe660fb3.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191b000762026287366b.jpeg","post":"cjhfv9zgq000pjms6rco66wmn","slug":"191b000762026287366b.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","post":"cjhfv9zgq000pjms6rco66wmn","slug":"v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjhfv9zge0006jms6sjtns4af","category_id":"cjhfv9zg40003jms62q83dbk8","_id":"cjhfv9zgj000djms6tqg1aybf"},{"post_id":"cjhfv9zfz0001jms6e66k4e9l","category_id":"cjhfv9zg40003jms62q83dbk8","_id":"cjhfv9zgk000hjms6awt15rhq"},{"post_id":"cjhfv9zg20002jms6zdthqf8z","category_id":"cjhfv9zgg0008jms6r0dwofoy","_id":"cjhfv9zgm000kjms6o9gvce9v"},{"post_id":"cjhfv9zg60005jms6nkofg9ir","category_id":"cjhfv9zgj000ejms64ac4lpwx","_id":"cjhfv9zgr000qjms68zztstis"},{"post_id":"cjhfv9zgm000njms67z84keqr","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zgs000wjms6yqtevaj6"},{"post_id":"cjhfv9zgg0007jms6xfm0k84d","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zgt000yjms6pwzafsv5"},{"post_id":"cjhfv9zgr000tjms6js6w5ahn","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zgw0013jms67bt7olo0"},{"post_id":"cjhfv9zgh000bjms6ceb3b894","category_id":"cjhfv9zgr000rjms6c79s3opj","_id":"cjhfv9zgx0016jms6bnnwezwg"},{"post_id":"cjhfv9zgt000xjms675z2kr8f","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zgy0019jms6uatx0k48"},{"post_id":"cjhfv9zgv0012jms66uvm4e5t","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zgz001djms6qqn7h0ql"},{"post_id":"cjhfv9zgj000cjms69wtagp34","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh0001gjms6dsvyhqau"},{"post_id":"cjhfv9zgw0014jms6p9xnt3ea","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh2001kjms6c1m6odpc"},{"post_id":"cjhfv9zgy0018jms61jlgd028","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh3001ojms6esgdfzly"},{"post_id":"cjhfv9zgk000gjms64t9gc89m","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh4001rjms6ny2vjj1z"},{"post_id":"cjhfv9zgy001bjms6u6hzfry8","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh5001ujms61i8sqec6"},{"post_id":"cjhfv9zgl000jjms6215nl5n6","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh6001yjms68mmae1il"},{"post_id":"cjhfv9zh1001ijms6scdfjhk0","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zh70022jms6u8xr4cts"},{"post_id":"cjhfv9zgq000pjms6rco66wmn","category_id":"cjhfv9zh1001jjms6opuehfph","_id":"cjhfv9zh90026jms61fihp22v"},{"post_id":"cjhfv9zh3001qjms6xrwse2q4","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zha002ajms6wqq84e9r"},{"post_id":"cjhfv9zgs000vjms6cm1vlmpc","category_id":"cjhfv9zh1001jjms6opuehfph","_id":"cjhfv9zhb002ejms60sdd2vhq"},{"post_id":"cjhfv9zh6001xjms6jny56wue","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zhc002ijms6n0aafl2k"},{"post_id":"cjhfv9zh0001fjms6i7q8fzci","category_id":"cjhfv9zh6001zjms6mkw8j5jh","_id":"cjhfv9zhe002ljms6ftibzu34"},{"post_id":"cjhfv9zh80025jms64agvfh3g","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zhf002pjms6qzn5ywlh"},{"post_id":"cjhfv9zh90029jms6ecw0yk54","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zhg002sjms664zgqv1g"},{"post_id":"cjhfv9zh5001tjms662eq0527","category_id":"cjhfv9zh90027jms6l05z6oei","_id":"cjhfv9zhg002tjms6nyf6t3c3"},{"post_id":"cjhfv9zhb002hjms6v8tbz1fv","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zhh002vjms642belpnh"},{"post_id":"cjhfv9zh70021jms6ps15x38k","category_id":"cjhfv9zh90027jms6l05z6oei","_id":"cjhfv9zhh002wjms6gmie9kbi"},{"post_id":"cjhfv9zhd002kjms6l2tuocrt","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zhh002yjms67tds50n9"},{"post_id":"cjhfv9zhe002ojms6eij8gvo8","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zhh0030jms6we6eqxbg"},{"post_id":"cjhfv9zhf002rjms6258ig203","category_id":"cjhfv9zg40003jms62q83dbk8","_id":"cjhfv9zhi0033jms63cw2z621"},{"post_id":"cjhfv9zha002djms6tugsfhfg","category_id":"cjhfv9zhe002njms61vw3428j","_id":"cjhfv9zhi0035jms6ttn2idxl"},{"post_id":"cjhfv9zm3003wjms6h61hoyc2","category_id":"cjhfv9zgm000ljms6bi7dvlca","_id":"cjhfv9zm80041jms6ksgw9dl3"}],"PostTag":[{"post_id":"cjhfv9zfz0001jms6e66k4e9l","tag_id":"cjhfv9zg60004jms6myne8asw","_id":"cjhfv9zgh000ajms6sutdya0f"},{"post_id":"cjhfv9zg20002jms6zdthqf8z","tag_id":"cjhfv9zgg0009jms6l4h43ghl","_id":"cjhfv9zgl000ijms6rgpgt4rn"},{"post_id":"cjhfv9zg60005jms6nkofg9ir","tag_id":"cjhfv9zgk000fjms6qlrv3isy","_id":"cjhfv9zgn000ojms6k1jpu2i2"},{"post_id":"cjhfv9zge0006jms6sjtns4af","tag_id":"cjhfv9zgm000mjms6ysgjryan","_id":"cjhfv9zgs000ujms6z0g0abo0"},{"post_id":"cjhfv9zgg0007jms6xfm0k84d","tag_id":"cjhfv9zgr000sjms6jzf2pg5c","_id":"cjhfv9zgv0011jms6ogiajz90"},{"post_id":"cjhfv9zgh000bjms6ceb3b894","tag_id":"cjhfv9zgu0010jms6w8ei4hep","_id":"cjhfv9zgy001ajms66e82ye6r"},{"post_id":"cjhfv9zgj000cjms69wtagp34","tag_id":"cjhfv9zgx0017jms6dxe5q6pi","_id":"cjhfv9zh1001hjms64n56dgcx"},{"post_id":"cjhfv9zh0001fjms6i7q8fzci","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zh2001ljms6nv1j5f29"},{"post_id":"cjhfv9zgk000gjms64t9gc89m","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zh3001pjms6oabxhwru"},{"post_id":"cjhfv9zh3001qjms6xrwse2q4","tag_id":"cjhfv9zgr000sjms6jzf2pg5c","_id":"cjhfv9zh5001wjms6x8yxwxgq"},{"post_id":"cjhfv9zgl000jjms6215nl5n6","tag_id":"cjhfv9zh2001mjms6bs0oe0od","_id":"cjhfv9zh70020jms67dbclb0x"},{"post_id":"cjhfv9zh6001xjms6jny56wue","tag_id":"cjhfv9zh2001mjms6bs0oe0od","_id":"cjhfv9zh80024jms6cpdm7qfu"},{"post_id":"cjhfv9zgm000njms67z84keqr","tag_id":"cjhfv9zh5001vjms6ens2jr3y","_id":"cjhfv9zh90028jms6tby7yovy"},{"post_id":"cjhfv9zh70021jms6ps15x38k","tag_id":"cjhfv9zh5001vjms6ens2jr3y","_id":"cjhfv9zha002cjms6fr25boq6"},{"post_id":"cjhfv9zgq000pjms6rco66wmn","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhb002fjms63ivzjjn8"},{"post_id":"cjhfv9zgr000tjms6js6w5ahn","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhe002mjms6j3707no7"},{"post_id":"cjhfv9zgs000vjms6cm1vlmpc","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhh002zjms6gev6ql4j"},{"post_id":"cjhfv9zgs000vjms6cm1vlmpc","tag_id":"cjhfv9zhf002qjms6uzd3qzm3","_id":"cjhfv9zhh0031jms6k6l7jmxu"},{"post_id":"cjhfv9zgs000vjms6cm1vlmpc","tag_id":"cjhfv9zhg002ujms60i1bskth","_id":"cjhfv9zhi0034jms6uohqqg5z"},{"post_id":"cjhfv9zgt000xjms675z2kr8f","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhi0036jms6w1wxdcdm"},{"post_id":"cjhfv9zgv0012jms66uvm4e5t","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhi0038jms6s7t9s8z3"},{"post_id":"cjhfv9zgw0014jms6p9xnt3ea","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhj003ajms6xfckfw1m"},{"post_id":"cjhfv9zgy0018jms61jlgd028","tag_id":"cjhfv9zhi0039jms69osfmtrc","_id":"cjhfv9zhj003cjms68qphdixy"},{"post_id":"cjhfv9zgy001bjms6u6hzfry8","tag_id":"cjhfv9zgz001ejms6bzgm14g6","_id":"cjhfv9zhj003ejms6v2uh1daq"},{"post_id":"cjhfv9zh1001ijms6scdfjhk0","tag_id":"cjhfv9zhj003djms6fbmxs4ke","_id":"cjhfv9zhk003gjms69fan83mj"},{"post_id":"cjhfv9zh5001tjms662eq0527","tag_id":"cjhfv9zh5001vjms6ens2jr3y","_id":"cjhfv9zhk003ijms62xicd3en"},{"post_id":"cjhfv9zh80025jms64agvfh3g","tag_id":"cjhfv9zhk003hjms614ord5sd","_id":"cjhfv9zhk003kjms69cprpewz"},{"post_id":"cjhfv9zh90029jms6ecw0yk54","tag_id":"cjhfv9zhk003hjms614ord5sd","_id":"cjhfv9zhl003mjms61uu92r6o"},{"post_id":"cjhfv9zha002djms6tugsfhfg","tag_id":"cjhfv9zhk003ljms6wgtmmjjy","_id":"cjhfv9zhl003ojms663h4v0tn"},{"post_id":"cjhfv9zhb002hjms6v8tbz1fv","tag_id":"cjhfv9zhl003njms6s0761rtj","_id":"cjhfv9zhl003qjms6t0mhvjf9"},{"post_id":"cjhfv9zhd002kjms6l2tuocrt","tag_id":"cjhfv9zhl003pjms6jtlswgbq","_id":"cjhfv9zhm003sjms69797l3r0"},{"post_id":"cjhfv9zhe002ojms6eij8gvo8","tag_id":"cjhfv9zhk003hjms614ord5sd","_id":"cjhfv9zhm003ujms6lz9rnphd"},{"post_id":"cjhfv9zhf002rjms6258ig203","tag_id":"cjhfv9zhk003hjms614ord5sd","_id":"cjhfv9zhm003vjms66c73vgxv"},{"post_id":"cjhfv9zm3003wjms6h61hoyc2","tag_id":"cjhfv9zgr000sjms6jzf2pg5c","_id":"cjhfv9zm7003zjms6a71up1j1"}],"Tag":[{"name":"Domain","_id":"cjhfv9zg60004jms6myne8asw"},{"name":"Redis","_id":"cjhfv9zgg0009jms6l4h43ghl"},{"name":"数字货币","_id":"cjhfv9zgk000fjms6qlrv3isy"},{"name":"Brew","_id":"cjhfv9zgm000mjms6ysgjryan"},{"name":"Nginx","_id":"cjhfv9zgr000sjms6jzf2pg5c"},{"name":"Machine Learning","_id":"cjhfv9zgu0010jms6w8ei4hep"},{"name":"Git","_id":"cjhfv9zgx0017jms6dxe5q6pi"},{"name":"Docker","_id":"cjhfv9zgz001ejms6bzgm14g6"},{"name":"Node","_id":"cjhfv9zh2001mjms6bs0oe0od"},{"name":"Python","_id":"cjhfv9zh5001vjms6ens2jr3y"},{"name":"SpringBoot","_id":"cjhfv9zhf002qjms6uzd3qzm3"},{"name":"Maven","_id":"cjhfv9zhg002ujms60i1bskth"},{"name":"hexo","_id":"cjhfv9zhi0039jms69osfmtrc"},{"name":"Linux","_id":"cjhfv9zhj003djms6fbmxs4ke"},{"name":"Shell","_id":"cjhfv9zhk003hjms614ord5sd"},{"name":"Regular","_id":"cjhfv9zhk003ljms6wgtmmjjy"},{"name":"frp","_id":"cjhfv9zhl003njms6s0761rtj"},{"name":"Socks5","_id":"cjhfv9zhl003pjms6jtlswgbq"}]}}