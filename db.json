{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wechat_qrcode.jpg","path":"uploads/wechat_qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1561189997212},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1561189990622},{"_id":"source/googleb85119e82958b681.html","hash":"a2834452b4f535256e4ffdb8302bb872ca97a399","modified":1519625303938},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1561189990623},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1561189990623},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1561189990623},{"_id":"themes/next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1561189997216},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1561189997216},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1561189997216},{"_id":"themes/next/bower.json","hash":"dbabc4b5b186070d425777562587de19848b1d56","modified":1561189997217},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1561189990626},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1561189990626},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1561189997220},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1561189990628},{"_id":"themes/next/package.json","hash":"d1fc59c32d27178d53f9d2c479443ed682e5bd91","modified":1561189997247},{"_id":"themes/next/_config.yml","hash":"5c066449a367f529d220181233b3d110c850c4bf","modified":1561191857177},{"_id":"source/about/index.md","hash":"177a2d83f88ea487933937135ca8d2ed5b46c124","modified":1561426286971},{"_id":"source/categories/index.md","hash":"634b044ed66071664ef9485f1fd78f868503fc30","modified":1518143691173},{"_id":"source/_posts/BTC-Tutorial.md","hash":"3bb0c9de8c0e940f53bb7517f548ff1e7bdf8900","modified":1561193784729},{"_id":"source/_posts/.DS_Store","hash":"739aaf471bbece02eb790423c78d730100f8a2f9","modified":1537865818555},{"_id":"source/_posts/Could-not-get-a-resource-from-the-pool.md","hash":"883ae69b1caeb61118687f8c8fbbb27c12ca54d9","modified":1518144222074},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name.md","hash":"79af511fd9cdaa49d651bc99520d1d6d50906ab8","modified":1561193960634},{"_id":"source/_posts/Java-constant-string-is-too-long.md","hash":"3cd30e1d34211e8abc4cf26d6ea789389a3304f4","modified":1561193952458},{"_id":"source/_posts/Machine-Learning-in-Java-1.md","hash":"268b56c5f54b806be8d98ff49b48e6969cbcb6dc","modified":1561193967097},{"_id":"source/_posts/Nginx-504-GateWay-Time-Out.md","hash":"9cf36b8e737788c4e1038db9328d5ec767171fad","modified":1561193988886},{"_id":"source/_posts/Spring-singleton-and-prototype.md","hash":"6de2cc5025b9bb870f8bad1c7b474f5de3693364","modified":1561194044823},{"_id":"source/_posts/apollo-eagerload.md","hash":"cac6021d84a975c85936f29086152e4f61b54db0","modified":1561193771462},{"_id":"source/_posts/build-an-app-distribution-platform.md","hash":"90689a8b3629b45ef917e4931997890ab9d75cf6","modified":1561193792399},{"_id":"source/_posts/brew-upgrade-error.md","hash":"5b628bb1b9785c2588d6ccaea02a3a929329a3fd","modified":1561193770137},{"_id":"source/_posts/centos7-docker-install-tutorial.md","hash":"76b8275d7b0e4608dce68b842f28a68a6a8bfc09","modified":1561440849477},{"_id":"source/_posts/centos-install-git.md","hash":"30ebaba9105b2e4ce6bd649e2922113dcdfba1a9","modified":1561193827484},{"_id":"source/_posts/centos-install-redis5-x.md","hash":"1d06a7dae8d8fea41b248a05387a1ea0ec10a168","modified":1561193838796},{"_id":"source/_posts/cnetos-install-pyenv.md","hash":"251e406a8e9aca47f93ddcc23c432ca7a24d6591","modified":1561193873645},{"_id":"source/_posts/common-commonds.md","hash":"f1451ecf7f79e7e88affb3a56f7e594afd35ded2","modified":1518144223065},{"_id":"source/_posts/config-npm-registry.md","hash":"5ea5b9d5e2e999e20271ac8ba88c054eb7bfef52","modified":1561193881892},{"_id":"source/_posts/devops-2-springboot-docker-integrated.md","hash":"9864e231b07919acd529d7e0cbd726359006e72b","modified":1561193908426},{"_id":"source/_posts/docker-create-mysql.md","hash":"62e356874a60287af2a5c31d2c5c65fc4552a3c9","modified":1561193913342},{"_id":"source/_posts/devops-1-environmental-configuration.md","hash":"2db0c954fc40fbfd38f5fde86cc2e6d99d43c19b","modified":1561193901688},{"_id":"source/_posts/docker-install-MongoDB.md","hash":"726119787bf7cfb4493830774b22e7f10ea7cebc","modified":1561193918347},{"_id":"source/_posts/docker-install-rabbitmq-cluster.md","hash":"324affde9f7e1d4ca03af1671063ad498e109f5e","modified":1561193927065},{"_id":"source/_posts/feign-post-form-data.md","hash":"e3e48e55d8dde15dfba40b85a86e3e525e254ac8","modified":1561194110662},{"_id":"source/_posts/docker-install-nexus.md","hash":"7e9ac2715f9209b58666c77ee95ec6f3f957008f","modified":1518144219594},{"_id":"source/_posts/gitee-with-webhook.md","hash":"97e3e07f766cfa4f93ba5b1da8a52752b4ab5988","modified":1561193932110},{"_id":"source/_posts/hexo-can't-find-module.md","hash":"2f56d1cf9f12d93c40aa272026d977f9a819ee58","modified":1561193938795},{"_id":"source/_posts/interview-experience.md","hash":"05bc7cc91946d3c414bee9673839ac60c7b2d895","modified":1561193942841},{"_id":"source/_posts/java-concurrency-study.md","hash":"63474387c8c19eed0bcb4b5b8257e0efd3bad2c5","modified":1561193948251},{"_id":"source/_posts/kubeadm-install-kubernetes.md","hash":"7cc12036ccceb0e7a6b57866b55c43daeb7f8d96","modified":1561193956465},{"_id":"source/_posts/life.md","hash":"5f0da4af9d8025c6dcbfc9fb4111367fb9713c20","modified":1518144214484},{"_id":"source/_posts/md5-and-salt-encryption.md","hash":"00c08adcfbae9e94404c866488610ae68a6deee4","modified":1561193975361},{"_id":"source/_posts/netty-study.md","hash":"3d11c3109ac37130814f00942727a477f8f5ac64","modified":1524022568821},{"_id":"source/_posts/nginx-load-balance-strategy.md","hash":"768d4f58a812d2c00a446f916fd28cce8545f5b9","modified":1561193993360},{"_id":"source/_posts/node-install.md","hash":"f21cca3c2f8b1937b1760551bf8d8cb9353c27ed","modified":1519542009576},{"_id":"source/_posts/node-project-summary.md","hash":"5a11d8f532a534f59a198db72907358d81857c43","modified":1561194005393},{"_id":"source/_posts/okhttp3-proxy-auth.md","hash":"a99693aa0d50ca6c53a470d0b4937637272d661c","modified":1561194010416},{"_id":"source/_posts/pthon-tutorial.md","hash":"5bf6e65055c42b22f42346059bfce84a426fc9a6","modified":1561194016901},{"_id":"source/_posts/python-requirements.md","hash":"574e281387466b5b17fe3865c8980b1e89bcb133","modified":1561194021409},{"_id":"source/_posts/raise-github-clone-speed.md","hash":"075da8467046726c3a4fbaa9dbabf24e7e1a59b7","modified":1561194025281},{"_id":"source/_posts/regular-expression-basic.md","hash":"d329cd0ea4d65039c5adc40f63a90faf7fe0b4ea","modified":1561194031882},{"_id":"source/_posts/server-over-the-wall.md","hash":"872c027fa148b9aa7cb9226c2a5aaea36691187d","modified":1561194036192},{"_id":"source/_posts/socks5-server.md","hash":"73c6ef5e32dfda218276387b21509555e151184b","modified":1518153993601},{"_id":"source/_posts/study-pandas-notes-2.md","hash":"0e37c5b9b46894cd9ccce64c4f28ec12862760f5","modified":1537950559630},{"_id":"source/_posts/study-pandas-notes-3.md","hash":"e261dd58650bb41453d515759ef99005941be0af","modified":1537954764819},{"_id":"source/_posts/study-pandas-notes.md","hash":"3702f76dc969f2b3136a9bf5fe5290321f5e90af","modified":1537950479206},{"_id":"source/_posts/study-shell.md","hash":"2ebded2fda21d8eebef02baae3869e779f9e5937","modified":1537950478596},{"_id":"source/_posts/swagger-2.9.2-NumberFormatException.md","hash":"7894f978fdc10d2170162794cebc38cbbbd01ef4","modified":1561194156594},{"_id":"source/_posts/ubuntu-install-lamp.md","hash":"9bbd284268c261dc0540043398c0b6d8206eb5f2","modified":1561194061959},{"_id":"source/_posts/use-frp.md","hash":"6ccdb6dd2bfb89e5957ddc915e054776cf4f398d","modified":1561194066845},{"_id":"source/_posts/yum-install-nginx-add-modules.md","hash":"f64d9101fdc48ee7372aa4829ecef9ba646b28de","modified":1561194073279},{"_id":"source/tags/index.md","hash":"3517dc6dfe54d62bf2f22e037b652c9ebcee9b97","modified":1518143689231},{"_id":"themes/next/.git/FETCH_HEAD","hash":"c176bfbcc0a071e13585bbdbf7d4fb9a50f44404","modified":1561189997181},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518271950973},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1518271950975},{"_id":"themes/next/.git/ORIG_HEAD","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1561189997196},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518271948677},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1561189997213},{"_id":"themes/next/.git/packed-refs","hash":"75abf188b66ef0605f3769d1d2d1649e17d9e31e","modified":1518271950972},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1561189997213},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1561189997214},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1561189997214},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1561189997214},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1561189997214},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1561189997214},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1561189990624},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1561189997215},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1561189997215},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1561189997215},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1561189997215},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1561189997215},{"_id":"themes/next/.git/index","hash":"397cf3005b91b152fd0b63f13db7ffa3ddb4ae3f","modified":1561189997276},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1561189997215},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1561189997217},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1561189990629},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1561189990628},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1561189990629},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1561189997218},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1561189997217},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1561189997218},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1561189990629},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1561189990630},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1561189997220},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1561189997220},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1561189997221},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1561189997221},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1561189997221},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1561189990636},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1561189990636},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1561189997221},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1561189997222},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1561189997222},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1561189997222},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1561189997223},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1561189997223},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1561189997223},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1561189997223},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1561189990639},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1561189990639},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1561189997223},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1561189990640},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1561189990640},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1561189990640},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1561189997245},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1561189997245},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1561189997245},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1561189997246},{"_id":"themes/next/layout/page.swig","hash":"29c64c7031aaf276d3d11cdf2e95025996fd6eed","modified":1561189997246},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1561189997246},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1561189997246},{"_id":"themes/next/scripts/image-stream.js","hash":"a0f1cc437f62c97c1bbb4ba76a6ce75ab2c7b7a3","modified":1520242511398},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1561189990665},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1561189990665},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1561189990708},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1561189990708},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1561189990708},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561189990694},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521357504089},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","hash":"76a26a5afb52b2c543239b8eaf1f94cc848690e0","modified":1523589176784},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174110.png","hash":"7eedb7da5e2fdd8b3015c3112abbe86fa9331fa2","modified":1519724472231},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174208.png","hash":"1b942b703548a1dec40863a7b49d8ea2cc9fb83f","modified":1523589222287},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203815.png","hash":"b08a4c9f5b810d91dbec8edb04beaed6741c551e","modified":1519735097011},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-204116.png","hash":"5355b4ab2dc62f73f63276874a1f4081e149568d","modified":1519735280189},{"_id":"source/_posts/devops-1-environmental-configuration/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1519632571250},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203234.png","hash":"c93c1a9404d7e4ad17675f4c4aa57b9b2f3892f1","modified":1519734756150},{"_id":"source/_posts/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","hash":"bf8253b3b123ad8d1a31477279c81d5d3656ae44","modified":1519632280050},{"_id":"source/_posts/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","hash":"350a21551ae37433ca465e3bfa65292f98e6ef0f","modified":1519632297002},{"_id":"source/_posts/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","hash":"2cf2d5dc049895e1d637585c5fddade524cb5242","modified":1519632269090},{"_id":"source/_posts/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","hash":"7e153fb751346f4885dde3221d5d90b4a86e7f32","modified":1519632288848},{"_id":"source/_posts/devops-1-environmental-configuration/191b000762026287366b.jpeg","hash":"b5a2e2b35c0668f64642ba3c87a0774ccc94b000","modified":1519632555448},{"_id":"source/_posts/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","hash":"6a85f547b4dc2ee3773b60da5eac28ae66dbfb92","modified":1519629692408},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163439@2x.png","hash":"0b4e62dda96e20e22f40558bdd4aab5c3aaf22e0","modified":1523589125355},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163748@2x.png","hash":"f62a3bc80769f86084993ecba84ee959a7635288","modified":1519547872650},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-113942.png","hash":"392554f3c7c29badcae1a5afc4e98d5b0303ead2","modified":1524022835752},{"_id":"source/_posts/study-pandas-notes/pandas.png","hash":"d66541879a5350bf2ba26000d4d114aab15315f7","modified":1537865987528},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518271948678},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518271948677},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518271948679},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518271948679},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518271948678},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518271948679},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518271948679},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518271948677},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1518271948678},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518271948679},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518271948679},{"_id":"themes/next/.git/logs/HEAD","hash":"64ca740dd83257ccae824032bcefde04ff7605a9","modified":1561189997277},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1561189997213},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1561189997213},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1561189997214},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1561189997214},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1561189997218},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1561189997219},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1561189997219},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1561189997219},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1561189990632},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1561189997219},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1561189990633},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1561189997220},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1561189997220},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1561189997218},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1561189990631},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1561189990631},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1561189990631},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1561189990641},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1561189990641},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1561189990642},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1561189997224},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1561189997225},{"_id":"themes/next/layout/_macro/post.swig","hash":"ca89a2a95c149f759274ab68dbc1e9581baadf4a","modified":1561189997224},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1561189997231},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1561189997231},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1561189997232},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1561189997232},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1561189997234},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9cd491b8ff2dc9d6976cd9e89c4e56678e3bcefa","modified":1561189997234},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1561189997238},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1561189997238},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"aa0893cddc803bd3fd34ab78d7d003bd86be86b6","modified":1561189997238},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a7126355227236f9433615edfd89e86fd51ed676","modified":1561189997241},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1561189997242},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1561189997242},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1561189997243},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1561189997243},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1561189997243},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1561189997243},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1561189997244},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1561189997245},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1561189997225},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1561189997225},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1561189997225},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1561189990648},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1561189997228},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1561189997247},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1561189997247},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1561189997247},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1561189997248},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1561189997248},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1561189997248},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1561189997249},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1561189997249},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1561189997249},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1561189997249},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1561189997249},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1561189997250},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1561189997250},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1561189997250},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1561189997251},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1561189997270},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1561189997270},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1561189990694},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561189990694},{"_id":"themes/next/source/images/avatar.jpg","hash":"33d81e502d7e39220ede500f480c1025b852e6cb","modified":1499010812000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1561189990695},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1561189990695},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1561189990695},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1561189990695},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1561189990696},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1561189990696},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561189990696},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561189990696},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561189990697},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1561189990696},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561189990697},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1561189990697},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1561189997270},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1561189990697},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1561189990697},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1561189997271},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1561189997271},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1561189997271},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1561189997272},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1561189997272},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1561189997272},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1561189997273},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1561189997274},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1561189997274},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1561189997275},{"_id":"themes/next/source/uploads/wechat_qrcode.jpg","hash":"a27b8433792cafcf1fb1fc12a633bc26d8c0ffc1","modified":1561191362962},{"_id":"source/_posts/gitee-with-webhook/image-2018-153940@2x.png","hash":"f659353b32bf59165db6f55fd74d4b37a65dcf25","modified":1523589099513},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-114759@2x.png","hash":"d6f9d7c37608b15e42c339429f0184169d494586","modified":1524023302434},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-115544@2x.png","hash":"01b343692972469db6ec65954cc8e477d731c623","modified":1524023764256},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561189990687},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561189990687},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561189990687},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561189990693},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561189990693},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","hash":"b36ff8cc4b64172122bf00c0abbd715361d0176c","modified":1523589193609},{"_id":"themes/next/.git/objects/pack/pack-d91a09d4167ad9a9c9ff2484b2aa565759352141.idx","hash":"a46d59b922461811f7a5d05696e08bf97d91da39","modified":1526881458481},{"_id":"themes/next/.git/objects/pack/pack-e02a210e7d18998d803d276d8c61144698673a46.idx","hash":"3a95a57637379d997c2baa55f0e0a10def850172","modified":1520511054863},{"_id":"themes/next/.git/refs/heads/master","hash":"3ad3f4ebb89c02a072386b262ce063a1a1442c9d","modified":1561189997277},{"_id":"themes/next/.git/refs/tags/v6.0.4","hash":"970d0b8d2ae0a09ecb78c5b3b195ed4f19e68d9c","modified":1520511054883},{"_id":"themes/next/.git/refs/tags/v6.0.5","hash":"5cabae7037c56a42dc3ee8fc38d90faf7f3d9642","modified":1520511054892},{"_id":"themes/next/.git/refs/tags/v6.1.0","hash":"81c10f37e3a9a23c145030d84bf03adc71f603f1","modified":1526881458516},{"_id":"themes/next/.git/refs/tags/v6.0.6","hash":"b8d542012c19aa43e5fa988f88309f5986136b93","modified":1526881458516},{"_id":"themes/next/.git/refs/tags/v6.3.0","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1526881458503},{"_id":"themes/next/.git/refs/tags/v6.2.0","hash":"57d5b7117be39f63695e4953bac380a207633779","modified":1526881458517},{"_id":"themes/next/.git/refs/tags/v6.4.0","hash":"48dd2138567e9dd832f6adcbdf2e1945f999a59a","modified":1561189963306},{"_id":"themes/next/.git/refs/tags/v6.4.1","hash":"ac845fb35dc632c804d5d2eebcd731ad4d4ddfac","modified":1561189963306},{"_id":"themes/next/.git/refs/tags/v6.4.2","hash":"106bd960739a3bbb6142bd76625fcba8991d7abd","modified":1561189963307},{"_id":"themes/next/.git/refs/tags/v6.5.0","hash":"b6c2091da7683b424070a8dd6d7e377dec7c8ea0","modified":1561189963307},{"_id":"themes/next/.git/refs/tags/v6.7.0","hash":"b857a6c4428702973dc7b67a5c2a1e248653b49c","modified":1561189963308},{"_id":"themes/next/.git/refs/tags/v6.6.0","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1561189963307},{"_id":"themes/next/.git/refs/tags/v7.0.0","hash":"2d4536d7701746b3624fa92eeddeb943c32094d8","modified":1561189963308},{"_id":"themes/next/.git/refs/tags/v7.0.1","hash":"9779f7a264bcd264d2e6edaa173ff6a5a22f996a","modified":1561189963308},{"_id":"themes/next/.git/refs/tags/v7.1.0","hash":"d4eb8a8fc73617512e52707a8696a911b067f12f","modified":1561189963309},{"_id":"themes/next/.git/refs/tags/v7.1.2","hash":"5da254a35926656e17cb71d94eaee61c2610ed37","modified":1561189963309},{"_id":"themes/next/.git/refs/tags/v7.1.1","hash":"9a421ea6943f449d6efad94759fbf056fb880391","modified":1561189963309},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1561189997224},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1561189990642},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1561189997233},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1561189997233},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1561189997233},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1561189997233},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1561189997232},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1561189997234},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1561189997235},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1561189997235},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1561189997235},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1561189997235},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1561189997236},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1561189997236},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1561189997236},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1561189997237},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1561189997237},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a09d2af2a8470555eeb265b0eb14dc678079e870","modified":1561189997237},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1561189997237},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1561189997238},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1561189997238},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1561189997239},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1561189997239},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1561189997239},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1561189997239},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1561189997240},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1561189997240},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1561189997240},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1561189997240},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1561189997241},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1561189997241},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1561189997242},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1561189997244},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1561189997244},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1561189997244},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1561189997226},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1561189997226},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"f537846ace6a1afdacf122848dd01a32ceb66006","modified":1561189997226},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1561189997226},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1561189997227},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1561189997227},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1561189997227},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1561189997228},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1561189990647},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1561189997228},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1561189997228},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1561189997228},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1561189997229},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1561189997229},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1561189997229},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1561189997230},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1561189997230},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1561189997230},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1561189997231},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1561189990648},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1561189997265},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1561189997265},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1561189990686},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1561189990687},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1561189997269},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1561189990693},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1561189997269},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1561189997270},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1518272702468},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"bf7819cbb879bb82ec1097513d8f799df8835e0f","modified":1518272702469},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1561189990700},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1518272702469},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1561189990701},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1561189990701},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1561189990701},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1561189990701},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1518273583635},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1518273583636},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1518273583635},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1518273583636},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1518273583637},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1518273583638},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1518273583638},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1518273583638},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1518273583638},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561189990707},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561189990708},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561189990707},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1561189997273},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1561189997274},{"_id":"themes/next/.git/objects/pack/pack-ebba45649b657c0871867d3af57fd07e7249d210.idx","hash":"6f10e6eaca0a6d163d2c4f5439dfab94a683e6ef","modified":1518271950964},{"_id":"themes/next/.git/objects/pack/pack-ed4609e16fb07aac6afb9c164adb88bef3c39b08.idx","hash":"b5542ca199cbe944ccf42aa8c96974df27275616","modified":1561189963261},{"_id":"themes/next/.git/objects/pack/pack-e02a210e7d18998d803d276d8c61144698673a46.pack","hash":"47f3ceea9d30cdb0a9cecfb41779a7953b91149c","modified":1520511054863},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1561189997275},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"64ca740dd83257ccae824032bcefde04ff7605a9","modified":1561189997278},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518271950973},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"66c3c5ab92177bc9836db643abc6303b68928d7c","modified":1526881458498},{"_id":"themes/next/.git/refs/remotes/origin/docs","hash":"9185328823b87852ee2c545ae7edb8b23c1c5180","modified":1561189963287},{"_id":"themes/next/.git/refs/remotes/origin/i18n","hash":"83c3d59c3e3eb453009e1372aeb15764be8652c9","modified":1526881458501},{"_id":"themes/next/.git/refs/remotes/origin/font-refactoring","hash":"7f51a4d36d581cfa9210a7eb0290ae8a948e3452","modified":1561189963288},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"3ad3f4ebb89c02a072386b262ce063a1a1442c9d","modified":1561189963286},{"_id":"themes/next/.git/refs/remotes/origin/swig","hash":"c0af85a73b6fb00ad3dd6953a76e70b2c01d4729","modified":1561189963288},{"_id":"themes/next/.git/refs/remotes/origin/sub-menu-feature","hash":"510bceb8f79779f784f1c0d16e08748c208e8270","modified":1520511054882},{"_id":"themes/next/.git/refs/remotes/origin/title","hash":"c4a7304114e7b1969c950ce8caf71f540911a780","modified":1561189963289},{"_id":"themes/next/.git/refs/remotes/origin/v6.x","hash":"81f1073f2bd2f1e1b3e13e260043918e8c458cae","modified":1561189963289},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1561189997251},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1561189997251},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1561189997251},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1561189997252},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1561189990669},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1561189997255},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1561189997258},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1561189997258},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1561189997264},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1561189997264},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1561189997264},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1561189997265},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1561189997265},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1561189997265},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1561189990686},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1561189997266},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1561189997267},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1561189997267},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1561189997267},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1561189997267},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1561189997268},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1561189997266},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1561189997266},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1561189997266},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1561189997266},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1561189997267},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1561189990688},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1561189990688},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1561189997268},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1561189997268},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1561189997269},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1561189997268},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1561189997269},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1561189997269},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518272702460},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1518272702462},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"1223a2f4eeb427a25a44fb56efe86c50c44c0426","modified":1518272702469},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"6effea4548320c5523c283dd1461578daaf24713","modified":1518272702456},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561189990702},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1561189990702},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561189990702},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1518273583630},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1518273583628},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1518273581683},{"_id":"themes/next/source/lib/pace/.git/index","hash":"10b5c9216a84cb20af6b619bf9d4a97860b1c569","modified":1518273583639},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"bb3c30cf521feaa7ac447fee70f54cdcbd1892a1","modified":1518273583627},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561189990704},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561189990704},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561189990707},{"_id":"source/_posts/gitee-with-webhook/WX20180225-164721@2x.png","hash":"b1668d2cc7395c1fc87e14b093abcb2a64cdef16","modified":1523589158675},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"2afcdadd62b97ccac8a17749f96031b875df6375","modified":1518271950973},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"e84c32fedd584aab2284a4d5e4461c593d5ca482","modified":1526881458498},{"_id":"themes/next/.git/logs/refs/remotes/origin/docs","hash":"7891d434de2a1b01076b47cf042317a104f7294d","modified":1561189963287},{"_id":"themes/next/.git/logs/refs/remotes/origin/font-refactoring","hash":"9c504845c06c942a6b4811ebad953f32dd83a58f","modified":1561189963288},{"_id":"themes/next/.git/logs/refs/remotes/origin/i18n","hash":"715cca5adabcaab3bcbf614a2b5aa92d4d121d0a","modified":1526881458501},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"7249541cddc45ed7a2fd6c610c08756109e47eb8","modified":1561189963286},{"_id":"themes/next/.git/logs/refs/remotes/origin/sub-menu-feature","hash":"6592e4715d0b7fb9064c3508a7563af84466e935","modified":1520511054882},{"_id":"themes/next/.git/logs/refs/remotes/origin/swig","hash":"19411be1f0fc614ee4c65bb2706aea75db6663bc","modified":1561189963288},{"_id":"themes/next/.git/logs/refs/remotes/origin/title","hash":"037225c7fe538dc390869d19b5e0136cac657eb8","modified":1561189963289},{"_id":"themes/next/.git/logs/refs/remotes/origin/v6.x","hash":"8c75189f94120448b0b2997046f1b1822dfcc4f7","modified":1561189963289},{"_id":"themes/next/.git/refs/remotes/origin/ivan/feat-custom-lang","hash":"b5b5ff88c34b6d04d252b597a3bb43df8ff607b9","modified":1526881458502},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1561189997252},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1561189997252},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1561189997252},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1561189997253},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1561189997253},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1561189997253},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1561189997253},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1561189997254},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1561189997254},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1561189990670},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1561189997254},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1561189997254},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1561189997254},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1561189990672},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1561189997255},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1561189990673},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1561189990673},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1561189997255},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1561189997255},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1561189997255},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1561189990674},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1561189997256},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1561189997256},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1561189997256},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1561189997256},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1561189997256},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1561189997257},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1561189997257},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1561189997257},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1561189997257},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1561189997258},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1561189990676},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1561189990676},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1561189997258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1561189997259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1561189997259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1561189997259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1561189997259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1561189997260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1561189997260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1561189997260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1561189997260},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1561189997260},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1561189997262},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1561189997262},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1561189997263},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1561189997263},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1561189997263},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1561189997263},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1561189997263},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1561189997264},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"07cb7e9485ef12d9a22a0f821180770e621d084c","modified":1561189997264},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1561189997261},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1561189997261},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1561189997261},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1561189997261},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1561189990680},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1561189997261},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"6e4400d6704dee076434726b7a03ac464eb7bcb4","modified":1561189997262},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1561189997262},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1561189990691},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1561189990689},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1561189990689},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518272701240},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518272701241},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518272701239},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"95c0047effa6076441491feee6c71ab827eb4997","modified":1518272702461},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1518273581685},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561189990703},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1518273581684},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1518273581685},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"0096224d5d1b9692466901f4f9a853e6e73c44e6","modified":1518273583629},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1518273581683},{"_id":"themes/next/.git/objects/pack/pack-d91a09d4167ad9a9c9ff2484b2aa565759352141.pack","hash":"e1bdb6db81e003cedc05af7076977ab0ab75ca0f","modified":1526881458480},{"_id":"themes/next/.git/logs/refs/remotes/origin/ivan/feat-custom-lang","hash":"4558d15dc9690b7036cdf8cfa398505913203a06","modified":1526881458502},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1518272702289},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1518272702287},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1518272702290},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1518272702288},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1518272702286},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1518272702288},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1518272702289},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1518272702285},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1518272702286},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1518272702284},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"5442226ab36d787824e89f50241336839b376133","modified":1518272702461},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1518272702285},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1518273583611},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1518273583620},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1518273583612},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1518273583619},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1518273583614},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1518273583621},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1518273583617},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1518273583618},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1518273583619},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1518273583610},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1518273583615},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1518273583610},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1518273583616},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1518273583609},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1518273583613},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1518273583616},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1518273583617},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1518273583615},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1518273583612},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1518273583620},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1518273583613},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"3190f62cf3c4f9eccb1e54c8f7289ed7e6955767","modified":1518273583629},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"95c0047effa6076441491feee6c71ab827eb4997","modified":1518272702461},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518272702460},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"0096224d5d1b9692466901f4f9a853e6e73c44e6","modified":1518273583629},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1518273583628},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"95c0047effa6076441491feee6c71ab827eb4997","modified":1518272702460},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"0096224d5d1b9692466901f4f9a853e6e73c44e6","modified":1518273583628},{"_id":"themes/next/.git/objects/pack/pack-ebba45649b657c0871867d3af57fd07e7249d210.pack","hash":"b2b0dfd73ef5a96aaf65b07eee025149cdeb2f23","modified":1518271950963},{"_id":"themes/next/.git/objects/pack/pack-ed4609e16fb07aac6afb9c164adb88bef3c39b08.pack","hash":"76289618ad178fc873df1076eed650317ccb78db","modified":1561189963259},{"_id":"public/googleb85119e82958b681.html","hash":"33200cd680123c40e8384624eb30ad9d75a6e24f","modified":1561440865561},{"_id":"public/baidusitemap.xml","hash":"3bd7c6f891ef43eaf588a9a5051070154ec729f3","modified":1561440865561},{"_id":"public/sitemap.xml","hash":"29ab329274e698324556e2daa922c1ac685bb861","modified":1561440865631},{"_id":"public/search.xml","hash":"bc970fb40b6aff86cc77a2900dd086e45cfceb99","modified":1561440865631},{"_id":"public/atom.xml","hash":"2ecefe955a479ffeb12dcc33073ab1a4f5f804ef","modified":1561440865632},{"_id":"public/about/index.html","hash":"fb798fd039674a04b661b3cfbd38b29242f9b08b","modified":1561440865660},{"_id":"public/categories/index.html","hash":"d2dc383248ab7dd552e9cd5fb953b068730138de","modified":1561440865660},{"_id":"public/tags/index.html","hash":"4d44ba7b659ebedd423aa12679254cba9f008fde","modified":1561440865660},{"_id":"public/2019/06/25/centos7-docker-install-tutorial/index.html","hash":"316287ac5237bc9a5770c82417efc11bc7d710dd","modified":1561440865660},{"_id":"public/2019/06/12/feign-post-form-data/index.html","hash":"bd5c3e2d105078699e803d264bf71288346e16f1","modified":1561440865660},{"_id":"public/2019/05/20/swagger-2.9.2-NumberFormatException/index.html","hash":"6c735245df1509b8221b2cd93c63af04f7829ab3","modified":1561440865660},{"_id":"public/2019/05/18/apollo-eagerload/index.html","hash":"55e9d9015c47974745ff0ad95b68cefc3e78ab8a","modified":1561440865660},{"_id":"public/2019/04/29/Java-constant-string-is-too-long/index.html","hash":"d4565fd64e9ef27e842c478ea8647243d3b673e8","modified":1561440865660},{"_id":"public/2019/04/18/interview-experience/index.html","hash":"9910ab375ccf265bb35402f69c4ff5be6b041e80","modified":1561440865660},{"_id":"public/2019/03/25/Spring-singleton-and-prototype/index.html","hash":"3fe6354ab30814c4724c0cbd4302d5ce03e7f2f9","modified":1561440865660},{"_id":"public/2019/03/01/build-an-app-distribution-platform/index.html","hash":"d72b605b4f7578ff23e458afc9f5b39d545fc7cc","modified":1561440865660},{"_id":"public/2018/12/14/centos-install-redis5-x/index.html","hash":"22adab55d460f956c907b17b6a67ae965506400a","modified":1561440865661},{"_id":"public/2018/11/06/md5-and-salt-encryption/index.html","hash":"24b688699fc16cfa41b2c8cbb11077da1e9a35d2","modified":1561440865661},{"_id":"public/2018/09/26/study-pandas-notes-3/index.html","hash":"13a42acdf896659ef838b4a09a470a35824fefde","modified":1561440865661},{"_id":"public/2018/09/25/study-pandas-notes-2/index.html","hash":"db5fe4315cd62bcc2bd4d760319ed17a26186108","modified":1561440865661},{"_id":"public/2018/09/21/study-pandas-notes/index.html","hash":"73c3b3db65f7f1b47723ac4a56a1d3edef824414","modified":1561440865661},{"_id":"public/2018/06/13/java-concurrency-study/index.html","hash":"ec0b2f7aece33d769dd86b3e71ed7aab6a91db05","modified":1561440865661},{"_id":"public/2018/06/02/node-project-summary/index.html","hash":"bca5e1bc8616044ea85d3f30bd081c84684e68fd","modified":1561440865661},{"_id":"public/2018/08/30/okhttp3-proxy-auth/index.html","hash":"764039ffe6593388a89e60d044e79925d22b0d3a","modified":1561440865661},{"_id":"public/2018/05/07/use-frp/index.html","hash":"9d099564bbcf6b1ae9468c2715c2e90574807bfa","modified":1561440865661},{"_id":"public/2018/05/03/brew-upgrade-error/index.html","hash":"ba5010fdec4cc9b5a733759d155d8e534988de14","modified":1561440865661},{"_id":"public/2018/05/03/config-npm-registry/index.html","hash":"042119ba51bb57873f6374831a9dabc306034d7c","modified":1561440865662},{"_id":"public/2018/04/18/raise-github-clone-speed/index.html","hash":"4b27311c6988cc2ed5490072ac6722df70928d0a","modified":1561440865662},{"_id":"public/2018/04/11/netty-study/index.html","hash":"971d969665c350ef30685f9a62f6ae7f8a84ee6e","modified":1561440865662},{"_id":"public/2018/04/02/study-shell/index.html","hash":"1c6536a210e45561db6524881d6a44542d6e7756","modified":1561440865662},{"_id":"public/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/index.html","hash":"2357135938f0ff659069feed6b165747dcb51cb1","modified":1561440865662},{"_id":"public/2018/03/07/python-requirements/index.html","hash":"a606141121c686846690e04aaa907400c053ffe9","modified":1561440865662},{"_id":"public/2018/03/07/pthon-tutorial/index.html","hash":"2608250befa5672faa5f22505a93389930709e66","modified":1561440865662},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/index.html","hash":"12d2efe4e62c5a0235da49c9cf6fed56ae0738af","modified":1561440865662},{"_id":"public/2018/02/27/cnetos-install-pyenv/index.html","hash":"38d6f5f0a9ba759e00bac6e4e7c8a418343c40b9","modified":1561440865662},{"_id":"public/2018/02/26/devops-1-environmental-configuration/index.html","hash":"ea499007f1063dac4a4fba30c23a03eebfe75b20","modified":1561440865662},{"_id":"public/2018/02/25/gitee-with-webhook/index.html","hash":"f0433097b3e09de7743f997b0092fd5f6aa6c517","modified":1561440865663},{"_id":"public/2018/02/09/node-install/index.html","hash":"75ca95793bb41442333c1d5c2bdf56bcbae95442","modified":1561440865663},{"_id":"public/2018/01/17/docker-create-mysql/index.html","hash":"55fca215028bceee13979671c91972d964003a45","modified":1561440865663},{"_id":"public/2018/01/15/socks5-server/index.html","hash":"75e3eacd4e0db1da90632071666163b17f3182ed","modified":1561440865663},{"_id":"public/2018/01/04/BTC-Tutorial/index.html","hash":"0e35919a7b12ea52f2262abf9f99ce008ab0045c","modified":1561440865663},{"_id":"public/2017/12/07/regular-expression-basic/index.html","hash":"f7e86c182f755cd206f06b7ba22dff88cc071fd7","modified":1561440865663},{"_id":"public/2017/12/04/docker-install-rabbitmq-cluster/index.html","hash":"82d8cddd875a661555d568a31831c931201a72e7","modified":1561440865663},{"_id":"public/2017/12/02/kubeadm-install-kubernetes/index.html","hash":"603d32c5e8c904a53e430bc98db0fd06f4ec7157","modified":1561440865663},{"_id":"public/2017/12/02/server-over-the-wall/index.html","hash":"e3c7b102cbddea1635be3d0f52c3d640ec8c619f","modified":1561440865663},{"_id":"public/2017/11/30/common-commonds/index.html","hash":"c1115a3c415593a77223d53cb50203e735ce5465","modified":1561440865663},{"_id":"public/2017/11/20/Machine-Learning-in-Java-1/index.html","hash":"b417da03be7f782bb6500864bd1c603195dbf4c3","modified":1561440865663},{"_id":"public/2017/11/06/centos-install-git/index.html","hash":"038de0947142874fe1878768431e18fa2c2ba317","modified":1561440865664},{"_id":"public/2017/10/28/ubuntu-install-lamp/index.html","hash":"d9fbe1b839e03ef88e39040d78bb33f2a5db4cbc","modified":1561440865664},{"_id":"public/2017/10/12/nginx-load-balance-strategy/index.html","hash":"99af70e74458df67301e61365fde7327e21bf430","modified":1561440865664},{"_id":"public/2017/10/01/yum-install-nginx-add-modules/index.html","hash":"67a44c8484232951f6a4bee2efd6c616ad2f351f","modified":1561440865664},{"_id":"public/2017/09/30/hexo-can't-find-module/index.html","hash":"2fd1232e99cdca9a65eb6c3b076d9eb4da4d7e5d","modified":1561440865664},{"_id":"public/2017/09/30/docker-install-nexus/index.html","hash":"36a46f9deb25fe177b7d600563c475f4b0abd0a2","modified":1561440865664},{"_id":"public/2017/09/23/docker-install-MongoDB/index.html","hash":"e4ae6862aa3e1c5070323a17af65af96d5deff75","modified":1561440865664},{"_id":"public/2017/09/23/Could-not-get-a-resource-from-the-pool/index.html","hash":"f48864506c5ee0b6e2822d8e900ae23a94e33683","modified":1561440865664},{"_id":"public/2017/09/23/life/index.html","hash":"7bc0d7c8dd0cb272a5881b1daafe6e6e985930e4","modified":1561440865665},{"_id":"public/2017/09/22/Nginx-504-GateWay-Time-Out/index.html","hash":"234d8dc4e29b5b017ca5edc7f88f78cda2674c67","modified":1561440865665},{"_id":"public/archives/index.html","hash":"800ded05c7d650e70f46a1258d318afd282ecbaf","modified":1561440865665},{"_id":"public/archives/page/3/index.html","hash":"cbf1fd0d81c7bd8a0e5afbc0ecc1a6c4743223f6","modified":1561440865665},{"_id":"public/archives/page/2/index.html","hash":"e527681a0941628845b9d131101fbdc71fed9925","modified":1561440865665},{"_id":"public/archives/page/4/index.html","hash":"fc01bfabfc086959f3bf571be2bb99f3a1cb0288","modified":1561440865665},{"_id":"public/archives/page/5/index.html","hash":"eef4f0a09c4c66cfb01906ad719994e11572f9ee","modified":1561440865665},{"_id":"public/archives/2017/index.html","hash":"48a2562420f64858cde0486f64104610a4c8bf8e","modified":1561440865665},{"_id":"public/archives/2017/page/2/index.html","hash":"c069f6ed00e85d8e51e88f79cf29cd151f6f35ee","modified":1561440865665},{"_id":"public/archives/2017/09/index.html","hash":"ff3c3606b913e44251a6802b83605dab8766cbfb","modified":1561440865665},{"_id":"public/archives/2017/10/index.html","hash":"97bf3e57e0ea5b154d912473f98cff3eb1855b3d","modified":1561440865665},{"_id":"public/archives/2017/11/index.html","hash":"6344860c816a220d392126a18c9da4b0c78d4604","modified":1561440865665},{"_id":"public/archives/2017/12/index.html","hash":"595a2f196e5a8a47b1200f2d6eb512ad15f5c723","modified":1561440865665},{"_id":"public/archives/2018/index.html","hash":"8ab5296df91b10ee69eda62bcdcd8238cc872e27","modified":1561440865665},{"_id":"public/archives/2018/page/2/index.html","hash":"585af504f74e26983879a8f411c2309421ba1b7c","modified":1561440865666},{"_id":"public/archives/2018/page/3/index.html","hash":"df6f8545758036a401181650e53c7ecf7a6961f9","modified":1561440865666},{"_id":"public/archives/2018/01/index.html","hash":"1ed27b1f504ee2e5034867054ec1a74683aa9e0a","modified":1561440865666},{"_id":"public/archives/2018/02/index.html","hash":"34f3a32490d67a2d4279ee54e750bf64314e8044","modified":1561440865666},{"_id":"public/archives/2018/03/index.html","hash":"51722b2113716a179c432afb89ef8f0fefd137e9","modified":1561440865666},{"_id":"public/archives/2018/04/index.html","hash":"49cf05b6b05e9f5df78f5b8d9182e592968044e0","modified":1561440865666},{"_id":"public/archives/2018/05/index.html","hash":"bc96f3005c5cb53d6c6a6c25563e43d57e91b0f1","modified":1561440865666},{"_id":"public/archives/2018/06/index.html","hash":"ee979338c03a3964253473404e653195e54e9852","modified":1561440865666},{"_id":"public/archives/2018/08/index.html","hash":"ee262f2251b51ed067036f60bc13cae82747a3f3","modified":1561440865666},{"_id":"public/archives/2018/09/index.html","hash":"7844a8e2dce092d6c80299ce924cad3ee96937ac","modified":1561440865666},{"_id":"public/archives/2018/11/index.html","hash":"35a395ddb0c65733daaf68bf6f3e2b52ae43a8da","modified":1561440865666},{"_id":"public/archives/2018/12/index.html","hash":"38f6eb2be7f04f76b58830c4995357a3a0fee204","modified":1561440865666},{"_id":"public/archives/2019/index.html","hash":"2ec17c28a4302401abbaeffeff970481cdf555bf","modified":1561440865666},{"_id":"public/archives/2019/03/index.html","hash":"c09cbf7a2e47805aaff9cb20ce00833999626d83","modified":1561440865666},{"_id":"public/archives/2019/04/index.html","hash":"3ee052e413edace9b1a617b811b935b4051fc3e6","modified":1561440865666},{"_id":"public/archives/2019/05/index.html","hash":"989dacc8e5b6c5238a5a84de837307e31d8bb0f8","modified":1561440865667},{"_id":"public/archives/2019/06/index.html","hash":"0e80d76684a0cddfb5ba6672b993c78663e1b5fd","modified":1561440865667},{"_id":"public/categories/数字货币/index.html","hash":"f3570440e9e064c8d08799427783a20410264bf2","modified":1561440865667},{"_id":"public/categories/Shell/index.html","hash":"5af0f5ab0d68d78927a48d063ae30ac4fc0561f7","modified":1561440865667},{"_id":"public/categories/Java/index.html","hash":"fcff128d6f8f9c68b4716bca5c1cd45212fbf2e0","modified":1561440865667},{"_id":"public/categories/Machine-Learning/index.html","hash":"b3b4bf701f245cf6f32c804136e43b391ccef77f","modified":1561440865667},{"_id":"public/categories/Linux/index.html","hash":"cda277bd0356b90e2bf97f7bedc1f0d08bb7e2f0","modified":1561440865667},{"_id":"public/categories/Linux/page/2/index.html","hash":"f1201dc413a109e836185c741bf8ad0bdb239900","modified":1561440865667},{"_id":"public/categories/Linux/page/3/index.html","hash":"9c79370928bad6a6131f83a0872c6c03df62ab42","modified":1561440865667},{"_id":"public/categories/DevOps/index.html","hash":"cefd8dea66988e65a92ee17315c75d93ebe1e3c5","modified":1561440865667},{"_id":"public/categories/面试/index.html","hash":"c9aa3eda71ca17400f1f924173f92ed10b9a49ff","modified":1561440865667},{"_id":"public/categories/Other/index.html","hash":"68fe103eb1793a6a9b896eafe6e1a0315ca7b242","modified":1561440865667},{"_id":"public/categories/Node/index.html","hash":"5032c27c17af6eed63ee400a717207dcc8d4dce0","modified":1561440865667},{"_id":"public/categories/Python/index.html","hash":"88f68919fe026c7f4fd7a31728066dbf8afd1aa6","modified":1561440865668},{"_id":"public/categories/Regular/index.html","hash":"343dce9889c2bb8ec42a43304c9c1d10381d63e0","modified":1561440865668},{"_id":"public/index.html","hash":"40cb00a30639f60dfbd9f5ba4c42ef594237316f","modified":1561440865668},{"_id":"public/page/2/index.html","hash":"1143c233be9435140f72ce7f10eba012d92f8dad","modified":1561440865668},{"_id":"public/page/3/index.html","hash":"8660a8f31a797d518e24445850c65585231faa66","modified":1561440865669},{"_id":"public/page/4/index.html","hash":"f07ebdac4a3034a9b4fff3469618d8109c6f4c25","modified":1561440865669},{"_id":"public/page/5/index.html","hash":"431080f7e124d0c3dbce9ac3aca660c3eab686ca","modified":1561440865669},{"_id":"public/tags/数字货币/index.html","hash":"3234ea9059e7d0e8f7068219a8f90536023f572f","modified":1561440865669},{"_id":"public/tags/Domain/index.html","hash":"0d1ede4e9a76a0eb5e8a40a4212a4d5695bfd85c","modified":1561440865669},{"_id":"public/tags/Redis/index.html","hash":"4005a59bcd98fd458d3d85bab8a04460f165b185","modified":1561440865669},{"_id":"public/tags/String/index.html","hash":"04db032565159c87e73678502b955439d6ed83f5","modified":1561440865669},{"_id":"public/tags/Machine-Learning/index.html","hash":"2df13a3d17339433672278ee46fe338c665d0235","modified":1561440865669},{"_id":"public/tags/Spring/index.html","hash":"0a3379c2c00da3b441ff468b960bfacad57ad0d2","modified":1561440865669},{"_id":"public/tags/Apollo、Feign/index.html","hash":"fa80832b00ef5144d154f42dd3b9615f410e019f","modified":1561440865669},{"_id":"public/tags/Brew/index.html","hash":"93a3576be0471a0df25b2a26b69011044acfbb96","modified":1561440865670},{"_id":"public/tags/Nginx/index.html","hash":"417060a694f67959fc313c246aae77c2a5ae2765","modified":1561440865670},{"_id":"public/tags/app-分发/index.html","hash":"1c25586e17acce334956277fdf0b63ace941cd15","modified":1561440865670},{"_id":"public/tags/Docker/index.html","hash":"7c9b0c4ec2b1b250466e8c653917644f38d24d9f","modified":1561440865670},{"_id":"public/tags/Git/index.html","hash":"9ebd98b576178999e8922e12ac87a69ac58e0841","modified":1561440865670},{"_id":"public/tags/Python/index.html","hash":"08e4f1fdd36fc7cac7a7d4ae4c7d3dc69c6b19f2","modified":1561440865670},{"_id":"public/tags/Node/index.html","hash":"8704dddc5e23fb12ee1deda2cea350d27b156aab","modified":1561440865670},{"_id":"public/tags/SpringBoot/index.html","hash":"b9c468f114336511c8665d8b7ce7b0f20fe1a696","modified":1561440865670},{"_id":"public/tags/Maven/index.html","hash":"e407cd558513831f772e86d2d5074f8d10c79ffe","modified":1561440865671},{"_id":"public/tags/Feign/index.html","hash":"173d14570b36cc53fc14be31150591425490ef12","modified":1561440865671},{"_id":"public/tags/hexo/index.html","hash":"e48495ca293a0819b835d70ab4dfa8ffe50713cc","modified":1561440865671},{"_id":"public/tags/Linux/index.html","hash":"d765a9bcdb62f44678f9b1fc0980b6b2ea02d681","modified":1561440865671},{"_id":"public/tags/工作经历/index.html","hash":"0cc57ee0d204461189262199108f0d2724930f43","modified":1561440865671},{"_id":"public/tags/concurrency/index.html","hash":"5ca3145d90e559c97606cea37d2dda19cafa67b1","modified":1561440865671},{"_id":"public/tags/加密/index.html","hash":"40713ab348e377020f9553fa259991e8443534b1","modified":1561440865671},{"_id":"public/tags/rabbitmq/index.html","hash":"f43ac3af24da3f5348e37f28d63be7423c65d76d","modified":1561440865671},{"_id":"public/tags/okhttp/index.html","hash":"8767d180f6f5fd944d094d788e31c25177e76bad","modified":1561440865671},{"_id":"public/tags/Regular/index.html","hash":"1c3ab88cf9935493d0a49c2439cfcd8178ff78a7","modified":1561440865671},{"_id":"public/tags/Shell/index.html","hash":"2dcd29ab63bf5f635f39adf60e0c9650bbb94cea","modified":1561440865672},{"_id":"public/tags/pandas/index.html","hash":"af3d90e1a41f2a0666ec322ed90bd70f37a1e998","modified":1561440865672},{"_id":"public/tags/Socks5/index.html","hash":"e0f463fd418afedbaae30b57b2120fd2823d5e8d","modified":1561440865672},{"_id":"public/tags/Swagger2/index.html","hash":"9b490f21666302d682e4593b37c21ba551b68efb","modified":1561440865672},{"_id":"public/tags/frp/index.html","hash":"9cf9d9440f98d8b6d59a20bfec2644ef68b7a862","modified":1561440865672},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1561440865686},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1561440865686},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561440865687},{"_id":"public/images/avatar.jpg","hash":"33d81e502d7e39220ede500f480c1025b852e6cb","modified":1561440865687},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1561440865687},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1561440865687},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1561440865687},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1561440865687},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1561440865687},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1561440865687},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561440865687},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561440865687},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561440865687},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1561440865687},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1561440865687},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1561440865687},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561440865687},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1561440865692},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1561440865692},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561440865692},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1561440865692},{"_id":"public/uploads/wechat_qrcode.jpg","hash":"a27b8433792cafcf1fb1fc12a633bc26d8c0ffc1","modified":1561440865692},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561440865692},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1561440865692},{"_id":"public/2018/09/21/study-pandas-notes/pandas.png","hash":"d66541879a5350bf2ba26000d4d114aab15315f7","modified":1561440865692},{"_id":"public/2018/04/18/raise-github-clone-speed/WX20180418-113942.png","hash":"392554f3c7c29badcae1a5afc4e98d5b0303ead2","modified":1561440865692},{"_id":"public/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","hash":"76a26a5afb52b2c543239b8eaf1f94cc848690e0","modified":1561440865692},{"_id":"public/2018/02/25/gitee-with-webhook/WX20180225-163748@2x.png","hash":"f62a3bc80769f86084993ecba84ee959a7635288","modified":1561440865692},{"_id":"public/2018/02/25/gitee-with-webhook/WX20180225-163439@2x.png","hash":"0b4e62dda96e20e22f40558bdd4aab5c3aaf22e0","modified":1561440865693},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174208.png","hash":"1b942b703548a1dec40863a7b49d8ea2cc9fb83f","modified":1561440865693},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-204116.png","hash":"5355b4ab2dc62f73f63276874a1f4081e149568d","modified":1561440865693},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-174110.png","hash":"7eedb7da5e2fdd8b3015c3112abbe86fa9331fa2","modified":1561440865693},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203234.png","hash":"c93c1a9404d7e4ad17675f4c4aa57b9b2f3892f1","modified":1561440865693},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","hash":"bf8253b3b123ad8d1a31477279c81d5d3656ae44","modified":1561440865693},{"_id":"public/2018/02/27/devops-2-springboot-docker-integrated/WX20180227-203815.png","hash":"b08a4c9f5b810d91dbec8edb04beaed6741c551e","modified":1561440865693},{"_id":"public/2018/02/26/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","hash":"7e153fb751346f4885dde3221d5d90b4a86e7f32","modified":1561440865693},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","hash":"350a21551ae37433ca465e3bfa65292f98e6ef0f","modified":1561440865694},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","hash":"2cf2d5dc049895e1d637585c5fddade524cb5242","modified":1561440865694},{"_id":"public/2018/02/26/devops-1-environmental-configuration/191b000762026287366b.jpeg","hash":"b5a2e2b35c0668f64642ba3c87a0774ccc94b000","modified":1561440865694},{"_id":"public/2018/02/26/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","hash":"6a85f547b4dc2ee3773b60da5eac28ae66dbfb92","modified":1561440865694},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561440866155},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561440866157},{"_id":"public/2018/04/18/raise-github-clone-speed/WX20180418-115544@2x.png","hash":"01b343692972469db6ec65954cc8e477d731c623","modified":1561440866158},{"_id":"public/2018/04/18/raise-github-clone-speed/WX20180418-114759@2x.png","hash":"d6f9d7c37608b15e42c339429f0184169d494586","modified":1561440866158},{"_id":"public/2018/02/25/gitee-with-webhook/image-2018-153940@2x.png","hash":"f659353b32bf59165db6f55fd74d4b37a65dcf25","modified":1561440866158},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1561440866164},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1561440866164},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1561440866164},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1561440866164},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1561440866164},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1561440866164},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1561440866164},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1561440866164},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1561440866164},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1561440866164},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1561440866164},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1561440866164},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1561440866164},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1561440866165},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1561440866165},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1561440866165},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1561440866165},{"_id":"public/lib/canvas-nest/README.html","hash":"c7f0f61cf3f56521962f732cc636818f927c4f3f","modified":1561440866165},{"_id":"public/lib/pace/README.html","hash":"e4eabf8a7f895a880aa071345732c31578acd6fd","modified":1561440866165},{"_id":"public/css/main.css","hash":"b3b7da917edaec768741fd7a8bb11b66a6101fee","modified":1561440866165},{"_id":"public/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","hash":"b36ff8cc4b64172122bf00c0abbd715361d0176c","modified":1561440866165},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561440866165},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1561440866173},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1561440866173},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1561440866173},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561440866173},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1561440866173},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561440866176},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561440866182},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561440866182},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561440866183},{"_id":"public/2018/02/25/gitee-with-webhook/WX20180225-164721@2x.png","hash":"b1668d2cc7395c1fc87e14b093abcb2a64cdef16","modified":1561440866183},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1561440866211},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561440866221}],"Category":[{"name":"数字货币","_id":"cjxbdklcm0005bis6t343mau2"},{"name":"Shell","_id":"cjxbdklcr000abis6qsdv4bxc"},{"name":"Java","_id":"cjxbdklcu000gbis60lhsu204"},{"name":"Machine Learning","_id":"cjxbdkld1000sbis63cdqu5jq"},{"name":"Linux","_id":"cjxbdkld7001bbis63twtbmut"},{"name":"DevOps","_id":"cjxbdkldp002vbis6p0ije7u4"},{"name":"面试","_id":"cjxbdkldx003jbis6gyvj6ua5"},{"name":"Other","_id":"cjxbdkldz003rbis6zltyxxp8"},{"name":"Node","_id":"cjxbdkle3003xbis6wnulkiry"},{"name":"Python","_id":"cjxbdkle60044bis6fwb97wz7"},{"name":"Regular","_id":"cjxbdkle9004ibis68m6dy99v"}],"Data":[],"Page":[{"layout":"false","_content":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","source":"googleb85119e82958b681.html","raw":"layout: false\n---\ngoogle-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","date":"2019-05-10T06:39:56.958Z","updated":"2018-02-26T06:08:23.938Z","path":"googleb85119e82958b681.html","title":"","comments":1,"_id":"cjxbdklbe0000bis69nism37r","content":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n","site":{"data":{}},"excerpt":"","more":"google-site-verification: googleb85119e82958b681.html\n\ngoogle-site-verification: googleb85119e82958b681.html\n"},{"title":"关于","date":"2017-09-23T05:57:23.000Z","comments":0,"_content":"\n\n### 自我介绍\n\n- 目前就职于一家物联网公司，从事供应链金融开发工作。\n\n- Java 开发工程师（4年工作经验）\n\n- 邮箱 <a href = \"mailto:junhuali.dev@gmail.com\">junhuali.dev@gmail.com</a>\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-09-23 13:57:23\ncomments: false\n---\n\n\n### 自我介绍\n\n- 目前就职于一家物联网公司，从事供应链金融开发工作。\n\n- Java 开发工程师（4年工作经验）\n\n- 邮箱 <a href = \"mailto:junhuali.dev@gmail.com\">junhuali.dev@gmail.com</a>\n","updated":"2019-06-25T01:31:26.971Z","path":"about/index.html","layout":"page","_id":"cjxbdklcg0001bis6z5p3kwja","content":"<h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><ul>\n<li><p>目前就职于一家物联网公司，从事供应链金融开发工作。</p>\n</li>\n<li><p>Java 开发工程师（4年工作经验）</p>\n</li>\n<li><p>邮箱 <a href=\"mailto:junhuali.dev@gmail.com\" target=\"_blank\" rel=\"noopener\">junhuali.dev@gmail.com</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><ul>\n<li><p>目前就职于一家物联网公司，从事供应链金融开发工作。</p>\n</li>\n<li><p>Java 开发工程师（4年工作经验）</p>\n</li>\n<li><p>邮箱 <a href=\"mailto:junhuali.dev@gmail.com\" target=\"_blank\" rel=\"noopener\">junhuali.dev@gmail.com</a></p>\n</li>\n</ul>\n"},{"title":"分类","date":"2018-02-08T08:12:56.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-08 16:12:56\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-02-09T02:34:51.173Z","path":"categories/index.html","layout":"page","_id":"cjxbdklck0003bis6tiboh37i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-08T08:15:54.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-08 16:15:54\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-02-09T02:34:49.231Z","path":"tags/index.html","layout":"page","_id":"cjxbdklja0061bis66hfkkj2l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"数字货币入门","date":"2018-01-04T02:45:41.000Z","_content":"### 前言\n最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<!-- more -->\n### 怎么入场\n交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要\n进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所\n平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。\n我主要是在火币进行兑换，也叫OTC（场外交易）\n\nhttps://www.huobipro.pro\n如果请求不到，可以使用\nhttps://www.huobi.br.com/zh-cn/\n\n\n2018年04月20日11:38:10\n市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。\n","source":"_posts/BTC-Tutorial.md","raw":"---\ntitle: 数字货币入门\ndate: 2018-01-04 10:45:41\ncategories: 数字货币\ntag: 数字货币\n---\n### 前言\n最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<!-- more -->\n### 怎么入场\n交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要\n进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所\n平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。\n我主要是在火币进行兑换，也叫OTC（场外交易）\n\nhttps://www.huobipro.pro\n如果请求不到，可以使用\nhttps://www.huobi.br.com/zh-cn/\n\n\n2018年04月20日11:38:10\n市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。\n","slug":"BTC-Tutorial","published":1,"updated":"2019-06-22T08:56:24.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklch0002bis6aovoev8z","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<a id=\"more\"></a></p>\n<h3 id=\"怎么入场\"><a href=\"#怎么入场\" class=\"headerlink\" title=\"怎么入场\"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>\n<p><a href=\"https://www.huobipro.pro\" target=\"_blank\" rel=\"noopener\">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href=\"https://www.huobi.br.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/</a></p>\n<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。</p>","more":"<p></p>\n<h3 id=\"怎么入场\"><a href=\"#怎么入场\" class=\"headerlink\" title=\"怎么入场\"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>\n<p><a href=\"https://www.huobipro.pro\" target=\"_blank\" rel=\"noopener\">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href=\"https://www.huobi.br.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/</a></p>\n<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>"},{"title":"使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）","date":"2018-03-17T09:38:33.000Z","_content":"网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL\n证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let's Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<!-- more -->\n\n### 申请域名\n为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。\n\n免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。\n\n我申请的域名是`rubys.ml`,可以免费使用一年，续费的话不到10刀/年。\n\n### 配置Let's Encrypt 单域名\n首先访问[Let's Cncrypt官网](https://letsencrypt.org/)，`Get Started`，然后会提供两种方式，`With Shell Access`和`Without Shell Access`，\n\n- With Shell Access(官方推荐通过shell进行部署)\n使用`Certbot ACME`客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png)\n访问[certbot](https://certbot.eff.org/),选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。\n- 安装系统扩展包\n``` bash\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -ivh epel-release-latest-7.noarch.rpm\nyum -y install yum-utils\nyum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n```\n- 安装certbot\n``` bash\nsudo yum install certbot-nginx\n```\n- 运行certbot插件生成证书\n``` bash\nsudo certbot --nginx\n```\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png)\n\n- 重启nginx\n``` bash\nsystemctl restart nginx\n```\n访问[www.rubys.ml](www.rubys.ml),发现链接自动定向到https://www.rubys.ml\n\n增加自动续期\n``` bash\ncrontab -e\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew\n```\n\n上面的方法是单域名证书的创建\n### 配置Let's Encrypt 泛域名\n如果配置泛域名，还需要安装一个 `Certbot's DNS plugins` 插件\n目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持\n- certbot-dns-cloudflare\n- certbot-dns-cloudxns\n- certbot-dns-digitalocean\n- certbot-dns-dnsimple\n- certbot-dns-dnsmadeeasy\n- certbot-dns-google\n- certbot-dns-luadns\n- certbot-dns-nsone\n- certbot-dns-rfc2136\n- certbot-dns-route53\n\n目前支持的云服务商还不多\n阿里云的话可以使用如下脚本\nhttps://github.com/Neilpang/acme.sh\n从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。\n\n未完待续。。。\n","source":"_posts/Lets-Encrypt-free-wildcard-domain-name.md","raw":"---\ntitle: 使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）\ndate: 2018-03-17 17:38:33\ncategories: Shell\ntag: Domain\n---\n网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL\n证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let's Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<!-- more -->\n\n### 申请域名\n为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。\n\n免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。\n\n我申请的域名是`rubys.ml`,可以免费使用一年，续费的话不到10刀/年。\n\n### 配置Let's Encrypt 单域名\n首先访问[Let's Cncrypt官网](https://letsencrypt.org/)，`Get Started`，然后会提供两种方式，`With Shell Access`和`Without Shell Access`，\n\n- With Shell Access(官方推荐通过shell进行部署)\n使用`Certbot ACME`客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png)\n访问[certbot](https://certbot.eff.org/),选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。\n- 安装系统扩展包\n``` bash\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nrpm -ivh epel-release-latest-7.noarch.rpm\nyum -y install yum-utils\nyum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n```\n- 安装certbot\n``` bash\nsudo yum install certbot-nginx\n```\n- 运行certbot插件生成证书\n``` bash\nsudo certbot --nginx\n```\n![certbot](Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png)\n\n- 重启nginx\n``` bash\nsystemctl restart nginx\n```\n访问[www.rubys.ml](www.rubys.ml),发现链接自动定向到https://www.rubys.ml\n\n增加自动续期\n``` bash\ncrontab -e\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew\n```\n\n上面的方法是单域名证书的创建\n### 配置Let's Encrypt 泛域名\n如果配置泛域名，还需要安装一个 `Certbot's DNS plugins` 插件\n目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持\n- certbot-dns-cloudflare\n- certbot-dns-cloudxns\n- certbot-dns-digitalocean\n- certbot-dns-dnsimple\n- certbot-dns-dnsmadeeasy\n- certbot-dns-google\n- certbot-dns-luadns\n- certbot-dns-nsone\n- certbot-dns-rfc2136\n- certbot-dns-route53\n\n目前支持的云服务商还不多\n阿里云的话可以使用如下脚本\nhttps://github.com/Neilpang/acme.sh\n从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。\n\n未完待续。。。\n","slug":"Lets-Encrypt-free-wildcard-domain-name","published":1,"updated":"2019-06-22T08:59:20.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklck0004bis6fadrcrqb","content":"<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<a id=\"more\"></a></p>\n<h3 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>\n<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>\n<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>\n<h3 id=\"配置Let’s-Encrypt-单域名\"><a href=\"#配置Let’s-Encrypt-单域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 单域名\"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>\n<ul>\n<li><p>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src=\"/.com//WX20180318-120435@2x.png\" alt=\"certbot\"><br>访问<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</p>\n</li>\n<li><p>安装系统扩展包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">yum -y install yum-utils</span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装certbot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行certbot插件生成证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"/.com//WX20180318-122540@2x.png\" alt=\"certbot\"></p>\n<ul>\n<li>重启nginx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>访问<a href=\"www.rubys.ml\">www.rubys.ml</a>,发现链接自动定向到<a href=\"https://www.rubys.ml\" target=\"_blank\" rel=\"noopener\">https://www.rubys.ml</a></p>\n<p>增加自动续期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0 0,12 * * * python -c <span class=\"string\">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure>\n\n<p>上面的方法是单域名证书的创建</p>\n<h3 id=\"配置Let’s-Encrypt-泛域名\"><a href=\"#配置Let’s-Encrypt-泛域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 泛域名\"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>\n<ul>\n<li>certbot-dns-cloudflare</li>\n<li>certbot-dns-cloudxns</li>\n<li>certbot-dns-digitalocean</li>\n<li>certbot-dns-dnsimple</li>\n<li>certbot-dns-dnsmadeeasy</li>\n<li>certbot-dns-google</li>\n<li>certbot-dns-luadns</li>\n<li>certbot-dns-nsone</li>\n<li>certbot-dns-rfc2136</li>\n<li>certbot-dns-route53</li>\n</ul>\n<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>\n<p>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。</p>","more":"<p></p>\n<h3 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>\n<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>\n<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>\n<h3 id=\"配置Let’s-Encrypt-单域名\"><a href=\"#配置Let’s-Encrypt-单域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 单域名\"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>\n<ul>\n<li><p>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src=\"/.com//WX20180318-120435@2x.png\" alt=\"certbot\"><br>访问<a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</p>\n</li>\n<li><p>安装系统扩展包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class=\"line\">yum -y install yum-utils</span><br><span class=\"line\">yum-config-manager --<span class=\"built_in\">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装certbot</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行certbot插件生成证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"/.com//WX20180318-122540@2x.png\" alt=\"certbot\"></p>\n<ul>\n<li>重启nginx<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>访问<a href=\"www.rubys.ml\">www.rubys.ml</a>,发现链接自动定向到<a href=\"https://www.rubys.ml\" target=\"_blank\" rel=\"noopener\">https://www.rubys.ml</a></p>\n<p>增加自动续期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0 0,12 * * * python -c <span class=\"string\">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure>\n\n<p>上面的方法是单域名证书的创建</p>\n<h3 id=\"配置Let’s-Encrypt-泛域名\"><a href=\"#配置Let’s-Encrypt-泛域名\" class=\"headerlink\" title=\"配置Let’s Encrypt 泛域名\"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>\n<ul>\n<li>certbot-dns-cloudflare</li>\n<li>certbot-dns-cloudxns</li>\n<li>certbot-dns-digitalocean</li>\n<li>certbot-dns-dnsimple</li>\n<li>certbot-dns-dnsmadeeasy</li>\n<li>certbot-dns-google</li>\n<li>certbot-dns-luadns</li>\n<li>certbot-dns-nsone</li>\n<li>certbot-dns-rfc2136</li>\n<li>certbot-dns-route53</li>\n</ul>\n<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>\n<p>未完待续。。。</p>"},{"title":"Redis连接池连接没有正常释放报错","date":"2017-09-23T07:56:45.000Z","_content":"\n\n``` log\n Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool\n\tat redis.clients.util.Pool.getResource(Pool.java:51)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)\n\tat org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)\n\t... 71 common frames omitted\n\n\n```\n\n前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源\n\n### redisTemplate 和 jedis 不同\n\nredisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放\n\n``` Java\npublic boolean setNX(final String key, final String value) throws RedisException {\n        return redisTemplate.execute(new RedisCallback<Boolean>() {\n            @Override\n            public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                return redisConnection.setNX(key.getBytes(), value.getBytes());\n            }\n        });\n    }\n\n```\n所以实现分布式锁的时候需要调用`redisTemplate.execute` 让 `redisTemplate` 帮我们释放资源，具体的可以看redisTemplate 的源码。\n","source":"_posts/Could-not-get-a-resource-from-the-pool.md","raw":"---\ntitle: Redis连接池连接没有正常释放报错\ndate: 2017-09-23 15:56:45\ncategories: Java\ntag: Redis\n---\n\n\n``` log\n Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool\n\tat redis.clients.util.Pool.getResource(Pool.java:51)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)\n\tat redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)\n\tat org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)\n\t... 71 common frames omitted\n\n\n```\n\n前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源\n\n### redisTemplate 和 jedis 不同\n\nredisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放\n\n``` Java\npublic boolean setNX(final String key, final String value) throws RedisException {\n        return redisTemplate.execute(new RedisCallback<Boolean>() {\n            @Override\n            public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException {\n                return redisConnection.setNX(key.getBytes(), value.getBytes());\n            }\n        });\n    }\n\n```\n所以实现分布式锁的时候需要调用`redisTemplate.execute` 让 `redisTemplate` 帮我们释放资源，具体的可以看redisTemplate 的源码。\n","slug":"Could-not-get-a-resource-from-the-pool","published":1,"updated":"2018-02-09T02:43:42.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklcn0007bis69w9cjw1k","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class=\"line\">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class=\"line\">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class=\"line\">... 71 common frames omitted</span><br></pre></td></tr></table></figure>\n\n<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>\n<h3 id=\"redisTemplate-和-jedis-不同\"><a href=\"#redisTemplate-和-jedis-不同\" class=\"headerlink\" title=\"redisTemplate 和 jedis 不同\"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setNX</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String value)</span> <span class=\"keyword\">throws</span> RedisException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection redisConnection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class=\"line\">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class=\"line\">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class=\"line\">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class=\"line\">... 71 common frames omitted</span><br></pre></td></tr></table></figure>\n\n<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>\n<h3 id=\"redisTemplate-和-jedis-不同\"><a href=\"#redisTemplate-和-jedis-不同\" class=\"headerlink\" title=\"redisTemplate 和 jedis 不同\"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setNX</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String value)</span> <span class=\"keyword\">throws</span> RedisException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.execute(<span class=\"keyword\">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection redisConnection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>\n"},{"title":"Java 常量字符串过长","date":"2019-04-29T12:44:56.000Z","_content":"### 问题出现\n  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示`java: 常量字符串过长`。使用javac 进行编译也会有类似的提示 <!-- more -->\n### 解决办法\n#### 使用StringBuilder\n``` Java\nStringBuilder sb = new StringBuilder();\nsb.append(\"String\");\nsb.append(\"String\");\nString str = sb.toString();\nString[] parts = str.split(\",\");\nSystem.out.println(parts.length);\n```\n创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制\n通过使用StringBuilder解析大文本和大JSON\n","source":"_posts/Java-constant-string-is-too-long.md","raw":"---\ntitle: Java 常量字符串过长\ndate: 2019-04-29 20:44:56\ncategories: Java\ntag: String\n---\n### 问题出现\n  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示`java: 常量字符串过长`。使用javac 进行编译也会有类似的提示 <!-- more -->\n### 解决办法\n#### 使用StringBuilder\n``` Java\nStringBuilder sb = new StringBuilder();\nsb.append(\"String\");\nsb.append(\"String\");\nString str = sb.toString();\nString[] parts = str.split(\",\");\nSystem.out.println(parts.length);\n```\n创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制\n通过使用StringBuilder解析大文本和大JSON\n","slug":"Java-constant-string-is-too-long","published":1,"updated":"2019-06-22T08:59:12.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklco0008bis6tokd7jf3","content":"<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示<code>java: 常量字符串过长</code>。使用javac 进行编译也会有类似的提示 <a id=\"more\"></a></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><h4 id=\"使用StringBuilder\"><a href=\"#使用StringBuilder\" class=\"headerlink\" title=\"使用StringBuilder\"></a>使用StringBuilder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">String str = sb.toString();</span><br><span class=\"line\">String[] parts = str.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">System.out.println(parts.length);</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制<br>通过使用StringBuilder解析大文本和大JSON</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h3><p>  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示<code>java: 常量字符串过长</code>。使用javac 进行编译也会有类似的提示</p>","more":"<p></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><h4 id=\"使用StringBuilder\"><a href=\"#使用StringBuilder\" class=\"headerlink\" title=\"使用StringBuilder\"></a>使用StringBuilder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">sb.append(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\">String str = sb.toString();</span><br><span class=\"line\">String[] parts = str.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">System.out.println(parts.length);</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制<br>通过使用StringBuilder解析大文本和大JSON</p>"},{"title":"Machine-Learning-in-Java-1","date":"2017-11-20T09:00:53.000Z","_content":"### 机器学习的主要方法\n- 监督学习\n- 无监督学习\n- 强化学习\n<!-- more -->\n####  监督学习\n检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。\n####  无监督学习\n无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。\n#### 强化学习\n强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n### 机器学习应用流程\n（1） 数据与问题定义\n（2）数据收集\n（3）数据预处理\n（4）利用无监督学习与监督学习进行数据分析与建模\n（5）模型评价\n\n特性 | 称名 | 顺序 | 等距 | 等比 |\n\n| 特性 | 称名 | 顺序 | 等距 | 等比 |\n| :- | :-: | :-: | :-: | :-: |\n| 频率分布 | √| √ | √ | √ |\n| 中位数和众数 |  | √ | √ | √ |\n| 值顺序已知 |   | √ | √ | √ |\n| 每个值之间的不同可以量化 | | √ | √ | √ |\n| 值可以加减 |  |  | √ | √ |\n| 值可以乘除 |  |  |  | √ |\n| 拥有真0点 |  |  |  | √ |\n\n### 获取数据的方式\n- 维基百科\n- 网页抓取\n- IMDb\n- Million Song Dataset\n\n### 数据采集\n陷阱 幸存者偏差\n数据清洗\n填充缺失值\n剔除异常值\n数据转换\n## 数据归纳\n奇异值分解（SVD）\n主成分分析（PCA）\n神经网络自动编码器（Neural nets auto encoders）\n\n\n### 无监督学习\nn维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。\n\nL2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。\n它是两个元素在每个维度上差的平方和的平方根，计算公式如下:\n\n\n\n\n\n\n\n\n\n注： 以上数据来自 Machine Learning in Java\n","source":"_posts/Machine-Learning-in-Java-1.md","raw":"---\ntitle: Machine-Learning-in-Java-1\ndate: 2017-11-20 17:00:53\ncategories: Machine Learning\ntag: Machine Learning\n---\n### 机器学习的主要方法\n- 监督学习\n- 无监督学习\n- 强化学习\n<!-- more -->\n####  监督学习\n检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。\n####  无监督学习\n无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。\n#### 强化学习\n强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n### 机器学习应用流程\n（1） 数据与问题定义\n（2）数据收集\n（3）数据预处理\n（4）利用无监督学习与监督学习进行数据分析与建模\n（5）模型评价\n\n特性 | 称名 | 顺序 | 等距 | 等比 |\n\n| 特性 | 称名 | 顺序 | 等距 | 等比 |\n| :- | :-: | :-: | :-: | :-: |\n| 频率分布 | √| √ | √ | √ |\n| 中位数和众数 |  | √ | √ | √ |\n| 值顺序已知 |   | √ | √ | √ |\n| 每个值之间的不同可以量化 | | √ | √ | √ |\n| 值可以加减 |  |  | √ | √ |\n| 值可以乘除 |  |  |  | √ |\n| 拥有真0点 |  |  |  | √ |\n\n### 获取数据的方式\n- 维基百科\n- 网页抓取\n- IMDb\n- Million Song Dataset\n\n### 数据采集\n陷阱 幸存者偏差\n数据清洗\n填充缺失值\n剔除异常值\n数据转换\n## 数据归纳\n奇异值分解（SVD）\n主成分分析（PCA）\n神经网络自动编码器（Neural nets auto encoders）\n\n\n### 无监督学习\nn维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。\n\nL2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。\n它是两个元素在每个维度上差的平方和的平方根，计算公式如下:\n\n\n\n\n\n\n\n\n\n注： 以上数据来自 Machine Learning in Java\n","slug":"Machine-Learning-in-Java-1","published":1,"updated":"2019-06-22T08:59:27.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklcp0009bis6lnnm1q6m","content":"<h3 id=\"机器学习的主要方法\"><a href=\"#机器学习的主要方法\" class=\"headerlink\" title=\"机器学习的主要方法\"></a>机器学习的主要方法</h3><ul>\n<li>监督学习</li>\n<li>无监督学习</li>\n<li>强化学习<a id=\"more\"></a>\n<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。<h4 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h4>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。</li>\n</ul>\n<h3 id=\"机器学习应用流程\"><a href=\"#机器学习应用流程\" class=\"headerlink\" title=\"机器学习应用流程\"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>\n<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"center\">称名</th>\n<th align=\"center\">顺序</th>\n<th align=\"center\">等距</th>\n<th align=\"center\">等比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">频率分布</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">中位数和众数</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值顺序已知</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">每个值之间的不同可以量化</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以加减</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以乘除</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">拥有真0点</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取数据的方式\"><a href=\"#获取数据的方式\" class=\"headerlink\" title=\"获取数据的方式\"></a>获取数据的方式</h3><ul>\n<li>维基百科</li>\n<li>网页抓取</li>\n<li>IMDb</li>\n<li>Million Song Dataset</li>\n</ul>\n<h3 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>\n<h2 id=\"数据归纳\"><a href=\"#数据归纳\" class=\"headerlink\" title=\"数据归纳\"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>\n<h3 id=\"无监督学习-1\"><a href=\"#无监督学习-1\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>\n<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>\n<p>注： 以上数据来自 Machine Learning in Java</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"机器学习的主要方法\"><a href=\"#机器学习的主要方法\" class=\"headerlink\" title=\"机器学习的主要方法\"></a>机器学习的主要方法</h3><ul>\n<li>监督学习</li>\n<li>无监督学习</li>\n<li>强化学习</li></ul>","more":"<h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。<h4 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h4>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。\n\n<h3 id=\"机器学习应用流程\"><a href=\"#机器学习应用流程\" class=\"headerlink\" title=\"机器学习应用流程\"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>\n<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">特性</th>\n<th align=\"center\">称名</th>\n<th align=\"center\">顺序</th>\n<th align=\"center\">等距</th>\n<th align=\"center\">等比</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">频率分布</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">中位数和众数</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值顺序已知</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">每个值之间的不同可以量化</td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以加减</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">值可以乘除</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"left\">拥有真0点</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取数据的方式\"><a href=\"#获取数据的方式\" class=\"headerlink\" title=\"获取数据的方式\"></a>获取数据的方式</h3><ul>\n<li>维基百科</li>\n<li>网页抓取</li>\n<li>IMDb</li>\n<li>Million Song Dataset</li>\n</ul>\n<h3 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>\n<h2 id=\"数据归纳\"><a href=\"#数据归纳\" class=\"headerlink\" title=\"数据归纳\"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>\n<h3 id=\"无监督学习-1\"><a href=\"#无监督学习-1\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>\n<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>\n<p>注： 以上数据来自 Machine Learning in Java</p>"},{"title":"Spring单例和多例","date":"2019-03-25T03:10:00.000Z","_content":"在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是`singleton`。这篇文章主要讨论Spring 单例和多例。<!-- more -->\n### Spring bean 的作用域(Spring Bean scopes)\n作用域 | 描述\n:----: | :---:\nsingleton | 根据Spring IoC容器将单个bean定义范围限定为单个对象实例。\nprototype |  将单个bean定义范围限定为任意数量的对象实例。\nrequest |  将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。\nsession | 将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。\nglobal-session | 将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。\n`>` 具体可以查看Spring官方文档 [Spring Doc](https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html),有更详细的说明。\n####The singleton scope(单例作用域)\n默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。\n```Java\nimport lombok.Data;\n\n@Data\npublic class TestBean {\n\n    private String name;\n\n    public TestBean(String name) {\n        this.name = name;\n    }\n}\n\n\n```\n可以在Application中进行注入\n``` Java\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n   @Bean\n   public TestBean getBean() {\n       return new TestBean(\"Hello,singleton!\");\n   }\n\n}\n\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTest {\n\n    @Autowired\n    private TestBean testBean;\n\n    @Test\n    public void getBean() throws Exception {\n        System.out.println(testBean.getName());\n    }\n}\n```\n还可以使用 `@Component` 的方式，可以自行实践。\n\n#### The prototype scope(多例作用域)\n>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.\n\n描述了什么时候使用单例、什么时候使用多例。\n`@Resource`和`@Autowired`都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。\n\n`@Autowired`为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n\n`@Resource`默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。`@Resource`有两个重要的属性：name和type，而Spring将`@Resource`注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n\n最常用的是一个接口有多个实现。\n``` Java\npublic interface IPrintService {\n\n    /**\n     * 打印字符串\n     *\n     * @return\n     */\n    void print();\n}\n\n```\n打印数字\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class NumberPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(1);\n\n    }\n}\n```\n打印字符串\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StringPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(\"String\");\n\n    }\n}\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n    @Resource(name = \"numberPrintServiceImpl\")\n    private IPrintService numPrintService;\n\n    @Resource(name = \"stringPrintServiceImpl\")\n    private IPrintService strPrintService;\n\n\n    @Test\n    public void print() throws Exception {\n        numPrintService.print();\n        strPrintService.print();\n    }\n\n}\n```\n通过name来区分`IPrintService`,进行注入。\n面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。\n","source":"_posts/Spring-singleton-and-prototype.md","raw":"---\ntitle: Spring单例和多例\ndate: 2019-03-25 11:10:00\ncategories: Java\ntags: Spring\n---\n在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是`singleton`。这篇文章主要讨论Spring 单例和多例。<!-- more -->\n### Spring bean 的作用域(Spring Bean scopes)\n作用域 | 描述\n:----: | :---:\nsingleton | 根据Spring IoC容器将单个bean定义范围限定为单个对象实例。\nprototype |  将单个bean定义范围限定为任意数量的对象实例。\nrequest |  将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。\nsession | 将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。\nglobal-session | 将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。\n`>` 具体可以查看Spring官方文档 [Spring Doc](https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html),有更详细的说明。\n####The singleton scope(单例作用域)\n默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。\n```Java\nimport lombok.Data;\n\n@Data\npublic class TestBean {\n\n    private String name;\n\n    public TestBean(String name) {\n        this.name = name;\n    }\n}\n\n\n```\n可以在Application中进行注入\n``` Java\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n\n    }\n\n   @Bean\n   public TestBean getBean() {\n       return new TestBean(\"Hello,singleton!\");\n   }\n\n}\n\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTest {\n\n    @Autowired\n    private TestBean testBean;\n\n    @Test\n    public void getBean() throws Exception {\n        System.out.println(testBean.getName());\n    }\n}\n```\n还可以使用 `@Component` 的方式，可以自行实践。\n\n#### The prototype scope(多例作用域)\n>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.\n\n描述了什么时候使用单例、什么时候使用多例。\n`@Resource`和`@Autowired`都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。\n\n`@Autowired`为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n\n`@Resource`默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。`@Resource`有两个重要的属性：name和type，而Spring将`@Resource`注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n\n最常用的是一个接口有多个实现。\n``` Java\npublic interface IPrintService {\n\n    /**\n     * 打印字符串\n     *\n     * @return\n     */\n    void print();\n}\n\n```\n打印数字\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class NumberPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(1);\n\n    }\n}\n```\n打印字符串\n``` Java\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StringPrintServiceImpl implements IPrintService {\n\n    @Override\n    public void print() {\n        System.out.println(\"String\");\n\n    }\n}\n```\n测试\n``` Java\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.annotation.Resource;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n    @Resource(name = \"numberPrintServiceImpl\")\n    private IPrintService numPrintService;\n\n    @Resource(name = \"stringPrintServiceImpl\")\n    private IPrintService strPrintService;\n\n\n    @Test\n    public void print() throws Exception {\n        numPrintService.print();\n        strPrintService.print();\n    }\n\n}\n```\n通过name来区分`IPrintService`,进行注入。\n面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。\n","slug":"Spring-singleton-and-prototype","published":1,"updated":"2019-06-22T09:00:44.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklcr000dbis6mu29ayn6","content":"<p>在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是<code>singleton</code>。这篇文章主要讨论Spring 单例和多例。<a id=\"more\"></a></p>\n<h3 id=\"Spring-bean-的作用域-Spring-Bean-scopes\"><a href=\"#Spring-bean-的作用域-Spring-Bean-scopes\" class=\"headerlink\" title=\"Spring bean 的作用域(Spring Bean scopes)\"></a>Spring bean 的作用域(Spring Bean scopes)</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用域</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">singleton</td>\n<td align=\"center\">根据Spring IoC容器将单个bean定义范围限定为单个对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">prototype</td>\n<td align=\"center\">将单个bean定义范围限定为任意数量的对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">request</td>\n<td align=\"center\">将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">global-session</td>\n<td align=\"center\">将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;</code> 具体可以查看Spring官方文档 <a href=\"https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html\" target=\"_blank\" rel=\"noopener\">Spring Doc</a>,有更详细的说明。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">####The singleton scope(单例作用域)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>可以在Application中进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> TestBean <span class=\"title\">getBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestBean(<span class=\"string\">\"Hello,singleton!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestBean testBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(testBean.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可以使用 <code>@Component</code> 的方式，可以自行实践。</p>\n<h4 id=\"The-prototype-scope-多例作用域\"><a href=\"#The-prototype-scope-多例作用域\" class=\"headerlink\" title=\"The prototype scope(多例作用域)\"></a>The prototype scope(多例作用域)</h4><blockquote>\n<p>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p>\n</blockquote>\n<p>描述了什么时候使用单例、什么时候使用多例。<br><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>\n<p><code>@Autowired</code>为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>\n<p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>\n<p>最常用的是一个接口有多个实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印数字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"numberPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService numPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"stringPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService strPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        numPrintService.print();</span><br><span class=\"line\">        strPrintService.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过name来区分<code>IPrintService</code>,进行注入。<br>面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。</p>\n","site":{"data":{}},"excerpt":"<p>在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是<code>singleton</code>。这篇文章主要讨论Spring 单例和多例。</p>","more":"<p></p>\n<h3 id=\"Spring-bean-的作用域-Spring-Bean-scopes\"><a href=\"#Spring-bean-的作用域-Spring-Bean-scopes\" class=\"headerlink\" title=\"Spring bean 的作用域(Spring Bean scopes)\"></a>Spring bean 的作用域(Spring Bean scopes)</h3><table>\n<thead>\n<tr>\n<th align=\"center\">作用域</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">singleton</td>\n<td align=\"center\">根据Spring IoC容器将单个bean定义范围限定为单个对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">prototype</td>\n<td align=\"center\">将单个bean定义范围限定为任意数量的对象实例。</td>\n</tr>\n<tr>\n<td align=\"center\">request</td>\n<td align=\"center\">将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">session</td>\n<td align=\"center\">将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\">global-session</td>\n<td align=\"center\">将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;</code> 具体可以查看Spring官方文档 <a href=\"https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html\" target=\"_blank\" rel=\"noopener\">Spring Doc</a>,有更详细的说明。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">####The singleton scope(单例作用域)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>可以在Application中进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> TestBean <span class=\"title\">getBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestBean(<span class=\"string\">\"Hello,singleton!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestBean testBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(testBean.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可以使用 <code>@Component</code> 的方式，可以自行实践。</p>\n<h4 id=\"The-prototype-scope-多例作用域\"><a href=\"#The-prototype-scope-多例作用域\" class=\"headerlink\" title=\"The prototype scope(多例作用域)\"></a>The prototype scope(多例作用域)</h4><blockquote>\n<p>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p>\n</blockquote>\n<p>描述了什么时候使用单例、什么时候使用多例。<br><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>\n<p><code>@Autowired</code>为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>\n<p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>\n<p>最常用的是一个接口有多个实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印数字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印字符串</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringPrintServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IPrintService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"String\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplicationTests</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"numberPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService numPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"stringPrintServiceImpl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPrintService strPrintService;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        numPrintService.print();</span><br><span class=\"line\">        strPrintService.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过name来区分<code>IPrintService</code>,进行注入。<br>面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。</p>"},{"title":"apollo 配置提前加载","date":"2019-05-18T02:00:11.000Z","_content":"#### 碰到的问题\n项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现`${}`没有生效。\n导致请求调用的时候出错。<!-- more -->\n#### 解决过程\n首先是检查配置是否正确，请求的代码示例如下：\n``` Java\n@FeignClient(name = \"xxx\", url = \"${xxx}\")\npublic interface FeignClientService {\n    /**\n     * 获取实体列表\n     *\n     * @param xxx xxx\n     * @return\n     * @throws Exception\n     */\n    @GetMapping(\"/xxx/xxx/xxx\")\n    FeignResp<EntityListVO> getEntityList(@RequestParam(value = \"xxx\") String xxx) throws Exception;\n```\n当url使用固定时，可以正常的解析出请求的url，使用`${}`没有生效。\n这个时候查询了Apollo的文档[Java客户端使用指南3.2.1.3SpringBoot集成方式](\"https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90\")\n\n>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。\n从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：\n     # will inject 'application' namespace in bootstrap phase\n     apollo.bootstrap.enabled = true\n     # put apollo initialization before logging system initialization\n     apollo.bootstrap.eagerLoad.enabled=true\n\n增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的`1.1.0`，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。\n#### 解决方式\n没办法在Springboot启动前加载，可以尝试手动加载。\n``` Java\nimport com.ctrip.framework.apollo.ConfigService;\n\npublic class ClientUrlConfig {\n    public void init() {\n        this.initSet(\"此处写你需要提前初始化的key\");\n    }\n    private void initSet(String... keys) {\n        for (String key : keys) {\n            String val = ConfigService.getAppConfig().getProperty(key, null);\n            System.setProperty(key, val);\n        }\n    }\n}\n```\n\n然后在`SpringApplication.run()` 之前加载\n``` java\npublic static void main(String[] args) {\n       new ClientUrlConfig().init();\n       SpringApplication.run(Application.class, args);\n   }\n```\n通过在启动前将配置注入，`${}` 就可以获取到正确的链接了。\n","source":"_posts/apollo-eagerload.md","raw":"---\ntitle: apollo 配置提前加载\ndate: 2019-05-18 10:00:11\ncategories: Java\ntag: Apollo、Feign\n---\n#### 碰到的问题\n项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现`${}`没有生效。\n导致请求调用的时候出错。<!-- more -->\n#### 解决过程\n首先是检查配置是否正确，请求的代码示例如下：\n``` Java\n@FeignClient(name = \"xxx\", url = \"${xxx}\")\npublic interface FeignClientService {\n    /**\n     * 获取实体列表\n     *\n     * @param xxx xxx\n     * @return\n     * @throws Exception\n     */\n    @GetMapping(\"/xxx/xxx/xxx\")\n    FeignResp<EntityListVO> getEntityList(@RequestParam(value = \"xxx\") String xxx) throws Exception;\n```\n当url使用固定时，可以正常的解析出请求的url，使用`${}`没有生效。\n这个时候查询了Apollo的文档[Java客户端使用指南3.2.1.3SpringBoot集成方式](\"https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90\")\n\n>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。\n从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：\n     # will inject 'application' namespace in bootstrap phase\n     apollo.bootstrap.enabled = true\n     # put apollo initialization before logging system initialization\n     apollo.bootstrap.eagerLoad.enabled=true\n\n增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的`1.1.0`，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。\n#### 解决方式\n没办法在Springboot启动前加载，可以尝试手动加载。\n``` Java\nimport com.ctrip.framework.apollo.ConfigService;\n\npublic class ClientUrlConfig {\n    public void init() {\n        this.initSet(\"此处写你需要提前初始化的key\");\n    }\n    private void initSet(String... keys) {\n        for (String key : keys) {\n            String val = ConfigService.getAppConfig().getProperty(key, null);\n            System.setProperty(key, val);\n        }\n    }\n}\n```\n\n然后在`SpringApplication.run()` 之前加载\n``` java\npublic static void main(String[] args) {\n       new ClientUrlConfig().init();\n       SpringApplication.run(Application.class, args);\n   }\n```\n通过在启动前将配置注入，`${}` 就可以获取到正确的链接了。\n","slug":"apollo-eagerload","published":1,"updated":"2019-06-22T08:56:11.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklct000ebis6pl7xwy6o","content":"<h4 id=\"碰到的问题\"><a href=\"#碰到的问题\" class=\"headerlink\" title=\"碰到的问题\"></a>碰到的问题</h4><p>项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现<code>${}</code>没有生效。<br>导致请求调用的时候出错。<a id=\"more\"></a></p>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p>首先是检查配置是否正确，请求的代码示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClientService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/xxx/xxx/xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">FeignResp&lt;EntityListVO&gt; <span class=\"title\">getEntityList</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"xxx\"</span>)</span> String xxx) <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当url使用固定时，可以正常的解析出请求的url，使用<code>${}</code>没有生效。<br>这个时候查询了Apollo的文档<a href https: github.com ctripcorp apollo wiki java%e5%ae%a2%e6%88%b7%e7%ab%af%e4%bd%bf%e7%94%a8%e6%8c%87%e5%8d%97#3213-spring-boot%e9%9b%86%e6%88%90%e6%96%b9%e5%bc%8f%e6%8e%a8%e8%8d%90\"\">Java客户端使用指南3.2.1.3SpringBoot集成方式</a></p>\n<blockquote>\n<p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br>从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：</p>\n</blockquote>\n<pre><code># will inject &apos;application&apos; namespace in bootstrap phase\napollo.bootstrap.enabled = true\n# put apollo initialization before logging system initialization\napollo.bootstrap.eagerLoad.enabled=true</code></pre><p>增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的<code>1.1.0</code>，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。</p>\n<h4 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h4><p>没办法在Springboot启动前加载，可以尝试手动加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientUrlConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSet(<span class=\"string\">\"此处写你需要提前初始化的key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSet</span><span class=\"params\">(String... keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            String val = ConfigService.getAppConfig().getProperty(key, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            System.setProperty(key, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>SpringApplication.run()</code> 之前加载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">new</span> ClientUrlConfig().init();</span><br><span class=\"line\">       SpringApplication.run(Application.class, args);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过在启动前将配置注入，<code>${}</code> 就可以获取到正确的链接了。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"碰到的问题\"><a href=\"#碰到的问题\" class=\"headerlink\" title=\"碰到的问题\"></a>碰到的问题</h4><p>项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现<code>${}</code>没有生效。<br>导致请求调用的时候出错。</p>","more":"<p></p>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p>首先是检查配置是否正确，请求的代码示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClientService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实体列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/xxx/xxx/xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">FeignResp&lt;EntityListVO&gt; <span class=\"title\">getEntityList</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"xxx\"</span>)</span> String xxx) <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当url使用固定时，可以正常的解析出请求的url，使用<code>${}</code>没有生效。<br>这个时候查询了Apollo的文档<a href https: github.com ctripcorp apollo wiki java%e5%ae%a2%e6%88%b7%e7%ab%af%e4%bd%bf%e7%94%a8%e6%8c%87%e5%8d%97#3213-spring-boot%e9%9b%86%e6%88%90%e6%96%b9%e5%bc%8f%e6%8e%a8%e8%8d%90\"\">Java客户端使用指南3.2.1.3SpringBoot集成方式</a></p>\n<blockquote>\n<p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br>从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：</p>\n</blockquote>\n<pre><code># will inject &apos;application&apos; namespace in bootstrap phase\napollo.bootstrap.enabled = true\n# put apollo initialization before logging system initialization\napollo.bootstrap.eagerLoad.enabled=true</code></pre><p>增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的<code>1.1.0</code>，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。</p>\n<h4 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h4><p>没办法在Springboot启动前加载，可以尝试手动加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientUrlConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initSet(<span class=\"string\">\"此处写你需要提前初始化的key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSet</span><span class=\"params\">(String... keys)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            String val = ConfigService.getAppConfig().getProperty(key, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            System.setProperty(key, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>SpringApplication.run()</code> 之前加载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">new</span> ClientUrlConfig().init();</span><br><span class=\"line\">       SpringApplication.run(Application.class, args);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过在启动前将配置注入，<code>${}</code> 就可以获取到正确的链接了。</p>"},{"title":"brew 升级应用错误","date":"2018-05-03T03:01:00.000Z","_content":"定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<!-- more -->\n### brew 升级\n最近在使用`brew upgrade` 的过程中，碰到了一个问题记录一下。\n``` shell\nError: An unexpected error occurred during the `brew link` step\nThe formula built, but is not symlinked into /usr/local\nPermission denied @ dir_s_mkdir - /usr/local/Frameworks\nError: Permission denied @ dir_s_mkdir - /usr/local/Frameworks\n```\n如上所示，需要创建`/usr/local/Frameworks` 目录，但是没有对应的权限\n\n### 解决方法\n``` Shell\n sudo mkdir /usr/local/Frameworks\n sudo chown $(whoami):admin /usr/local/Frameworks\n```\n手动创建，赋权，之后就可以愉快的` brew upgrade` 了。\n\n\n最后`brew cleanup` 清理废弃的文件，释放空间。\n","source":"_posts/brew-upgrade-error.md","raw":"---\ntitle: brew 升级应用错误\ndate: 2018-05-03 11:01:00\ncategories: Shell\ntags: Brew\n---\n定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<!-- more -->\n### brew 升级\n最近在使用`brew upgrade` 的过程中，碰到了一个问题记录一下。\n``` shell\nError: An unexpected error occurred during the `brew link` step\nThe formula built, but is not symlinked into /usr/local\nPermission denied @ dir_s_mkdir - /usr/local/Frameworks\nError: Permission denied @ dir_s_mkdir - /usr/local/Frameworks\n```\n如上所示，需要创建`/usr/local/Frameworks` 目录，但是没有对应的权限\n\n### 解决方法\n``` Shell\n sudo mkdir /usr/local/Frameworks\n sudo chown $(whoami):admin /usr/local/Frameworks\n```\n手动创建，赋权，之后就可以愉快的` brew upgrade` 了。\n\n\n最后`brew cleanup` 清理废弃的文件，释放空间。\n","slug":"brew-upgrade-error","published":1,"updated":"2019-06-22T08:56:10.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklcu000ibis6ll744d5u","content":"<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<a id=\"more\"></a></p>\n<h3 id=\"brew-升级\"><a href=\"#brew-升级\" class=\"headerlink\" title=\"brew 升级\"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，碰到了一个问题记录一下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: An unexpected error occurred during the `brew link` step</span><br><span class=\"line\">The formula built, but is not symlinked into /usr/local</span><br><span class=\"line\">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class=\"line\">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n\n<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/local/Frameworks</span><br><span class=\"line\">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n\n<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>\n<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>\n","site":{"data":{}},"excerpt":"<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。</p>","more":"<p></p>\n<h3 id=\"brew-升级\"><a href=\"#brew-升级\" class=\"headerlink\" title=\"brew 升级\"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，碰到了一个问题记录一下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: An unexpected error occurred during the `brew link` step</span><br><span class=\"line\">The formula built, but is not symlinked into /usr/local</span><br><span class=\"line\">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class=\"line\">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n\n<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/local/Frameworks</span><br><span class=\"line\">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>\n\n<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>\n<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>"},{"title":"Nginx 504 Gateway Time-out","date":"2017-09-22T12:49:29.000Z","_content":"\n\n今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <!-- more -->\n``` Shell\n\tproxy_connect_timeout = 3;\n```\n时间过小导致的，最好用默认参数\n","source":"_posts/Nginx-504-GateWay-Time-Out.md","raw":"---\ntitle: Nginx 504 Gateway Time-out\ndate: 2017-09-22 20:49:29\ncategories: Linux\ntag: Nginx\n\n---\n\n\n今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <!-- more -->\n``` Shell\n\tproxy_connect_timeout = 3;\n```\n时间过小导致的，最好用默认参数\n","slug":"Nginx-504-GateWay-Time-Out","published":1,"updated":"2019-06-22T08:59:48.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklcx000kbis65loumrdg","content":"<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <a id=\"more\"></a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure>\n\n<p>时间过小导致的，最好用默认参数</p>\n","site":{"data":{}},"excerpt":"<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置</p>","more":"<p></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure>\n\n<p>时间过小导致的，最好用默认参数</p>"},{"title":"搭建一个简单的app分发平台","date":"2019-03-01T05:39:58.000Z","_content":"#### 需求\n   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk\n比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<!-- more -->\n#### 准备\n   - 企业签名过后的ipa包、apk\n   - 一个域名\n   - 一台服务器\n   - 一个https证书\n#### 搭建环境\n### 搭建一个nginx web 环境\n    首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。\n大家一般都是使用微信的扫一扫\n### 获取apk、ipa、plist、iOS app icon文件公网地址\n    配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。\n    `https://xxxx.xxxx.com/xxx.apk`\n    `https://xxxx.xxxx.com/xxx.ipa`\n    `https://xxxx.xxxx.com/xxx.plist`\n    `https://xxxx.xxxx.com/xxx.png`\n\n### 配置plist文件的内容\n``` plist 文件\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>items</key>\n  <array>\n    <dict>\n      <key>assets</key>\n      <array>\n        <dict>\n          <key>kind</key>\n          <string>software-package</string>\n          <key>url</key>\n          <string>https://xxx.xxx.com/download/xxx.ipa</string>\n        </dict>\n        <dict>\n          <key>kind</key>\n          <string>display-image</string>\n          <key>needs-shine</key>\n          <true/>\n          <key>url</key>\n          <string>https://xxx.xxx.com/img/xxx.png</string>\n        </dict>\n      </array>\n      <key>metadata</key>\n      <dict>\n        <key>bundle-identifier</key>\n        <string>io.xxx.xxx</string>\n        <key>bundle-version</key>\n        <string>1.0</string>\n        <key>kind</key>\n        <string>software</string>\n        <key>subtitle</key>\n        <string>xxx</string>\n        <key>title</key>\n        <string>xxx</string>\n      </dict>\n    </dict>\n  </array>\n</dict>\n</plist>\n\n```\n需要修改`software-package`、`display-image` 、`subtitle`、`title`\n`software-package` 使用 `https://xxxx.xxxx.com/xxx.ipa` 的地址\n### 配置地址\n在下载页面配置`apk`下载地址以及`plist`地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。\n### 总结\n主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。\n","source":"_posts/build-an-app-distribution-platform.md","raw":"---\ntitle: 搭建一个简单的app分发平台\ndate: 2019-03-01 13:39:58\ncategories: Linux\ntag: app 分发\n---\n#### 需求\n   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk\n比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<!-- more -->\n#### 准备\n   - 企业签名过后的ipa包、apk\n   - 一个域名\n   - 一台服务器\n   - 一个https证书\n#### 搭建环境\n### 搭建一个nginx web 环境\n    首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。\n大家一般都是使用微信的扫一扫\n### 获取apk、ipa、plist、iOS app icon文件公网地址\n    配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。\n    `https://xxxx.xxxx.com/xxx.apk`\n    `https://xxxx.xxxx.com/xxx.ipa`\n    `https://xxxx.xxxx.com/xxx.plist`\n    `https://xxxx.xxxx.com/xxx.png`\n\n### 配置plist文件的内容\n``` plist 文件\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>items</key>\n  <array>\n    <dict>\n      <key>assets</key>\n      <array>\n        <dict>\n          <key>kind</key>\n          <string>software-package</string>\n          <key>url</key>\n          <string>https://xxx.xxx.com/download/xxx.ipa</string>\n        </dict>\n        <dict>\n          <key>kind</key>\n          <string>display-image</string>\n          <key>needs-shine</key>\n          <true/>\n          <key>url</key>\n          <string>https://xxx.xxx.com/img/xxx.png</string>\n        </dict>\n      </array>\n      <key>metadata</key>\n      <dict>\n        <key>bundle-identifier</key>\n        <string>io.xxx.xxx</string>\n        <key>bundle-version</key>\n        <string>1.0</string>\n        <key>kind</key>\n        <string>software</string>\n        <key>subtitle</key>\n        <string>xxx</string>\n        <key>title</key>\n        <string>xxx</string>\n      </dict>\n    </dict>\n  </array>\n</dict>\n</plist>\n\n```\n需要修改`software-package`、`display-image` 、`subtitle`、`title`\n`software-package` 使用 `https://xxxx.xxxx.com/xxx.ipa` 的地址\n### 配置地址\n在下载页面配置`apk`下载地址以及`plist`地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。\n### 总结\n主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。\n","slug":"build-an-app-distribution-platform","published":1,"updated":"2019-06-22T08:56:32.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklcz000obis6b4z0x9v3","content":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk<br>比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<a id=\"more\"></a></p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li>企业签名过后的ipa包、apk</li>\n<li>一个域名</li>\n<li>一台服务器</li>\n<li>一个https证书<h4 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h4><h3 id=\"搭建一个nginx-web-环境\"><a href=\"#搭建一个nginx-web-环境\" class=\"headerlink\" title=\"搭建一个nginx web 环境\"></a>搭建一个nginx web 环境</h3>首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。<br>大家一般都是使用微信的扫一扫<h3 id=\"获取apk、ipa、plist、iOS-app-icon文件公网地址\"><a href=\"#获取apk、ipa、plist、iOS-app-icon文件公网地址\" class=\"headerlink\" title=\"获取apk、ipa、plist、iOS app icon文件公网地址\"></a>获取apk、ipa、plist、iOS app icon文件公网地址</h3>配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。<br><code>https://xxxx.xxxx.com/xxx.apk</code><br><code>https://xxxx.xxxx.com/xxx.ipa</code><br><code>https://xxxx.xxxx.com/xxx.plist</code><br><code>https://xxxx.xxxx.com/xxx.png</code></li>\n</ul>\n<h3 id=\"配置plist文件的内容\"><a href=\"#配置plist文件的内容\" class=\"headerlink\" title=\"配置plist文件的内容\"></a>配置plist文件的内容</h3><figure class=\"highlight plist\"><figcaption><span>文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>items<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>assets<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software-package<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/download/xxx.ipa<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>display-image<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>needs-shine<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/img/xxx.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>metadata<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-identifier<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>io.xxx.xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-version<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>subtitle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要修改<code>software-package</code>、<code>display-image</code> 、<code>subtitle</code>、<code>title</code><br><code>software-package</code> 使用 <code>https://xxxx.xxxx.com/xxx.ipa</code> 的地址</p>\n<h3 id=\"配置地址\"><a href=\"#配置地址\" class=\"headerlink\" title=\"配置地址\"></a>配置地址</h3><p>在下载页面配置<code>apk</code>下载地址以及<code>plist</code>地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><p>   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk<br>比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。</p>","more":"<p></p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li>企业签名过后的ipa包、apk</li>\n<li>一个域名</li>\n<li>一台服务器</li>\n<li>一个https证书<h4 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h4><h3 id=\"搭建一个nginx-web-环境\"><a href=\"#搭建一个nginx-web-环境\" class=\"headerlink\" title=\"搭建一个nginx web 环境\"></a>搭建一个nginx web 环境</h3>首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。<br>大家一般都是使用微信的扫一扫<h3 id=\"获取apk、ipa、plist、iOS-app-icon文件公网地址\"><a href=\"#获取apk、ipa、plist、iOS-app-icon文件公网地址\" class=\"headerlink\" title=\"获取apk、ipa、plist、iOS app icon文件公网地址\"></a>获取apk、ipa、plist、iOS app icon文件公网地址</h3>配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。<br><code>https://xxxx.xxxx.com/xxx.apk</code><br><code>https://xxxx.xxxx.com/xxx.ipa</code><br><code>https://xxxx.xxxx.com/xxx.plist</code><br><code>https://xxxx.xxxx.com/xxx.png</code></li>\n</ul>\n<h3 id=\"配置plist文件的内容\"><a href=\"#配置plist文件的内容\" class=\"headerlink\" title=\"配置plist文件的内容\"></a>配置plist文件的内容</h3><figure class=\"highlight plist\"><figcaption><span>文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.0\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>items<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>assets<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software-package<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/download/xxx.ipa<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>display-image<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>needs-shine<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>https://xxx.xxx.com/img/xxx.png<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>metadata<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-identifier<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>io.xxx.xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>bundle-version<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>kind<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>software<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>subtitle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要修改<code>software-package</code>、<code>display-image</code> 、<code>subtitle</code>、<code>title</code><br><code>software-package</code> 使用 <code>https://xxxx.xxxx.com/xxx.ipa</code> 的地址</p>\n<h3 id=\"配置地址\"><a href=\"#配置地址\" class=\"headerlink\" title=\"配置地址\"></a>配置地址</h3><p>在下载页面配置<code>apk</code>下载地址以及<code>plist</code>地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。</p>"},{"title":"CentOS7 安装Docker","date":"2019-06-25T01:42:40.000Z","_content":"Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于[Docker官方文档](https://docs.docker.com/install/linux/docker-ce/centos/)<!-- more -->\n\n### 准备\n#### 操作系统需求\n基于CentOS7发行版进行安装，需要启用`centos-extras`，默认是开启的，如果关闭了的话，需要打开\n``` shell\n[root@ip-172-26-13-79 centos]# yum repolist                                                                              \n已加载插件：fastestmirror\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nLoading mirror speeds from cached hostfile\n * base: centos.usonyx.net\n * epel: download.nus.edu.sg\n * extras: centos.usonyx.net\n * updates: centos.usonyx.net\n源标识                                     源名称                                                                  状态\n!base/7/x86_64                             CentOS-7 - Base                                                         10,019\n!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221\n!extras/7/x86_64                           CentOS-7 - Extras                                                          409\n!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982\nrepolist: 25,631\n[root@ip-172-26-13-79 centos]#\n```\n开启的话，可以执行下面的命令,[参考](https://fedoraproject.org/wiki/EPEL)\n``` shell\n[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n# on RHEL 7 it is recommended to also enable the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie\n[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"\n```\n建议使用`overlay2` storage driver。\n#### 卸载旧的版本\n``` shell\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n如果没有提示，说明上面的包没有被安装。\n\n### 安装\n可以通过多种方式安装Docker CE：\n- 大多数用户通过设置 `Dokcer's repositories` 的方式安装，方便安装和进行升级，这种方法比较推荐。\n- 有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。\n- 在开发和测试环境，使用自动脚本进行Dokcer安装\n\n#### 使用repository 进行安装\n##### 设置 REPOSITORY\n1.安装所需要的包，提供对应的存储支持\n``` shell\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n2.使用下面推荐的稳定repository\n``` shell\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n##### 可选：开启nightly或test repositories\n1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们\n``` shell\n$ sudo yum-config-manager --enable docker-ce-nightly\n```\n2.开启test channel\n``` shell\nsudo yum-config-manager --enable docker-ce-test\n```\n3.关闭\n``` shell\nsudo yum-config-manager --disable docker-ce-nightly\n```\n[了解更多关于 nightly 和 test channels。](https://docs.docker.com/install/)\n\n##### 安装Docker CE\n安装最新版本，或者转到下一步安装特定版本\n``` shell\n$ sudo yum install docker-ce docker-ce-cli containerd.io\n```\n如果提示接受GPG key，请验证指纹是否匹配: `060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`\n``\n需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。\n###### 安装特定的版本\n``` shell\n$ yum list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n```\n返回的列表取决于启动的repositories。安装特定的版本\n- 例子，`docker-ce-18.09.1`\n``` shell\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n```\nDocker 已安装未启动，`docker` 组被创建，但是没有user添加进组。\n###### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n###### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过rpm包进行安装\n如果无法使用Docker's repository 安装Docker ,可以使用`.rpm`进行安装\n##### 下载rpm包\n可以到[https://download.docker.com/linux/centos/7/x86_64/stable/Packages/](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)下载`.rpm`文件选择版本进行安装。\n>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。\n\n##### 安装Docker CE\n切换到对应的目录进行下载和安装\n``` shell\n$ sudo yum install /path/to/package.rpm\n```\n##### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n##### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过使用便捷脚本安装\nDocker 提供了便捷脚本在[get.docker.com](https://get.docker.com/)和[test.docker.com](https://test.docker.com/),使用脚本安装可能会存在安全风险，建议不要在生产环境中使用\n","source":"_posts/centos7-docker-install-tutorial.md","raw":"---\ntitle: CentOS7 安装Docker\ndate: 2019-06-25 09:42:40\ncategories: Linux\ntags: Docker\n---\nDocker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于[Docker官方文档](https://docs.docker.com/install/linux/docker-ce/centos/)<!-- more -->\n\n### 准备\n#### 操作系统需求\n基于CentOS7发行版进行安装，需要启用`centos-extras`，默认是开启的，如果关闭了的话，需要打开\n``` shell\n[root@ip-172-26-13-79 centos]# yum repolist                                                                              \n已加载插件：fastestmirror\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nLoading mirror speeds from cached hostfile\n * base: centos.usonyx.net\n * epel: download.nus.edu.sg\n * extras: centos.usonyx.net\n * updates: centos.usonyx.net\n源标识                                     源名称                                                                  状态\n!base/7/x86_64                             CentOS-7 - Base                                                         10,019\n!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221\n!extras/7/x86_64                           CentOS-7 - Extras                                                          409\n!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982\nrepolist: 25,631\n[root@ip-172-26-13-79 centos]#\n```\n开启的话，可以执行下面的命令,[参考](https://fedoraproject.org/wiki/EPEL)\n``` shell\n[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n# on RHEL 7 it is recommended to also enable the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie\n[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"\n```\n建议使用`overlay2` storage driver。\n#### 卸载旧的版本\n``` shell\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n如果没有提示，说明上面的包没有被安装。\n\n### 安装\n可以通过多种方式安装Docker CE：\n- 大多数用户通过设置 `Dokcer's repositories` 的方式安装，方便安装和进行升级，这种方法比较推荐。\n- 有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。\n- 在开发和测试环境，使用自动脚本进行Dokcer安装\n\n#### 使用repository 进行安装\n##### 设置 REPOSITORY\n1.安装所需要的包，提供对应的存储支持\n``` shell\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n2.使用下面推荐的稳定repository\n``` shell\nsudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n##### 可选：开启nightly或test repositories\n1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们\n``` shell\n$ sudo yum-config-manager --enable docker-ce-nightly\n```\n2.开启test channel\n``` shell\nsudo yum-config-manager --enable docker-ce-test\n```\n3.关闭\n``` shell\nsudo yum-config-manager --disable docker-ce-nightly\n```\n[了解更多关于 nightly 和 test channels。](https://docs.docker.com/install/)\n\n##### 安装Docker CE\n安装最新版本，或者转到下一步安装特定版本\n``` shell\n$ sudo yum install docker-ce docker-ce-cli containerd.io\n```\n如果提示接受GPG key，请验证指纹是否匹配: `060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`\n``\n需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。\n###### 安装特定的版本\n``` shell\n$ yum list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n```\n返回的列表取决于启动的repositories。安装特定的版本\n- 例子，`docker-ce-18.09.1`\n``` shell\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n```\nDocker 已安装未启动，`docker` 组被创建，但是没有user添加进组。\n###### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n###### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过rpm包进行安装\n如果无法使用Docker's repository 安装Docker ,可以使用`.rpm`进行安装\n##### 下载rpm包\n可以到[https://download.docker.com/linux/centos/7/x86_64/stable/Packages/](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)下载`.rpm`文件选择版本进行安装。\n>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。\n\n##### 安装Docker CE\n切换到对应的目录进行下载和安装\n``` shell\n$ sudo yum install /path/to/package.rpm\n```\n##### 启动Docker\n``` shell\n$ sudo systemctl start docker\n```\n##### 通过运行`hello-world` 验证Docker CE 安装正确\n``` shell\n$ sudo docker run hello-world\n```\n#### 通过使用便捷脚本安装\nDocker 提供了便捷脚本在[get.docker.com](https://get.docker.com/)和[test.docker.com](https://test.docker.com/),使用脚本安装可能会存在安全风险，建议不要在生产环境中使用\n","slug":"centos7-docker-install-tutorial","published":1,"updated":"2019-06-25T05:34:09.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld0000qbis65nb867f4","content":"<p>Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">Docker官方文档</a><a id=\"more\"></a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"操作系统需求\"><a href=\"#操作系统需求\" class=\"headerlink\" title=\"操作系统需求\"></a>操作系统需求</h4><p>基于CentOS7发行版进行安装，需要启用<code>centos-extras</code>，默认是开启的，如果关闭了的话，需要打开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum repolist                                                                              </span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: centos.usonyx.net</span><br><span class=\"line\"> * epel: download.nus.edu.sg</span><br><span class=\"line\"> * extras: centos.usonyx.net</span><br><span class=\"line\"> * updates: centos.usonyx.net</span><br><span class=\"line\">源标识                                     源名称                                                                  状态</span><br><span class=\"line\">!base/7/x86_64                             CentOS-7 - Base                                                         10,019</span><br><span class=\"line\">!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221</span><br><span class=\"line\">!extras/7/x86_64                           CentOS-7 - Extras                                                          409</span><br><span class=\"line\">!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982</span><br><span class=\"line\">repolist: 25,631</span><br><span class=\"line\">[root@ip-172-26-13-79 centos]#</span><br></pre></td></tr></table></figure>\n\n<p>开启的话，可以执行下面的命令,<a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> on RHEL 7 it is recommended to also <span class=\"built_in\">enable</span> the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie</span></span><br><span class=\"line\">[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"</span><br></pre></td></tr></table></figure>\n\n<p>建议使用<code>overlay2</code> storage driver。</p>\n<h4 id=\"卸载旧的版本\"><a href=\"#卸载旧的版本\" class=\"headerlink\" title=\"卸载旧的版本\"></a>卸载旧的版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n\n<p>如果没有提示，说明上面的包没有被安装。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>可以通过多种方式安装Docker CE：</p>\n<ul>\n<li>大多数用户通过设置 <code>Dokcer&#39;s repositories</code> 的方式安装，方便安装和进行升级，这种方法比较推荐。</li>\n<li>有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。</li>\n<li>在开发和测试环境，使用自动脚本进行Dokcer安装</li>\n</ul>\n<h4 id=\"使用repository-进行安装\"><a href=\"#使用repository-进行安装\" class=\"headerlink\" title=\"使用repository 进行安装\"></a>使用repository 进行安装</h4><h5 id=\"设置-REPOSITORY\"><a href=\"#设置-REPOSITORY\" class=\"headerlink\" title=\"设置 REPOSITORY\"></a>设置 REPOSITORY</h5><p>1.安装所需要的包，提供对应的存储支持</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install -y yum-utils \\</span></span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n\n<p>2.使用下面推荐的稳定repository</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可选：开启nightly或test-repositories\"><a href=\"#可选：开启nightly或test-repositories\" class=\"headerlink\" title=\"可选：开启nightly或test repositories\"></a>可选：开启nightly或test repositories</h5><p>1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum-config-manager --<span class=\"built_in\">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure>\n\n<p>2.开启test channel</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n\n<p>3.关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --disable docker-ce-nightly</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">了解更多关于 nightly 和 test channels。</a></p>\n<h5 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>安装最新版本，或者转到下一步安装特定版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>\n\n<p>如果提示接受GPG key，请验证指纹是否匹配: <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code><br>``\n需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。</p>\n<h6 id=\"安装特定的版本\"><a href=\"#安装特定的版本\" class=\"headerlink\" title=\"安装特定的版本\"></a>安装特定的版本</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>\n\n<p>返回的列表取决于启动的repositories。安装特定的版本</p>\n<ul>\n<li>例子，<code>docker-ce-18.09.1</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>Docker 已安装未启动，<code>docker</code> 组被创建，但是没有user添加进组。</p>\n<h6 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"通过运行hello-world-验证Docker-CE-安装正确\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过rpm包进行安装\"><a href=\"#通过rpm包进行安装\" class=\"headerlink\" title=\"通过rpm包进行安装\"></a>通过rpm包进行安装</h4><p>如果无法使用Docker’s repository 安装Docker ,可以使用<code>.rpm</code>进行安装</p>\n<h5 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h5><p>可以到<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>下载<code>.rpm</code>文件选择版本进行安装。</p>\n<blockquote>\n<p>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。</p>\n</blockquote>\n<h5 id=\"安装Docker-CE-1\"><a href=\"#安装Docker-CE-1\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>切换到对应的目录进行下载和安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install /path/to/package.rpm</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动Docker-1\"><a href=\"#启动Docker-1\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过运行hello-world-验证Docker-CE-安装正确-1\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确-1\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过使用便捷脚本安装\"><a href=\"#通过使用便捷脚本安装\" class=\"headerlink\" title=\"通过使用便捷脚本安装\"></a>通过使用便捷脚本安装</h4><p>Docker 提供了便捷脚本在<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>和<a href=\"https://test.docker.com/\" target=\"_blank\" rel=\"noopener\">test.docker.com</a>,使用脚本安装可能会存在安全风险，建议不要在生产环境中使用</p>\n","site":{"data":{}},"excerpt":"<p>Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">Docker官方文档</a></p>","more":"<p></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"操作系统需求\"><a href=\"#操作系统需求\" class=\"headerlink\" title=\"操作系统需求\"></a>操作系统需求</h4><p>基于CentOS7发行版进行安装，需要启用<code>centos-extras</code>，默认是开启的，如果关闭了的话，需要打开</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum repolist                                                                              </span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: centos.usonyx.net</span><br><span class=\"line\"> * epel: download.nus.edu.sg</span><br><span class=\"line\"> * extras: centos.usonyx.net</span><br><span class=\"line\"> * updates: centos.usonyx.net</span><br><span class=\"line\">源标识                                     源名称                                                                  状态</span><br><span class=\"line\">!base/7/x86_64                             CentOS-7 - Base                                                         10,019</span><br><span class=\"line\">!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221</span><br><span class=\"line\">!extras/7/x86_64                           CentOS-7 - Extras                                                          409</span><br><span class=\"line\">!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982</span><br><span class=\"line\">repolist: 25,631</span><br><span class=\"line\">[root@ip-172-26-13-79 centos]#</span><br></pre></td></tr></table></figure>\n\n<p>开启的话，可以执行下面的命令,<a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> on RHEL 7 it is recommended to also <span class=\"built_in\">enable</span> the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie</span></span><br><span class=\"line\">[root@ip-172-26-13-79 centos]# subscription-manager repos --enable \"rhel-*-optional-rpms\" --enable \"rhel-*-extras-rpms\"  --enable \"rhel-ha-for-rhel-*-server-rpms\"</span><br></pre></td></tr></table></figure>\n\n<p>建议使用<code>overlay2</code> storage driver。</p>\n<h4 id=\"卸载旧的版本\"><a href=\"#卸载旧的版本\" class=\"headerlink\" title=\"卸载旧的版本\"></a>卸载旧的版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n\n<p>如果没有提示，说明上面的包没有被安装。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>可以通过多种方式安装Docker CE：</p>\n<ul>\n<li>大多数用户通过设置 <code>Dokcer&#39;s repositories</code> 的方式安装，方便安装和进行升级，这种方法比较推荐。</li>\n<li>有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。</li>\n<li>在开发和测试环境，使用自动脚本进行Dokcer安装</li>\n</ul>\n<h4 id=\"使用repository-进行安装\"><a href=\"#使用repository-进行安装\" class=\"headerlink\" title=\"使用repository 进行安装\"></a>使用repository 进行安装</h4><h5 id=\"设置-REPOSITORY\"><a href=\"#设置-REPOSITORY\" class=\"headerlink\" title=\"设置 REPOSITORY\"></a>设置 REPOSITORY</h5><p>1.安装所需要的包，提供对应的存储支持</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install -y yum-utils \\</span></span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n\n<p>2.使用下面推荐的稳定repository</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可选：开启nightly或test-repositories\"><a href=\"#可选：开启nightly或test-repositories\" class=\"headerlink\" title=\"可选：开启nightly或test repositories\"></a>可选：开启nightly或test repositories</h5><p>1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum-config-manager --<span class=\"built_in\">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure>\n\n<p>2.开启test channel</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n\n<p>3.关闭</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --disable docker-ce-nightly</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.docker.com/install/\" target=\"_blank\" rel=\"noopener\">了解更多关于 nightly 和 test channels。</a></p>\n<h5 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>安装最新版本，或者转到下一步安装特定版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>\n\n<p>如果提示接受GPG key，请验证指纹是否匹配: <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code><br>``\n需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。</p>\n<h6 id=\"安装特定的版本\"><a href=\"#安装特定的版本\" class=\"headerlink\" title=\"安装特定的版本\"></a>安装特定的版本</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>\n\n<p>返回的列表取决于启动的repositories。安装特定的版本</p>\n<ul>\n<li>例子，<code>docker-ce-18.09.1</code><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>Docker 已安装未启动，<code>docker</code> 组被创建，但是没有user添加进组。</p>\n<h6 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"通过运行hello-world-验证Docker-CE-安装正确\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过rpm包进行安装\"><a href=\"#通过rpm包进行安装\" class=\"headerlink\" title=\"通过rpm包进行安装\"></a>通过rpm包进行安装</h4><p>如果无法使用Docker’s repository 安装Docker ,可以使用<code>.rpm</code>进行安装</p>\n<h5 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h5><p>可以到<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>下载<code>.rpm</code>文件选择版本进行安装。</p>\n<blockquote>\n<p>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。</p>\n</blockquote>\n<h5 id=\"安装Docker-CE-1\"><a href=\"#安装Docker-CE-1\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h5><p>切换到对应的目录进行下载和安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo yum install /path/to/package.rpm</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动Docker-1\"><a href=\"#启动Docker-1\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过运行hello-world-验证Docker-CE-安装正确-1\"><a href=\"#通过运行hello-world-验证Docker-CE-安装正确-1\" class=\"headerlink\" title=\"通过运行hello-world 验证Docker CE 安装正确\"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过使用便捷脚本安装\"><a href=\"#通过使用便捷脚本安装\" class=\"headerlink\" title=\"通过使用便捷脚本安装\"></a>通过使用便捷脚本安装</h4><p>Docker 提供了便捷脚本在<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">get.docker.com</a>和<a href=\"https://test.docker.com/\" target=\"_blank\" rel=\"noopener\">test.docker.com</a>,使用脚本安装可能会存在安全风险，建议不要在生产环境中使用</p>"},{"title":"CentOS 安装 git","date":"2017-11-06T07:11:35.000Z","_content":"CentOS 7 上安装git 的几种方法。 <!-- more -->\n### 源码安装\n- 安装对应的依赖\n``` bash\nyum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install -y gcc perl-ExtUtils-MakeMaker\n```\n- 下载源码编译安装\n#### 确保系统git 已经被卸载\n``` bash\nyum remove -y git(先执行本选项，确保卸载掉git)\n```\n\n``` bash\ncd /usr/src\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz\ntar xzf git-2.9.3.tar.gz\ncd git-2.9.3\nmake prefix=/usr/bin/git all\nmake prefix=/usr/bin/git install\necho \"export PATH=$PATH:/usr/bin/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\ngit --version (查看是否安装完成)\n```\n### rpm 安装（基于CentOS7）\n``` bash\nyum install -y epel-release （#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）\nrpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm\nyum install git2u\ngit --version\n```\n","source":"_posts/centos-install-git.md","raw":"---\ntitle: CentOS 安装 git\ndate: 2017-11-06 15:11:35\ncategories: Linux\ntag: Git\n---\nCentOS 7 上安装git 的几种方法。 <!-- more -->\n### 源码安装\n- 安装对应的依赖\n``` bash\nyum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install -y gcc perl-ExtUtils-MakeMaker\n```\n- 下载源码编译安装\n#### 确保系统git 已经被卸载\n``` bash\nyum remove -y git(先执行本选项，确保卸载掉git)\n```\n\n``` bash\ncd /usr/src\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz\ntar xzf git-2.9.3.tar.gz\ncd git-2.9.3\nmake prefix=/usr/bin/git all\nmake prefix=/usr/bin/git install\necho \"export PATH=$PATH:/usr/bin/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\ngit --version (查看是否安装完成)\n```\n### rpm 安装（基于CentOS7）\n``` bash\nyum install -y epel-release （#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）\nrpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm\nyum install git2u\ngit --version\n```\n","slug":"centos-install-git","published":1,"updated":"2019-06-22T08:57:07.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld1000ubis6iuatjni4","content":"<p>CentOS 7 上安装git 的几种方法。 <a id=\"more\"></a></p>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ul>\n<li><p>安装对应的依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install -y gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载源码编译安装</p>\n<h4 id=\"确保系统git-已经被卸载\"><a href=\"#确保系统git-已经被卸载\" class=\"headerlink\" title=\"确保系统git 已经被卸载\"></a>确保系统git 已经被卸载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove -y git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class=\"line\">tar xzf git-2.9.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.9.3</span><br><span class=\"line\">make prefix=/usr/bin/git all</span><br><span class=\"line\">make prefix=/usr/bin/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/bin/git/bin\"</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br><span class=\"line\">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rpm-安装（基于CentOS7）\"><a href=\"#rpm-安装（基于CentOS7）\" class=\"headerlink\" title=\"rpm 安装（基于CentOS7）\"></a>rpm 安装（基于CentOS7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release （<span class=\"comment\">#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）</span></span><br><span class=\"line\">rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">yum install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>CentOS 7 上安装git 的几种方法。</p>","more":"<p></p>\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><ul>\n<li><p>安装对应的依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install -y gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载源码编译安装</p>\n<h4 id=\"确保系统git-已经被卸载\"><a href=\"#确保系统git-已经被卸载\" class=\"headerlink\" title=\"确保系统git 已经被卸载\"></a>确保系统git 已经被卸载</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove -y git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class=\"line\">tar xzf git-2.9.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.9.3</span><br><span class=\"line\">make prefix=/usr/bin/git all</span><br><span class=\"line\">make prefix=/usr/bin/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/bin/git/bin\"</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br><span class=\"line\">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rpm-安装（基于CentOS7）\"><a href=\"#rpm-安装（基于CentOS7）\" class=\"headerlink\" title=\"rpm 安装（基于CentOS7）\"></a>rpm 安装（基于CentOS7）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release （<span class=\"comment\">#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）</span></span><br><span class=\"line\">rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">yum install git2u</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>"},{"title":"centos安装redis5.x","date":"2018-12-14T02:35:35.000Z","_content":"### Redis\n>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<!-- more -->\n\n我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，\n第一件事就是安装Redis。\n\n#### 安装Redis（默认CentOS 7）\n- 下载Redis\n``` shell\nwget http://download.redis.io/releases/redis-5.0.3.tar.gz\n```\n- 解压编译\n```\ntar xzf redis-5.0.3.tar.gz\ncd redis-5.0.3\nmake install\n#安装redis-server（默认配置）\nsh ./utils/install_server.sh\n\nWelcome to the redis service installer\nThis script will help you easily set up a running redis server\n\nPlease select the redis port for this instance: [6379]\nSelecting default: 6379\nPlease select the redis config file name [/etc/redis/6379.conf]\nSelected default - /etc/redis/6379.conf\nPlease select the redis log file name [/var/log/redis_6379.log]\nSelected default - /var/log/redis_6379.log\nPlease select the data directory for this instance [/var/lib/redis/6379]\nSelected default - /var/lib/redis/6379\nPlease select the redis executable path [/usr/local/bin/redis-server]\nSelected config:\nPort           : 6379\nConfig file    : /etc/redis/6379.conf\nLog file       : /var/log/redis_6379.log\nData dir       : /var/lib/redis/6379\nExecutable     : /usr/local/bin/redis-server\nCli Executable : /usr/local/bin/redis-cli\nIs this ok? Then press ENTER to go on or Ctrl-C to abort.\nCopied /tmp/6379.conf => /etc/init.d/redis_6379\nInstalling service...\nSuccessfully added to chkconfig!\nSuccessfully added to runlevels 345!\nStarting Redis server...\nInstallation successful!\n```\n#### 修改配置文件\n``` shell\nvim /etc/redis/6379.config\n#设置后台启动\ndaemonize yes\n#设置数据持久化\nappendonly yes\n#设置ip 默认最好不修改\n#bind 127.0.0.1\n#设置密码\n#requirepass 123456\n```\n#### 创建服务脚本\n```\n#启动\nsystemctl start /etc/init.d/redis_6379\n```\n","source":"_posts/centos-install-redis5-x.md","raw":"---\ntitle: centos安装redis5.x\ndate: 2018-12-14 10:35:35\ncategories: Linux\ntags: Redis\n---\n### Redis\n>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<!-- more -->\n\n我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，\n第一件事就是安装Redis。\n\n#### 安装Redis（默认CentOS 7）\n- 下载Redis\n``` shell\nwget http://download.redis.io/releases/redis-5.0.3.tar.gz\n```\n- 解压编译\n```\ntar xzf redis-5.0.3.tar.gz\ncd redis-5.0.3\nmake install\n#安装redis-server（默认配置）\nsh ./utils/install_server.sh\n\nWelcome to the redis service installer\nThis script will help you easily set up a running redis server\n\nPlease select the redis port for this instance: [6379]\nSelecting default: 6379\nPlease select the redis config file name [/etc/redis/6379.conf]\nSelected default - /etc/redis/6379.conf\nPlease select the redis log file name [/var/log/redis_6379.log]\nSelected default - /var/log/redis_6379.log\nPlease select the data directory for this instance [/var/lib/redis/6379]\nSelected default - /var/lib/redis/6379\nPlease select the redis executable path [/usr/local/bin/redis-server]\nSelected config:\nPort           : 6379\nConfig file    : /etc/redis/6379.conf\nLog file       : /var/log/redis_6379.log\nData dir       : /var/lib/redis/6379\nExecutable     : /usr/local/bin/redis-server\nCli Executable : /usr/local/bin/redis-cli\nIs this ok? Then press ENTER to go on or Ctrl-C to abort.\nCopied /tmp/6379.conf => /etc/init.d/redis_6379\nInstalling service...\nSuccessfully added to chkconfig!\nSuccessfully added to runlevels 345!\nStarting Redis server...\nInstallation successful!\n```\n#### 修改配置文件\n``` shell\nvim /etc/redis/6379.config\n#设置后台启动\ndaemonize yes\n#设置数据持久化\nappendonly yes\n#设置ip 默认最好不修改\n#bind 127.0.0.1\n#设置密码\n#requirepass 123456\n```\n#### 创建服务脚本\n```\n#启动\nsystemctl start /etc/init.d/redis_6379\n```\n","slug":"centos-install-redis5-x","published":1,"updated":"2019-06-22T08:57:18.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld2000xbis63cjaaoc1","content":"<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><blockquote>\n<p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<a id=\"more\"></a></p>\n</blockquote>\n<p>我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，<br>第一件事就是安装Redis。</p>\n<h4 id=\"安装Redis（默认CentOS-7）\"><a href=\"#安装Redis（默认CentOS-7）\" class=\"headerlink\" title=\"安装Redis（默认CentOS 7）\"></a>安装Redis（默认CentOS 7）</h4><ul>\n<li><p>下载Redis</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-5.0.3.tar.gz</span><br><span class=\"line\">cd redis-5.0.3</span><br><span class=\"line\">make install</span><br><span class=\"line\">#安装redis-server（默认配置）</span><br><span class=\"line\">sh ./utils/install_server.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the redis service installer</span><br><span class=\"line\">This script will help you easily set up a running redis server</span><br><span class=\"line\"></span><br><span class=\"line\">Please select the redis port for this instance: [6379]</span><br><span class=\"line\">Selecting default: 6379</span><br><span class=\"line\">Please select the redis config file name [/etc/redis/6379.conf]</span><br><span class=\"line\">Selected default - /etc/redis/6379.conf</span><br><span class=\"line\">Please select the redis log file name [/var/log/redis_6379.log]</span><br><span class=\"line\">Selected default - /var/log/redis_6379.log</span><br><span class=\"line\">Please select the data directory for this instance [/var/lib/redis/6379]</span><br><span class=\"line\">Selected default - /var/lib/redis/6379</span><br><span class=\"line\">Please select the redis executable path [/usr/local/bin/redis-server]</span><br><span class=\"line\">Selected config:</span><br><span class=\"line\">Port           : 6379</span><br><span class=\"line\">Config file    : /etc/redis/6379.conf</span><br><span class=\"line\">Log file       : /var/log/redis_6379.log</span><br><span class=\"line\">Data dir       : /var/lib/redis/6379</span><br><span class=\"line\">Executable     : /usr/local/bin/redis-server</span><br><span class=\"line\">Cli Executable : /usr/local/bin/redis-cli</span><br><span class=\"line\">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class=\"line\">Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379</span><br><span class=\"line\">Installing service...</span><br><span class=\"line\">Successfully added to chkconfig!</span><br><span class=\"line\">Successfully added to runlevels 345!</span><br><span class=\"line\">Starting Redis server...</span><br><span class=\"line\">Installation successful!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置后台启动</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置数据持久化</span></span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置ip 默认最好不修改</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">bind</span> 127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">requirepass 123456</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建服务脚本\"><a href=\"#创建服务脚本\" class=\"headerlink\" title=\"创建服务脚本\"></a>创建服务脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动</span><br><span class=\"line\">systemctl start /etc/init.d/redis_6379</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><blockquote>\n<p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。</p></blockquote>","more":"<p></p>\n\n<p>我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，<br>第一件事就是安装Redis。</p>\n<h4 id=\"安装Redis（默认CentOS-7）\"><a href=\"#安装Redis（默认CentOS-7）\" class=\"headerlink\" title=\"安装Redis（默认CentOS 7）\"></a>安装Redis（默认CentOS 7）</h4><ul>\n<li><p>下载Redis</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-5.0.3.tar.gz</span><br><span class=\"line\">cd redis-5.0.3</span><br><span class=\"line\">make install</span><br><span class=\"line\">#安装redis-server（默认配置）</span><br><span class=\"line\">sh ./utils/install_server.sh</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the redis service installer</span><br><span class=\"line\">This script will help you easily set up a running redis server</span><br><span class=\"line\"></span><br><span class=\"line\">Please select the redis port for this instance: [6379]</span><br><span class=\"line\">Selecting default: 6379</span><br><span class=\"line\">Please select the redis config file name [/etc/redis/6379.conf]</span><br><span class=\"line\">Selected default - /etc/redis/6379.conf</span><br><span class=\"line\">Please select the redis log file name [/var/log/redis_6379.log]</span><br><span class=\"line\">Selected default - /var/log/redis_6379.log</span><br><span class=\"line\">Please select the data directory for this instance [/var/lib/redis/6379]</span><br><span class=\"line\">Selected default - /var/lib/redis/6379</span><br><span class=\"line\">Please select the redis executable path [/usr/local/bin/redis-server]</span><br><span class=\"line\">Selected config:</span><br><span class=\"line\">Port           : 6379</span><br><span class=\"line\">Config file    : /etc/redis/6379.conf</span><br><span class=\"line\">Log file       : /var/log/redis_6379.log</span><br><span class=\"line\">Data dir       : /var/lib/redis/6379</span><br><span class=\"line\">Executable     : /usr/local/bin/redis-server</span><br><span class=\"line\">Cli Executable : /usr/local/bin/redis-cli</span><br><span class=\"line\">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class=\"line\">Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379</span><br><span class=\"line\">Installing service...</span><br><span class=\"line\">Successfully added to chkconfig!</span><br><span class=\"line\">Successfully added to runlevels 345!</span><br><span class=\"line\">Starting Redis server...</span><br><span class=\"line\">Installation successful!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.config</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置后台启动</span></span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置数据持久化</span></span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置ip 默认最好不修改</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">bind</span> 127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">requirepass 123456</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建服务脚本\"><a href=\"#创建服务脚本\" class=\"headerlink\" title=\"创建服务脚本\"></a>创建服务脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动</span><br><span class=\"line\">systemctl start /etc/init.d/redis_6379</span><br></pre></td></tr></table></figure>"},{"title":"Centos7 安装 pyenv","date":"2018-02-27T03:38:38.000Z","_content":"> 人生苦短，我用Python\n\nPython 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<!-- more -->\n\n### 安装Pyenv\n``` bash\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  #安装所需的包\n```\n\n\n``` bash\n#创建目录、安装\nmkdir ~/.pyenv\ngit clone git://github.com/yyuu/pyenv.git ~/.pyenv  \n#配置环境变量\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc  \necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc  \necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc  \nexec $SHELL -l\n```\n```\n\n``` bash\n#列出所有版本\npyenv install --list\n\n#安装python 3.5.2\npyenv install 3.5.2\n\n#全局使用\npyenv global 3.5.2\n\n#检查版本\npython --version\n```\n\n通过环境管理，一台服务器上可以存在多个环境，方便部署。\n","source":"_posts/cnetos-install-pyenv.md","raw":"---\ntitle: Centos7 安装 pyenv\ndate: 2018-02-27 11:38:38\ncategories: Linux\ntags: Python\n---\n> 人生苦短，我用Python\n\nPython 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<!-- more -->\n\n### 安装Pyenv\n``` bash\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  #安装所需的包\n```\n\n\n``` bash\n#创建目录、安装\nmkdir ~/.pyenv\ngit clone git://github.com/yyuu/pyenv.git ~/.pyenv  \n#配置环境变量\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc  \necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc  \necho 'eval \"$(pyenv init -)\"' >> ~/.bashrc  \nexec $SHELL -l\n```\n```\n\n``` bash\n#列出所有版本\npyenv install --list\n\n#安装python 3.5.2\npyenv install 3.5.2\n\n#全局使用\npyenv global 3.5.2\n\n#检查版本\npython --version\n```\n\n通过环境管理，一台服务器上可以存在多个环境，方便部署。\n","slug":"cnetos-install-pyenv","published":1,"updated":"2019-06-22T08:57:53.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld30010bis6imoxoktz","content":"<blockquote>\n<p>人生苦短，我用Python</p>\n</blockquote>\n<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<a id=\"more\"></a></p>\n<h3 id=\"安装Pyenv\"><a href=\"#安装Pyenv\" class=\"headerlink\" title=\"安装Pyenv\"></a>安装Pyenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class=\"comment\">#安装所需的包</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建目录、安装</span></span><br><span class=\"line\">mkdir ~/.pyenv</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class=\"line\"><span class=\"comment\">#配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span> -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">#列出所有版本</span><br><span class=\"line\">pyenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\">#安装python 3.5.2</span><br><span class=\"line\">pyenv install 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#全局使用</span><br><span class=\"line\">pyenv global 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#检查版本</span><br><span class=\"line\">python --version</span><br></pre></td></tr></table></figure>\n\n<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>人生苦短，我用Python</p>\n</blockquote>\n<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。</p>","more":"<p></p>\n<h3 id=\"安装Pyenv\"><a href=\"#安装Pyenv\" class=\"headerlink\" title=\"安装Pyenv\"></a>安装Pyenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class=\"comment\">#安装所需的包</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建目录、安装</span></span><br><span class=\"line\">mkdir ~/.pyenv</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class=\"line\"><span class=\"comment\">#配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'eval \"$(pyenv init -)\"'</span> &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"variable\">$SHELL</span> -l</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">#列出所有版本</span><br><span class=\"line\">pyenv install --list</span><br><span class=\"line\"></span><br><span class=\"line\">#安装python 3.5.2</span><br><span class=\"line\">pyenv install 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#全局使用</span><br><span class=\"line\">pyenv global 3.5.2</span><br><span class=\"line\"></span><br><span class=\"line\">#检查版本</span><br><span class=\"line\">python --version</span><br></pre></td></tr></table></figure>\n\n<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>"},{"title":"Docker 常用命令(待完善)","date":"2017-11-30T07:32:29.000Z","_content":"#### 列出所有并删除已停止容器\n``` bash\n$ docker rm -v $(docker ps -aq -f status=exited)\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\n#### 创建数据卷\n``` bash\n$ docker volume create --name data\n```\n","source":"_posts/common-commonds.md","raw":"---\ntitle: Docker 常用命令(待完善)\ndate: 2017-11-30 15:32:29\ncategories: Linux\ntag: Docker\n---\n#### 列出所有并删除已停止容器\n``` bash\n$ docker rm -v $(docker ps -aq -f status=exited)\n$ docker volume rm $(docker volume ls -qf dangling=true)\n```\n#### 创建数据卷\n``` bash\n$ docker volume create --name data\n```\n","slug":"common-commonds","published":1,"updated":"2018-02-09T02:43:43.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld40013bis6dsv4s3sa","content":"<h4 id=\"列出所有并删除已停止容器\"><a href=\"#列出所有并删除已停止容器\" class=\"headerlink\" title=\"列出所有并删除已停止容器\"></a>列出所有并删除已停止容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\">$ docker volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create --name data</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"列出所有并删除已停止容器\"><a href=\"#列出所有并删除已停止容器\" class=\"headerlink\" title=\"列出所有并删除已停止容器\"></a>列出所有并删除已停止容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class=\"line\">$ docker volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker volume create --name data</span><br></pre></td></tr></table></figure>\n\n"},{"title":"npm 更换源","date":"2018-05-03T02:17:09.000Z","_content":"由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<!-- more -->\n\n### 换源\n- 临时使用\n``` bash\nnpm --registry https://registry.npm.taobao.org install express --save\n```\n- 持久使用\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n- 验证\n``` bash\nnpm config get registry\n```\n- 官方源\n``` bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n### 通过 nrm 更换源\n最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了`nrm -- NPM registry manager`，它可以帮你快速的帮你在不同的源之间切换，现在包括`npm`、`cnpm`、`taobao`、`nj(nodejitsu)`、`rednpm`，还可以加入你自己的私有源。\n\n- 安装\n``` shell\nnpm install -g nrm\n```\n- 例子\n``` bash\n$ nrm ls\n* npm -----  https://registry.npmjs.org/\n  cnpm ----  http://r.cnpmjs.org/\n  taobao --  https://registry.npm.taobao.org/\n  nj ------  https://registry.nodejitsu.com/\n  rednpm -- http://registry.mirror.cqupt.edu.cn\n  skimdb -- https://skimdb.npmjs.com/registry\n# 使用\n$ nrm use cnpm  #switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/\n```\n\n通过nrm换源，体验一下就提升了很多，工作更有效率了。\n","source":"_posts/config-npm-registry.md","raw":"---\ntitle: npm 更换源\ndate: 2018-05-03 10:17:09\ncategories: Linux\ntags: Node\n---\n由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<!-- more -->\n\n### 换源\n- 临时使用\n``` bash\nnpm --registry https://registry.npm.taobao.org install express --save\n```\n- 持久使用\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n- 验证\n``` bash\nnpm config get registry\n```\n- 官方源\n``` bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n### 通过 nrm 更换源\n最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了`nrm -- NPM registry manager`，它可以帮你快速的帮你在不同的源之间切换，现在包括`npm`、`cnpm`、`taobao`、`nj(nodejitsu)`、`rednpm`，还可以加入你自己的私有源。\n\n- 安装\n``` shell\nnpm install -g nrm\n```\n- 例子\n``` bash\n$ nrm ls\n* npm -----  https://registry.npmjs.org/\n  cnpm ----  http://r.cnpmjs.org/\n  taobao --  https://registry.npm.taobao.org/\n  nj ------  https://registry.nodejitsu.com/\n  rednpm -- http://registry.mirror.cqupt.edu.cn\n  skimdb -- https://skimdb.npmjs.com/registry\n# 使用\n$ nrm use cnpm  #switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/\n```\n\n通过nrm换源，体验一下就提升了很多，工作更有效率了。\n","slug":"config-npm-registry","published":1,"updated":"2019-06-22T08:58:01.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld50017bis6xoq8tvi7","content":"<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<a id=\"more\"></a></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><ul>\n<li><p>临时使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>持久使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>官方源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"通过-nrm-更换源\"><a href=\"#通过-nrm-更换源\" class=\"headerlink\" title=\"通过 nrm 更换源\"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nrm ls</span><br><span class=\"line\">* npm -----  https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm ----  http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao --  https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ------  https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class=\"line\">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ nrm use cnpm  <span class=\"comment\">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>\n","site":{"data":{}},"excerpt":"<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。</p>","more":"<p></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><ul>\n<li><p>临时使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>持久使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>官方源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"通过-nrm-更换源\"><a href=\"#通过-nrm-更换源\" class=\"headerlink\" title=\"通过 nrm 更换源\"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>\n<ul>\n<li><p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nrm ls</span><br><span class=\"line\">* npm -----  https://registry.npmjs.org/</span><br><span class=\"line\">  cnpm ----  http://r.cnpmjs.org/</span><br><span class=\"line\">  taobao --  https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj ------  https://registry.nodejitsu.com/</span><br><span class=\"line\">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class=\"line\">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ nrm use cnpm  <span class=\"comment\">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>"},{"title":"DevOps实践1:基本概念和环境配置","date":"2018-02-26T07:14:03.000Z","_content":"### 什么是DevOps\n> DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<!-- more -->\n\n![](devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg)\n我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。\n\n### DevOps各个阶段\n1. 第一阶段：流程化\n基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。\n2. 第二阶段：自动化服务（部分）\n基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。\n3. 第三阶段：智能化\n根据实际的业务情况，通过DevOps提升开发、测试、运维效率\n\n![如何一步步实现DevOps](devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg)\n![CI/CD](devops-1-environmental-configuration/191500078c0b39a29f95.jpeg)\n![自动化测试](devops-1-environmental-configuration/1916000764d774a3eee4.jpeg)\n![持续集成](devops-1-environmental-configuration/191700078c8d4238617c.jpeg)\n![微服务最佳实践](devops-1-environmental-configuration/191b000762026287366b.jpeg)\n\n### 工具说明\n目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。\n所需要用到的软件和工具:\n- Jenkins\n- Dokcer\n- IDEA\n- Git\n主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。\n\n### Docker 环境配置\n因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。\n- Windows 环境\n\nDocker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。\n`https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi`\n参考'http://www.widuu.com/docker/installation/windows.html'\n\n\n- Mac 环境\n\nDocker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。\n`https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg`\n可参考：`http://blog.csdn.net/jiang_xinxing/article/details/58025417`\n\n- Linux 环境\n\n```\n#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。\n`https://get.daocloud.io/toolbox/` (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)\n\n### Docker 常用命令\n```\ndocker search XXX  #查询docker镜像\n```\n\n```\ndocker pull XXX #拉取docker 镜像\n```\n\n```\ndocker images #查看已下载的docker镜像\n```\n\n```\ndocker run XXX #运行docker容器\n```\n\n```\ndocker ps #查看正在运行的docker容器\n```\n\n```\ndocker stop XXX #停止正在运行的容器\n```\n\n```\ndocker rm -f XXX #删除容器\n```\n要想更好的使用Docker和各种技术需要不断充电和探索。\n\n部分图片来自 `http://blog.csdn.net/ghostcloud2016/article/details/62426612`\n","source":"_posts/devops-1-environmental-configuration.md","raw":"---\ntitle: DevOps实践1:基本概念和环境配置\ndate: 2018-02-26 15:14:03\ncategories: DevOps\ntag: Docker\n---\n### 什么是DevOps\n> DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<!-- more -->\n\n![](devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg)\n我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。\n\n### DevOps各个阶段\n1. 第一阶段：流程化\n基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。\n2. 第二阶段：自动化服务（部分）\n基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。\n3. 第三阶段：智能化\n根据实际的业务情况，通过DevOps提升开发、测试、运维效率\n\n![如何一步步实现DevOps](devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg)\n![CI/CD](devops-1-environmental-configuration/191500078c0b39a29f95.jpeg)\n![自动化测试](devops-1-environmental-configuration/1916000764d774a3eee4.jpeg)\n![持续集成](devops-1-environmental-configuration/191700078c8d4238617c.jpeg)\n![微服务最佳实践](devops-1-environmental-configuration/191b000762026287366b.jpeg)\n\n### 工具说明\n目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。\n所需要用到的软件和工具:\n- Jenkins\n- Dokcer\n- IDEA\n- Git\n主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。\n\n### Docker 环境配置\n因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。\n- Windows 环境\n\nDocker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。\n`https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi`\n参考'http://www.widuu.com/docker/installation/windows.html'\n\n\n- Mac 环境\n\nDocker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。\n`https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg`\n可参考：`http://blog.csdn.net/jiang_xinxing/article/details/58025417`\n\n- Linux 环境\n\n```\n#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）\ncurl -sSL https://get.daocloud.io/docker | sh\n```\n\n如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。\n`https://get.daocloud.io/toolbox/` (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)\n\n### Docker 常用命令\n```\ndocker search XXX  #查询docker镜像\n```\n\n```\ndocker pull XXX #拉取docker 镜像\n```\n\n```\ndocker images #查看已下载的docker镜像\n```\n\n```\ndocker run XXX #运行docker容器\n```\n\n```\ndocker ps #查看正在运行的docker容器\n```\n\n```\ndocker stop XXX #停止正在运行的容器\n```\n\n```\ndocker rm -f XXX #删除容器\n```\n要想更好的使用Docker和各种技术需要不断充电和探索。\n\n部分图片来自 `http://blog.csdn.net/ghostcloud2016/article/details/62426612`\n","slug":"devops-1-environmental-configuration","published":1,"updated":"2019-06-22T08:58:21.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld70019bis6bqkdm5a4","content":"<h3 id=\"什么是DevOps\"><a href=\"#什么是DevOps\" class=\"headerlink\" title=\"什么是DevOps\"></a>什么是DevOps</h3><blockquote>\n<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<a id=\"more\"></a></p>\n</blockquote>\n<p><img src=\"/.com//v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg\" alt><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>\n<h3 id=\"DevOps各个阶段\"><a href=\"#DevOps各个阶段\" class=\"headerlink\" title=\"DevOps各个阶段\"></a>DevOps各个阶段</h3><ol>\n<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>\n<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>\n<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>\n</ol>\n<p><img src=\"/.com//191800078ffdfe660fb3.jpeg\" alt=\"如何一步步实现DevOps\"><br><img src=\"/.com//191500078c0b39a29f95.jpeg\" alt=\"CI/CD\"><br><img src=\"/.com//1916000764d774a3eee4.jpeg\" alt=\"自动化测试\"><br><img src=\"/.com//191700078c8d4238617c.jpeg\" alt=\"持续集成\"><br><img src=\"/.com//191b000762026287366b.jpeg\" alt=\"微服务最佳实践\"></p>\n<h3 id=\"工具说明\"><a href=\"#工具说明\" class=\"headerlink\" title=\"工具说明\"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>\n<ul>\n<li>Jenkins</li>\n<li>Dokcer</li>\n<li>IDEA</li>\n<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>\n</ul>\n<h3 id=\"Docker-环境配置\"><a href=\"#Docker-环境配置\" class=\"headerlink\" title=\"Docker 环境配置\"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>\n<ul>\n<li>Windows 环境</li>\n</ul>\n<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href=\"http://www.widuu.com/docker/installation/windows.html&#39;\" target=\"_blank\" rel=\"noopener\">http://www.widuu.com/docker/installation/windows.html&#39;</a></p>\n<ul>\n<li>Mac 环境</li>\n</ul>\n<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>\n<ul>\n<li>Linux 环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n\n<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>\n<h3 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>\n\n<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>\n<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是DevOps\"><a href=\"#什么是DevOps\" class=\"headerlink\" title=\"什么是DevOps\"></a>什么是DevOps</h3><blockquote>\n<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。</p></blockquote>","more":"<p></p>\n\n<p><img src=\"/.com//v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg\" alt><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>\n<h3 id=\"DevOps各个阶段\"><a href=\"#DevOps各个阶段\" class=\"headerlink\" title=\"DevOps各个阶段\"></a>DevOps各个阶段</h3><ol>\n<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>\n<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>\n<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>\n</ol>\n<p><img src=\"/.com//191800078ffdfe660fb3.jpeg\" alt=\"如何一步步实现DevOps\"><br><img src=\"/.com//191500078c0b39a29f95.jpeg\" alt=\"CI/CD\"><br><img src=\"/.com//1916000764d774a3eee4.jpeg\" alt=\"自动化测试\"><br><img src=\"/.com//191700078c8d4238617c.jpeg\" alt=\"持续集成\"><br><img src=\"/.com//191b000762026287366b.jpeg\" alt=\"微服务最佳实践\"></p>\n<h3 id=\"工具说明\"><a href=\"#工具说明\" class=\"headerlink\" title=\"工具说明\"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>\n<ul>\n<li>Jenkins</li>\n<li>Dokcer</li>\n<li>IDEA</li>\n<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>\n</ul>\n<h3 id=\"Docker-环境配置\"><a href=\"#Docker-环境配置\" class=\"headerlink\" title=\"Docker 环境配置\"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>\n<ul>\n<li>Windows 环境</li>\n</ul>\n<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href=\"http://www.widuu.com/docker/installation/windows.html&#39;\" target=\"_blank\" rel=\"noopener\">http://www.widuu.com/docker/installation/windows.html&#39;</a></p>\n<ul>\n<li>Mac 环境</li>\n</ul>\n<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>\n<ul>\n<li>Linux 环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class=\"line\">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure>\n\n<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>\n<h3 id=\"Docker-常用命令\"><a href=\"#Docker-常用命令\" class=\"headerlink\" title=\"Docker 常用命令\"></a>Docker 常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>\n\n<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>\n<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>"},{"title":"Docker 创建MySQL","date":"2018-01-17T05:24:31.000Z","_content":"### 不要在生产环境中使用，在开发和测试阶段使用比较方便<!-- more -->\n\n### 拉取镜像\n``` shell\ndocker pull mysql\n```\n### 创建volume （比较方便，用完方便删除）\n``` shell\ndocker volume create --name mysql-data\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/localtime:/etc/localtime \\\n  -p 0.0.0.0:3306:3306 --name mysql \\\n  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\\n  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n`restart=\"always\"` docker 重启后自动启动\n` /etc/localtime:/etc/localtime` 解决mysql 时区问题\n`MYSQL_ROOT_PASSWORD` 设置你自己的密码，默认用户名root\n`--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci` 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定\n","source":"_posts/docker-create-mysql.md","raw":"---\ntitle: Docker 创建MySQL\ndate: 2018-01-17 13:24:31\ncategories: Linux\ntags: Docker\n---\n### 不要在生产环境中使用，在开发和测试阶段使用比较方便<!-- more -->\n\n### 拉取镜像\n``` shell\ndocker pull mysql\n```\n### 创建volume （比较方便，用完方便删除）\n``` shell\ndocker volume create --name mysql-data\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d \\\n  -v mysql-data:/var/lib/mysql \\\n  -v /etc/localtime:/etc/localtime \\\n  -p 0.0.0.0:3306:3306 --name mysql \\\n  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\\n  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n```\n`restart=\"always\"` docker 重启后自动启动\n` /etc/localtime:/etc/localtime` 解决mysql 时区问题\n`MYSQL_ROOT_PASSWORD` 设置你自己的密码，默认用户名root\n`--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci` 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定\n","slug":"docker-create-mysql","published":1,"updated":"2019-06-22T08:58:33.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld8001dbis6qr6tf3ua","content":"<h3 id=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"><a href=\"#不要在生产环境中使用，在开发和测试阶段使用比较方便\" class=\"headerlink\" title=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便<a id=\"more\"></a></h3><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建volume-（比较方便，用完方便删除）\"><a href=\"#创建volume-（比较方便，用完方便删除）\" class=\"headerlink\" title=\"创建volume （比较方便，用完方便删除）\"></a>创建volume （比较方便，用完方便删除）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">  -p 0.0.0.0:3306:3306 --name mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\</span><br><span class=\"line\">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n\n<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"><a href=\"#不要在生产环境中使用，在开发和测试阶段使用比较方便\" class=\"headerlink\" title=\"不要在生产环境中使用，在开发和测试阶段使用比较方便\"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便</h3>","more":"<h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建volume-（比较方便，用完方便删除）\"><a href=\"#创建volume-（比较方便，用完方便删除）\" class=\"headerlink\" title=\"创建volume （比较方便，用完方便删除）\"></a>创建volume （比较方便，用完方便删除）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d \\</span><br><span class=\"line\">  -v mysql-data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /etc/localtime:/etc/localtime \\</span><br><span class=\"line\">  -p 0.0.0.0:3306:3306 --name mysql \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \\</span><br><span class=\"line\">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>\n\n<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>"},{"title":"DevOps实践2:Spring Boot集成Docker环境","date":"2018-02-27T06:56:50.000Z","_content":"> 知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）\n\n我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <!-- more -->\n\n### 创建项目进行集成\n创建一个Spring Boot 项目\n\n![名称](devops-2-springboot-docker-integrated/WX20180227-174110.png)\n\n![web服务](devops-2-springboot-docker-integrated/WX20180227-174208.png)\n\n### 增加项目对Docker的支持\n1. 修改pom.xml配置，增加对应的插件，可以使用Maven进行打包\n``` bash\n#Docker 镜像前缀，放在<properties> 标签中\n <docker.image.prefix>devops</docker.image.prefix>\n```\n2. 添加视图模板支持\n``` xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n3. 增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId>\n``` xml\n<build>\n  <finalName>devops</finalName>  \n  <plugins>\n    <plugin>\n      <groupId>org.springframework.boot</groupId>  \n      <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>  \n    <!-- docker打包 -->  \n    <plugin>\n      <groupId>com.spotify</groupId>  \n      <artifactId>docker-maven-plugin</artifactId>  \n      <version>1.0.0</version>  \n      <configuration>\n        <serverId>docker-hosted</serverId>  \n        <!-- docker仓库地址，用于推送镜像 -->  \n        <registryUrl>${docker.repository}</registryUrl>\n        <!-- 设置为false，避免自动推送镜像 -->\n        <pushImage>false</pushImage>  \n        <!-- Dockerfile路径 -->  \n        <dockerDirectory>src/main/docker</dockerDirectory>  \n        <!-- 构建的镜像名称 -->  \n        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>  \n        <imageTags>\n          <imageTag>latest</imageTag>\n        </imageTags>  \n        <resources>\n          <resource>\n            <targetPath>/</targetPath>  \n            <directory>${project.build.directory}</directory>  \n            <include>${project.build.finalName}.jar</include>\n          </resource>\n        </resources>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n4. 修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）\n``` xml\n<pluginGroups>\n  <pluginGroup>com.spotify</pluginGroup>\n</pluginGroups>\n\n#本地私服的配置\n</profiles>\n <profile>    \n   <id>nexus</id>    \n   <properties>\n   <docker.repository>http://192.168.100.77:8081/repository/docker</docker.repository>\n   </properties>\n </profile>\n</profiles>\n#激活私服配置\n<activeProfiles>    \n  <activeProfile>nexus</activeProfile>    \n</activeProfiles>\n```\n\n上面基本的pom配置就完成了，之后开始配置Docker相关的脚本\n\n### Docker脚本配置\n在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径\n创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本\n``` shell\nFROM java:8  #基本镜像\nVOLUME /tmp  #挂载文件位置，/tmp 为临时目录\nADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口\n```\n\n### 打包、运行镜像\n创建对应的测试文件，打包\n``` shell\nmvn clean package docker:build  # 一气呵成O(∩_∩)O~~\n```\n在运行docker命令前，先确认电脑上的docker环境是否配置成\n``` shell\ndocker version\n# 会有如下显示\nClient:\n Version:\t17.12.0-ce\n API version:\t1.35\n Go version:\tgo1.9.2\n Git commit:\tc97c6d6\n Built:\tWed Dec 27 20:03:51 2017\n OS/Arch:\tdarwin/amd64\n\nServer:\n Engine:\n  Version:\t17.12.0-ce\n  API version:\t1.35 (minimum version 1.12)\n  Go version:\tgo1.9.2\n  Git commit:\tc97c6d6\n  Built:\tWed Dec 27 20:12:29 2017\n  OS/Arch:\tlinux/amd64\n  Experimental:\ttrue\n```\n上面说明Docker是正常启动的\n\n然后查看镜像\n``` shell\ndocker images\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203234.png)\n上图说明我们的镜像打包成功\n然后运行一下，检查镜像是否能够正常启动\n``` shell\n#启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像\ndocker run -d  -p 8080:8080 --name devops devops/devops:latest\n#执行docker ps 查看镜像是否运行\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203815.png)\n如果，说明服务是正常启动了，之后请求\n[http://localhost:8080/index?name=World](http://localhost:8080/index?name=World)\n![web服务](devops-2-springboot-docker-integrated/WX20180227-204116.png)\n能够请求成功，说明镜像部署成功\n\n### 停止释放镜像\n``` shell\n# 养成好习惯，停止释放镜像\ndocker stop 2026e45bc2ce\ndocker rm 2026e45bc2ce\n```\n\n代码可在[https://github.com/junhuali/devops-springboot](https://github.com/junhuali/devops-springboot) 下载\n","source":"_posts/devops-2-springboot-docker-integrated.md","raw":"---\ntitle: DevOps实践2:Spring Boot集成Docker环境\ndate: 2018-02-27 14:56:50\ncategories: DevOps\ntag:\n   - Docker\n   - SpringBoot\n   - Maven\n---\n> 知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）\n\n我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <!-- more -->\n\n### 创建项目进行集成\n创建一个Spring Boot 项目\n\n![名称](devops-2-springboot-docker-integrated/WX20180227-174110.png)\n\n![web服务](devops-2-springboot-docker-integrated/WX20180227-174208.png)\n\n### 增加项目对Docker的支持\n1. 修改pom.xml配置，增加对应的插件，可以使用Maven进行打包\n``` bash\n#Docker 镜像前缀，放在<properties> 标签中\n <docker.image.prefix>devops</docker.image.prefix>\n```\n2. 添加视图模板支持\n``` xml\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n3. 增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId>\n``` xml\n<build>\n  <finalName>devops</finalName>  \n  <plugins>\n    <plugin>\n      <groupId>org.springframework.boot</groupId>  \n      <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>  \n    <!-- docker打包 -->  \n    <plugin>\n      <groupId>com.spotify</groupId>  \n      <artifactId>docker-maven-plugin</artifactId>  \n      <version>1.0.0</version>  \n      <configuration>\n        <serverId>docker-hosted</serverId>  \n        <!-- docker仓库地址，用于推送镜像 -->  \n        <registryUrl>${docker.repository}</registryUrl>\n        <!-- 设置为false，避免自动推送镜像 -->\n        <pushImage>false</pushImage>  \n        <!-- Dockerfile路径 -->  \n        <dockerDirectory>src/main/docker</dockerDirectory>  \n        <!-- 构建的镜像名称 -->  \n        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>  \n        <imageTags>\n          <imageTag>latest</imageTag>\n        </imageTags>  \n        <resources>\n          <resource>\n            <targetPath>/</targetPath>  \n            <directory>${project.build.directory}</directory>  \n            <include>${project.build.finalName}.jar</include>\n          </resource>\n        </resources>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n4. 修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）\n``` xml\n<pluginGroups>\n  <pluginGroup>com.spotify</pluginGroup>\n</pluginGroups>\n\n#本地私服的配置\n</profiles>\n <profile>    \n   <id>nexus</id>    \n   <properties>\n   <docker.repository>http://192.168.100.77:8081/repository/docker</docker.repository>\n   </properties>\n </profile>\n</profiles>\n#激活私服配置\n<activeProfiles>    \n  <activeProfile>nexus</activeProfile>    \n</activeProfiles>\n```\n\n上面基本的pom配置就完成了，之后开始配置Docker相关的脚本\n\n### Docker脚本配置\n在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径\n创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本\n``` shell\nFROM java:8  #基本镜像\nVOLUME /tmp  #挂载文件位置，/tmp 为临时目录\nADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口\n```\n\n### 打包、运行镜像\n创建对应的测试文件，打包\n``` shell\nmvn clean package docker:build  # 一气呵成O(∩_∩)O~~\n```\n在运行docker命令前，先确认电脑上的docker环境是否配置成\n``` shell\ndocker version\n# 会有如下显示\nClient:\n Version:\t17.12.0-ce\n API version:\t1.35\n Go version:\tgo1.9.2\n Git commit:\tc97c6d6\n Built:\tWed Dec 27 20:03:51 2017\n OS/Arch:\tdarwin/amd64\n\nServer:\n Engine:\n  Version:\t17.12.0-ce\n  API version:\t1.35 (minimum version 1.12)\n  Go version:\tgo1.9.2\n  Git commit:\tc97c6d6\n  Built:\tWed Dec 27 20:12:29 2017\n  OS/Arch:\tlinux/amd64\n  Experimental:\ttrue\n```\n上面说明Docker是正常启动的\n\n然后查看镜像\n``` shell\ndocker images\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203234.png)\n上图说明我们的镜像打包成功\n然后运行一下，检查镜像是否能够正常启动\n``` shell\n#启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像\ndocker run -d  -p 8080:8080 --name devops devops/devops:latest\n#执行docker ps 查看镜像是否运行\n```\n![web服务](devops-2-springboot-docker-integrated/WX20180227-203815.png)\n如果，说明服务是正常启动了，之后请求\n[http://localhost:8080/index?name=World](http://localhost:8080/index?name=World)\n![web服务](devops-2-springboot-docker-integrated/WX20180227-204116.png)\n能够请求成功，说明镜像部署成功\n\n### 停止释放镜像\n``` shell\n# 养成好习惯，停止释放镜像\ndocker stop 2026e45bc2ce\ndocker rm 2026e45bc2ce\n```\n\n代码可在[https://github.com/junhuali/devops-springboot](https://github.com/junhuali/devops-springboot) 下载\n","slug":"devops-2-springboot-docker-integrated","published":1,"updated":"2019-06-22T08:58:28.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld8001fbis6v64qg7bk","content":"<blockquote>\n<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>\n</blockquote>\n<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <a id=\"more\"></a></p>\n<h3 id=\"创建项目进行集成\"><a href=\"#创建项目进行集成\" class=\"headerlink\" title=\"创建项目进行集成\"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>\n<p><img src=\"/.com//WX20180227-174110.png\" alt=\"名称\"></p>\n<p><img src=\"/.com//WX20180227-174208.png\" alt=\"web服务\"></p>\n<h3 id=\"增加项目对Docker的支持\"><a href=\"#增加项目对Docker的支持\" class=\"headerlink\" title=\"增加项目对Docker的支持\"></a>增加项目对Docker的支持</h3><ol>\n<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class=\"line\"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加视图模板支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupid>com.spotify</groupid></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>devops<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- docker打包 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serverId</span>&gt;</span>docker-hosted<span class=\"tag\">&lt;/<span class=\"name\">serverId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class=\"tag\">&lt;/<span class=\"name\">registryUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pushImage</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">pushImage</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroup</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">pluginGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#本地私服的配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class=\"tag\">&lt;/<span class=\"name\">docker.repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">#激活私服配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>\n<h3 id=\"Docker脚本配置\"><a href=\"#Docker脚本配置\" class=\"headerlink\" title=\"Docker脚本配置\"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8  #基本镜像</span><br><span class=\"line\">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class=\"line\">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class=\"line\">ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包、运行镜像\"><a href=\"#打包、运行镜像\" class=\"headerlink\" title=\"打包、运行镜像\"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure>\n\n<p>在运行docker命令前，先确认电脑上的docker环境是否配置成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 会有如下显示</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:\t17.12.0-ce</span><br><span class=\"line\"> API version:\t1.35</span><br><span class=\"line\"> Go version:\tgo1.9.2</span><br><span class=\"line\"> Git commit:\tc97c6d6</span><br><span class=\"line\"> Built:\tWed Dec 27 20:03:51 2017</span><br><span class=\"line\"> OS/Arch:\tdarwin/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:\t17.12.0-ce</span><br><span class=\"line\">  API version:\t1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:\tgo1.9.2</span><br><span class=\"line\">  Git commit:\tc97c6d6</span><br><span class=\"line\">  Built:\tWed Dec 27 20:12:29 2017</span><br><span class=\"line\">  OS/Arch:\tlinux/amd64</span><br><span class=\"line\">  Experimental:\ttrue</span><br></pre></td></tr></table></figure>\n\n<p>上面说明Docker是正常启动的</p>\n<p>然后查看镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180227-203234.png\" alt=\"web服务\"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class=\"line\">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180227-203815.png\" alt=\"web服务\"><br>如果，说明服务是正常启动了，之后请求<br><a href=\"http://localhost:8080/index?name=World\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index?name=World</a><br><img src=\"/.com//WX20180227-204116.png\" alt=\"web服务\"><br>能够请求成功，说明镜像部署成功</p>\n<h3 id=\"停止释放镜像\"><a href=\"#停止释放镜像\" class=\"headerlink\" title=\"停止释放镜像\"></a>停止释放镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 养成好习惯，停止释放镜像</span></span><br><span class=\"line\">docker stop 2026e45bc2ce</span><br><span class=\"line\">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>\n\n<p>代码可在<a href=\"https://github.com/junhuali/devops-springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/junhuali/devops-springboot</a> 下载</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>\n</blockquote>\n<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。</p>","more":"<p></p>\n<h3 id=\"创建项目进行集成\"><a href=\"#创建项目进行集成\" class=\"headerlink\" title=\"创建项目进行集成\"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>\n<p><img src=\"/.com//WX20180227-174110.png\" alt=\"名称\"></p>\n<p><img src=\"/.com//WX20180227-174208.png\" alt=\"web服务\"></p>\n<h3 id=\"增加项目对Docker的支持\"><a href=\"#增加项目对Docker的支持\" class=\"headerlink\" title=\"增加项目对Docker的支持\"></a>增加项目对Docker的支持</h3><ol>\n<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class=\"line\"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加视图模板支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupid>com.spotify</groupid></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>devops<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- docker打包 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">serverId</span>&gt;</span>docker-hosted<span class=\"tag\">&lt;/<span class=\"name\">serverId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class=\"tag\">&lt;/<span class=\"name\">registryUrl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pushImage</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">pushImage</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">imageTags</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">imageTag</span>&gt;</span>latest<span class=\"tag\">&lt;/<span class=\"name\">imageTag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">imageTags</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pluginGroup</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">pluginGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pluginGroups</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">#本地私服的配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>    </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class=\"tag\">&lt;/<span class=\"name\">docker.repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">#激活私服配置</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span>    </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>\n<h3 id=\"Docker脚本配置\"><a href=\"#Docker脚本配置\" class=\"headerlink\" title=\"Docker脚本配置\"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8  #基本镜像</span><br><span class=\"line\">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class=\"line\">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class=\"line\">ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] # 程序启动入口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包、运行镜像\"><a href=\"#打包、运行镜像\" class=\"headerlink\" title=\"打包、运行镜像\"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure>\n\n<p>在运行docker命令前，先确认电脑上的docker环境是否配置成</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 会有如下显示</span></span><br><span class=\"line\">Client:</span><br><span class=\"line\"> Version:\t17.12.0-ce</span><br><span class=\"line\"> API version:\t1.35</span><br><span class=\"line\"> Go version:\tgo1.9.2</span><br><span class=\"line\"> Git commit:\tc97c6d6</span><br><span class=\"line\"> Built:\tWed Dec 27 20:03:51 2017</span><br><span class=\"line\"> OS/Arch:\tdarwin/amd64</span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:\t17.12.0-ce</span><br><span class=\"line\">  API version:\t1.35 (minimum version 1.12)</span><br><span class=\"line\">  Go version:\tgo1.9.2</span><br><span class=\"line\">  Git commit:\tc97c6d6</span><br><span class=\"line\">  Built:\tWed Dec 27 20:12:29 2017</span><br><span class=\"line\">  OS/Arch:\tlinux/amd64</span><br><span class=\"line\">  Experimental:\ttrue</span><br></pre></td></tr></table></figure>\n\n<p>上面说明Docker是正常启动的</p>\n<p>然后查看镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180227-203234.png\" alt=\"web服务\"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class=\"line\">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180227-203815.png\" alt=\"web服务\"><br>如果，说明服务是正常启动了，之后请求<br><a href=\"http://localhost:8080/index?name=World\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index?name=World</a><br><img src=\"/.com//WX20180227-204116.png\" alt=\"web服务\"><br>能够请求成功，说明镜像部署成功</p>\n<h3 id=\"停止释放镜像\"><a href=\"#停止释放镜像\" class=\"headerlink\" title=\"停止释放镜像\"></a>停止释放镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 养成好习惯，停止释放镜像</span></span><br><span class=\"line\">docker stop 2026e45bc2ce</span><br><span class=\"line\">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>\n\n<p>代码可在<a href=\"https://github.com/junhuali/devops-springboot\" target=\"_blank\" rel=\"noopener\">https://github.com/junhuali/devops-springboot</a> 下载</p>"},{"title":"Docker安装MongoDB(Mongo3.x)","date":"2017-09-23T08:04:51.000Z","_content":"\n### 使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<!-- more -->\n\n#### 创建Volume 命名为mongo-data\n``` Shell\ndocker volume create --name mongo-data\n```\n\n#### 拉取镜像\n```\ndocker pull mongo\n```\n\n#### 运行\n```\ndocker run --restart=\"always\" \\\n          -d \\\n          --name mongo\\\n          -p 17017:27017\\\n          -v mongo-data:/data/db\\\n          -v /etc/localtime:/etc/localtime\\\n          mongo:latest --storageEngine wiredTiger -auth\n```\n\n` --storageEngine` MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘\n`-auth` 设置Mongo的权限\n\n#### 进入mongo镜像\n```\ndocker exec -it mongo mongo admin\n```\n\n### 创建用户 user123 密码:123456\n```\ndb.createUser({user: \"user123\",pwd: \"123456\",roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]})\n```\n\n至此，MongDB 安装完成\n","source":"_posts/docker-install-MongoDB.md","raw":"---\ntitle: Docker安装MongoDB(Mongo3.x)\ndate: 2017-09-23 16:04:51\ncategories: Linux\ntag: Docker\n---\n\n### 使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<!-- more -->\n\n#### 创建Volume 命名为mongo-data\n``` Shell\ndocker volume create --name mongo-data\n```\n\n#### 拉取镜像\n```\ndocker pull mongo\n```\n\n#### 运行\n```\ndocker run --restart=\"always\" \\\n          -d \\\n          --name mongo\\\n          -p 17017:27017\\\n          -v mongo-data:/data/db\\\n          -v /etc/localtime:/etc/localtime\\\n          mongo:latest --storageEngine wiredTiger -auth\n```\n\n` --storageEngine` MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘\n`-auth` 设置Mongo的权限\n\n#### 进入mongo镜像\n```\ndocker exec -it mongo mongo admin\n```\n\n### 创建用户 user123 密码:123456\n```\ndb.createUser({user: \"user123\",pwd: \"123456\",roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]})\n```\n\n至此，MongDB 安装完成\n","slug":"docker-install-MongoDB","published":1,"updated":"2019-06-22T08:58:38.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkld9001ibis68tcxsou6","content":"<h3 id=\"使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\"><a href=\"#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\" class=\"headerlink\" title=\"使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<a id=\"more\"></a></h3><h4 id=\"创建Volume-命名为mongo-data\"><a href=\"#创建Volume-命名为mongo-data\" class=\"headerlink\" title=\"创建Volume 命名为mongo-data\"></a>创建Volume 命名为mongo-data</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=&quot;always&quot; \\</span><br><span class=\"line\">          -d \\</span><br><span class=\"line\">          --name mongo\\</span><br><span class=\"line\">          -p 17017:27017\\</span><br><span class=\"line\">          -v mongo-data:/data/db\\</span><br><span class=\"line\">          -v /etc/localtime:/etc/localtime\\</span><br><span class=\"line\">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>\n\n<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>\n<h4 id=\"进入mongo镜像\"><a href=\"#进入mongo镜像\" class=\"headerlink\" title=\"进入mongo镜像\"></a>进入mongo镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户-user123-密码-123456\"><a href=\"#创建用户-user123-密码-123456\" class=\"headerlink\" title=\"创建用户 user123 密码:123456\"></a>创建用户 user123 密码:123456</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>至此，MongDB 安装完成</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\"><a href=\"#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume\" class=\"headerlink\" title=\"使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)\"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)</h3>","more":"<h4 id=\"创建Volume-命名为mongo-data\"><a href=\"#创建Volume-命名为mongo-data\" class=\"headerlink\" title=\"创建Volume 命名为mongo-data\"></a>创建Volume 命名为mongo-data</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=&quot;always&quot; \\</span><br><span class=\"line\">          -d \\</span><br><span class=\"line\">          --name mongo\\</span><br><span class=\"line\">          -p 17017:27017\\</span><br><span class=\"line\">          -v mongo-data:/data/db\\</span><br><span class=\"line\">          -v /etc/localtime:/etc/localtime\\</span><br><span class=\"line\">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>\n\n<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>\n<h4 id=\"进入mongo镜像\"><a href=\"#进入mongo镜像\" class=\"headerlink\" title=\"进入mongo镜像\"></a>进入mongo镜像</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户-user123-密码-123456\"><a href=\"#创建用户-user123-密码-123456\" class=\"headerlink\" title=\"创建用户 user123 密码:123456\"></a>创建用户 user123 密码:123456</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>至此，MongDB 安装完成</p>"},{"title":"Docker 安装 RabbitMQ 集群","date":"2017-12-04T02:31:55.000Z","_content":"Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<!-- more -->\n### 安装docker-compose\n- 检查是否安装过docker-compose\n``` bash\n$ docker-compose -v #出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功\n```\n- 如果没有安装docker-compose，进行安装\n``` bash\n#服务器安装\n$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n- 在windows 和 Mac 下载对应的安装包进行安装\n[Windows下载地址](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)\n[Mac下载地址](https://download.docker.com/mac/stable/Docker.dmg)\n\n### 下载对应的脚本\n``` bash\n$ git clone https://github.com/bijukunjummen/docker-rabbitmq-cluster.git\n```\n### 启动\n``` bash\n$ cd docker-rabbitmq-cluster/cluster/\n$ docker-compose up -d #启动\n```\n### 备注\n- 登录的账号密码（可以自行在脚本里面修改）\nuser: myuser\npassword: mypass\n然后访问`localhost:15672`进行访问\n\n以上使用bijukunjummen 的脚本，可参见[github](https://github.com/bijukunjummen/docker-rabbitmq-cluster)\n以及[daocloud](http://get.daocloud.io/#install-docker) docker-compose脚本\n","source":"_posts/docker-install-rabbitmq-cluster.md","raw":"---\ntitle: Docker 安装 RabbitMQ 集群\ndate: 2017-12-04 10:31:55\ncategories: Linux\ntag: Docker\n---\nDocker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<!-- more -->\n### 安装docker-compose\n- 检查是否安装过docker-compose\n``` bash\n$ docker-compose -v #出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功\n```\n- 如果没有安装docker-compose，进行安装\n``` bash\n#服务器安装\n$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ chmod +x /usr/local/bin/docker-compose\n```\n- 在windows 和 Mac 下载对应的安装包进行安装\n[Windows下载地址](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)\n[Mac下载地址](https://download.docker.com/mac/stable/Docker.dmg)\n\n### 下载对应的脚本\n``` bash\n$ git clone https://github.com/bijukunjummen/docker-rabbitmq-cluster.git\n```\n### 启动\n``` bash\n$ cd docker-rabbitmq-cluster/cluster/\n$ docker-compose up -d #启动\n```\n### 备注\n- 登录的账号密码（可以自行在脚本里面修改）\nuser: myuser\npassword: mypass\n然后访问`localhost:15672`进行访问\n\n以上使用bijukunjummen 的脚本，可参见[github](https://github.com/bijukunjummen/docker-rabbitmq-cluster)\n以及[daocloud](http://get.daocloud.io/#install-docker) docker-compose脚本\n","slug":"docker-install-rabbitmq-cluster","published":1,"updated":"2019-06-22T08:58:47.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklda001lbis6mm6vhwa6","content":"<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<a id=\"more\"></a></p>\n<h3 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h3><ul>\n<li><p>检查是否安装过docker-compose</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose -v <span class=\"comment\">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果没有安装docker-compose，进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#服务器安装</span></span><br><span class=\"line\">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在windows 和 Mac 下载对应的安装包进行安装<br><a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a><br><a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">Mac下载地址</a></p>\n</li>\n</ul>\n<h3 id=\"下载对应的脚本\"><a href=\"#下载对应的脚本\" class=\"headerlink\" title=\"下载对应的脚本\"></a>下载对应的脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class=\"line\">$ docker-compose up -d <span class=\"comment\">#启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>\n</ul>\n<p>以上使用bijukunjummen 的脚本，可参见<a href=\"https://github.com/bijukunjummen/docker-rabbitmq-cluster\" target=\"_blank\" rel=\"noopener\">github</a><br>以及<a href=\"http://get.daocloud.io/#install-docker\" target=\"_blank\" rel=\"noopener\">daocloud</a> docker-compose脚本</p>\n","site":{"data":{}},"excerpt":"<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。</p>","more":"<p></p>\n<h3 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h3><ul>\n<li><p>检查是否安装过docker-compose</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose -v <span class=\"comment\">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果没有安装docker-compose，进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#服务器安装</span></span><br><span class=\"line\">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">$ chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在windows 和 Mac 下载对应的安装包进行安装<br><a href=\"https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe\" target=\"_blank\" rel=\"noopener\">Windows下载地址</a><br><a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">Mac下载地址</a></p>\n</li>\n</ul>\n<h3 id=\"下载对应的脚本\"><a href=\"#下载对应的脚本\" class=\"headerlink\" title=\"下载对应的脚本\"></a>下载对应的脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class=\"line\">$ docker-compose up -d <span class=\"comment\">#启动</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>\n</ul>\n<p>以上使用bijukunjummen 的脚本，可参见<a href=\"https://github.com/bijukunjummen/docker-rabbitmq-cluster\" target=\"_blank\" rel=\"noopener\">github</a><br>以及<a href=\"http://get.daocloud.io/#install-docker\" target=\"_blank\" rel=\"noopener\">daocloud</a> docker-compose脚本</p>"},{"title":"Docker 搭建Nexus 私服","date":"2017-09-30T05:46:02.000Z","_content":"### 创建数据卷\n``` shell\ndocker volume create --name nexus-data\n```\n### 拉取Nexus 镜像\n``` shell\ndocker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n### 访问网址打开(账号/密码   admin/admin123)\nhttp://localhost:8081\n\n参考https://hub.docker.com/r/sonatype/nexus3/\n","source":"_posts/docker-install-nexus.md","raw":"---\ntitle: Docker 搭建Nexus 私服\ndate: 2017-09-30 13:46:02\ncategories: Linux\ntag: Docker\n---\n### 创建数据卷\n``` shell\ndocker volume create --name nexus-data\n```\n### 拉取Nexus 镜像\n``` shell\ndocker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)\n```\n### 启动镜像\n``` shell\ndocker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3\n```\n### 访问网址打开(账号/密码   admin/admin123)\nhttp://localhost:8081\n\n参考https://hub.docker.com/r/sonatype/nexus3/\n","slug":"docker-install-nexus","published":1,"updated":"2018-02-09T02:43:39.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldb001nbis6d19lbzv7","content":"<h3 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拉取Nexus-镜像\"><a href=\"#拉取Nexus-镜像\" class=\"headerlink\" title=\"拉取Nexus 镜像\"></a>拉取Nexus 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问网址打开-账号-密码-admin-admin123\"><a href=\"#访问网址打开-账号-密码-admin-admin123\" class=\"headerlink\" title=\"访问网址打开(账号/密码   admin/admin123)\"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></p>\n<p>参考<a href=\"https://hub.docker.com/r/sonatype/nexus3/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus3/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"创建数据卷\"><a href=\"#创建数据卷\" class=\"headerlink\" title=\"创建数据卷\"></a>创建数据卷</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拉取Nexus-镜像\"><a href=\"#拉取Nexus-镜像\" class=\"headerlink\" title=\"拉取Nexus 镜像\"></a>拉取Nexus 镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动镜像\"><a href=\"#启动镜像\" class=\"headerlink\" title=\"启动镜像\"></a>启动镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=\"always\" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问网址打开-账号-密码-admin-admin123\"><a href=\"#访问网址打开-账号-密码-admin-admin123\" class=\"headerlink\" title=\"访问网址打开(账号/密码   admin/admin123)\"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href=\"http://localhost:8081\" target=\"_blank\" rel=\"noopener\">http://localhost:8081</a></p>\n<p>参考<a href=\"https://hub.docker.com/r/sonatype/nexus3/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus3/</a></p>\n"},{"title":"Feign表单提交","date":"2019-06-12T08:29:26.000Z","_content":"\nFeign在正常调用的时候，一般都是基于`application/json`的方式进行传输数据的，但是有时候我们内部调用的服务是基于`表单提交`的，默认使用的`JSON`提交。所以就需要对请求进行改造。<!-- more -->\n\n#### 默认JSON 提交\n``` java\n@FeignClient(name = \"xxx\", url = \"xxx\")\npublic interface FeignClient {\n\n    /**\n     * xxx\n     *\n     * @param xxx\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value =\"xxx\")\n    Object getXxxInfo(@RequestBody xxxReq xxxReq) throws Exception;\n}\n\n\n```\n上面的就是默认的方式\n#### 表单提交\n使用表单的情况下，需要引入两个jar，使用maven 进行添加\n``` xml\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form-spring</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n```\n定义表单解码器\n``` java\n\n\nimport feign.Logger;\nimport feign.codec.Encoder;\nimport feign.form.spring.SpringFormEncoder;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.cloud.openfeign.support.SpringEncoder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author\n * @date 2019-06-11 15:48\n */\n@Component\npublic class FormSupportConfig {\n    @Autowired\n    private ObjectFactory<HttpMessageConverters> messageConverters;\n\n    /**\n     * new一个form编码器，实现支持form表单提交\n     *\n     * @return\n     */\n    @Bean\n    public Encoder feignFormEncoder() {\n        return new SpringFormEncoder(new SpringEncoder(messageConverters));\n    }\n\n\n    /**\n     * 开启Feign的日志\n     *\n     * @return\n     */\n    @Bean\n    public Logger.Level logger() {\n        return Logger.Level.FULL;\n    }\n}\n```\n使用\n``` java\nimport feign.Response;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Map;\n\n/**\n * @author xxx\n * @date 2019-05-25 19:35\n */\n\n@FeignClient(name = \"ucd\", url = \"${xxx}\", configuration = FormSupportConfig.class)\npublic interface PayClient {\n\n\n    /**\n     * xxx\n     *\n     * @param queryParam\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \"/xxx/xxx\", consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE}, produces = {MediaType.ALL_VALUE})\n    @ResponseBody\n    Response payRequest(Map<String, ?> queryParam) throws Exception;\n\n\n}\n```\n上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过`response.body().asReader() `方法取出body中的内容再进行处理。\n","source":"_posts/feign-post-form-data.md","raw":"---\ntitle: Feign表单提交\ndate: 2019-06-12 16:29:26\ncategories: Java\ntags: Feign\n---\n\nFeign在正常调用的时候，一般都是基于`application/json`的方式进行传输数据的，但是有时候我们内部调用的服务是基于`表单提交`的，默认使用的`JSON`提交。所以就需要对请求进行改造。<!-- more -->\n\n#### 默认JSON 提交\n``` java\n@FeignClient(name = \"xxx\", url = \"xxx\")\npublic interface FeignClient {\n\n    /**\n     * xxx\n     *\n     * @param xxx\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value =\"xxx\")\n    Object getXxxInfo(@RequestBody xxxReq xxxReq) throws Exception;\n}\n\n\n```\n上面的就是默认的方式\n#### 表单提交\n使用表单的情况下，需要引入两个jar，使用maven 进行添加\n``` xml\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>io.github.openfeign.form</groupId>\n            <artifactId>feign-form-spring</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n```\n定义表单解码器\n``` java\n\n\nimport feign.Logger;\nimport feign.codec.Encoder;\nimport feign.form.spring.SpringFormEncoder;\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.http.HttpMessageConverters;\nimport org.springframework.cloud.openfeign.support.SpringEncoder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author\n * @date 2019-06-11 15:48\n */\n@Component\npublic class FormSupportConfig {\n    @Autowired\n    private ObjectFactory<HttpMessageConverters> messageConverters;\n\n    /**\n     * new一个form编码器，实现支持form表单提交\n     *\n     * @return\n     */\n    @Bean\n    public Encoder feignFormEncoder() {\n        return new SpringFormEncoder(new SpringEncoder(messageConverters));\n    }\n\n\n    /**\n     * 开启Feign的日志\n     *\n     * @return\n     */\n    @Bean\n    public Logger.Level logger() {\n        return Logger.Level.FULL;\n    }\n}\n```\n使用\n``` java\nimport feign.Response;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Map;\n\n/**\n * @author xxx\n * @date 2019-05-25 19:35\n */\n\n@FeignClient(name = \"ucd\", url = \"${xxx}\", configuration = FormSupportConfig.class)\npublic interface PayClient {\n\n\n    /**\n     * xxx\n     *\n     * @param queryParam\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \"/xxx/xxx\", consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE}, produces = {MediaType.ALL_VALUE})\n    @ResponseBody\n    Response payRequest(Map<String, ?> queryParam) throws Exception;\n\n\n}\n```\n上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过`response.body().asReader() `方法取出body中的内容再进行处理。\n","slug":"feign-post-form-data","published":1,"updated":"2019-06-22T09:01:50.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldc001qbis6x7ji9xvh","content":"<p>Feign在正常调用的时候，一般都是基于<code>application/json</code>的方式进行传输数据的，但是有时候我们内部调用的服务是基于<code>表单提交</code>的，默认使用的<code>JSON</code>提交。所以就需要对请求进行改造。<a id=\"more\"></a></p>\n<h4 id=\"默认JSON-提交\"><a href=\"#默认JSON-提交\" class=\"headerlink\" title=\"默认JSON 提交\"></a>默认JSON 提交</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value =<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getXxxInfo</span><span class=\"params\">(@RequestBody xxxReq xxxReq)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的就是默认的方式</p>\n<h4 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h4><p>使用表单的情况下，需要引入两个jar，使用maven 进行添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>定义表单解码器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.Encoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.form.spring.SpringFormEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-06-11 15:48</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormSupportConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * new一个form编码器，实现支持form表单提交</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Encoder <span class=\"title\">feignFormEncoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringFormEncoder(<span class=\"keyword\">new</span> SpringEncoder(messageConverters));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启Feign的日志</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger.<span class=\"function\">Level <span class=\"title\">logger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.FULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.Response;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-05-25 19:35</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"ucd\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>, configuration = FormSupportConfig.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PayClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> queryParam</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/xxx/xxx\"</span>, consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;, produces = &#123;MediaType.ALL_VALUE&#125;)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\">Response <span class=\"title\">payRequest</span><span class=\"params\">(Map&lt;String, ?&gt; queryParam)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过<code>response.body().asReader()</code>方法取出body中的内容再进行处理。</p>\n","site":{"data":{}},"excerpt":"<p>Feign在正常调用的时候，一般都是基于<code>application/json</code>的方式进行传输数据的，但是有时候我们内部调用的服务是基于<code>表单提交</code>的，默认使用的<code>JSON</code>提交。所以就需要对请求进行改造。</p>","more":"<p></p>\n<h4 id=\"默认JSON-提交\"><a href=\"#默认JSON-提交\" class=\"headerlink\" title=\"默认JSON 提交\"></a>默认JSON 提交</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"xxx\"</span>, url = <span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FeignClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value =<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getXxxInfo</span><span class=\"params\">(@RequestBody xxxReq xxxReq)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的就是默认的方式</p>\n<h4 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h4><p>使用表单的情况下，需要引入两个jar，使用maven 进行添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.openfeign.form<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>feign-form-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>定义表单解码器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.Encoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.form.spring.SpringFormEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-06-11 15:48</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormSupportConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * new一个form编码器，实现支持form表单提交</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Encoder <span class=\"title\">feignFormEncoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringFormEncoder(<span class=\"keyword\">new</span> SpringEncoder(messageConverters));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启Feign的日志</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Logger.<span class=\"function\">Level <span class=\"title\">logger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Logger.Level.FULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.Response;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xxx</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-05-25 19:35</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"ucd\"</span>, url = <span class=\"string\">\"$&#123;xxx&#125;\"</span>, configuration = FormSupportConfig.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PayClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * xxx</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> queryParam</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/xxx/xxx\"</span>, consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;, produces = &#123;MediaType.ALL_VALUE&#125;)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\">Response <span class=\"title\">payRequest</span><span class=\"params\">(Map&lt;String, ?&gt; queryParam)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过<code>response.body().asReader()</code>方法取出body中的内容再进行处理。</p>"},{"title":"Cannot find module './build/Release/DTraceProviderBindings'","date":"2017-09-30T10:03:00.000Z","_content":"有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩_∩)O哈哈~_) <!-- more -->\n报错如下：\n``` log\n{ Error: Cannot find module './build/Release/DTraceProviderBindings'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:476:23)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)\n    at Module._compile (module.js:624:30) code: 'MODULE_NOT_FOUND' }\nINFO  Deleted database.\n```\n上面的错误看的非常的影响心情有木有？\n\n找了网上的很多方法，最后选择了一种比较粗暴的方法\n删除hexo目录下的`node_modules`目录，之后执行以下命令：\n``` shell\nnpm install --registry=https://registry.npm.taobao.org\n```\n然后执行hexo server，就会惊喜的发现错误没有了 O(∩_∩)O~~_)\n","source":"_posts/hexo-can't-find-module.md","raw":"---\ntitle: Cannot find module './build/Release/DTraceProviderBindings'\ndate: 2017-09-30 18:03:00\ncategories: Linux\ntag: hexo\n---\n有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩_∩)O哈哈~_) <!-- more -->\n报错如下：\n``` log\n{ Error: Cannot find module './build/Release/DTraceProviderBindings'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:476:23)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)\n    at Module._compile (module.js:624:30)\n    at Object.Module._extensions..js (module.js:635:10)\n    at Module.load (module.js:545:32)\n    at tryModuleLoad (module.js:508:12)\n    at Function.Module._load (module.js:500:3)\n    at Module.require (module.js:568:17)\n    at require (internal/module.js:11:18)\n    at Object.<anonymous> (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)\n    at Module._compile (module.js:624:30) code: 'MODULE_NOT_FOUND' }\nINFO  Deleted database.\n```\n上面的错误看的非常的影响心情有木有？\n\n找了网上的很多方法，最后选择了一种比较粗暴的方法\n删除hexo目录下的`node_modules`目录，之后执行以下命令：\n``` shell\nnpm install --registry=https://registry.npm.taobao.org\n```\n然后执行hexo server，就会惊喜的发现错误没有了 O(∩_∩)O~~_)\n","slug":"hexo-can't-find-module","published":1,"updated":"2019-06-22T08:58:58.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldd001ubis6g19dirh3","content":"<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>) <a id=\"more\"></a><br>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br><span class=\"line\">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class=\"line\">    at Function.Module._load (module.js:476:23)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)</span><br><span class=\"line\">    at Module._compile (module.js:624:30) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">INFO  Deleted database.</span><br></pre></td></tr></table></figure>\n\n<p>上面的错误看的非常的影响心情有木有？</p>\n<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>\n","site":{"data":{}},"excerpt":"<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>)</p>","more":"<br>报错如下：<p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br><span class=\"line\">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class=\"line\">    at Function.Module._load (module.js:476:23)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/dtrace-provider/dtrace-provider.js:18:23)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class=\"line\">    at Module._compile (module.js:624:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class=\"line\">    at Module.load (module.js:545:32)</span><br><span class=\"line\">    at tryModuleLoad (module.js:508:12)</span><br><span class=\"line\">    at Function.Module._load (module.js:500:3)</span><br><span class=\"line\">    at Module.require (module.js:568:17)</span><br><span class=\"line\">    at require (internal/module.js:11:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/xxx/Dropbox/hexo/node_modules/hexo-log/lib/log.js:3:14)</span><br><span class=\"line\">    at Module._compile (module.js:624:30) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">INFO  Deleted database.</span><br></pre></td></tr></table></figure>\n\n<p>上面的错误看的非常的影响心情有木有？</p>\n<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>"},{"title":"gitee码云使用webhook","date":"2018-02-25T06:57:34.000Z","_content":"### 原因\n我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<!-- more -->\n### 什么是webhook\n>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。\n\n>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。\n\n### 配置webhook\n知道什么是webhook 后我们就要开始配置我们自己的项目了。\n环境：\n   CentOS7\n   Gitee（网上GitHub的教程比较多，这个基于码云）\n- 配置项目公私钥\n1. 生产公钥\n``` bash\nssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n# Generating public/private rsa key pair...\n# 三次回车即可生成 ssh key\n```\n2. 查看公钥\n``` bash\ncat ~/.ssh/id_rsa.pub\n# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n```\n3. 添加公钥\n![步骤](gitee-with-webhook/image-2018-153940@2x.png)\n4. 测试\n``` bash\nssh -T git@gitee.com\nWelcome to Gitee.com, yourname! # 返回，说明正常\n```\n\n- 配置服务器node环境\n1. 安装nvm，服务器上使用nvm 方便多版本node切换\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\nsource /etc/profile\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\n```\n2. 配置相关的脚本\n安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)\n``` bash\nmkdir /opt/webhook #创建目录\ncd /opt/webhook\nnpm init # 初始化项目\nnpm install  gitee-webhook-handler --save # 当前的版本为v0.1.2\n```\n3. 创建对应的webhook服务\n``` bash\nvim webhook.js\n\nvar http = require('http')\nvar createHandler = require('gitee-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: '123456' })# post 所需要用到的秘钥\n\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('Push Hook', function (event) {  # 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });# 需要执行的脚本位置\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666) # 服务监听的端口，可以自行修改\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n4. 创建需要执行的脚本\n``` bash\nvim deploy.sh\ngit pull xxxxx  # 根据自己的需要自行编写\n```\n5. 测试服务\n![](gitee-with-webhook/WX20180225-163439@2x.png)\n![](gitee-with-webhook/WX20180225-163748@2x.png)\n显示ok，说明成功\n\n### 使用pm2应用进程管理器\n使用node 启动服务不是很方便，推荐使用pm2\n``` bash\nnpm install -g pm2\npm2 start webhook.js\npm2 monit # 可以通过此命令查看服务的状态\n```\n![](gitee-with-webhook/WX20180225-164721@2x.png)\n上图显示了一些应用的基本信息，可以更好的观察到服务的状态\n\n### 结束\n配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。\n\n\n参考：https://www.npmjs.com/package/gitee-webhook-handler\n","source":"_posts/gitee-with-webhook.md","raw":"---\ntitle: gitee码云使用webhook\ndate: 2018-02-25 14:57:34\ncategories: Linux\ntags: Linux\n---\n### 原因\n我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<!-- more -->\n### 什么是webhook\n>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。\n\n>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。\n\n### 配置webhook\n知道什么是webhook 后我们就要开始配置我们自己的项目了。\n环境：\n   CentOS7\n   Gitee（网上GitHub的教程比较多，这个基于码云）\n- 配置项目公私钥\n1. 生产公钥\n``` bash\nssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"  \n\n# Generating public/private rsa key pair...\n# 三次回车即可生成 ssh key\n```\n2. 查看公钥\n``` bash\ncat ~/.ssh/id_rsa.pub\n# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n```\n3. 添加公钥\n![步骤](gitee-with-webhook/image-2018-153940@2x.png)\n4. 测试\n``` bash\nssh -T git@gitee.com\nWelcome to Gitee.com, yourname! # 返回，说明正常\n```\n\n- 配置服务器node环境\n1. 安装nvm，服务器上使用nvm 方便多版本node切换\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\nsource /etc/profile\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\n```\n2. 配置相关的脚本\n安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)\n``` bash\nmkdir /opt/webhook #创建目录\ncd /opt/webhook\nnpm init # 初始化项目\nnpm install  gitee-webhook-handler --save # 当前的版本为v0.1.2\n```\n3. 创建对应的webhook服务\n``` bash\nvim webhook.js\n\nvar http = require('http')\nvar createHandler = require('gitee-webhook-handler')\nvar handler = createHandler({ path: '/webhooks_push', secret: '123456' })# post 所需要用到的秘钥\n\nfunction run_cmd(cmd, args, callback) {\n  var spawn = require('child_process').spawn;\n  var child = spawn(cmd, args);\n  var resp = \"\";\n  child.stdout.on('data', function(buffer) { resp += buffer.toString(); });\n  child.stdout.on('end', function() { callback (resp) });\n}\nhandler.on('error', function (err) {\n  console.error('Error:', err.message)\n})\nhandler.on('Push Hook', function (event) {  # 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n    run_cmd('sh', ['./deploy.sh'], function(text){ console.log(text) });# 需要执行的脚本位置\n})\ntry {\n  http.createServer(function (req, res) {\n    handler(req, res, function (err) {\n      res.statusCode = 404\n      res.end('no such location')\n    })\n  }).listen(6666) # 服务监听的端口，可以自行修改\n}catch(err){\n  console.error('Error:', err.message)\n}\n```\n4. 创建需要执行的脚本\n``` bash\nvim deploy.sh\ngit pull xxxxx  # 根据自己的需要自行编写\n```\n5. 测试服务\n![](gitee-with-webhook/WX20180225-163439@2x.png)\n![](gitee-with-webhook/WX20180225-163748@2x.png)\n显示ok，说明成功\n\n### 使用pm2应用进程管理器\n使用node 启动服务不是很方便，推荐使用pm2\n``` bash\nnpm install -g pm2\npm2 start webhook.js\npm2 monit # 可以通过此命令查看服务的状态\n```\n![](gitee-with-webhook/WX20180225-164721@2x.png)\n上图显示了一些应用的基本信息，可以更好的观察到服务的状态\n\n### 结束\n配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。\n\n\n参考：https://www.npmjs.com/package/gitee-webhook-handler\n","slug":"gitee-with-webhook","published":1,"updated":"2019-06-22T08:58:52.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklde001xbis6qxt785pk","content":"<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<a id=\"more\"></a></p>\n<h3 id=\"什么是webhook\"><a href=\"#什么是webhook\" class=\"headerlink\" title=\"什么是webhook\"></a>什么是webhook</h3><blockquote>\n<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>\n</blockquote>\n<blockquote>\n<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>\n</blockquote>\n<h3 id=\"配置webhook\"><a href=\"#配置webhook\" class=\"headerlink\" title=\"配置webhook\"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>\n<ul>\n<li>配置项目公私钥</li>\n</ul>\n<ol>\n<li><p>生产公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xxxxx@xxxxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair...</span></span><br><span class=\"line\"><span class=\"comment\"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加公钥<br><img src=\"/.com//image-2018-153940@2x.png\" alt=\"步骤\"></p>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">Welcome to Gitee.com, yourname! <span class=\"comment\"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>配置服务器node环境</li>\n</ul>\n<ol>\n<li><p>安装nvm，服务器上使用nvm 方便多版本node切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/webhook <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/webhook</span><br><span class=\"line\">npm init <span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">npm install  gitee-webhook-handler --save <span class=\"comment\"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对应的webhook服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim webhook.js</span><br><span class=\"line\"></span><br><span class=\"line\">var http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">var createHandler = require(<span class=\"string\">'gitee-webhook-handler'</span>)</span><br><span class=\"line\">var handler = createHandler(&#123; path: <span class=\"string\">'/webhooks_push'</span>, secret: <span class=\"string\">'123456'</span> &#125;)<span class=\"comment\"># post 所需要用到的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(<span class=\"string\">'Push Hook'</span>, <span class=\"keyword\">function</span> (event) &#123;  <span class=\"comment\"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class=\"line\">  console.log(<span class=\"string\">'Received a push event for %s to %s'</span>,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(<span class=\"string\">'sh'</span>, [<span class=\"string\">'./deploy.sh'</span>], <span class=\"keyword\">function</span>(text)&#123; console.log(text) &#125;);<span class=\"comment\"># 需要执行的脚本位置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(<span class=\"keyword\">function</span> (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(<span class=\"string\">'no such location'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666) <span class=\"comment\"># 服务监听的端口，可以自行修改</span></span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建需要执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.sh</span><br><span class=\"line\">git pull xxxxx  <span class=\"comment\"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试服务<br><img src=\"/.com//WX20180225-163439@2x.png\" alt><br><img src=\"/.com//WX20180225-163748@2x.png\" alt><br>显示ok，说明成功</p>\n</li>\n</ol>\n<h3 id=\"使用pm2应用进程管理器\"><a href=\"#使用pm2应用进程管理器\" class=\"headerlink\" title=\"使用pm2应用进程管理器\"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 start webhook.js</span><br><span class=\"line\">pm2 monit <span class=\"comment\"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180225-164721@2x.png\" alt><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>\n<p>参考：<a href=\"https://www.npmjs.com/package/gitee-webhook-handler\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/gitee-webhook-handler</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。</p>","more":"<p></p>\n<h3 id=\"什么是webhook\"><a href=\"#什么是webhook\" class=\"headerlink\" title=\"什么是webhook\"></a>什么是webhook</h3><blockquote>\n<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>\n</blockquote>\n<blockquote>\n<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>\n</blockquote>\n<h3 id=\"配置webhook\"><a href=\"#配置webhook\" class=\"headerlink\" title=\"配置webhook\"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>\n<ul>\n<li>配置项目公私钥</li>\n</ul>\n<ol>\n<li><p>生产公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xxxxx@xxxxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generating public/private rsa key pair...</span></span><br><span class=\"line\"><span class=\"comment\"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加公钥<br><img src=\"/.com//image-2018-153940@2x.png\" alt=\"步骤\"></p>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">Welcome to Gitee.com, yourname! <span class=\"comment\"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>配置服务器node环境</li>\n</ul>\n<ol>\n<li><p>安装nvm，服务器上使用nvm 方便多版本node切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/webhook <span class=\"comment\">#创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/webhook</span><br><span class=\"line\">npm init <span class=\"comment\"># 初始化项目</span></span><br><span class=\"line\">npm install  gitee-webhook-handler --save <span class=\"comment\"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对应的webhook服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim webhook.js</span><br><span class=\"line\"></span><br><span class=\"line\">var http = require(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">var createHandler = require(<span class=\"string\">'gitee-webhook-handler'</span>)</span><br><span class=\"line\">var handler = createHandler(&#123; path: <span class=\"string\">'/webhooks_push'</span>, secret: <span class=\"string\">'123456'</span> &#125;)<span class=\"comment\"># post 所需要用到的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class=\"line\">  var spawn = require(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\">  var child = spawn(cmd, args);</span><br><span class=\"line\">  var resp = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class=\"line\">  child.stdout.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"title\">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handler.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">handler.on(<span class=\"string\">'Push Hook'</span>, <span class=\"keyword\">function</span> (event) &#123;  <span class=\"comment\"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class=\"line\">  console.log(<span class=\"string\">'Received a push event for %s to %s'</span>,</span><br><span class=\"line\">    event.payload.repository.name,</span><br><span class=\"line\">    event.payload.ref);</span><br><span class=\"line\">    run_cmd(<span class=\"string\">'sh'</span>, [<span class=\"string\">'./deploy.sh'</span>], <span class=\"keyword\">function</span>(text)&#123; console.log(text) &#125;);<span class=\"comment\"># 需要执行的脚本位置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  http.createServer(<span class=\"keyword\">function</span> (req, res) &#123;</span><br><span class=\"line\">    handler(req, res, <span class=\"keyword\">function</span> (err) &#123;</span><br><span class=\"line\">      res.statusCode = 404</span><br><span class=\"line\">      res.end(<span class=\"string\">'no such location'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).listen(6666) <span class=\"comment\"># 服务监听的端口，可以自行修改</span></span><br><span class=\"line\">&#125;catch(err)&#123;</span><br><span class=\"line\">  console.error(<span class=\"string\">'Error:'</span>, err.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建需要执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim deploy.sh</span><br><span class=\"line\">git pull xxxxx  <span class=\"comment\"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试服务<br><img src=\"/.com//WX20180225-163439@2x.png\" alt><br><img src=\"/.com//WX20180225-163748@2x.png\" alt><br>显示ok，说明成功</p>\n</li>\n</ol>\n<h3 id=\"使用pm2应用进程管理器\"><a href=\"#使用pm2应用进程管理器\" class=\"headerlink\" title=\"使用pm2应用进程管理器\"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 start webhook.js</span><br><span class=\"line\">pm2 monit <span class=\"comment\"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180225-164721@2x.png\" alt><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>\n<p>参考：<a href=\"https://www.npmjs.com/package/gitee-webhook-handler\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/gitee-webhook-handler</a></p>"},{"title":"面试总结","date":"2019-04-18T13:24:20.000Z","_content":"最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<!-- more -->\n\n下面是一些常见的问题:\n#### 基础部分\n- HashMap的数据结构、底层实现。\n- 常用的集合类有哪些\n- session 和 cookie 的区别，cookie中有哪些键值对\n- Java 静态块 、构造块、构造函数执行顺序\n\n#### 锁、缓存、消息队列\n- 分布式锁实现\n- 乐观锁、悲观锁的实现\n- Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决\n\n#### Spring 框架\n- Spring 几种常用的单例模式\n- Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）\n- Dubbo 和 Spring Cloud 的区别以及优劣\n- 消息队列的使用、消息幂等\n- Spring bean 的生命周期\n- @Autowired 和 @Resource 的区别\n\n#### ORM、数据库\n- MyBatis 中#和$的区别\n- 左连接的时候,条件在where中和不在where中结果的区别\n\n#### 微服务、分布式\n- Session 分布式方案\n- Spring Cloud 中的常用组件以及用途\n- 分布式事务\n- 限流、降级\n\n上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。\n","source":"_posts/interview-experience.md","raw":"---\ntitle: 面试总结\ndate: 2019-04-18 21:24:20\ncategories: 面试\ntags: 工作经历\n---\n最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<!-- more -->\n\n下面是一些常见的问题:\n#### 基础部分\n- HashMap的数据结构、底层实现。\n- 常用的集合类有哪些\n- session 和 cookie 的区别，cookie中有哪些键值对\n- Java 静态块 、构造块、构造函数执行顺序\n\n#### 锁、缓存、消息队列\n- 分布式锁实现\n- 乐观锁、悲观锁的实现\n- Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决\n\n#### Spring 框架\n- Spring 几种常用的单例模式\n- Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）\n- Dubbo 和 Spring Cloud 的区别以及优劣\n- 消息队列的使用、消息幂等\n- Spring bean 的生命周期\n- @Autowired 和 @Resource 的区别\n\n#### ORM、数据库\n- MyBatis 中#和$的区别\n- 左连接的时候,条件在where中和不在where中结果的区别\n\n#### 微服务、分布式\n- Session 分布式方案\n- Spring Cloud 中的常用组件以及用途\n- 分布式事务\n- 限流、降级\n\n上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。\n","slug":"interview-experience","published":1,"updated":"2019-06-22T08:59:02.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldg0020bis6ysamqcia","content":"<p>最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<a id=\"more\"></a></p>\n<p>下面是一些常见的问题:</p>\n<h4 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h4><ul>\n<li>HashMap的数据结构、底层实现。</li>\n<li>常用的集合类有哪些</li>\n<li>session 和 cookie 的区别，cookie中有哪些键值对</li>\n<li>Java 静态块 、构造块、构造函数执行顺序</li>\n</ul>\n<h4 id=\"锁、缓存、消息队列\"><a href=\"#锁、缓存、消息队列\" class=\"headerlink\" title=\"锁、缓存、消息队列\"></a>锁、缓存、消息队列</h4><ul>\n<li>分布式锁实现</li>\n<li>乐观锁、悲观锁的实现</li>\n<li>Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决</li>\n</ul>\n<h4 id=\"Spring-框架\"><a href=\"#Spring-框架\" class=\"headerlink\" title=\"Spring 框架\"></a>Spring 框架</h4><ul>\n<li>Spring 几种常用的单例模式</li>\n<li>Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）</li>\n<li>Dubbo 和 Spring Cloud 的区别以及优劣</li>\n<li>消息队列的使用、消息幂等</li>\n<li>Spring bean 的生命周期</li>\n<li>@Autowired 和 @Resource 的区别</li>\n</ul>\n<h4 id=\"ORM、数据库\"><a href=\"#ORM、数据库\" class=\"headerlink\" title=\"ORM、数据库\"></a>ORM、数据库</h4><ul>\n<li>MyBatis 中#和$的区别</li>\n<li>左连接的时候,条件在where中和不在where中结果的区别</li>\n</ul>\n<h4 id=\"微服务、分布式\"><a href=\"#微服务、分布式\" class=\"headerlink\" title=\"微服务、分布式\"></a>微服务、分布式</h4><ul>\n<li>Session 分布式方案</li>\n<li>Spring Cloud 中的常用组件以及用途</li>\n<li>分布式事务</li>\n<li>限流、降级</li>\n</ul>\n<p>上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。</p>\n","site":{"data":{}},"excerpt":"<p>最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。</p>","more":"<p></p>\n<p>下面是一些常见的问题:</p>\n<h4 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h4><ul>\n<li>HashMap的数据结构、底层实现。</li>\n<li>常用的集合类有哪些</li>\n<li>session 和 cookie 的区别，cookie中有哪些键值对</li>\n<li>Java 静态块 、构造块、构造函数执行顺序</li>\n</ul>\n<h4 id=\"锁、缓存、消息队列\"><a href=\"#锁、缓存、消息队列\" class=\"headerlink\" title=\"锁、缓存、消息队列\"></a>锁、缓存、消息队列</h4><ul>\n<li>分布式锁实现</li>\n<li>乐观锁、悲观锁的实现</li>\n<li>Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决</li>\n</ul>\n<h4 id=\"Spring-框架\"><a href=\"#Spring-框架\" class=\"headerlink\" title=\"Spring 框架\"></a>Spring 框架</h4><ul>\n<li>Spring 几种常用的单例模式</li>\n<li>Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）</li>\n<li>Dubbo 和 Spring Cloud 的区别以及优劣</li>\n<li>消息队列的使用、消息幂等</li>\n<li>Spring bean 的生命周期</li>\n<li>@Autowired 和 @Resource 的区别</li>\n</ul>\n<h4 id=\"ORM、数据库\"><a href=\"#ORM、数据库\" class=\"headerlink\" title=\"ORM、数据库\"></a>ORM、数据库</h4><ul>\n<li>MyBatis 中#和$的区别</li>\n<li>左连接的时候,条件在where中和不在where中结果的区别</li>\n</ul>\n<h4 id=\"微服务、分布式\"><a href=\"#微服务、分布式\" class=\"headerlink\" title=\"微服务、分布式\"></a>微服务、分布式</h4><ul>\n<li>Session 分布式方案</li>\n<li>Spring Cloud 中的常用组件以及用途</li>\n<li>分布式事务</li>\n<li>限流、降级</li>\n</ul>\n<p>上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。</p>"},{"title":"Java 并发编程学习","date":"2018-06-13T07:30:57.000Z","_content":"### 关于并发\n并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<!-- more -->\n### 上下文切换、死锁\n#### 上下文切换\n频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：\n- 无锁并发编程\n通过将数据分段，使用不同线程处理不同的数据。\n- CAS 算法\nJava的Atomic包使用CAS算法来更新数据，而不需要加锁。\n- 使用最小线程\n避免创建不需要的线程，避免线程处于等待状态。\n- 使用协程\n在单线程里实现多任务的调度，并在线程里维持多个任务间的切换\n\n#### 死锁、避免死锁的常见方法\n锁是一个非常有用的工具，但是出现死锁会导致系统不可用。\n避免死锁的常见方法：\n- 避免一个线程同时获取多个锁\n- 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。\n- 尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。\n- 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。\n\n#### 资源限制\n带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。\n\n### Java并发底层相关实现\n#### volatile 实现原则\n- Lock前缀指令会引起处理器缓存回写到内存。\n- 一个处理器的缓存回写到内存会导致其他处理器缓存无效。\n\n#### synchronized的实现原理与应用\n","source":"_posts/java-concurrency-study.md","raw":"---\ntitle: Java 并发编程学习\ndate: 2018-06-13 15:30:57\ncategories: Java\ntag: concurrency\n---\n### 关于并发\n并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<!-- more -->\n### 上下文切换、死锁\n#### 上下文切换\n频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：\n- 无锁并发编程\n通过将数据分段，使用不同线程处理不同的数据。\n- CAS 算法\nJava的Atomic包使用CAS算法来更新数据，而不需要加锁。\n- 使用最小线程\n避免创建不需要的线程，避免线程处于等待状态。\n- 使用协程\n在单线程里实现多任务的调度，并在线程里维持多个任务间的切换\n\n#### 死锁、避免死锁的常见方法\n锁是一个非常有用的工具，但是出现死锁会导致系统不可用。\n避免死锁的常见方法：\n- 避免一个线程同时获取多个锁\n- 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。\n- 尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。\n- 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。\n\n#### 资源限制\n带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。\n\n### Java并发底层相关实现\n#### volatile 实现原则\n- Lock前缀指令会引起处理器缓存回写到内存。\n- 一个处理器的缓存回写到内存会导致其他处理器缓存无效。\n\n#### synchronized的实现原理与应用\n","slug":"java-concurrency-study","published":1,"updated":"2019-06-22T08:59:08.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldh0024bis6r32zare9","content":"<h3 id=\"关于并发\"><a href=\"#关于并发\" class=\"headerlink\" title=\"关于并发\"></a>关于并发</h3><p>并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<a id=\"more\"></a></p>\n<h3 id=\"上下文切换、死锁\"><a href=\"#上下文切换、死锁\" class=\"headerlink\" title=\"上下文切换、死锁\"></a>上下文切换、死锁</h3><h4 id=\"上下文切换\"><a href=\"#上下文切换\" class=\"headerlink\" title=\"上下文切换\"></a>上下文切换</h4><p>频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：</p>\n<ul>\n<li>无锁并发编程<br>通过将数据分段，使用不同线程处理不同的数据。</li>\n<li>CAS 算法<br>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li>使用最小线程<br>避免创建不需要的线程，避免线程处于等待状态。</li>\n<li>使用协程<br>在单线程里实现多任务的调度，并在线程里维持多个任务间的切换</li>\n</ul>\n<h4 id=\"死锁、避免死锁的常见方法\"><a href=\"#死锁、避免死锁的常见方法\" class=\"headerlink\" title=\"死锁、避免死锁的常见方法\"></a>死锁、避免死锁的常见方法</h4><p>锁是一个非常有用的工具，但是出现死锁会导致系统不可用。<br>避免死锁的常见方法：</p>\n<ul>\n<li>避免一个线程同时获取多个锁</li>\n<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>\n<li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。</li>\n<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>\n</ul>\n<h4 id=\"资源限制\"><a href=\"#资源限制\" class=\"headerlink\" title=\"资源限制\"></a>资源限制</h4><p>带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。</p>\n<h3 id=\"Java并发底层相关实现\"><a href=\"#Java并发底层相关实现\" class=\"headerlink\" title=\"Java并发底层相关实现\"></a>Java并发底层相关实现</h3><h4 id=\"volatile-实现原则\"><a href=\"#volatile-实现原则\" class=\"headerlink\" title=\"volatile 实现原则\"></a>volatile 实现原则</h4><ul>\n<li>Lock前缀指令会引起处理器缓存回写到内存。</li>\n<li>一个处理器的缓存回写到内存会导致其他处理器缓存无效。</li>\n</ul>\n<h4 id=\"synchronized的实现原理与应用\"><a href=\"#synchronized的实现原理与应用\" class=\"headerlink\" title=\"synchronized的实现原理与应用\"></a>synchronized的实现原理与应用</h4>","site":{"data":{}},"excerpt":"<h3 id=\"关于并发\"><a href=\"#关于并发\" class=\"headerlink\" title=\"关于并发\"></a>关于并发</h3><p>并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。</p>","more":"<p></p>\n<h3 id=\"上下文切换、死锁\"><a href=\"#上下文切换、死锁\" class=\"headerlink\" title=\"上下文切换、死锁\"></a>上下文切换、死锁</h3><h4 id=\"上下文切换\"><a href=\"#上下文切换\" class=\"headerlink\" title=\"上下文切换\"></a>上下文切换</h4><p>频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：</p>\n<ul>\n<li>无锁并发编程<br>通过将数据分段，使用不同线程处理不同的数据。</li>\n<li>CAS 算法<br>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>\n<li>使用最小线程<br>避免创建不需要的线程，避免线程处于等待状态。</li>\n<li>使用协程<br>在单线程里实现多任务的调度，并在线程里维持多个任务间的切换</li>\n</ul>\n<h4 id=\"死锁、避免死锁的常见方法\"><a href=\"#死锁、避免死锁的常见方法\" class=\"headerlink\" title=\"死锁、避免死锁的常见方法\"></a>死锁、避免死锁的常见方法</h4><p>锁是一个非常有用的工具，但是出现死锁会导致系统不可用。<br>避免死锁的常见方法：</p>\n<ul>\n<li>避免一个线程同时获取多个锁</li>\n<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>\n<li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。</li>\n<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>\n</ul>\n<h4 id=\"资源限制\"><a href=\"#资源限制\" class=\"headerlink\" title=\"资源限制\"></a>资源限制</h4><p>带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。</p>\n<h3 id=\"Java并发底层相关实现\"><a href=\"#Java并发底层相关实现\" class=\"headerlink\" title=\"Java并发底层相关实现\"></a>Java并发底层相关实现</h3><h4 id=\"volatile-实现原则\"><a href=\"#volatile-实现原则\" class=\"headerlink\" title=\"volatile 实现原则\"></a>volatile 实现原则</h4><ul>\n<li>Lock前缀指令会引起处理器缓存回写到内存。</li>\n<li>一个处理器的缓存回写到内存会导致其他处理器缓存无效。</li>\n</ul>\n<h4 id=\"synchronized的实现原理与应用\"><a href=\"#synchronized的实现原理与应用\" class=\"headerlink\" title=\"synchronized的实现原理与应用\"></a>synchronized的实现原理与应用</h4>"},{"title":"使用kubeadm安装kubernetes集群(待续)","date":"2017-12-02T08:57:06.000Z","_content":"因为国内服务器无法访问google，所以服务器需要科学上网\n可以看我之前的文章，服务器科学上网<!-- more -->\n### 安装docker\n建议使用daocloud提供的脚本进行安装，速度很快\n``` bash\n$ curl -sSL https://get.daocloud.io/docker | sh #适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源\n$ systemctl enable docker && systemctl start docker #设置开机启动，启动docker\n```\n### 安装kubeadm, kubelet and kubectl\n``` bash\n$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n$ setenforce 0 #关闭SELinux\n$ yum install -y kubelet kubeadm kubectl\n$ systemctl enable kubelet && systemctl start kubelet # 设置开机启动，启动\n```\n安装的过程有失败，提示执行yum --enablerepo=kubernetes clean metadata\n``` bash\n$ yum --enablerepo=kubernetes clean metadata # 如果还是不行，需要先清理缓存\n$ yum clean metadata\n$ yum clean all\n$ rm -rf /var/cache/yum\n```\n### 使用 kubeadm 创建集群\n``` bash\n$ kubeadm init #初始化\n```\n待续。。。\n","source":"_posts/kubeadm-install-kubernetes.md","raw":"---\ntitle: 使用kubeadm安装kubernetes集群(待续)\ndate: 2017-12-02 16:57:06\ncategories: Linux\ntag: Docker\n---\n因为国内服务器无法访问google，所以服务器需要科学上网\n可以看我之前的文章，服务器科学上网<!-- more -->\n### 安装docker\n建议使用daocloud提供的脚本进行安装，速度很快\n``` bash\n$ curl -sSL https://get.daocloud.io/docker | sh #适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源\n$ systemctl enable docker && systemctl start docker #设置开机启动，启动docker\n```\n### 安装kubeadm, kubelet and kubectl\n``` bash\n$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n$ setenforce 0 #关闭SELinux\n$ yum install -y kubelet kubeadm kubectl\n$ systemctl enable kubelet && systemctl start kubelet # 设置开机启动，启动\n```\n安装的过程有失败，提示执行yum --enablerepo=kubernetes clean metadata\n``` bash\n$ yum --enablerepo=kubernetes clean metadata # 如果还是不行，需要先清理缓存\n$ yum clean metadata\n$ yum clean all\n$ rm -rf /var/cache/yum\n```\n### 使用 kubeadm 创建集群\n``` bash\n$ kubeadm init #初始化\n```\n待续。。。\n","slug":"kubeadm-install-kubernetes","published":1,"updated":"2019-06-22T08:59:16.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldi0027bis6z1uer00c","content":"<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网<a id=\"more\"></a></p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.daocloud.io/docker | sh <span class=\"comment\">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker <span class=\"comment\">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装kubeadm-kubelet-and-kubectl\"><a href=\"#安装kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"安装kubeadm, kubelet and kubectl\"></a>安装kubeadm, kubelet and kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\">#关闭SELinux</span></span><br><span class=\"line\">$ yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class=\"comment\"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>\n\n<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --enablerepo=kubernetes clean metadata <span class=\"comment\"># 如果还是不行，需要先清理缓存</span></span><br><span class=\"line\">$ yum clean metadata</span><br><span class=\"line\">$ yum clean all</span><br><span class=\"line\">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-kubeadm-创建集群\"><a href=\"#使用-kubeadm-创建集群\" class=\"headerlink\" title=\"使用 kubeadm 创建集群\"></a>使用 kubeadm 创建集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init <span class=\"comment\">#初始化</span></span><br></pre></td></tr></table></figure>\n\n<p>待续。。。</p>\n","site":{"data":{}},"excerpt":"<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网</p>","more":"<p></p>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.daocloud.io/docker | sh <span class=\"comment\">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker <span class=\"comment\">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装kubeadm-kubelet-and-kubectl\"><a href=\"#安装kubeadm-kubelet-and-kubectl\" class=\"headerlink\" title=\"安装kubeadm, kubelet and kubectl\"></a>安装kubeadm, kubelet and kubectl</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\">#关闭SELinux</span></span><br><span class=\"line\">$ yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class=\"comment\"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>\n\n<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --enablerepo=kubernetes clean metadata <span class=\"comment\"># 如果还是不行，需要先清理缓存</span></span><br><span class=\"line\">$ yum clean metadata</span><br><span class=\"line\">$ yum clean all</span><br><span class=\"line\">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-kubeadm-创建集群\"><a href=\"#使用-kubeadm-创建集群\" class=\"headerlink\" title=\"使用 kubeadm 创建集群\"></a>使用 kubeadm 创建集群</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init <span class=\"comment\">#初始化</span></span><br></pre></td></tr></table></figure>\n\n<p>待续。。。</p>"},{"title":"生活","date":"2017-09-23T05:48:08.000Z","_content":"\n\n### 日常生活趣事记录\n","source":"_posts/life.md","raw":"---\ntitle: 生活\ndate: 2017-09-23 13:48:08\ncategories: Other\ntag: Docker\n---\n\n\n### 日常生活趣事记录\n","slug":"life","published":1,"updated":"2018-02-09T02:43:34.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldj002bbis6h0aekmya","content":"<h3 id=\"日常生活趣事记录\"><a href=\"#日常生活趣事记录\" class=\"headerlink\" title=\"日常生活趣事记录\"></a>日常生活趣事记录</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"日常生活趣事记录\"><a href=\"#日常生活趣事记录\" class=\"headerlink\" title=\"日常生活趣事记录\"></a>日常生活趣事记录</h3>"},{"title":"MD5、SALT加密浅析","date":"2018-11-06T03:35:06.000Z","_content":"密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，\n通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<!-- more -->\n\n### 什么是`Salt`盐\n> 盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。\n\n>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。\n\n### Java 实现MD5加密\n``` Java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class JavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        String result = getMD5(numStr);\n        System.out.println(result);\n    }\n\n\n    public final static String getMD5(String str) {\n        try {\n            //创建具有指定算法名称的摘要\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            //使用指定的字节数组更新摘要\n            md.update(str.getBytes());\n            //进行哈希计算并返回一个字节数组\n            byte mdBytes[] = md.digest();\n            String hash = \"\";\n            //循环字节数组\n            for (int i = 0; i < mdBytes.length; i++) {\n                int temp;\n                //如果有小于0的字节,则转换为正数\n                if (mdBytes[i] < 0)\n                    temp = 256 + mdBytes[i];\n                else\n                    temp = mdBytes[i];\n                if (temp < 16)\n                    hash += \"0\";\n                //将字节转换为16进制后，转换为字符串\n                hash += Integer.toString(temp, 16);\n            }\n            return hash;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n结果如下：\n``` shell\ne10adc3949ba59abbe56e057f20f883e\n```\n去MD5解码网站，很容易得到加密的内容是`123456`\n\n### Guava 实现MD5加密\nGuava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。\n导入maven 包\n``` xml\n     <dependency>\n        <groupId>com.google.guava</groupId>\n        <artifactId>guava</artifactId>\n        <version>27.0-jre</version>\n        <type>bundle</type>\n     </dependency>\n```\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        System.out.println(hc);\n    }\n}\n```\n结果跟上面相同，但是`md5()` 的这个方法代码中标记弃用了。推荐使用新的方法\n代码的量少了很多，不需要自己做过多的处理。\n\n###  加盐处理\n\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n\n    private static final String SALT = \"0fdfa5e5a88bedae440a9d8ae7c84708\";\n\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        System.out.println(getMD5WithSalt(numStr));\n    }\n\n    public static String getMD5(String numStr) {\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        return hc.toString();\n    }\n\n    public static String getMD5WithSalt(String numStr) {\n        return getMD5(getMD5(numStr) + SALT);\n    }\n}\n\n```\n\n这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。\n","source":"_posts/md5-and-salt-encryption.md","raw":"---\ntitle: MD5、SALT加密浅析\ndate: 2018-11-06 11:35:06\ncategories: Linux\ntag: 加密\n---\n密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，\n通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<!-- more -->\n\n### 什么是`Salt`盐\n> 盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。\n\n>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。\n\n### Java 实现MD5加密\n``` Java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class JavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        String result = getMD5(numStr);\n        System.out.println(result);\n    }\n\n\n    public final static String getMD5(String str) {\n        try {\n            //创建具有指定算法名称的摘要\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            //使用指定的字节数组更新摘要\n            md.update(str.getBytes());\n            //进行哈希计算并返回一个字节数组\n            byte mdBytes[] = md.digest();\n            String hash = \"\";\n            //循环字节数组\n            for (int i = 0; i < mdBytes.length; i++) {\n                int temp;\n                //如果有小于0的字节,则转换为正数\n                if (mdBytes[i] < 0)\n                    temp = 256 + mdBytes[i];\n                else\n                    temp = mdBytes[i];\n                if (temp < 16)\n                    hash += \"0\";\n                //将字节转换为16进制后，转换为字符串\n                hash += Integer.toString(temp, 16);\n            }\n            return hash;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n结果如下：\n``` shell\ne10adc3949ba59abbe56e057f20f883e\n```\n去MD5解码网站，很容易得到加密的内容是`123456`\n\n### Guava 实现MD5加密\nGuava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。\n导入maven 包\n``` xml\n     <dependency>\n        <groupId>com.google.guava</groupId>\n        <artifactId>guava</artifactId>\n        <version>27.0-jre</version>\n        <type>bundle</type>\n     </dependency>\n```\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        System.out.println(hc);\n    }\n}\n```\n结果跟上面相同，但是`md5()` 的这个方法代码中标记弃用了。推荐使用新的方法\n代码的量少了很多，不需要自己做过多的处理。\n\n###  加盐处理\n\n``` Java\nimport com.google.common.hash.HashCode;\nimport com.google.common.hash.HashFunction;\nimport com.google.common.hash.Hashing;\n\nimport java.nio.charset.Charset;\n\npublic class GuavaImplMD5 {\n\n    private static final String SALT = \"0fdfa5e5a88bedae440a9d8ae7c84708\";\n\n    public static void main(String[] args) {\n        String numStr = \"123456\";\n        System.out.println(getMD5WithSalt(numStr));\n    }\n\n    public static String getMD5(String numStr) {\n        HashFunction hf = Hashing.md5();\n        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();\n        return hc.toString();\n    }\n\n    public static String getMD5WithSalt(String numStr) {\n        return getMD5(getMD5(numStr) + SALT);\n    }\n}\n\n```\n\n这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。\n","slug":"md5-and-salt-encryption","published":1,"updated":"2019-06-22T08:59:35.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldk002fbis69wzbaj0w","content":"<p>密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，<br>通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<a id=\"more\"></a></p>\n<h3 id=\"什么是Salt盐\"><a href=\"#什么是Salt盐\" class=\"headerlink\" title=\"什么是Salt盐\"></a>什么是<code>Salt</code>盐</h3><blockquote>\n<p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p>\n</blockquote>\n<blockquote>\n<p>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。</p>\n</blockquote>\n<h3 id=\"Java-实现MD5加密\"><a href=\"#Java-实现MD5加密\" class=\"headerlink\" title=\"Java 实现MD5加密\"></a>Java 实现MD5加密</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        String result = getMD5(numStr);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建具有指定算法名称的摘要</span></span><br><span class=\"line\">            MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//使用指定的字节数组更新摘要</span></span><br><span class=\"line\">            md.update(str.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">//进行哈希计算并返回一个字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span> mdBytes[] = md.digest();</span><br><span class=\"line\">            String hash = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mdBytes.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">                <span class=\"comment\">//如果有小于0的字节,则转换为正数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mdBytes[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    temp = <span class=\"number\">256</span> + mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    temp = mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">                    hash += <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">                <span class=\"comment\">//将字节转换为16进制后，转换为字符串</span></span><br><span class=\"line\">                hash += Integer.toString(temp, <span class=\"number\">16</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>\n\n<p>去MD5解码网站，很容易得到加密的内容是<code>123456</code></p>\n<h3 id=\"Guava-实现MD5加密\"><a href=\"#Guava-实现MD5加密\" class=\"headerlink\" title=\"Guava 实现MD5加密\"></a>Guava 实现MD5加密</h3><p>Guava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。<br>导入maven 包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>27.0-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>bundle<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        System.out.println(hc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果跟上面相同，但是<code>md5()</code> 的这个方法代码中标记弃用了。推荐使用新的方法<br>代码的量少了很多，不需要自己做过多的处理。</p>\n<h3 id=\"加盐处理\"><a href=\"#加盐处理\" class=\"headerlink\" title=\"加盐处理\"></a>加盐处理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SALT = <span class=\"string\">\"0fdfa5e5a88bedae440a9d8ae7c84708\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        System.out.println(getMD5WithSalt(numStr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hc.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5WithSalt</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getMD5(getMD5(numStr) + SALT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。</p>\n","site":{"data":{}},"excerpt":"<p>密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，<br>通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。</p>","more":"<p></p>\n<h3 id=\"什么是Salt盐\"><a href=\"#什么是Salt盐\" class=\"headerlink\" title=\"什么是Salt盐\"></a>什么是<code>Salt</code>盐</h3><blockquote>\n<p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p>\n</blockquote>\n<blockquote>\n<p>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。</p>\n</blockquote>\n<h3 id=\"Java-实现MD5加密\"><a href=\"#Java-实现MD5加密\" class=\"headerlink\" title=\"Java 实现MD5加密\"></a>Java 实现MD5加密</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        String result = getMD5(numStr);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建具有指定算法名称的摘要</span></span><br><span class=\"line\">            MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//使用指定的字节数组更新摘要</span></span><br><span class=\"line\">            md.update(str.getBytes());</span><br><span class=\"line\">            <span class=\"comment\">//进行哈希计算并返回一个字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span> mdBytes[] = md.digest();</span><br><span class=\"line\">            String hash = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            <span class=\"comment\">//循环字节数组</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mdBytes.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">                <span class=\"comment\">//如果有小于0的字节,则转换为正数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mdBytes[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    temp = <span class=\"number\">256</span> + mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    temp = mdBytes[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">                    hash += <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">                <span class=\"comment\">//将字节转换为16进制后，转换为字符串</span></span><br><span class=\"line\">                hash += Integer.toString(temp, <span class=\"number\">16</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>\n\n<p>去MD5解码网站，很容易得到加密的内容是<code>123456</code></p>\n<h3 id=\"Guava-实现MD5加密\"><a href=\"#Guava-实现MD5加密\" class=\"headerlink\" title=\"Guava 实现MD5加密\"></a>Guava 实现MD5加密</h3><p>Guava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。<br>导入maven 包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>27.0-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>bundle<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        System.out.println(hc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果跟上面相同，但是<code>md5()</code> 的这个方法代码中标记弃用了。推荐使用新的方法<br>代码的量少了很多，不需要自己做过多的处理。</p>\n<h3 id=\"加盐处理\"><a href=\"#加盐处理\" class=\"headerlink\" title=\"加盐处理\"></a>加盐处理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.HashFunction;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GuavaImplMD5</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SALT = <span class=\"string\">\"0fdfa5e5a88bedae440a9d8ae7c84708\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String numStr = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">        System.out.println(getMD5WithSalt(numStr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        HashFunction hf = Hashing.md5();</span><br><span class=\"line\">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hc.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMD5WithSalt</span><span class=\"params\">(String numStr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getMD5(getMD5(numStr) + SALT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。</p>"},{"title":"Netty 学习记录","date":"2018-04-11T02:44:49.000Z","_content":"### Netty 核心组件\n- Channel\n- 回调\n- Future\n- 事件和ChannelHandler\n#### Channel\nChannel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。\n#### 回调\n一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。\n####  Future\nFuture 提供了另一种在操作完成时通知应用程序的方式。\n#### ChannelHandler\nChannelHandler 是 Netty\n","source":"_posts/netty-study.md","raw":"---\ntitle: Netty 学习记录\ndate: 2018-04-11 10:44:49\ntags:\n---\n### Netty 核心组件\n- Channel\n- 回调\n- Future\n- 事件和ChannelHandler\n#### Channel\nChannel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。\n#### 回调\n一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。\n####  Future\nFuture 提供了另一种在操作完成时通知应用程序的方式。\n#### ChannelHandler\nChannelHandler 是 Netty\n","slug":"netty-study","published":1,"updated":"2018-04-18T03:36:08.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldl002jbis6qr8mh183","content":"<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><ul>\n<li>Channel</li>\n<li>回调</li>\n<li>Future</li>\n<li>事件和ChannelHandler<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><ul>\n<li>Channel</li>\n<li>回调</li>\n<li>Future</li>\n<li>事件和ChannelHandler<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>\n</ul>\n"},{"title":"Nginx 负载均衡策略","date":"2017-10-12T09:12:01.000Z","_content":"Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 `注：负载均衡至少需要两台机器` <!-- more -->\n### 负载均衡\n负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。\n\n### 负载均衡策略\n负载均衡的策略可以大致分为两大类：`内置策略` 和`扩展策略`\n内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接\n扩展策略：fair、url hash等\n#### 内置策略\n- 轮询策略（轮询加权/round-robin）</br>\n`到应用服务器的请求以round-robin/轮询的方式被分发`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080 weight=1 fail_timeout=20s;\n        server 192.168.0.101:8080 weight=2 fail_timeout=20s;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- ip hash </br>\n`使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        ip_hash;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- 最少连接（least_conn) </br>\n`下一个请求将被分派到活动连接数量最少的服务器`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        least_conn;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n#### 扩展策略\n- fair</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        fair;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- url hash</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        hash $request_uri;\n        hash_method crc32;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n\nweight=1; (weight 默认为1.weight越大，负载的权重就越大)\ndown; (down 表示单前的server暂时不参与负载)\nbackup; (其它所有的非backup机器down或者忙的时候，请求backup机器)\nmax_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\nfail_timeout:max_fails次失败后，暂停的时间\n\n### 最后\n``` bash\nnginx -s reload #重启nginx\n```\n","source":"_posts/nginx-load-balance-strategy.md","raw":"---\ntitle: Nginx 负载均衡策略\ndate: 2017-10-12 17:12:01\ncategories: Linux\ntag: Nginx\n---\nNginx 作为高性能web服务器，负载均衡是其基本功能之一。 `注：负载均衡至少需要两台机器` <!-- more -->\n### 负载均衡\n负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。\n\n### 负载均衡策略\n负载均衡的策略可以大致分为两大类：`内置策略` 和`扩展策略`\n内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接\n扩展策略：fair、url hash等\n#### 内置策略\n- 轮询策略（轮询加权/round-robin）</br>\n`到应用服务器的请求以round-robin/轮询的方式被分发`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080 weight=1 fail_timeout=20s;\n        server 192.168.0.101:8080 weight=2 fail_timeout=20s;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- ip hash </br>\n`使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        ip_hash;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- 最少连接（least_conn) </br>\n`下一个请求将被分派到活动连接数量最少的服务器`</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        least_conn;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n#### 扩展策略\n- fair</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        fair;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n- url hash</br>\n`配置`\n``` bash\nhttp {\n    # ... 省略其它配置\n    upstream tomcats {\n        server 192.168.0.100:8080;\n        server 192.168.0.101:8080;\n        hash $request_uri;\n        hash_method crc32;\n    }\n    server {\n        server_name www.searchinfogo.com\n        listen 80;\n        location / {\n            proxy_pass http://tomcats;\n        }\n    }\n    # ... 省略其它配置\n}\n```\n\n\nweight=1; (weight 默认为1.weight越大，负载的权重就越大)\ndown; (down 表示单前的server暂时不参与负载)\nbackup; (其它所有的非backup机器down或者忙的时候，请求backup机器)\nmax_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误\nfail_timeout:max_fails次失败后，暂停的时间\n\n### 最后\n``` bash\nnginx -s reload #重启nginx\n```\n","slug":"nginx-load-balance-strategy","published":1,"updated":"2019-06-22T08:59:53.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldm002mbis6iqbjx1pf","content":"<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code> <a id=\"more\"></a></p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>\n<h4 id=\"内置策略\"><a href=\"#内置策略\" class=\"headerlink\" title=\"内置策略\"></a>内置策略</h4><ul>\n<li><p>轮询策略（轮询加权/round-robin）<br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class=\"line\">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ip hash <br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最少连接（least_conn) <br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"扩展策略\"><a href=\"#扩展策略\" class=\"headerlink\" title=\"扩展策略\"></a>扩展策略</h4><ul>\n<li><p>fair<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        fair;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url hash<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        hash_method crc32;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload <span class=\"comment\">#重启nginx</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code></p>","more":"<p></p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>\n<h4 id=\"内置策略\"><a href=\"#内置策略\" class=\"headerlink\" title=\"内置策略\"></a>内置策略</h4><ul>\n<li><p>轮询策略（轮询加权/round-robin）<br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class=\"line\">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ip hash <br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最少连接（least_conn) <br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code><br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        least_conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"扩展策略\"><a href=\"#扩展策略\" class=\"headerlink\" title=\"扩展策略\"></a>扩展策略</h4><ul>\n<li><p>fair<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        fair;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url hash<br><br><code>配置</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">    upstream tomcats &#123;</span><br><span class=\"line\">        server 192.168.0.100:8080;</span><br><span class=\"line\">        server 192.168.0.101:8080;</span><br><span class=\"line\">        <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        hash_method crc32;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        server_name www.searchinfogo.com</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://tomcats;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># ... 省略其它配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload <span class=\"comment\">#重启nginx</span></span><br></pre></td></tr></table></figure>"},{"title":"CentOS 安装 node","date":"2018-02-09T05:05:14.000Z","_content":"### 下载node\n``` bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz\n```\n### 解压&配置\n``` bash\ntar xvJf node-v8.9.4-linux-x64.tar.xz\nmv node-v8.9.4-linux-x64 /opt\n```\n``` bash\nvim /etc/profile\n```\n``` bash\n#设置node 环境变量\nexport NODE_HOME=/opt/node-v8.9.4-linux-x64\nexport PATH=$NODE_HOME/bin:$PATH\nsource /etc/profile\n```\n### 测试是否成功\n``` bash\nnode -v\n```\n或者安装nvm\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm、\nsource /etc/profile\n```\n### 检查是否安装成功\n``` shell\n nvm --version\n```\n\n### 安装node\n``` bash\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\nnvm ls # 列出所有版本\n```\n","source":"_posts/node-install.md","raw":"---\ntitle: CentOS 安装 node\ndate: 2018-02-09 13:05:14\ncategories: Linux\ntags: Node\n---\n### 下载node\n``` bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz\n```\n### 解压&配置\n``` bash\ntar xvJf node-v8.9.4-linux-x64.tar.xz\nmv node-v8.9.4-linux-x64 /opt\n```\n``` bash\nvim /etc/profile\n```\n``` bash\n#设置node 环境变量\nexport NODE_HOME=/opt/node-v8.9.4-linux-x64\nexport PATH=$NODE_HOME/bin:$PATH\nsource /etc/profile\n```\n### 测试是否成功\n``` bash\nnode -v\n```\n或者安装nvm\n``` bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash\nvim /etc/profile\n#加入下面的内容\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm、\nsource /etc/profile\n```\n### 检查是否安装成功\n``` shell\n nvm --version\n```\n\n### 安装node\n``` bash\nnvm install stable # 安装稳定版\nnvm current # 查看当前的版本\nnvm ls # 列出所有版本\n```\n","slug":"node-install","published":1,"updated":"2018-02-25T07:00:09.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldo002rbis6lov4vdhy","content":"<h3 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压-amp-配置\"><a href=\"#解压-amp-配置\" class=\"headerlink\" title=\"解压&amp;配置\"></a>解压&amp;配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置node 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>或者安装nvm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm、</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br><span class=\"line\">nvm ls <span class=\"comment\"># 列出所有版本</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解压-amp-配置\"><a href=\"#解压-amp-配置\" class=\"headerlink\" title=\"解压&amp;配置\"></a>解压&amp;配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置node 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>或者安装nvm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#加入下面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; \\. <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm、</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable <span class=\"comment\"># 安装稳定版</span></span><br><span class=\"line\">nvm current <span class=\"comment\"># 查看当前的版本</span></span><br><span class=\"line\">nvm ls <span class=\"comment\"># 列出所有版本</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Node 项目问题总结","date":"2018-06-02T06:52:15.000Z","_content":"最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <!-- more -->\n### RabbitMQ virtual hosts 问题\n项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错\n``` error\nrabbitmq typeerror cannot read property 'create channel' of undefined\n```\n会碰到上面类似的错误，创建channel的报错。\n最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面\n在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。\n最后发现是因为`virtual hosts`的原因\n``` Javascript\n   amqp.connect('amqp://admin:123456@localhost', function (err, conn) { ......\n```\n默认的配置如上图所示，其实这个配置会使用默认的`virtual hosts` `/`,但是如果配置了其他的`virtual hosts`，你没有配置就会导致你\n无法正常的连接。\n如果你配置的有其他的`virtual hosts`，那么配置如下\n``` Javascript\n amqp.connect('amqp://admin:123456@localhost/virtual_hosts_name', function (err, conn) { ......\n```\n这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置`virtual hosts`的name就可以了。\n\n### RabbitMQ message 信息消费问题\n项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。\nJava端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码\n``` JavaScript\n ch.sendToQueue(q, new Buffer.from(JSON.stringify(orders)), {persistent: true});\n```\n发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收\n``` Java\nByte[] body = null;\nString message = new String(body, \"UTF-8\");\n```\n这样就能正常解析从node 传输过来的数据。\n","source":"_posts/node-project-summary.md","raw":"---\ntitle: Node 项目问题总结\ndate: 2018-06-02 14:52:15\ncategories: Node\ntags: rabbitmq\n---\n最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <!-- more -->\n### RabbitMQ virtual hosts 问题\n项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错\n``` error\nrabbitmq typeerror cannot read property 'create channel' of undefined\n```\n会碰到上面类似的错误，创建channel的报错。\n最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面\n在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。\n最后发现是因为`virtual hosts`的原因\n``` Javascript\n   amqp.connect('amqp://admin:123456@localhost', function (err, conn) { ......\n```\n默认的配置如上图所示，其实这个配置会使用默认的`virtual hosts` `/`,但是如果配置了其他的`virtual hosts`，你没有配置就会导致你\n无法正常的连接。\n如果你配置的有其他的`virtual hosts`，那么配置如下\n``` Javascript\n amqp.connect('amqp://admin:123456@localhost/virtual_hosts_name', function (err, conn) { ......\n```\n这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置`virtual hosts`的name就可以了。\n\n### RabbitMQ message 信息消费问题\n项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。\nJava端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码\n``` JavaScript\n ch.sendToQueue(q, new Buffer.from(JSON.stringify(orders)), {persistent: true});\n```\n发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收\n``` Java\nByte[] body = null;\nString message = new String(body, \"UTF-8\");\n```\n这样就能正常解析从node 传输过来的数据。\n","slug":"node-project-summary","published":1,"updated":"2019-06-22T09:00:05.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldp002ubis6r9ss008t","content":"<p>最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <a id=\"more\"></a></p>\n<h3 id=\"RabbitMQ-virtual-hosts-问题\"><a href=\"#RabbitMQ-virtual-hosts-问题\" class=\"headerlink\" title=\"RabbitMQ virtual hosts 问题\"></a>RabbitMQ virtual hosts 问题</h3><p>项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq typeerror cannot read property &apos;create channel&apos; of undefined</span><br></pre></td></tr></table></figure>\n\n<p>会碰到上面类似的错误，创建channel的报错。<br>最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面<br>在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。<br>最后发现是因为<code>virtual hosts</code>的原因</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n\n<p>默认的配置如上图所示，其实这个配置会使用默认的<code>virtual hosts</code> <code>/</code>,但是如果配置了其他的<code>virtual hosts</code>，你没有配置就会导致你<br>无法正常的连接。<br>如果你配置的有其他的<code>virtual hosts</code>，那么配置如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost/virtual_hosts_name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n\n<p>这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置<code>virtual hosts</code>的name就可以了。</p>\n<h3 id=\"RabbitMQ-message-信息消费问题\"><a href=\"#RabbitMQ-message-信息消费问题\" class=\"headerlink\" title=\"RabbitMQ message 信息消费问题\"></a>RabbitMQ message 信息消费问题</h3><p>项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。<br>Java端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.sendToQueue(q, <span class=\"keyword\">new</span> Buffer.from(<span class=\"built_in\">JSON</span>.stringify(orders)), &#123;<span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Byte[] body = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">String message = <span class=\"keyword\">new</span> String(body, <span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样就能正常解析从node 传输过来的数据。</p>\n","site":{"data":{}},"excerpt":"<p>最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。</p>","more":"<p></p>\n<h3 id=\"RabbitMQ-virtual-hosts-问题\"><a href=\"#RabbitMQ-virtual-hosts-问题\" class=\"headerlink\" title=\"RabbitMQ virtual hosts 问题\"></a>RabbitMQ virtual hosts 问题</h3><p>项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq typeerror cannot read property &apos;create channel&apos; of undefined</span><br></pre></td></tr></table></figure>\n\n<p>会碰到上面类似的错误，创建channel的报错。<br>最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面<br>在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。<br>最后发现是因为<code>virtual hosts</code>的原因</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n\n<p>默认的配置如上图所示，其实这个配置会使用默认的<code>virtual hosts</code> <code>/</code>,但是如果配置了其他的<code>virtual hosts</code>，你没有配置就会导致你<br>无法正常的连接。<br>如果你配置的有其他的<code>virtual hosts</code>，那么配置如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amqp.connect(<span class=\"string\">'amqp://admin:123456@localhost/virtual_hosts_name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>\n\n<p>这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置<code>virtual hosts</code>的name就可以了。</p>\n<h3 id=\"RabbitMQ-message-信息消费问题\"><a href=\"#RabbitMQ-message-信息消费问题\" class=\"headerlink\" title=\"RabbitMQ message 信息消费问题\"></a>RabbitMQ message 信息消费问题</h3><p>项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。<br>Java端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch.sendToQueue(q, <span class=\"keyword\">new</span> Buffer.from(<span class=\"built_in\">JSON</span>.stringify(orders)), &#123;<span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Byte[] body = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">String message = <span class=\"keyword\">new</span> String(body, <span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样就能正常解析从node 传输过来的数据。</p>"},{"title":"python 入门","date":"2018-03-07T02:55:06.000Z","_content":"> Life is short, you need Python.\n\n上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<!-- more -->\n\n### 基本数据类型\n了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。\n\nPython 基本数据类型（6个标注数据类型）\n- Number (数字)\n- String (字符串)\n- List   (列表)\n- Tuple  (元组)\n- Sets   (集合)\n- Dictionary (字典)\n\n### 待续。。。\n","source":"_posts/pthon-tutorial.md","raw":"---\ntitle: python 入门\ndate: 2018-03-07 10:55:06\ncategories: Python\ntags: Python\n---\n> Life is short, you need Python.\n\n上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<!-- more -->\n\n### 基本数据类型\n了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。\n\nPython 基本数据类型（6个标注数据类型）\n- Number (数字)\n- String (字符串)\n- List   (列表)\n- Tuple  (元组)\n- Sets   (集合)\n- Dictionary (字典)\n\n### 待续。。。\n","slug":"pthon-tutorial","published":1,"updated":"2019-06-22T09:00:16.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldq002zbis6mslmkeaj","content":"<blockquote>\n<p>Life is short, you need Python.</p>\n</blockquote>\n<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<a id=\"more\"></a></p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>\n<p>Python 基本数据类型（6个标注数据类型）</p>\n<ul>\n<li>Number (数字)</li>\n<li>String (字符串)</li>\n<li>List   (列表)</li>\n<li>Tuple  (元组)</li>\n<li>Sets   (集合)</li>\n<li>Dictionary (字典)</li>\n</ul>\n<h3 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>Life is short, you need Python.</p>\n</blockquote>\n<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。</p>","more":"<p></p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>\n<p>Python 基本数据类型（6个标注数据类型）</p>\n<ul>\n<li>Number (数字)</li>\n<li>String (字符串)</li>\n<li>List   (列表)</li>\n<li>Tuple  (元组)</li>\n<li>Sets   (集合)</li>\n<li>Dictionary (字典)</li>\n</ul>\n<h3 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h3>"},{"title":"okhttp3-proxy-auth (okhttp3 http 代理鉴权)","date":"2018-08-30T11:17:14.000Z","_content":"因为种种原因，没有按时写博客，最近准备把博客重新拾起来。\n最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<!-- more -->\n\n默认的okhttp代理鉴权如下：\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n        String url = \"https://www.baidu.com\";\n        //设置socks代理服务器ip端口\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n        Authenticator.setDefault(new Authenticator()\n        {\n            private PasswordAuthentication authentication = new PasswordAuthentication(\"username\", \"password\".toCharArray());\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication()\n            {\n                return authentication;\n            }\n        });\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n但是试了一下发现会报错,代理鉴权失败\n``` log\njava.io.IOException: Failed to authenticate with proxy\n\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)\n\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)\n\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n于是采用另外一种方式\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n\n        String url = \"https://www.baidu.com\";\n        final String username = \"username\";\n        final String password = \"password\";\n\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n\n        Authenticator proxyAuthenticator = new Authenticator() {\n            @Override\n            public Request authenticate(Route route, Response response) throws IOException {\n                String credential = Credentials.basic(username, password);\n                return response.request().newBuilder()\n                        .header(\"Proxy-Authorization\", credential)\n                        .build();\n            }\n        };\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                .proxyAuthenticator(proxyAuthenticator)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n\n通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的\n","source":"_posts/okhttp3-proxy-auth.md","raw":"---\ntitle: okhttp3-proxy-auth (okhttp3 http 代理鉴权)\ndate: 2018-08-30 19:17:14\ncategories: Java\ntag: okhttp\n---\n因为种种原因，没有按时写博客，最近准备把博客重新拾起来。\n最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<!-- more -->\n\n默认的okhttp代理鉴权如下：\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.Authenticator;\nimport java.net.InetSocketAddress;\nimport java.net.PasswordAuthentication;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n        String url = \"https://www.baidu.com\";\n        //设置socks代理服务器ip端口\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n        Authenticator.setDefault(new Authenticator()\n        {\n            private PasswordAuthentication authentication = new PasswordAuthentication(\"username\", \"password\".toCharArray());\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication()\n            {\n                return authentication;\n            }\n        });\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n但是试了一下发现会报错,代理鉴权失败\n``` log\njava.io.IOException: Failed to authenticate with proxy\n\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)\n\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)\n\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)\n\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)\n\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)\n\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)\n\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)\n\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)\n\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)\n\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)\n\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n于是采用另外一种方式\n``` Java\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyTest {\n    public static void main(String[] args) {\n\n        String url = \"https://www.baidu.com\";\n        final String username = \"username\";\n        final String password = \"password\";\n\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", 1086));\n\n        Authenticator proxyAuthenticator = new Authenticator() {\n            @Override\n            public Request authenticate(Route route, Response response) throws IOException {\n                String credential = Credentials.basic(username, password);\n                return response.request().newBuilder()\n                        .header(\"Proxy-Authorization\", credential)\n                        .build();\n            }\n        };\n\n\n        OkHttpClient client = new OkHttpClient().newBuilder().\n                connectTimeout(120, TimeUnit.SECONDS).readTimeout(120, TimeUnit.SECONDS).proxy(proxy)\n                .proxyAuthenticator(proxyAuthenticator)\n                // 解决内存溢出问题\n                .connectionPool(new ConnectionPool(5, 1, TimeUnit.SECONDS)).build();\n        Request build = new Request.Builder()\n                .url(url)\n                .build();\n\n        Response response = null;\n\n        client.newCall(build).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (!response.isSuccessful()) {\n                    throw new IOException(\"服务器端错误: \" + response);\n                }\n                System.out.println(response.body().string());\n            }\n        });\n    }\n}\n```\n\n通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的\n","slug":"okhttp3-proxy-auth","published":1,"updated":"2019-06-22T09:00:10.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldr0031bis662fsqfdi","content":"<p>因为种种原因，没有按时写博客，最近准备把博客重新拾起来。<br>最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<a id=\"more\"></a></p>\n<p>默认的okhttp代理鉴权如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Authenticator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.PasswordAuthentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//设置socks代理服务器ip端口</span></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\">        Authenticator.setDefault(<span class=\"keyword\">new</span> Authenticator()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> PasswordAuthentication authentication = <span class=\"keyword\">new</span> PasswordAuthentication(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"password\"</span>.toCharArray());</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是试了一下发现会报错,代理鉴权失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.io.IOException: Failed to authenticate with proxy</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class=\"line\">\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)</span><br><span class=\"line\">\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n\n<p>于是采用另外一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String username = <span class=\"string\">\"username\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String password = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Authenticator proxyAuthenticator = <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">authenticate</span><span class=\"params\">(Route route, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                String credential = Credentials.basic(username, password);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> response.request().newBuilder()</span><br><span class=\"line\">                        .header(<span class=\"string\">\"Proxy-Authorization\"</span>, credential)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                .proxyAuthenticator(proxyAuthenticator)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的</p>\n","site":{"data":{}},"excerpt":"<p>因为种种原因，没有按时写博客，最近准备把博客重新拾起来。<br>最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下</p>","more":"<p></p>\n<p>默认的okhttp代理鉴权如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Authenticator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.PasswordAuthentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//设置socks代理服务器ip端口</span></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\">        Authenticator.setDefault(<span class=\"keyword\">new</span> Authenticator()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> PasswordAuthentication authentication = <span class=\"keyword\">new</span> PasswordAuthentication(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"password\"</span>.toCharArray());</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> authentication;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是试了一下发现会报错,代理鉴权失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.io.IOException: Failed to authenticate with proxy</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)</span><br><span class=\"line\">\tat okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class=\"line\">\tat okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class=\"line\">\tat okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class=\"line\">\tat okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)</span><br><span class=\"line\">\tat okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)</span><br><span class=\"line\">\tat okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n\n<p>于是采用另外一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> okhttp3.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = <span class=\"string\">\"https://www.baidu.com\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String username = <span class=\"string\">\"username\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String password = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(Proxy.Type.HTTP, <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1086</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Authenticator proxyAuthenticator = <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">authenticate</span><span class=\"params\">(Route route, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                String credential = Credentials.basic(username, password);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> response.request().newBuilder()</span><br><span class=\"line\">                        .header(<span class=\"string\">\"Proxy-Authorization\"</span>, credential)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient().newBuilder().</span><br><span class=\"line\">                connectTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).readTimeout(<span class=\"number\">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class=\"line\">                .proxyAuthenticator(proxyAuthenticator)</span><br><span class=\"line\">                <span class=\"comment\">// 解决内存溢出问题</span></span><br><span class=\"line\">                .connectionPool(<span class=\"keyword\">new</span> ConnectionPool(<span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS)).build();</span><br><span class=\"line\">        Request build = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">                .url(url)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        Response response = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        client.newCall(build).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!response.isSuccessful()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">\"服务器端错误: \"</span> + response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(response.body().string());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的</p>"},{"title":"python通过使用requirements.txt文件记录管理依赖包","date":"2018-03-07T03:38:55.000Z","_content":"python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<!-- more -->\n\n### 使用\n``` shell\n# 进入项目目录创建requirements.txt文件\ntouch requirements.txt\n# 将项目中使用的包冻结（freeze）到requirements.txt文件中\npip freeze >requirements.txt\n```\n当把项目上传到服务器以后可以执行下面的命令安装对应的包\n``` shell\n#通过requirements.txt 文件中的记录安装依赖\npip install -r requirements.txt\n```\n通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。\n","source":"_posts/python-requirements.md","raw":"---\ntitle: python通过使用requirements.txt文件记录管理依赖包\ndate: 2018-03-07 11:38:55\ncategories: Python\ntags: Python\n---\npython在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<!-- more -->\n\n### 使用\n``` shell\n# 进入项目目录创建requirements.txt文件\ntouch requirements.txt\n# 将项目中使用的包冻结（freeze）到requirements.txt文件中\npip freeze >requirements.txt\n```\n当把项目上传到服务器以后可以执行下面的命令安装对应的包\n``` shell\n#通过requirements.txt 文件中的记录安装依赖\npip install -r requirements.txt\n```\n通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。\n","slug":"python-requirements","published":1,"updated":"2019-06-22T09:00:21.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklds0036bis6109v3ji9","content":"<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<a id=\"more\"></a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入项目目录创建requirements.txt文件</span></span><br><span class=\"line\">touch requirements.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class=\"line\">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>\n","site":{"data":{}},"excerpt":"<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。</p>","more":"<p></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入项目目录创建requirements.txt文件</span></span><br><span class=\"line\">touch requirements.txt</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class=\"line\">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>"},{"title":"正则表达式基础知识总结","date":"2017-12-07T07:48:36.000Z","_content":"最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch\n（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下\nGitHub，选择了[code4craft](https://github.com/code4craft)的[webmagic](https://github.com/code4craft/webmagic)\n作为项目的基础组件。<!-- more -->\n\n对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取\n这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。\n\n[0-9]这种形式的正则表达式称作字符组、字符集。\n\\d 字符组简写。\n(.) 匹配任意字符，通配符，一般不匹配行起始符。\n","source":"_posts/regular-expression-basic.md","raw":"---\ntitle: 正则表达式基础知识总结\ndate: 2017-12-07 15:48:36\ncategories: Regular\ntag: Regular\n---\n最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch\n（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下\nGitHub，选择了[code4craft](https://github.com/code4craft)的[webmagic](https://github.com/code4craft/webmagic)\n作为项目的基础组件。<!-- more -->\n\n对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取\n这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。\n\n[0-9]这种形式的正则表达式称作字符组、字符集。\n\\d 字符组简写。\n(.) 匹配任意字符，通配符，一般不匹配行起始符。\n","slug":"regular-expression-basic","published":1,"updated":"2019-06-22T09:00:31.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldt0039bis66ir08ys3","content":"<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a>的<a href=\"https://github.com/code4craft/webmagic\" target=\"_blank\" rel=\"noopener\">webmagic</a><br>作为项目的基础组件。<a id=\"more\"></a></p>\n<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>\n<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>\n","site":{"data":{}},"excerpt":"<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href=\"https://github.com/code4craft\" target=\"_blank\" rel=\"noopener\">code4craft</a>的<a href=\"https://github.com/code4craft/webmagic\" target=\"_blank\" rel=\"noopener\">webmagic</a><br>作为项目的基础组件。</p>","more":"<p></p>\n<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>\n<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>"},{"title":"提升国内服务器Github clone速度的方法","date":"2018-04-18T03:24:25.000Z","_content":"### Github 速度慢\n众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<!-- more -->\n\n### 修改hosts\n从`http://github.global.ssl.fastly.net.ipaddress.com/` 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。\n\n![fastly](raise-github-clone-speed/WX20180418-113942.png)\n``` Shell\nvim /etc/hosts\n# GitHub Start\n151.101.185.194 github.global.ssl.fastly.net\n```\n保存后自动生效\n\n![fastly](raise-github-clone-speed/WX20180418-114759@2x.png)\n通过下载Spring Boot 的源码，见上图，速度还不错。\n\n### 通过代理提升本地的速度\n一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。\n``` Shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n![socks5](raise-github-clone-speed/WX20180418-115544@2x.png)\n\n上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成`socks5://127.0.0.1:1086`。\n\n通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。\n","source":"_posts/raise-github-clone-speed.md","raw":"---\ntitle: 提升国内服务器Github clone速度的方法\ndate: 2018-04-18 11:24:25\ncategories: Linux\ntags: Shell\n---\n### Github 速度慢\n众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<!-- more -->\n\n### 修改hosts\n从`http://github.global.ssl.fastly.net.ipaddress.com/` 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。\n\n![fastly](raise-github-clone-speed/WX20180418-113942.png)\n``` Shell\nvim /etc/hosts\n# GitHub Start\n151.101.185.194 github.global.ssl.fastly.net\n```\n保存后自动生效\n\n![fastly](raise-github-clone-speed/WX20180418-114759@2x.png)\n通过下载Spring Boot 的源码，见上图，速度还不错。\n\n### 通过代理提升本地的速度\n一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。\n``` Shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n![socks5](raise-github-clone-speed/WX20180418-115544@2x.png)\n\n上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成`socks5://127.0.0.1:1086`。\n\n通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。\n","slug":"raise-github-clone-speed","published":1,"updated":"2019-06-22T09:00:25.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldu003ebis6dip3uhhh","content":"<h3 id=\"Github-速度慢\"><a href=\"#Github-速度慢\" class=\"headerlink\" title=\"Github 速度慢\"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<a id=\"more\"></a></p>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>\n<p><img src=\"/.com//WX20180418-113942.png\" alt=\"fastly\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> GitHub Start</span></span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n\n<p>保存后自动生效</p>\n<p><img src=\"/.com//WX20180418-114759@2x.png\" alt=\"fastly\"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>\n<h3 id=\"通过代理提升本地的速度\"><a href=\"#通过代理提升本地的速度\" class=\"headerlink\" title=\"通过代理提升本地的速度\"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class=\"line\">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180418-115544@2x.png\" alt=\"socks5\"></p>\n<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>\n<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Github-速度慢\"><a href=\"#Github-速度慢\" class=\"headerlink\" title=\"Github 速度慢\"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。</p>","more":"<p></p>\n<h3 id=\"修改hosts\"><a href=\"#修改hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>\n<p><img src=\"/.com//WX20180418-113942.png\" alt=\"fastly\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> GitHub Start</span></span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n\n<p>保存后自动生效</p>\n<p><img src=\"/.com//WX20180418-114759@2x.png\" alt=\"fastly\"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>\n<h3 id=\"通过代理提升本地的速度\"><a href=\"#通过代理提升本地的速度\" class=\"headerlink\" title=\"通过代理提升本地的速度\"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br><span class=\"line\">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class=\"line\">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//WX20180418-115544@2x.png\" alt=\"socks5\"></p>\n<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>\n<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>"},{"title":"服务器科学上网","date":"2017-12-02T08:19:31.000Z","_content":"因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<!-- more -->\n### 准备\n- 两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4\n- privoxy 包\n\n### 开始\n先用ssh 命令进行服务器socks5 连接接\n``` bash\n$ ssh -f -N -D bindaddress:port name@server\n$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77\n```\n- -f\n输入密码后进入后台模式\n(Requests ssh to go to background just before command execution.)\n- -N\n不执行远程命令,用于端口转发\n( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)\n- -D\nsocket5代理\n(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)\n- -L\ntcp转发\n(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)\n- -C\n使用数据压缩,网速快时会影响速度\n(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)\n\nbindaddress ：指定绑定ip地址\nport ： 指定侦听端口\nname： ssh服务器登录名\nserver： ssh服务器地址\n\n运行完上面的命令就进行socks5连接了\n可以执行下面的命令查看端口是否打开\n``` bash\n$ netstat -nltp\n```\n如果能看到指定的端口打开(1080端口)就说明正常连接了。\n\n### 安装privoxy\n``` bash\n$ yum install privoxy  -y # 使用yum 安装比较方便，也可以使用源码安装\n```\n安装完成后需要进行配置，否则无法正常访问\n``` bash\n$ vim /etc/privoxy/config\n# :783: 找到 783行，去掉前面的注释符号，端口可以随便改\n$ listen-address 127.0.0.1:8118\n#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致\n$ forward-socks5t / 127.0.0.1:1080\n```\n### 修改环境变量开启代理\n``` bash\nvi /ect/profile\nexport https_proxy=http://127.0.0.1:8118\nexport http_proxy=http://127.0.0.1:8118\n# 之后执行source /etc/profile 使配置生效\n```\n\n### 启动privoxy、测试\n``` bash\n$ privoxy /etc/privoxy/config  #netstat -ntlp 查看8118端口\n$ wget www.google.com # 如果能下载则说明成功\n```\n### 后记\n使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢\n注释掉`/etc/profile` 内的内容，刷新配置。\n","source":"_posts/server-over-the-wall.md","raw":"---\ntitle: 服务器科学上网\ndate: 2017-12-02 16:19:31\ncategories: Linux\ntag: Shell\n---\n因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<!-- more -->\n### 准备\n- 两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4\n- privoxy 包\n\n### 开始\n先用ssh 命令进行服务器socks5 连接接\n``` bash\n$ ssh -f -N -D bindaddress:port name@server\n$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77\n```\n- -f\n输入密码后进入后台模式\n(Requests ssh to go to background just before command execution.)\n- -N\n不执行远程命令,用于端口转发\n( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)\n- -D\nsocket5代理\n(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)\n- -L\ntcp转发\n(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)\n- -C\n使用数据压缩,网速快时会影响速度\n(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)\n\nbindaddress ：指定绑定ip地址\nport ： 指定侦听端口\nname： ssh服务器登录名\nserver： ssh服务器地址\n\n运行完上面的命令就进行socks5连接了\n可以执行下面的命令查看端口是否打开\n``` bash\n$ netstat -nltp\n```\n如果能看到指定的端口打开(1080端口)就说明正常连接了。\n\n### 安装privoxy\n``` bash\n$ yum install privoxy  -y # 使用yum 安装比较方便，也可以使用源码安装\n```\n安装完成后需要进行配置，否则无法正常访问\n``` bash\n$ vim /etc/privoxy/config\n# :783: 找到 783行，去掉前面的注释符号，端口可以随便改\n$ listen-address 127.0.0.1:8118\n#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致\n$ forward-socks5t / 127.0.0.1:1080\n```\n### 修改环境变量开启代理\n``` bash\nvi /ect/profile\nexport https_proxy=http://127.0.0.1:8118\nexport http_proxy=http://127.0.0.1:8118\n# 之后执行source /etc/profile 使配置生效\n```\n\n### 启动privoxy、测试\n``` bash\n$ privoxy /etc/privoxy/config  #netstat -ntlp 查看8118端口\n$ wget www.google.com # 如果能下载则说明成功\n```\n### 后记\n使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢\n注释掉`/etc/profile` 内的内容，刷新配置。\n","slug":"server-over-the-wall","published":1,"updated":"2019-06-22T09:00:36.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldv003hbis6a8utahsl","content":"<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<a id=\"more\"></a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>\n<li>privoxy 包</li>\n</ul>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -f -N -D bindaddress:port name@server</span><br><span class=\"line\">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>\n<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>\n<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>\n<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>\n<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>\n</ul>\n<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>\n<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -nltp</span><br></pre></td></tr></table></figure>\n\n<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>\n<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install privoxy  -y <span class=\"comment\"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完成后需要进行配置，否则无法正常访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/privoxy/config</span><br><span class=\"line\"><span class=\"comment\"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class=\"line\">$ listen-address 127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class=\"line\">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改环境变量开启代理\"><a href=\"#修改环境变量开启代理\" class=\"headerlink\" title=\"修改环境变量开启代理\"></a>修改环境变量开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /ect/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动privoxy、测试\"><a href=\"#启动privoxy、测试\" class=\"headerlink\" title=\"启动privoxy、测试\"></a>启动privoxy、测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ privoxy /etc/privoxy/config  <span class=\"comment\">#netstat -ntlp 查看8118端口</span></span><br><span class=\"line\">$ wget www.google.com <span class=\"comment\"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>\n","site":{"data":{}},"excerpt":"<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。</p>","more":"<p></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>\n<li>privoxy 包</li>\n</ul>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -f -N -D bindaddress:port name@server</span><br><span class=\"line\">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>\n<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>\n<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>\n<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>\n<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>\n</ul>\n<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>\n<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -nltp</span><br></pre></td></tr></table></figure>\n\n<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>\n<h3 id=\"安装privoxy\"><a href=\"#安装privoxy\" class=\"headerlink\" title=\"安装privoxy\"></a>安装privoxy</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install privoxy  -y <span class=\"comment\"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完成后需要进行配置，否则无法正常访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/privoxy/config</span><br><span class=\"line\"><span class=\"comment\"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class=\"line\">$ listen-address 127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class=\"line\">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改环境变量开启代理\"><a href=\"#修改环境变量开启代理\" class=\"headerlink\" title=\"修改环境变量开启代理\"></a>修改环境变量开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /ect/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class=\"line\"><span class=\"comment\"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动privoxy、测试\"><a href=\"#启动privoxy、测试\" class=\"headerlink\" title=\"启动privoxy、测试\"></a>启动privoxy、测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ privoxy /etc/privoxy/config  <span class=\"comment\">#netstat -ntlp 查看8118端口</span></span><br><span class=\"line\">$ wget www.google.com <span class=\"comment\"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>"},{"title":"pandas学习笔记-3","date":"2018-09-26T08:19:09.000Z","_content":"\n#### 6.pandas数据排序([源码见demo6.py](https://github.com/junhuali/study-pandas/blob/master/demo6.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\n\nprint(movies['title'].sort_values(ascending=False))\n\nprint(movies['title'])\n\nprint(movies.sort_values('title'))\n\nprint(movies.sort_values('duration', ascending=False))\n\nprint(movies.head())\n\nprint(movies.sort_values(['content_rating', 'duration']))\n\n```\n#### 7.pandas通过列名过滤行数据([源码见demo7.py](https://github.com/junhuali/study-pandas/blob/master/demo7.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\nprint(movies.shape)\n\nprint(type(True))\n\nbooleans = []\nfor length in movies.duration:\n    if length >= 20:\n        booleans.append(True)\n    else:\n        booleans.append(False)\n\nbooleans[0:5]\n\nlen(booleans)\n\nis_long = pd.Series(booleans)\nis_long.head()\n\nis_long = movies.duration >= 200\nis_long.head()\nmovies['genre']\n\nmovies[movies.duration >= 200]['genre']\nmovies[is_long]\n```\n\np7\n讲解了使用sort_values() 方法对数据进行排序\np8\n讲解了通过指定的条件对数据进行筛选","source":"_posts/study-pandas-notes-3.md","raw":"---\ntitle: pandas学习笔记-3\ndate: 2018-09-26 16:19:09\ncategories: Python\ntags: pandas\n---\n\n#### 6.pandas数据排序([源码见demo6.py](https://github.com/junhuali/study-pandas/blob/master/demo6.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\n\nprint(movies['title'].sort_values(ascending=False))\n\nprint(movies['title'])\n\nprint(movies.sort_values('title'))\n\nprint(movies.sort_values('duration', ascending=False))\n\nprint(movies.head())\n\nprint(movies.sort_values(['content_rating', 'duration']))\n\n```\n#### 7.pandas通过列名过滤行数据([源码见demo7.py](https://github.com/junhuali/study-pandas/blob/master/demo7.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nprint(movies.head())\nprint(movies.shape)\n\nprint(type(True))\n\nbooleans = []\nfor length in movies.duration:\n    if length >= 20:\n        booleans.append(True)\n    else:\n        booleans.append(False)\n\nbooleans[0:5]\n\nlen(booleans)\n\nis_long = pd.Series(booleans)\nis_long.head()\n\nis_long = movies.duration >= 200\nis_long.head()\nmovies['genre']\n\nmovies[movies.duration >= 200]['genre']\nmovies[is_long]\n```\n\np7\n讲解了使用sort_values() 方法对数据进行排序\np8\n讲解了通过指定的条件对数据进行筛选","slug":"study-pandas-notes-3","published":1,"updated":"2018-09-26T09:39:24.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldx003lbis6lzzhfuz4","content":"<h4 id=\"6-pandas数据排序-源码见demo6-py\"><a href=\"#6-pandas数据排序-源码见demo6-py\" class=\"headerlink\" title=\"6.pandas数据排序(源码见demo6.py)\"></a>6.pandas数据排序(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo6.py\" target=\"_blank\" rel=\"noopener\">源码见demo6.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>].sort_values(ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'title'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'duration'</span>, ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values([<span class=\"string\">'content_rating'</span>, <span class=\"string\">'duration'</span>]))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-pandas通过列名过滤行数据-源码见demo7-py\"><a href=\"#7-pandas通过列名过滤行数据-源码见demo7-py\" class=\"headerlink\" title=\"7.pandas通过列名过滤行数据(源码见demo7.py)\"></a>7.pandas通过列名过滤行数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo7.py\" target=\"_blank\" rel=\"noopener\">源码见demo7.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\">print(movies.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">booleans = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> length <span class=\"keyword\">in</span> movies.duration:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">booleans[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">len(booleans)</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = pd.Series(booleans)</span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = movies.duration &gt;= <span class=\"number\">200</span></span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\">movies[<span class=\"string\">'genre'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">movies[movies.duration &gt;= <span class=\"number\">200</span>][<span class=\"string\">'genre'</span>]</span><br><span class=\"line\">movies[is_long]</span><br></pre></td></tr></table></figure>\n\n<p>p7<br>讲解了使用sort_values() 方法对数据进行排序<br>p8<br>讲解了通过指定的条件对数据进行筛选</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"6-pandas数据排序-源码见demo6-py\"><a href=\"#6-pandas数据排序-源码见demo6-py\" class=\"headerlink\" title=\"6.pandas数据排序(源码见demo6.py)\"></a>6.pandas数据排序(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo6.py\" target=\"_blank\" rel=\"noopener\">源码见demo6.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>].sort_values(ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies[<span class=\"string\">'title'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'title'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values(<span class=\"string\">'duration'</span>, ascending=<span class=\"literal\">False</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(movies.sort_values([<span class=\"string\">'content_rating'</span>, <span class=\"string\">'duration'</span>]))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-pandas通过列名过滤行数据-源码见demo7-py\"><a href=\"#7-pandas通过列名过滤行数据-源码见demo7-py\" class=\"headerlink\" title=\"7.pandas通过列名过滤行数据(源码见demo7.py)\"></a>7.pandas通过列名过滤行数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo7.py\" target=\"_blank\" rel=\"noopener\">源码见demo7.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">print(movies.head())</span><br><span class=\"line\">print(movies.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">booleans = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> length <span class=\"keyword\">in</span> movies.duration:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        booleans.append(<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">booleans[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">len(booleans)</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = pd.Series(booleans)</span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\"></span><br><span class=\"line\">is_long = movies.duration &gt;= <span class=\"number\">200</span></span><br><span class=\"line\">is_long.head()</span><br><span class=\"line\">movies[<span class=\"string\">'genre'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">movies[movies.duration &gt;= <span class=\"number\">200</span>][<span class=\"string\">'genre'</span>]</span><br><span class=\"line\">movies[is_long]</span><br></pre></td></tr></table></figure>\n\n<p>p7<br>讲解了使用sort_values() 方法对数据进行排序<br>p8<br>讲解了通过指定的条件对数据进行筛选</p>\n"},{"title":"CentOS7搭建socks5 服务","date":"2018-01-15T02:06:00.000Z","_content":"\n### 环境\n基于centsOS 7\nss5-3.8.9-8\n### 下载源文件\n``` shell\nwget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz\n\n#配置编译环境及安装编译SS5依赖组件\nyum -y install gcc automake make\nyum install gcc openldap-devel pam-devel openssl-devel\n```\n### 安装\n``` shell\ntar xf ss5-3.8.9-8.tar.gz\nmv ss5-3.8.9-8 ss5\ncd  ss5\n./configure\nmake && make install\n```\n### 启动脚本加执行权限\n``` shell\nchmod +x /etc/init.d/ss5\n```\n### 进行配置并启动\n``` shell\nvi /etc/sysconfig/ss5  \nSS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080\nsystemctl start ss5 #启动服务\n\n#增加用户登录权限\nvi /etc/opt/ss5/ss5.conf  \nauth 0.0.0.0/0 - u  \npermit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -\n\n#设置用户名和密码，一个用户和密码一行，用空格间隔\nvi /etc/opt/ss5/ss5.passwd  \nuser1 123456\nuser2 123456\n\n```\n","source":"_posts/socks5-server.md","raw":"---\ntitle: CentOS7搭建socks5 服务\ndate: 2018-01-15 10:06:00\ncategories: Linux\ntags: Socks5\n---\n\n### 环境\n基于centsOS 7\nss5-3.8.9-8\n### 下载源文件\n``` shell\nwget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz\n\n#配置编译环境及安装编译SS5依赖组件\nyum -y install gcc automake make\nyum install gcc openldap-devel pam-devel openssl-devel\n```\n### 安装\n``` shell\ntar xf ss5-3.8.9-8.tar.gz\nmv ss5-3.8.9-8 ss5\ncd  ss5\n./configure\nmake && make install\n```\n### 启动脚本加执行权限\n``` shell\nchmod +x /etc/init.d/ss5\n```\n### 进行配置并启动\n``` shell\nvi /etc/sysconfig/ss5  \nSS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080\nsystemctl start ss5 #启动服务\n\n#增加用户登录权限\nvi /etc/opt/ss5/ss5.conf  \nauth 0.0.0.0/0 - u  \npermit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -\n\n#设置用户名和密码，一个用户和密码一行，用空格间隔\nvi /etc/opt/ss5/ss5.passwd  \nuser1 123456\nuser2 123456\n\n```\n","slug":"socks5-server","published":1,"updated":"2018-02-09T05:26:33.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkldy003obis63kykcad3","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置编译环境及安装编译SS5依赖组件</span></span><br><span class=\"line\">yum -y install gcc automake make</span><br><span class=\"line\">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf ss5-3.8.9-8.tar.gz</span><br><span class=\"line\">mv ss5-3.8.9-8 ss5</span><br><span class=\"line\">cd  ss5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动脚本加执行权限\"><a href=\"#启动脚本加执行权限\" class=\"headerlink\" title=\"启动脚本加执行权限\"></a>启动脚本加执行权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行配置并启动\"><a href=\"#进行配置并启动\" class=\"headerlink\" title=\"进行配置并启动\"></a>进行配置并启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/ss5  </span><br><span class=\"line\">SS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080</span><br><span class=\"line\">systemctl start ss5 #启动服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加用户登录权限</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.conf  </span><br><span class=\"line\">auth 0.0.0.0/0 - u  </span><br><span class=\"line\">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.passwd  </span><br><span class=\"line\">user1 123456</span><br><span class=\"line\">user2 123456</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>\n<h3 id=\"下载源文件\"><a href=\"#下载源文件\" class=\"headerlink\" title=\"下载源文件\"></a>下载源文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置编译环境及安装编译SS5依赖组件</span></span><br><span class=\"line\">yum -y install gcc automake make</span><br><span class=\"line\">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf ss5-3.8.9-8.tar.gz</span><br><span class=\"line\">mv ss5-3.8.9-8 ss5</span><br><span class=\"line\">cd  ss5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动脚本加执行权限\"><a href=\"#启动脚本加执行权限\" class=\"headerlink\" title=\"启动脚本加执行权限\"></a>启动脚本加执行权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进行配置并启动\"><a href=\"#进行配置并启动\" class=\"headerlink\" title=\"进行配置并启动\"></a>进行配置并启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/ss5  </span><br><span class=\"line\">SS5_OPTS=\" -u root -b 0.0.0.0:18080\" #绑定端口为18080</span><br><span class=\"line\">systemctl start ss5 #启动服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">增加用户登录权限</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.conf  </span><br><span class=\"line\">auth 0.0.0.0/0 - u  </span><br><span class=\"line\">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class=\"line\">vi /etc/opt/ss5/ss5.passwd  </span><br><span class=\"line\">user1 123456</span><br><span class=\"line\">user2 123456</span><br></pre></td></tr></table></figure>\n\n"},{"title":"pandas学习笔记-2","date":"2018-09-25T15:10:01.000Z","_content":"\n#### 3.为什么pandas命令以括号结尾，其他的命令不呢？([源码见demo3.py](https://github.com/junhuali/study-pandas/blob/master/demo3.py))\n``` python \n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nhead = movies.head()\nprint(head)\n\ndescribe = movies.describe()\nprint(describe)\n\nshape = movies.shape\nprint(shape)\n\ndtypes = movies.dtypes\nprint(dtypes)\n\nprint(type(movies))\n\nmovies.describe(include=['object'])\n```\n\n#### 4. 在pandas DataFrame 中重命名列名([源码见demo4.py](https://github.com/junhuali/study-pandas/blob/master/demo4.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\nhead = ufo.head()\n\nprint(head)\n\nprint(ufo.columns)\n\nufo.rename(columns={'Colors Reported': 'Colors_Reported', 'Shape Reported': 'Shape_Reported'}, inplace=True)\n\nprint(ufo.columns)\n\nufo_cols = {'city', 'colors reported', 'shape reported', 'state', 'time'}\n\nufo.columns = ufo_cols\n\nprint(ufo.head())\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv', names=ufo_cols, header=0)\nprint(ufo.head())\n\nprint(ufo.columns)\n\nufo.columns = ufo.columns.str.replace(' ', '_')\nprint(ufo.columns)\n\n```\n#### 5.在pandas DataFrame 中移除指定的行和列([源码见demo5.py](https://github.com/junhuali/study-pandas/blob/master/demo5.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\nprint(ufo.head())\nprint(ufo.shape)\n\n# axis=0 按行 axi=1 按列\nufo.drop('Colors Reported', axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop(['City', 'State'], axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop([0, 1], axis=0, inplace=True)\nprint(ufo.head())\nprint(ufo.shape)\n```\n\n视频p4\n讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上`shift+tab`键，\n查看对应的说明。\n视频p5\n讲解了通过几种方法修改数据的列名\n视频p6\n讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗\n","source":"_posts/study-pandas-notes-2.md","raw":"---\ntitle: pandas学习笔记-2\ndate: 2018-09-25 23:10:01\ncategories: Python\ntags: pandas\n---\n\n#### 3.为什么pandas命令以括号结尾，其他的命令不呢？([源码见demo3.py](https://github.com/junhuali/study-pandas/blob/master/demo3.py))\n``` python \n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nmovies = pd.read_csv('https://blog.searchinfogo.com/download/data/data/imdb_1000.csv')\nhead = movies.head()\nprint(head)\n\ndescribe = movies.describe()\nprint(describe)\n\nshape = movies.shape\nprint(shape)\n\ndtypes = movies.dtypes\nprint(dtypes)\n\nprint(type(movies))\n\nmovies.describe(include=['object'])\n```\n\n#### 4. 在pandas DataFrame 中重命名列名([源码见demo4.py](https://github.com/junhuali/study-pandas/blob/master/demo4.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\nhead = ufo.head()\n\nprint(head)\n\nprint(ufo.columns)\n\nufo.rename(columns={'Colors Reported': 'Colors_Reported', 'Shape Reported': 'Shape_Reported'}, inplace=True)\n\nprint(ufo.columns)\n\nufo_cols = {'city', 'colors reported', 'shape reported', 'state', 'time'}\n\nufo.columns = ufo_cols\n\nprint(ufo.head())\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv', names=ufo_cols, header=0)\nprint(ufo.head())\n\nprint(ufo.columns)\n\nufo.columns = ufo.columns.str.replace(' ', '_')\nprint(ufo.columns)\n\n```\n#### 5.在pandas DataFrame 中移除指定的行和列([源码见demo5.py](https://github.com/junhuali/study-pandas/blob/master/demo5.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\nprint(ufo.head())\nprint(ufo.shape)\n\n# axis=0 按行 axi=1 按列\nufo.drop('Colors Reported', axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop(['City', 'State'], axis=1, inplace=True)\nprint(ufo.head())\n\nufo.drop([0, 1], axis=0, inplace=True)\nprint(ufo.head())\nprint(ufo.shape)\n```\n\n视频p4\n讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上`shift+tab`键，\n查看对应的说明。\n视频p5\n讲解了通过几种方法修改数据的列名\n视频p6\n讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗\n","slug":"study-pandas-notes-2","published":1,"updated":"2018-09-26T08:29:19.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkle0003sbis6rpjcz0zx","content":"<h4 id=\"3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\"><a href=\"#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\" class=\"headerlink\" title=\"3.为什么pandas命令以括号结尾，其他的命令不呢？(源码见demo3.py)\"></a>3.为什么pandas命令以括号结尾，其他的命令不呢？(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo3.py\" target=\"_blank\" rel=\"noopener\">源码见demo3.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">head = movies.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">describe = movies.describe()</span><br><span class=\"line\">print(describe)</span><br><span class=\"line\"></span><br><span class=\"line\">shape = movies.shape</span><br><span class=\"line\">print(shape)</span><br><span class=\"line\"></span><br><span class=\"line\">dtypes = movies.dtypes</span><br><span class=\"line\">print(dtypes)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(movies))</span><br><span class=\"line\"></span><br><span class=\"line\">movies.describe(include=[<span class=\"string\">'object'</span>])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在pandas-DataFrame-中重命名列名-源码见demo4-py\"><a href=\"#4-在pandas-DataFrame-中重命名列名-源码见demo4-py\" class=\"headerlink\" title=\"4. 在pandas DataFrame 中重命名列名(源码见demo4.py)\"></a>4. 在pandas DataFrame 中重命名列名(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo4.py\" target=\"_blank\" rel=\"noopener\">源码见demo4.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">head = ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.rename(columns=&#123;<span class=\"string\">'Colors Reported'</span>: <span class=\"string\">'Colors_Reported'</span>, <span class=\"string\">'Shape Reported'</span>: <span class=\"string\">'Shape_Reported'</span>&#125;, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo_cols = &#123;<span class=\"string\">'city'</span>, <span class=\"string\">'colors reported'</span>, <span class=\"string\">'shape reported'</span>, <span class=\"string\">'state'</span>, <span class=\"string\">'time'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo_cols</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>, names=ufo_cols, header=<span class=\"number\">0</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo.columns.str.replace(<span class=\"string\">' '</span>, <span class=\"string\">'_'</span>)</span><br><span class=\"line\">print(ufo.columns)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\"><a href=\"#5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\" class=\"headerlink\" title=\"5.在pandas DataFrame 中移除指定的行和列(源码见demo5.py)\"></a>5.在pandas DataFrame 中移除指定的行和列(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo5.py\" target=\"_blank\" rel=\"noopener\">源码见demo5.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># axis=0 按行 axi=1 按列</span></span><br><span class=\"line\">ufo.drop(<span class=\"string\">'Colors Reported'</span>, axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"string\">'City'</span>, <span class=\"string\">'State'</span>], axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"number\">0</span>, <span class=\"number\">1</span>], axis=<span class=\"number\">0</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br></pre></td></tr></table></figure>\n\n<p>视频p4<br>讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上<code>shift+tab</code>键，<br>查看对应的说明。<br>视频p5<br>讲解了通过几种方法修改数据的列名<br>视频p6<br>讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\"><a href=\"#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py\" class=\"headerlink\" title=\"3.为什么pandas命令以括号结尾，其他的命令不呢？(源码见demo3.py)\"></a>3.为什么pandas命令以括号结尾，其他的命令不呢？(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo3.py\" target=\"_blank\" rel=\"noopener\">源码见demo3.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">movies = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class=\"line\">head = movies.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">describe = movies.describe()</span><br><span class=\"line\">print(describe)</span><br><span class=\"line\"></span><br><span class=\"line\">shape = movies.shape</span><br><span class=\"line\">print(shape)</span><br><span class=\"line\"></span><br><span class=\"line\">dtypes = movies.dtypes</span><br><span class=\"line\">print(dtypes)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(movies))</span><br><span class=\"line\"></span><br><span class=\"line\">movies.describe(include=[<span class=\"string\">'object'</span>])</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在pandas-DataFrame-中重命名列名-源码见demo4-py\"><a href=\"#4-在pandas-DataFrame-中重命名列名-源码见demo4-py\" class=\"headerlink\" title=\"4. 在pandas DataFrame 中重命名列名(源码见demo4.py)\"></a>4. 在pandas DataFrame 中重命名列名(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo4.py\" target=\"_blank\" rel=\"noopener\">源码见demo4.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">head = ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.rename(columns=&#123;<span class=\"string\">'Colors Reported'</span>: <span class=\"string\">'Colors_Reported'</span>, <span class=\"string\">'Shape Reported'</span>: <span class=\"string\">'Shape_Reported'</span>&#125;, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo_cols = &#123;<span class=\"string\">'city'</span>, <span class=\"string\">'colors reported'</span>, <span class=\"string\">'shape reported'</span>, <span class=\"string\">'state'</span>, <span class=\"string\">'time'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo_cols</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>, names=ufo_cols, header=<span class=\"number\">0</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo.columns)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.columns = ufo.columns.str.replace(<span class=\"string\">' '</span>, <span class=\"string\">'_'</span>)</span><br><span class=\"line\">print(ufo.columns)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\"><a href=\"#5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py\" class=\"headerlink\" title=\"5.在pandas DataFrame 中移除指定的行和列(源码见demo5.py)\"></a>5.在pandas DataFrame 中移除指定的行和列(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo5.py\" target=\"_blank\" rel=\"noopener\">源码见demo5.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># axis=0 按行 axi=1 按列</span></span><br><span class=\"line\">ufo.drop(<span class=\"string\">'Colors Reported'</span>, axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"string\">'City'</span>, <span class=\"string\">'State'</span>], axis=<span class=\"number\">1</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.drop([<span class=\"number\">0</span>, <span class=\"number\">1</span>], axis=<span class=\"number\">0</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(ufo.head())</span><br><span class=\"line\">print(ufo.shape)</span><br></pre></td></tr></table></figure>\n\n<p>视频p4<br>讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上<code>shift+tab</code>键，<br>查看对应的说明。<br>视频p5<br>讲解了通过几种方法修改数据的列名<br>视频p6<br>讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗</p>\n"},{"title":"pandas学习笔记","date":"2018-09-21T06:02:16.000Z","_content":"![pandas](study-pandas-notes/pandas.png)\n最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。\n\n什么是pandas\n> pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\n完整的文档可以查看pandas的[Cookbook](http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook)\n\n视频地址:\n[bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas](https://www.bilibili.com/video/av6785636/)\n\n### 环境安装\n- 安装python环境\n- 安装pandas\npython 环境的安装，可以看之前的文章，在centos7上安装python。\n\npandas安装：\n1.Mac上使用brew `brew cask install anaconda`\n2.python -m pip install pandas https://pypi.douban.com/simple/ \n推荐使用第一种，anaconda的方式安装，比较方便\n使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如`matplotlib`;\n### 视频使用的资源\n[百度网盘]](https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw) 密码：dr78 （来自bilibili用户）\n视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址\n\n### 目录\n#### 1.读取表格数据到pandas中([源码见demo1.py](https://github.com/junhuali/study-pandas/blob/master/demo1.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\n''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''\n\norders = pd.read_table('https://blog.searchinfogo.com/download/data/data/chipotle.tsv')\n\nprint(orders)\n\nhead = orders.head()\nprint(head)\n\nuser_cols = ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nusers = pd.read_table(\"https://blog.searchinfogo.com/download/data/data/u.user\", sep='|', header=None, names=user_cols)\nprint(users)\n\n```\n#### 2.从csv中读取数据([源码见demo2.py](https://github.com/junhuali/study-pandas/blob/master/demo2.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\ntype = type(ufo)\n\nprint(type)\n\nufo.head()\n\ntype(ufo['City'])\n\nprint(ufo['City'])\n\nufo.shape\n\nufo.City + ufo.State\n\nufo['Location'] = ufo.City + ',' + ufo.State\n\nprint(ufo['Location'])\n\n```\n总结：\n上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及\n生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到\npandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。\n\n\n\n\n","source":"_posts/study-pandas-notes.md","raw":"---\ntitle: pandas学习笔记\ndate: 2018-09-21 14:02:16\ncategories: Python\ntags: pandas\n---\n![pandas](study-pandas-notes/pandas.png)\n最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。\n\n什么是pandas\n> pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n\n完整的文档可以查看pandas的[Cookbook](http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook)\n\n视频地址:\n[bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas](https://www.bilibili.com/video/av6785636/)\n\n### 环境安装\n- 安装python环境\n- 安装pandas\npython 环境的安装，可以看之前的文章，在centos7上安装python。\n\npandas安装：\n1.Mac上使用brew `brew cask install anaconda`\n2.python -m pip install pandas https://pypi.douban.com/simple/ \n推荐使用第一种，anaconda的方式安装，比较方便\n使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如`matplotlib`;\n### 视频使用的资源\n[百度网盘]](https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw) 密码：dr78 （来自bilibili用户）\n视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址\n\n### 目录\n#### 1.读取表格数据到pandas中([源码见demo1.py](https://github.com/junhuali/study-pandas/blob/master/demo1.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\n''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''\n\norders = pd.read_table('https://blog.searchinfogo.com/download/data/data/chipotle.tsv')\n\nprint(orders)\n\nhead = orders.head()\nprint(head)\n\nuser_cols = ['user_id', 'age', 'gender', 'occupation', 'zip_code']\nusers = pd.read_table(\"https://blog.searchinfogo.com/download/data/data/u.user\", sep='|', header=None, names=user_cols)\nprint(users)\n\n```\n#### 2.从csv中读取数据([源码见demo2.py](https://github.com/junhuali/study-pandas/blob/master/demo2.py))\n``` python\n#!/usr/bin/env python\n# encoding: utf-8\n\nimport pandas as pd\n\nufo = pd.read_csv('https://blog.searchinfogo.com/download/data/data/ufo.csv')\n\ntype = type(ufo)\n\nprint(type)\n\nufo.head()\n\ntype(ufo['City'])\n\nprint(ufo['City'])\n\nufo.shape\n\nufo.City + ufo.State\n\nufo['Location'] = ufo.City + ',' + ufo.State\n\nprint(ufo['Location'])\n\n```\n总结：\n上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及\n生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到\npandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。\n\n\n\n\n","slug":"study-pandas-notes","published":1,"updated":"2018-09-26T08:27:59.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkle2003ubis6nioz81hr","content":"<p><img src=\"/.com//pandas.png\" alt=\"pandas\"><br>最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。</p>\n<p>什么是pandas</p>\n<blockquote>\n<p>pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>\n</blockquote>\n<p>完整的文档可以查看pandas的<a href=\"http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook\" target=\"_blank\" rel=\"noopener\">Cookbook</a></p>\n<p>视频地址:<br><a href=\"https://www.bilibili.com/video/av6785636/\" target=\"_blank\" rel=\"noopener\">bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas</a></p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><ul>\n<li>安装python环境</li>\n<li>安装pandas<br>python 环境的安装，可以看之前的文章，在centos7上安装python。</li>\n</ul>\n<p>pandas安装：<br>1.Mac上使用brew <code>brew cask install anaconda</code><br>2.python -m pip install pandas <a href=\"https://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple/</a><br>推荐使用第一种，anaconda的方式安装，比较方便<br>使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如<code>matplotlib</code>;</p>\n<h3 id=\"视频使用的资源\"><a href=\"#视频使用的资源\" class=\"headerlink\" title=\"视频使用的资源\"></a>视频使用的资源</h3><p>[百度网盘]](<a href=\"https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw</a>) 密码：dr78 （来自bilibili用户）<br>视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><h4 id=\"1-读取表格数据到pandas中-源码见demo1-py\"><a href=\"#1-读取表格数据到pandas中-源码见demo1-py\" class=\"headerlink\" title=\"1.读取表格数据到pandas中(源码见demo1.py)\"></a>1.读取表格数据到pandas中(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo1.py\" target=\"_blank\" rel=\"noopener\">源码见demo1.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">orders = pd.read_table(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/chipotle.tsv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(orders)</span><br><span class=\"line\"></span><br><span class=\"line\">head = orders.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">user_cols = [<span class=\"string\">'user_id'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'gender'</span>, <span class=\"string\">'occupation'</span>, <span class=\"string\">'zip_code'</span>]</span><br><span class=\"line\">users = pd.read_table(<span class=\"string\">\"https://blog.searchinfogo.com/download/data/data/u.user\"</span>, sep=<span class=\"string\">'|'</span>, header=<span class=\"literal\">None</span>, names=user_cols)</span><br><span class=\"line\">print(users)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-从csv中读取数据-源码见demo2-py\"><a href=\"#2-从csv中读取数据-源码见demo2-py\" class=\"headerlink\" title=\"2.从csv中读取数据(源码见demo2.py)\"></a>2.从csv中读取数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo2.py\" target=\"_blank\" rel=\"noopener\">源码见demo2.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">type = type(ufo)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">type(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.shape</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.City + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">ufo[<span class=\"string\">'Location'</span>] = ufo.City + <span class=\"string\">','</span> + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'Location'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>总结：<br>上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及<br>生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到<br>pandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/.com//pandas.png\" alt=\"pandas\"><br>最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。</p>\n<p>什么是pandas</p>\n<blockquote>\n<p>pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>\n</blockquote>\n<p>完整的文档可以查看pandas的<a href=\"http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook\" target=\"_blank\" rel=\"noopener\">Cookbook</a></p>\n<p>视频地址:<br><a href=\"https://www.bilibili.com/video/av6785636/\" target=\"_blank\" rel=\"noopener\">bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas</a></p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><ul>\n<li>安装python环境</li>\n<li>安装pandas<br>python 环境的安装，可以看之前的文章，在centos7上安装python。</li>\n</ul>\n<p>pandas安装：<br>1.Mac上使用brew <code>brew cask install anaconda</code><br>2.python -m pip install pandas <a href=\"https://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple/</a><br>推荐使用第一种，anaconda的方式安装，比较方便<br>使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如<code>matplotlib</code>;</p>\n<h3 id=\"视频使用的资源\"><a href=\"#视频使用的资源\" class=\"headerlink\" title=\"视频使用的资源\"></a>视频使用的资源</h3><p>[百度网盘]](<a href=\"https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw</a>) 密码：dr78 （来自bilibili用户）<br>视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><h4 id=\"1-读取表格数据到pandas中-源码见demo1-py\"><a href=\"#1-读取表格数据到pandas中-源码见demo1-py\" class=\"headerlink\" title=\"1.读取表格数据到pandas中(源码见demo1.py)\"></a>1.读取表格数据到pandas中(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo1.py\" target=\"_blank\" rel=\"noopener\">源码见demo1.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">orders = pd.read_table(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/chipotle.tsv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(orders)</span><br><span class=\"line\"></span><br><span class=\"line\">head = orders.head()</span><br><span class=\"line\">print(head)</span><br><span class=\"line\"></span><br><span class=\"line\">user_cols = [<span class=\"string\">'user_id'</span>, <span class=\"string\">'age'</span>, <span class=\"string\">'gender'</span>, <span class=\"string\">'occupation'</span>, <span class=\"string\">'zip_code'</span>]</span><br><span class=\"line\">users = pd.read_table(<span class=\"string\">\"https://blog.searchinfogo.com/download/data/data/u.user\"</span>, sep=<span class=\"string\">'|'</span>, header=<span class=\"literal\">None</span>, names=user_cols)</span><br><span class=\"line\">print(users)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-从csv中读取数据-源码见demo2-py\"><a href=\"#2-从csv中读取数据-源码见demo2-py\" class=\"headerlink\" title=\"2.从csv中读取数据(源码见demo2.py)\"></a>2.从csv中读取数据(<a href=\"https://github.com/junhuali/study-pandas/blob/master/demo2.py\" target=\"_blank\" rel=\"noopener\">源码见demo2.py</a>)</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">ufo = pd.read_csv(<span class=\"string\">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">type = type(ufo)</span><br><span class=\"line\"></span><br><span class=\"line\">print(type)</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.head()</span><br><span class=\"line\"></span><br><span class=\"line\">type(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'City'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.shape</span><br><span class=\"line\"></span><br><span class=\"line\">ufo.City + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">ufo[<span class=\"string\">'Location'</span>] = ufo.City + <span class=\"string\">','</span> + ufo.State</span><br><span class=\"line\"></span><br><span class=\"line\">print(ufo[<span class=\"string\">'Location'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>总结：<br>上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及<br>生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到<br>pandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。</p>\n"},{"title":"学习Shell命令行总结","date":"2018-04-02T12:38:29.000Z","_content":"\n### 了解linux系统内核\n内核的主要作用\n- 系统内存管理\n- 软件程序管理\n- 硬件设备管理\n- 文件系统管理\n\n什么是虚拟内存\n内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。\n平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用\nswap分区，原因是因为`开启SWAP可能会因频繁换页操作，导致IO性能下降`，如果内存足够的情况下，建议关闭\nswap 分区。\n\n软件程序管理\nLinux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。\n内核创建第一个进程称为`init进程`，来启动系统上其他进程，并将其加载到虚拟内存中。\n\n一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。\n另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。\n\nLinux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好\n的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）\n\nCentOS系统有7个运行级别(runlevel)\n\n运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆\n运行级别2：多用户状态(没有NFS)\n运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登陆后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n\n不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。\n\n硬件设备管理\n内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动\n- 编译进内核的设备驱动代码\n- 可插入内核的设备驱动代码（这种方式比较方便，利于维护）\n\n文件系统管理\nLinux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的\n支持。\n\n\nShell 的种类\n在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。\n- ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容\n- korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性\n- tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell\n- zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。\n\nLinux 图形化桌面 基本上用不到，就略过了。\n\n文件路径\n- 相对路径\n- 绝对路劲\n`pwd` 命令查询当前所在的目录\n`ls -F` 显示出文件夹和普通文件\n`ls -F -R` -R 递归文件夹\n\n文件拷贝\n`copy -R` 拷贝整个目录和文件\n\n链接文件\n- 符号链接\n- 硬链接\n`ln -s`\n`ln`\n\n2018年07月11日11:20:39（更新）\n### 环境变量\n- 全局变量\n- 局部变量\n\n\n","source":"_posts/study-shell.md","raw":"---\ntitle: 学习Shell命令行总结\ndate: 2018-04-02 20:38:29\ncategories: Shell\ntags: Shell\n---\n\n### 了解linux系统内核\n内核的主要作用\n- 系统内存管理\n- 软件程序管理\n- 硬件设备管理\n- 文件系统管理\n\n什么是虚拟内存\n内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。\n平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用\nswap分区，原因是因为`开启SWAP可能会因频繁换页操作，导致IO性能下降`，如果内存足够的情况下，建议关闭\nswap 分区。\n\n软件程序管理\nLinux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。\n内核创建第一个进程称为`init进程`，来启动系统上其他进程，并将其加载到虚拟内存中。\n\n一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。\n另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。\n\nLinux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好\n的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）\n\nCentOS系统有7个运行级别(runlevel)\n\n运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动\n运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆\n运行级别2：多用户状态(没有NFS)\n运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式\n运行级别4：系统未使用，保留\n运行级别5：X11控制台，登陆后进入图形GUI模式\n运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动\n\n不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。\n\n硬件设备管理\n内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动\n- 编译进内核的设备驱动代码\n- 可插入内核的设备驱动代码（这种方式比较方便，利于维护）\n\n文件系统管理\nLinux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的\n支持。\n\n\nShell 的种类\n在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。\n- ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容\n- korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性\n- tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell\n- zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。\n\nLinux 图形化桌面 基本上用不到，就略过了。\n\n文件路径\n- 相对路径\n- 绝对路劲\n`pwd` 命令查询当前所在的目录\n`ls -F` 显示出文件夹和普通文件\n`ls -F -R` -R 递归文件夹\n\n文件拷贝\n`copy -R` 拷贝整个目录和文件\n\n链接文件\n- 符号链接\n- 硬链接\n`ln -s`\n`ln`\n\n2018年07月11日11:20:39（更新）\n### 环境变量\n- 全局变量\n- 局部变量\n\n\n","slug":"study-shell","published":1,"updated":"2018-09-26T08:27:58.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkle3003ybis6nwpduq23","content":"<h3 id=\"了解linux系统内核\"><a href=\"#了解linux系统内核\" class=\"headerlink\" title=\"了解linux系统内核\"></a>了解linux系统内核</h3><p>内核的主要作用</p>\n<ul>\n<li>系统内存管理</li>\n<li>软件程序管理</li>\n<li>硬件设备管理</li>\n<li>文件系统管理</li>\n</ul>\n<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>\n<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>\n<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>\n<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>\n<p>CentOS系统有7个运行级别(runlevel)</p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>\n<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>\n</ul>\n<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>\n<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>\n<ul>\n<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>\n<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>\n<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>\n<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>\n</ul>\n<p>Linux 图形化桌面 基本上用不到，就略过了。</p>\n<p>文件路径</p>\n<ul>\n<li>相对路径</li>\n<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>\n</ul>\n<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>\n<p>链接文件</p>\n<ul>\n<li>符号链接</li>\n<li>硬链接<br><code>ln -s</code><br><code>ln</code></li>\n</ul>\n<p>2018年07月11日11:20:39（更新）</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><ul>\n<li>全局变量</li>\n<li>局部变量</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"了解linux系统内核\"><a href=\"#了解linux系统内核\" class=\"headerlink\" title=\"了解linux系统内核\"></a>了解linux系统内核</h3><p>内核的主要作用</p>\n<ul>\n<li>系统内存管理</li>\n<li>软件程序管理</li>\n<li>硬件设备管理</li>\n<li>文件系统管理</li>\n</ul>\n<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>\n<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>\n<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>\n<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>\n<p>CentOS系统有7个运行级别(runlevel)</p>\n<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>\n<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>\n<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>\n<ul>\n<li>编译进内核的设备驱动代码</li>\n<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>\n</ul>\n<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>\n<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>\n<ul>\n<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>\n<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>\n<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>\n<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>\n</ul>\n<p>Linux 图形化桌面 基本上用不到，就略过了。</p>\n<p>文件路径</p>\n<ul>\n<li>相对路径</li>\n<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>\n</ul>\n<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>\n<p>链接文件</p>\n<ul>\n<li>符号链接</li>\n<li>硬链接<br><code>ln -s</code><br><code>ln</code></li>\n</ul>\n<p>2018年07月11日11:20:39（更新）</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><ul>\n<li>全局变量</li>\n<li>局部变量</li>\n</ul>\n"},{"title":"swagger2.9.2的NumberFormatException","date":"2019-05-20T08:00:45.000Z","_content":"SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<!-- more -->\n``` java\n[ WARN ] [2019-05-20 16:39:47] [http-nio-8080-exec-6] i.s.m.p.AbstractSerializableParameter [421]  - Illegal DefaultValue 0 for parameter type integer\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n  .....\n```\n可以看到是在`Long.parseLong()`转换的时候报错了\n### 解决办法\n试了网上说的增加默认值，但是在我本地没有生效\n``` java\n@ApiModelProperty(value = \"id\",example = \"123\")\n```\n第二种方法\npom中增加新的依赖\n``` xml\n     # 默认的配置\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger-ui</artifactId>\n               <version>2.9.2</version>\n           </dependency>\n\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger2</artifactId>\n               <version>2</version>\n           </dependency>\n    # 增加两个配置\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-annotations</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-models</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n```\n增加上面的配置后，就不再报错了。\n#### 原因\n1.5.20的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n   public Object getExample() {\n       if (this.example == null) {\n           return null;\n       } else {\n           try {\n               if (\"integer\".equals(this.type)) {\n                   return Long.valueOf(this.example);\n               }\n\n               if (\"number\".equals(this.type)) {\n                   return Double.valueOf(this.example);\n               }\n\n               if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                   return Boolean.valueOf(this.example);\n               }\n           } catch (NumberFormatException var2) {\n               LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n           }\n\n           return this.example;\n       }\n   }\n```\n1.5.22 的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n    public Object getExample() {\n        if (this.example != null && !this.example.isEmpty()) {\n            try {\n                if (\"integer\".equals(this.type)) {\n                    return Long.valueOf(this.example);\n                }\n\n                if (\"number\".equals(this.type)) {\n                    return Double.valueOf(this.example);\n                }\n\n                if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                    return Boolean.valueOf(this.example);\n                }\n            } catch (NumberFormatException var2) {\n                LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n            }\n\n            return this.example;\n        } else {\n            return this.example;\n        }\n    }\n```\n从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。\n","source":"_posts/swagger-2.9.2-NumberFormatException.md","raw":"---\ntitle: swagger2.9.2的NumberFormatException\ndate: 2019-05-20 16:00:45\ncategories: Java\ntags: Swagger2\n---\nSpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<!-- more -->\n``` java\n[ WARN ] [2019-05-20 16:39:47] [http-nio-8080-exec-6] i.s.m.p.AbstractSerializableParameter [421]  - Illegal DefaultValue 0 for parameter type integer\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n  .....\n```\n可以看到是在`Long.parseLong()`转换的时候报错了\n### 解决办法\n试了网上说的增加默认值，但是在我本地没有生效\n``` java\n@ApiModelProperty(value = \"id\",example = \"123\")\n```\n第二种方法\npom中增加新的依赖\n``` xml\n     # 默认的配置\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger-ui</artifactId>\n               <version>2.9.2</version>\n           </dependency>\n\n           <dependency>\n               <groupId>io.springfox</groupId>\n               <artifactId>springfox-swagger2</artifactId>\n               <version>2</version>\n           </dependency>\n    # 增加两个配置\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-annotations</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n           <dependency>\n               <groupId>io.swagger</groupId>\n               <artifactId>swagger-models</artifactId>\n               <version>1.5.22</version>\n           </dependency>\n```\n增加上面的配置后，就不再报错了。\n#### 原因\n1.5.20的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n   public Object getExample() {\n       if (this.example == null) {\n           return null;\n       } else {\n           try {\n               if (\"integer\".equals(this.type)) {\n                   return Long.valueOf(this.example);\n               }\n\n               if (\"number\".equals(this.type)) {\n                   return Double.valueOf(this.example);\n               }\n\n               if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                   return Boolean.valueOf(this.example);\n               }\n           } catch (NumberFormatException var2) {\n               LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n           }\n\n           return this.example;\n       }\n   }\n```\n1.5.22 的源码，判断如下：\n``` java\n@JsonProperty(\"x-example\")\n    public Object getExample() {\n        if (this.example != null && !this.example.isEmpty()) {\n            try {\n                if (\"integer\".equals(this.type)) {\n                    return Long.valueOf(this.example);\n                }\n\n                if (\"number\".equals(this.type)) {\n                    return Double.valueOf(this.example);\n                }\n\n                if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                    return Boolean.valueOf(this.example);\n                }\n            } catch (NumberFormatException var2) {\n                LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n            }\n\n            return this.example;\n        } else {\n            return this.example;\n        }\n    }\n```\n从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。\n","slug":"swagger-2.9.2-NumberFormatException","published":1,"updated":"2019-06-22T09:02:36.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkle40040bis6zlp8rtxn","content":"<p>SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ WARN ] [<span class=\"number\">2019</span>-<span class=\"number\">05</span>-<span class=\"number\">20</span> <span class=\"number\">16</span>:<span class=\"number\">39</span>:<span class=\"number\">47</span>] [http-nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">6</span>] i.s.m.p.AbstractSerializableParameter [<span class=\"number\">421</span>]  - Illegal DefaultValue <span class=\"number\">0</span> <span class=\"keyword\">for</span> parameter type integer</span><br><span class=\"line\">java.lang.NumberFormatException: For input string: <span class=\"string\">\"\"</span></span><br><span class=\"line\">\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"number\">65</span>)</span><br><span class=\"line\">\tat java.lang.Long.parseLong(Long.java:<span class=\"number\">601</span>)</span><br><span class=\"line\">\tat java.lang.Long.valueOf(Long.java:<span class=\"number\">803</span>)</span><br><span class=\"line\">\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"number\">412</span>)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">  .....</span><br></pre></td></tr></table></figure>\n\n<p>可以看到是在<code>Long.parseLong()</code>转换的时候报错了</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>试了网上说的增加默认值，但是在我本地没有生效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"id\"</span>,example = <span class=\"string\">\"123\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法<br>pom中增加新的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 默认的配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"># 增加两个配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-models<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>增加上面的配置后，就不再报错了。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>1.5.20的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">               LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.5.22 的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.example.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">                LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。</p>\n","site":{"data":{}},"excerpt":"<p>SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:</p>","more":"<p></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ WARN ] [<span class=\"number\">2019</span>-<span class=\"number\">05</span>-<span class=\"number\">20</span> <span class=\"number\">16</span>:<span class=\"number\">39</span>:<span class=\"number\">47</span>] [http-nio-<span class=\"number\">8080</span>-exec-<span class=\"number\">6</span>] i.s.m.p.AbstractSerializableParameter [<span class=\"number\">421</span>]  - Illegal DefaultValue <span class=\"number\">0</span> <span class=\"keyword\">for</span> parameter type integer</span><br><span class=\"line\">java.lang.NumberFormatException: For input string: <span class=\"string\">\"\"</span></span><br><span class=\"line\">\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"number\">65</span>)</span><br><span class=\"line\">\tat java.lang.Long.parseLong(Long.java:<span class=\"number\">601</span>)</span><br><span class=\"line\">\tat java.lang.Long.valueOf(Long.java:<span class=\"number\">803</span>)</span><br><span class=\"line\">\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"number\">412</span>)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">  .....</span><br></pre></td></tr></table></figure>\n\n<p>可以看到是在<code>Long.parseLong()</code>转换的时候报错了</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>试了网上说的增加默认值，但是在我本地没有生效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"id\"</span>,example = <span class=\"string\">\"123\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法<br>pom中增加新的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 默认的配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"># 增加两个配置</span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.swagger<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>swagger-models<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>增加上面的配置后，就不再报错了。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>1.5.20的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">               LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.5.22 的源码，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"x-example\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getExample</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.example != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.example.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"integer\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Long.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"number\"</span>.equals(<span class=\"keyword\">this</span>.type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Double.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"boolean\"</span>.equals(<span class=\"keyword\">this</span>.type) &amp;&amp; (<span class=\"string\">\"true\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.example) || <span class=\"string\">\"false\"</span>.equalsIgnoreCase(<span class=\"keyword\">this</span>.defaultValue))) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Boolean.valueOf(<span class=\"keyword\">this</span>.example);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NumberFormatException var2) &#123;</span><br><span class=\"line\">                LOGGER.warn(String.format(<span class=\"string\">\"Illegal DefaultValue %s for parameter type %s\"</span>, <span class=\"keyword\">this</span>.defaultValue, <span class=\"keyword\">this</span>.type), var2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.example;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。</p>"},{"title":"Ubuntu安装LAMP","date":"2017-10-28T03:32:00.000Z","_content":"### LAMP\n Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<!-- more -->\n### 环境\n基于Ubuntu\n### 开始\n\n``` bash\n$ apt-get update && sudo apt-get upgrade #更新软件包\n```\n#### 安装MySQL\n```bash\n$ sudo apt-get install -y mysql-server\n$ sudo apt-get install -y mysql-client\n! 记得设置默认密码\n```\n\n\n ``` bash\n $ sudo netstat -tap | grep mysql #显示监听的端口即表示安装成功\n ```\n\n#### 配置远程连接\n``` bash\n$ vim /etc/mysql/mysql.conf.d/mysqld.cnf\n#bind-address = 127.0.0.1\n```\n#### 远程访问赋权\n``` bash\n$ mysql -u root -p\n$ grant all on *.* to root@'%' identified by 'root';\n$ flush privileges;  \n$ exit\n$ service mysql restart(or: $ /etc/init.d/mysql restart)# 重启\n```\n####安装Apache2\n\n```bash\n$ sudo apt-get install -y apache2\n```\n\n``` bash\n#修改apache2.conf配置\n$ vi /etc/apache2/apache2.conf\n$ KeepAlive Off\n#修改mpm_prefork.conf配置\n$ vim /etc/apache2/mods-available/mpm_prefork.conf\n <IfModule mpm_prefork_module>\n   StartServers            2\n   MinSpareServers         6\n   MaxSpareServers         12\n   MaxRequestWorkers       39\n   MaxConnectionsPerChild  3000\n</IfModule>\n\n#禁用和启动模块\n$ sudo a2dismod mpm_event\n$ sudo a2enmod mpm_prefork\n$ sudo systemctl restart apache2 #重启Apache\n```\n#### PHP 安装\n``` bash\n# 安装相关包\n$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y\n# 安装组件支持\napt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y\n# 重启服务\n$ sudo systemctl restart apache2\n\n```\n\n#### phpmyadmin 安装\n``` bash\n\n$ sudo apt-get install -y phpmyadmin\n#安装对应php包（如果没有安装对应的包）\n$ sudo apt-get install -y php-mbstring\n$ sudo apt-get install -y php-gettext\n#安装时选择自动配置数据库，输入数据库root账号的密码\n#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误\n\n#建立软连接\n$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n#重启apache\n$ sudo /etc/init.d/apache2 restart\n#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可\n```\n","source":"_posts/ubuntu-install-lamp.md","raw":"---\ntitle: Ubuntu安装LAMP\ndate: 2017-10-28 11:32:00\ncategories: Linux\ntag: Shell\n---\n### LAMP\n Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<!-- more -->\n### 环境\n基于Ubuntu\n### 开始\n\n``` bash\n$ apt-get update && sudo apt-get upgrade #更新软件包\n```\n#### 安装MySQL\n```bash\n$ sudo apt-get install -y mysql-server\n$ sudo apt-get install -y mysql-client\n! 记得设置默认密码\n```\n\n\n ``` bash\n $ sudo netstat -tap | grep mysql #显示监听的端口即表示安装成功\n ```\n\n#### 配置远程连接\n``` bash\n$ vim /etc/mysql/mysql.conf.d/mysqld.cnf\n#bind-address = 127.0.0.1\n```\n#### 远程访问赋权\n``` bash\n$ mysql -u root -p\n$ grant all on *.* to root@'%' identified by 'root';\n$ flush privileges;  \n$ exit\n$ service mysql restart(or: $ /etc/init.d/mysql restart)# 重启\n```\n####安装Apache2\n\n```bash\n$ sudo apt-get install -y apache2\n```\n\n``` bash\n#修改apache2.conf配置\n$ vi /etc/apache2/apache2.conf\n$ KeepAlive Off\n#修改mpm_prefork.conf配置\n$ vim /etc/apache2/mods-available/mpm_prefork.conf\n <IfModule mpm_prefork_module>\n   StartServers            2\n   MinSpareServers         6\n   MaxSpareServers         12\n   MaxRequestWorkers       39\n   MaxConnectionsPerChild  3000\n</IfModule>\n\n#禁用和启动模块\n$ sudo a2dismod mpm_event\n$ sudo a2enmod mpm_prefork\n$ sudo systemctl restart apache2 #重启Apache\n```\n#### PHP 安装\n``` bash\n# 安装相关包\n$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y\n# 安装组件支持\napt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y\n# 重启服务\n$ sudo systemctl restart apache2\n\n```\n\n#### phpmyadmin 安装\n``` bash\n\n$ sudo apt-get install -y phpmyadmin\n#安装对应php包（如果没有安装对应的包）\n$ sudo apt-get install -y php-mbstring\n$ sudo apt-get install -y php-gettext\n#安装时选择自动配置数据库，输入数据库root账号的密码\n#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误\n\n#建立软连接\n$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n#重启apache\n$ sudo /etc/init.d/apache2 restart\n#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可\n```\n","slug":"ubuntu-install-lamp","published":1,"updated":"2019-06-22T09:01:01.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkle50043bis6wt5oa0b4","content":"<h3 id=\"LAMP\"><a href=\"#LAMP\" class=\"headerlink\" title=\"LAMP\"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<a id=\"more\"></a></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于Ubuntu</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class=\"comment\">#更新软件包</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y mysql-server</span><br><span class=\"line\">$ sudo apt-get install -y mysql-client</span><br><span class=\"line\">! 记得设置默认密码</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tap | grep mysql <span class=\"comment\">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置远程连接\"><a href=\"#配置远程连接\" class=\"headerlink\" title=\"配置远程连接\"></a>配置远程连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"远程访问赋权\"><a href=\"#远程访问赋权\" class=\"headerlink\" title=\"远程访问赋权\"></a>远程访问赋权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">$ grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'root'</span>;</span><br><span class=\"line\">$ flush privileges;  </span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n\n<p>####安装Apache2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改apache2.conf配置</span></span><br><span class=\"line\">$ vi /etc/apache2/apache2.conf</span><br><span class=\"line\">$ KeepAlive Off</span><br><span class=\"line\"><span class=\"comment\">#修改mpm_prefork.conf配置</span></span><br><span class=\"line\">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class=\"line\"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class=\"line\">   StartServers            2</span><br><span class=\"line\">   MinSpareServers         6</span><br><span class=\"line\">   MaxSpareServers         12</span><br><span class=\"line\">   MaxRequestWorkers       39</span><br><span class=\"line\">   MaxConnectionsPerChild  3000</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用和启动模块</span></span><br><span class=\"line\">$ sudo a2dismod mpm_event</span><br><span class=\"line\">$ sudo a2enmod mpm_prefork</span><br><span class=\"line\">$ sudo systemctl restart apache2 <span class=\"comment\">#重启Apache</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装相关包</span></span><br><span class=\"line\">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class=\"line\"><span class=\"comment\"># 安装组件支持</span></span><br><span class=\"line\">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"phpmyadmin-安装\"><a href=\"#phpmyadmin-安装\" class=\"headerlink\" title=\"phpmyadmin 安装\"></a>phpmyadmin 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install -y phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#安装对应php包（如果没有安装对应的包）</span></span><br><span class=\"line\">$ sudo apt-get install -y php-mbstring</span><br><span class=\"line\">$ sudo apt-get install -y php-gettext</span><br><span class=\"line\"><span class=\"comment\">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class=\"line\"><span class=\"comment\">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立软连接</span></span><br><span class=\"line\">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#重启apache</span></span><br><span class=\"line\">$ sudo /etc/init.d/apache2 restart</span><br><span class=\"line\"><span class=\"comment\">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"LAMP\"><a href=\"#LAMP\" class=\"headerlink\" title=\"LAMP\"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。</p>","more":"<p></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>基于Ubuntu</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class=\"comment\">#更新软件包</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y mysql-server</span><br><span class=\"line\">$ sudo apt-get install -y mysql-client</span><br><span class=\"line\">! 记得设置默认密码</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tap | grep mysql <span class=\"comment\">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置远程连接\"><a href=\"#配置远程连接\" class=\"headerlink\" title=\"配置远程连接\"></a>配置远程连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class=\"line\"><span class=\"comment\">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"远程访问赋权\"><a href=\"#远程访问赋权\" class=\"headerlink\" title=\"远程访问赋权\"></a>远程访问赋权</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">$ grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'root'</span>;</span><br><span class=\"line\">$ flush privileges;  </span><br><span class=\"line\">$ <span class=\"built_in\">exit</span></span><br><span class=\"line\">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n\n<p>####安装Apache2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改apache2.conf配置</span></span><br><span class=\"line\">$ vi /etc/apache2/apache2.conf</span><br><span class=\"line\">$ KeepAlive Off</span><br><span class=\"line\"><span class=\"comment\">#修改mpm_prefork.conf配置</span></span><br><span class=\"line\">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class=\"line\"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class=\"line\">   StartServers            2</span><br><span class=\"line\">   MinSpareServers         6</span><br><span class=\"line\">   MaxSpareServers         12</span><br><span class=\"line\">   MaxRequestWorkers       39</span><br><span class=\"line\">   MaxConnectionsPerChild  3000</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用和启动模块</span></span><br><span class=\"line\">$ sudo a2dismod mpm_event</span><br><span class=\"line\">$ sudo a2enmod mpm_prefork</span><br><span class=\"line\">$ sudo systemctl restart apache2 <span class=\"comment\">#重启Apache</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装相关包</span></span><br><span class=\"line\">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class=\"line\"><span class=\"comment\"># 安装组件支持</span></span><br><span class=\"line\">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"phpmyadmin-安装\"><a href=\"#phpmyadmin-安装\" class=\"headerlink\" title=\"phpmyadmin 安装\"></a>phpmyadmin 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install -y phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#安装对应php包（如果没有安装对应的包）</span></span><br><span class=\"line\">$ sudo apt-get install -y php-mbstring</span><br><span class=\"line\">$ sudo apt-get install -y php-gettext</span><br><span class=\"line\"><span class=\"comment\">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class=\"line\"><span class=\"comment\">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立软连接</span></span><br><span class=\"line\">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class=\"line\"><span class=\"comment\">#重启apache</span></span><br><span class=\"line\">$ sudo /etc/init.d/apache2 restart</span><br><span class=\"line\"><span class=\"comment\">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>"},{"title":"使用frp微信本地调试","date":"2018-05-07T06:50:36.000Z","_content":"### frp 原理\nfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<!-- more -->\n### 本地调试微信\n微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。\n早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。\n### frp 服务端部署\n下载对应的包，客户端和服务端在一个包里面。系统centos7\n- 下载安装包\n``` bash\n# 使用64位的包\nwget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz\n```\n\n- 域名解析\n需要进行泛域名解析\n`A   *.frp.frpss.top  xx.xx.xx.xx`\n\n- 配置配置文件\n``` bash\n#修改服务端配置，frps_full.ini里面有所有的示例配置和说明\n#这里使用泛域名解析，这样可以多用户同时使用\n[common]\nbind_port = 7000\nvhost_http_port = 8089\nsubdomain_host=frp.frpss.top\ndashboard_port = 7500\n```\n为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了\n\n### frp 客户端配置\n``` bash\n[common]\n#服务端配置\nserver_addr = 118.24.62.41\nserver_port = 7000\n\n#需要自己起别名，注意不要和其他人重复\n[server]\ntype = http\n\n#端口\nlocal_port = 4000\n#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top\nsubdomain = test\n```\n### 启动\n\n``` bash\n# Mac 启动\n./frpc -c ./frpc.ini\n#Windows\n./frpc.exe -c ./frpc.ini\n```\n\n### 本地调试\n上面的端口配置的是`4000`根据自己的项目配置端口，然后使用`test.frp.frpss.top`进行访问\n\n\n\n安装包可以去github下载，也可以在http://share.frpss.top 下载\n","source":"_posts/use-frp.md","raw":"---\ntitle: 使用frp微信本地调试\ndate: 2018-05-07 14:50:36\ncategories: Linux\ntag: frp\n---\n### frp 原理\nfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<!-- more -->\n### 本地调试微信\n微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。\n早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。\n### frp 服务端部署\n下载对应的包，客户端和服务端在一个包里面。系统centos7\n- 下载安装包\n``` bash\n# 使用64位的包\nwget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz\n```\n\n- 域名解析\n需要进行泛域名解析\n`A   *.frp.frpss.top  xx.xx.xx.xx`\n\n- 配置配置文件\n``` bash\n#修改服务端配置，frps_full.ini里面有所有的示例配置和说明\n#这里使用泛域名解析，这样可以多用户同时使用\n[common]\nbind_port = 7000\nvhost_http_port = 8089\nsubdomain_host=frp.frpss.top\ndashboard_port = 7500\n```\n为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了\n\n### frp 客户端配置\n``` bash\n[common]\n#服务端配置\nserver_addr = 118.24.62.41\nserver_port = 7000\n\n#需要自己起别名，注意不要和其他人重复\n[server]\ntype = http\n\n#端口\nlocal_port = 4000\n#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top\nsubdomain = test\n```\n### 启动\n\n``` bash\n# Mac 启动\n./frpc -c ./frpc.ini\n#Windows\n./frpc.exe -c ./frpc.ini\n```\n\n### 本地调试\n上面的端口配置的是`4000`根据自己的项目配置端口，然后使用`test.frp.frpss.top`进行访问\n\n\n\n安装包可以去github下载，也可以在http://share.frpss.top 下载\n","slug":"use-frp","published":1,"updated":"2019-06-22T09:01:06.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdkle60047bis630w0a782","content":"<h3 id=\"frp-原理\"><a href=\"#frp-原理\" class=\"headerlink\" title=\"frp 原理\"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<a id=\"more\"></a></p>\n<h3 id=\"本地调试微信\"><a href=\"#本地调试微信\" class=\"headerlink\" title=\"本地调试微信\"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>\n<h3 id=\"frp-服务端部署\"><a href=\"#frp-服务端部署\" class=\"headerlink\" title=\"frp 服务端部署\"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>\n<ul>\n<li><p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用64位的包</span></span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>\n</li>\n<li><p>配置配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class=\"line\"><span class=\"comment\">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">vhost_http_port = 8089</span><br><span class=\"line\">subdomain_host=frp.frpss.top</span><br><span class=\"line\">dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>\n<h3 id=\"frp-客户端配置\"><a href=\"#frp-客户端配置\" class=\"headerlink\" title=\"frp 客户端配置\"></a>frp 客户端配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"><span class=\"comment\">#服务端配置</span></span><br><span class=\"line\">server_addr = 118.24.62.41</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要自己起别名，注意不要和其他人重复</span></span><br><span class=\"line\">[server]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#端口</span></span><br><span class=\"line\">local_port = 4000</span><br><span class=\"line\"><span class=\"comment\">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class=\"line\">subdomain = <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mac 启动</span></span><br><span class=\"line\">./frpc -c ./frpc.ini</span><br><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>\n<p>安装包可以去github下载，也可以在<a href=\"http://share.frpss.top\" target=\"_blank\" rel=\"noopener\">http://share.frpss.top</a> 下载</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"frp-原理\"><a href=\"#frp-原理\" class=\"headerlink\" title=\"frp 原理\"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>","more":"<p></p>\n<h3 id=\"本地调试微信\"><a href=\"#本地调试微信\" class=\"headerlink\" title=\"本地调试微信\"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>\n<h3 id=\"frp-服务端部署\"><a href=\"#frp-服务端部署\" class=\"headerlink\" title=\"frp 服务端部署\"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>\n<ul>\n<li><p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用64位的包</span></span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>\n</li>\n<li><p>配置配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class=\"line\"><span class=\"comment\">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">vhost_http_port = 8089</span><br><span class=\"line\">subdomain_host=frp.frpss.top</span><br><span class=\"line\">dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>\n<h3 id=\"frp-客户端配置\"><a href=\"#frp-客户端配置\" class=\"headerlink\" title=\"frp 客户端配置\"></a>frp 客户端配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"><span class=\"comment\">#服务端配置</span></span><br><span class=\"line\">server_addr = 118.24.62.41</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要自己起别名，注意不要和其他人重复</span></span><br><span class=\"line\">[server]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#端口</span></span><br><span class=\"line\">local_port = 4000</span><br><span class=\"line\"><span class=\"comment\">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class=\"line\">subdomain = <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mac 启动</span></span><br><span class=\"line\">./frpc -c ./frpc.ini</span><br><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地调试\"><a href=\"#本地调试\" class=\"headerlink\" title=\"本地调试\"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>\n<p>安装包可以去github下载，也可以在<a href=\"http://share.frpss.top\" target=\"_blank\" rel=\"noopener\">http://share.frpss.top</a> 下载</p>"},{"title":"centos yum 安装nginx 后增加模块","date":"2017-10-01T15:30:30.000Z","_content":"### yum 和 源码安装的区别\n\nyum 安装是在线安装，优点：安装方式简单，快捷；\n\n源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<!-- more -->\n\n### yum安装nginx\n系统版本：CentOS Linux release 7.4.1708 (Core)\n\n#### 1.增加对应的源\n``` shell\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n#### 2.查看nginx信息\n\n``` shell\nyum info nginx  (查看nginx 版本方便后面下载对应版本)\n```\n#### 3.yum安装nginx\n``` shell\nyum -y install nginx\n```\n\n### nginx 相关的命令\n#### 1.查看安装路径\n``` shell\nrpm -ql nginx\n```\n#### 2.查看编译参数\n``` shell\nnginx -V\n```\n#### 3.nginx 启动、停止、重启\n``` shell\nsystemctl start nginx #启动 nginx 服务\nsystemctl stop nginx #停止 nginx 服务\nsystemctl restart nginx #重启 nginx 服务\n```\n\n### 启动检查是否启动成功\n``` shell\ncurl -i localhost\n```\n\n#### 如下显示说明正常启动：\n``` html\n···\n<h1>Welcome to nginx!</h1>\n···\n```\n\n### 安装第三方模块\n其实`yum`安装`nginx` 后想要添加第三方模块，只需对`yum`安装的`nginx`相同版本的源码进行编译后替换\n#### 1.安装源码安装需要的第三方包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n#### 2.下载对应的源码\n通过`nginx -V` 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码\n``` shell\ncd /opt\nwget http://nginx.org/download/nginx-1.12.1.tar.gz\n```\n#### 3.查看对应configure\n``` shell\ntar xf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\nnginx -V\nconfigure arguments:  --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n```\n#### 4.增加对应的模块\n``` shell\n./configure --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n            --add-module=../headers-more-nginx-module\n```\n#### 5.编译\n``` shell\nmake && make install\n```\n#### 6.对可执行文件进行备份替换\n``` shell\ncp /usr/sbin/nginx /usr/sbin/nginx.bak #备份\ncp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换\nsystemctl restart nginx #重启 nginx 服务\n```\n大功告成\n","source":"_posts/yum-install-nginx-add-modules.md","raw":"---\ntitle: centos yum 安装nginx 后增加模块\ndate: 2017-10-01 23:30:30\ncategories: Linux\ntag: Nginx\n---\n### yum 和 源码安装的区别\n\nyum 安装是在线安装，优点：安装方式简单，快捷；\n\n源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<!-- more -->\n\n### yum安装nginx\n系统版本：CentOS Linux release 7.4.1708 (Core)\n\n#### 1.增加对应的源\n``` shell\nrpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n#### 2.查看nginx信息\n\n``` shell\nyum info nginx  (查看nginx 版本方便后面下载对应版本)\n```\n#### 3.yum安装nginx\n``` shell\nyum -y install nginx\n```\n\n### nginx 相关的命令\n#### 1.查看安装路径\n``` shell\nrpm -ql nginx\n```\n#### 2.查看编译参数\n``` shell\nnginx -V\n```\n#### 3.nginx 启动、停止、重启\n``` shell\nsystemctl start nginx #启动 nginx 服务\nsystemctl stop nginx #停止 nginx 服务\nsystemctl restart nginx #重启 nginx 服务\n```\n\n### 启动检查是否启动成功\n``` shell\ncurl -i localhost\n```\n\n#### 如下显示说明正常启动：\n``` html\n···\n<h1>Welcome to nginx!</h1>\n···\n```\n\n### 安装第三方模块\n其实`yum`安装`nginx` 后想要添加第三方模块，只需对`yum`安装的`nginx`相同版本的源码进行编译后替换\n#### 1.安装源码安装需要的第三方包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n#### 2.下载对应的源码\n通过`nginx -V` 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码\n``` shell\ncd /opt\nwget http://nginx.org/download/nginx-1.12.1.tar.gz\n```\n#### 3.查看对应configure\n``` shell\ntar xf nginx-1.12.1.tar.gz\ncd nginx-1.12.1\nnginx -V\nconfigure arguments:  --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n```\n#### 4.增加对应的模块\n``` shell\n./configure --prefix=/etc/nginx \\\n            --sbin-path=/usr/sbin/nginx \\\n            --conf-path=/etc/nginx/nginx.conf \\\n            ...\n            --add-module=../headers-more-nginx-module\n```\n#### 5.编译\n``` shell\nmake && make install\n```\n#### 6.对可执行文件进行备份替换\n``` shell\ncp /usr/sbin/nginx /usr/sbin/nginx.bak #备份\ncp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换\nsystemctl restart nginx #重启 nginx 服务\n```\n大功告成\n","slug":"yum-install-nginx-add-modules","published":1,"updated":"2019-06-22T09:01:13.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbdklja0062bis6eeoz2vyj","content":"<h3 id=\"yum-和-源码安装的区别\"><a href=\"#yum-和-源码安装的区别\" class=\"headerlink\" title=\"yum 和 源码安装的区别\"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>\n<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<a id=\"more\"></a></p>\n<h3 id=\"yum安装nginx\"><a href=\"#yum安装nginx\" class=\"headerlink\" title=\"yum安装nginx\"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>\n<h4 id=\"1-增加对应的源\"><a href=\"#1-增加对应的源\" class=\"headerlink\" title=\"1.增加对应的源\"></a>1.增加对应的源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查看nginx信息\"><a href=\"#2-查看nginx信息\" class=\"headerlink\" title=\"2.查看nginx信息\"></a>2.查看nginx信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-yum安装nginx\"><a href=\"#3-yum安装nginx\" class=\"headerlink\" title=\"3.yum安装nginx\"></a>3.yum安装nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-相关的命令\"><a href=\"#nginx-相关的命令\" class=\"headerlink\" title=\"nginx 相关的命令\"></a>nginx 相关的命令</h3><h4 id=\"1-查看安装路径\"><a href=\"#1-查看安装路径\" class=\"headerlink\" title=\"1.查看安装路径\"></a>1.查看安装路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查看编译参数\"><a href=\"#2-查看编译参数\" class=\"headerlink\" title=\"2.查看编译参数\"></a>2.查看编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-nginx-启动、停止、重启\"><a href=\"#3-nginx-启动、停止、重启\" class=\"headerlink\" title=\"3.nginx 启动、停止、重启\"></a>3.nginx 启动、停止、重启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx #启动 nginx 服务</span><br><span class=\"line\">systemctl stop nginx #停止 nginx 服务</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动检查是否启动成功\"><a href=\"#启动检查是否启动成功\" class=\"headerlink\" title=\"启动检查是否启动成功\"></a>启动检查是否启动成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i localhost</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如下显示说明正常启动：\"><a href=\"#如下显示说明正常启动：\" class=\"headerlink\" title=\"如下显示说明正常启动：\"></a>如下显示说明正常启动：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>\n<h4 id=\"1-安装源码安装需要的第三方包\"><a href=\"#1-安装源码安装需要的第三方包\" class=\"headerlink\" title=\"1.安装源码安装需要的第三方包\"></a>1.安装源码安装需要的第三方包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-下载对应的源码\"><a href=\"#2-下载对应的源码\" class=\"headerlink\" title=\"2.下载对应的源码\"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-查看对应configure\"><a href=\"#3-查看对应configure\" class=\"headerlink\" title=\"3.查看对应configure\"></a>3.查看对应configure</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nginx-1.12.1.tar.gz</span><br><span class=\"line\">cd nginx-1.12.1</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">configure arguments:  --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-增加对应的模块\"><a href=\"#4-增加对应的模块\" class=\"headerlink\" title=\"4.增加对应的模块\"></a>4.增加对应的模块</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-编译\"><a href=\"#5-编译\" class=\"headerlink\" title=\"5.编译\"></a>5.编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-对可执行文件进行备份替换\"><a href=\"#6-对可执行文件进行备份替换\" class=\"headerlink\" title=\"6.对可执行文件进行备份替换\"></a>6.对可执行文件进行备份替换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class=\"line\">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n\n<p>大功告成</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"yum-和-源码安装的区别\"><a href=\"#yum-和-源码安装的区别\" class=\"headerlink\" title=\"yum 和 源码安装的区别\"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>\n<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等</p>","more":"<p></p>\n<h3 id=\"yum安装nginx\"><a href=\"#yum安装nginx\" class=\"headerlink\" title=\"yum安装nginx\"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>\n<h4 id=\"1-增加对应的源\"><a href=\"#1-增加对应的源\" class=\"headerlink\" title=\"1.增加对应的源\"></a>1.增加对应的源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查看nginx信息\"><a href=\"#2-查看nginx信息\" class=\"headerlink\" title=\"2.查看nginx信息\"></a>2.查看nginx信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-yum安装nginx\"><a href=\"#3-yum安装nginx\" class=\"headerlink\" title=\"3.yum安装nginx\"></a>3.yum安装nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx-相关的命令\"><a href=\"#nginx-相关的命令\" class=\"headerlink\" title=\"nginx 相关的命令\"></a>nginx 相关的命令</h3><h4 id=\"1-查看安装路径\"><a href=\"#1-查看安装路径\" class=\"headerlink\" title=\"1.查看安装路径\"></a>1.查看安装路径</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查看编译参数\"><a href=\"#2-查看编译参数\" class=\"headerlink\" title=\"2.查看编译参数\"></a>2.查看编译参数</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-nginx-启动、停止、重启\"><a href=\"#3-nginx-启动、停止、重启\" class=\"headerlink\" title=\"3.nginx 启动、停止、重启\"></a>3.nginx 启动、停止、重启</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx #启动 nginx 服务</span><br><span class=\"line\">systemctl stop nginx #停止 nginx 服务</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动检查是否启动成功\"><a href=\"#启动检查是否启动成功\" class=\"headerlink\" title=\"启动检查是否启动成功\"></a>启动检查是否启动成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i localhost</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如下显示说明正常启动：\"><a href=\"#如下显示说明正常启动：\" class=\"headerlink\" title=\"如下显示说明正常启动：\"></a>如下显示说明正常启动：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>\n<h4 id=\"1-安装源码安装需要的第三方包\"><a href=\"#1-安装源码安装需要的第三方包\" class=\"headerlink\" title=\"1.安装源码安装需要的第三方包\"></a>1.安装源码安装需要的第三方包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-下载对应的源码\"><a href=\"#2-下载对应的源码\" class=\"headerlink\" title=\"2.下载对应的源码\"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-查看对应configure\"><a href=\"#3-查看对应configure\" class=\"headerlink\" title=\"3.查看对应configure\"></a>3.查看对应configure</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf nginx-1.12.1.tar.gz</span><br><span class=\"line\">cd nginx-1.12.1</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\">configure arguments:  --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-增加对应的模块\"><a href=\"#4-增加对应的模块\" class=\"headerlink\" title=\"4.增加对应的模块\"></a>4.增加对应的模块</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/etc/nginx \\</span><br><span class=\"line\">            --sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">            --conf-path=/etc/nginx/nginx.conf \\</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-编译\"><a href=\"#5-编译\" class=\"headerlink\" title=\"5.编译\"></a>5.编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-对可执行文件进行备份替换\"><a href=\"#6-对可执行文件进行备份替换\" class=\"headerlink\" title=\"6.对可执行文件进行备份替换\"></a>6.对可执行文件进行备份替换</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class=\"line\">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class=\"line\">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>\n\n<p>大功告成</p>"}],"PostAsset":[{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png","slug":"WX20180318-122540@2x.png","post":"cjxbdklck0004bis6fadrcrqb","modified":1,"renderable":0},{"_id":"source/_posts/study-pandas-notes/pandas.png","post":"cjxbdkle2003ubis6nioz81hr","slug":"pandas.png","modified":1,"renderable":1},{"_id":"source/_posts/Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png","post":"cjxbdklck0004bis6fadrcrqb","slug":"WX20180318-120435@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-113942.png","post":"cjxbdkldu003ebis6dip3uhhh","slug":"WX20180418-113942.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-114759@2x.png","post":"cjxbdkldu003ebis6dip3uhhh","slug":"WX20180418-114759@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/raise-github-clone-speed/WX20180418-115544@2x.png","post":"cjxbdkldu003ebis6dip3uhhh","slug":"WX20180418-115544@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163439@2x.png","post":"cjxbdklde001xbis6qxt785pk","slug":"WX20180225-163439@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-163748@2x.png","post":"cjxbdklde001xbis6qxt785pk","slug":"WX20180225-163748@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/gitee-with-webhook/WX20180225-164721@2x.png","slug":"WX20180225-164721@2x.png","post":"cjxbdklde001xbis6qxt785pk","modified":1,"renderable":0},{"_id":"source/_posts/gitee-with-webhook/image-2018-153940@2x.png","post":"cjxbdklde001xbis6qxt785pk","slug":"image-2018-153940@2x.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174110.png","post":"cjxbdkld8001fbis6v64qg7bk","slug":"WX20180227-174110.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-174208.png","post":"cjxbdkld8001fbis6v64qg7bk","slug":"WX20180227-174208.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203234.png","post":"cjxbdkld8001fbis6v64qg7bk","slug":"WX20180227-203234.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-203815.png","post":"cjxbdkld8001fbis6v64qg7bk","slug":"WX20180227-203815.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-2-springboot-docker-integrated/WX20180227-204116.png","post":"cjxbdkld8001fbis6v64qg7bk","slug":"WX20180227-204116.png","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191500078c0b39a29f95.jpeg","post":"cjxbdkld70019bis6bqkdm5a4","slug":"191500078c0b39a29f95.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/1916000764d774a3eee4.jpeg","post":"cjxbdkld70019bis6bqkdm5a4","slug":"1916000764d774a3eee4.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191700078c8d4238617c.jpeg","post":"cjxbdkld70019bis6bqkdm5a4","slug":"191700078c8d4238617c.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg","post":"cjxbdkld70019bis6bqkdm5a4","slug":"191800078ffdfe660fb3.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/191b000762026287366b.jpeg","post":"cjxbdkld70019bis6bqkdm5a4","slug":"191b000762026287366b.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","post":"cjxbdkld70019bis6bqkdm5a4","slug":"v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjxbdklch0002bis6aovoev8z","category_id":"cjxbdklcm0005bis6t343mau2","_id":"cjxbdklct000fbis6dtbtrkub"},{"post_id":"cjxbdklck0004bis6fadrcrqb","category_id":"cjxbdklcr000abis6qsdv4bxc","_id":"cjxbdklcy000lbis68ep47agx"},{"post_id":"cjxbdklcu000ibis6ll744d5u","category_id":"cjxbdklcr000abis6qsdv4bxc","_id":"cjxbdkld1000rbis62slto9fb"},{"post_id":"cjxbdklcn0007bis69w9cjw1k","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkld2000vbis6pss5fuwz"},{"post_id":"cjxbdklco0008bis6tokd7jf3","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkld3000ybis6zf4np2ga"},{"post_id":"cjxbdklcp0009bis6lnnm1q6m","category_id":"cjxbdkld1000sbis63cdqu5jq","_id":"cjxbdkld50016bis652w96ne4"},{"post_id":"cjxbdklcr000dbis6mu29ayn6","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkld7001cbis6izvgxx0m"},{"post_id":"cjxbdklct000ebis6pl7xwy6o","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkld9001hbis6owul3drt"},{"post_id":"cjxbdklcx000kbis65loumrdg","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldc001pbis6lblsndk4"},{"post_id":"cjxbdkld9001ibis68tcxsou6","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldd001rbis6wupdahup"},{"post_id":"cjxbdklda001lbis6mm6vhwa6","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdklde001wbis64vb3crmr"},{"post_id":"cjxbdklcz000obis6b4z0x9v3","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldf001ybis6rbm8a1qz"},{"post_id":"cjxbdkldb001nbis6d19lbzv7","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldh0022bis6ck0o2lkb"},{"post_id":"cjxbdkldc001qbis6x7ji9xvh","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkldi0025bis6qk8u5yu6"},{"post_id":"cjxbdkld0000qbis65nb867f4","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldj0029bis636xmqn0t"},{"post_id":"cjxbdkldd001ubis6g19dirh3","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldk002cbis6jhmyklwn"},{"post_id":"cjxbdklde001xbis6qxt785pk","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldl002hbis6cl20xhqy"},{"post_id":"cjxbdkld1000ubis6iuatjni4","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldm002kbis6lforgnre"},{"post_id":"cjxbdkldh0024bis6r32zare9","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkldn002obis626on1tlm"},{"post_id":"cjxbdkld2000xbis63cjaaoc1","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldo002sbis67w714v98"},{"post_id":"cjxbdkldi0027bis6z1uer00c","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldp002wbis6soqt0s2j"},{"post_id":"cjxbdkld30010bis6imoxoktz","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldq0030bis6jlelz484"},{"post_id":"cjxbdkldk002fbis69wzbaj0w","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldr0032bis6x4be10cd"},{"post_id":"cjxbdkld40013bis6dsv4s3sa","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdklds0037bis6zhbyk02r"},{"post_id":"cjxbdkldm002mbis6iqbjx1pf","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldt003abis6loddsfoq"},{"post_id":"cjxbdkldo002rbis6lov4vdhy","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldv003fbis6sn22k1tb"},{"post_id":"cjxbdkld50017bis6xoq8tvi7","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkldw003ibis69hui4vfa"},{"post_id":"cjxbdkld70019bis6bqkdm5a4","category_id":"cjxbdkldp002vbis6p0ije7u4","_id":"cjxbdkldy003mbis6hfyhhmqm"},{"post_id":"cjxbdkldr0031bis662fsqfdi","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkldz003pbis6cph6t7m3"},{"post_id":"cjxbdkld8001dbis6qr6tf3ua","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkle1003tbis6t64gibw4"},{"post_id":"cjxbdkldu003ebis6dip3uhhh","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkle3003vbis6upk75msi"},{"post_id":"cjxbdkld8001fbis6v64qg7bk","category_id":"cjxbdkldp002vbis6p0ije7u4","_id":"cjxbdkle4003zbis6jnywyrj3"},{"post_id":"cjxbdkldv003hbis6a8utahsl","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkle50041bis6q4m8ijro"},{"post_id":"cjxbdkldg0020bis6ysamqcia","category_id":"cjxbdkldx003jbis6gyvj6ua5","_id":"cjxbdkle60045bis682t09zca"},{"post_id":"cjxbdkldy003obis63kykcad3","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdkle70048bis6u0siq7oc"},{"post_id":"cjxbdkldj002bbis6h0aekmya","category_id":"cjxbdkldz003rbis6zltyxxp8","_id":"cjxbdkle8004bbis66yptxxbd"},{"post_id":"cjxbdkle3003ybis6nwpduq23","category_id":"cjxbdklcr000abis6qsdv4bxc","_id":"cjxbdkle8004ebis66us3pcyq"},{"post_id":"cjxbdkle40040bis6zlp8rtxn","category_id":"cjxbdklcu000gbis60lhsu204","_id":"cjxbdkle9004hbis66k5biu2u"},{"post_id":"cjxbdkldp002ubis6r9ss008t","category_id":"cjxbdkle3003xbis6wnulkiry","_id":"cjxbdkle9004kbis6iejnmtko"},{"post_id":"cjxbdkle50043bis6wt5oa0b4","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdklea004mbis6fcog6t4x"},{"post_id":"cjxbdkle60047bis630w0a782","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdklea004pbis60rdeshjm"},{"post_id":"cjxbdkldq002zbis6mslmkeaj","category_id":"cjxbdkle60044bis6fwb97wz7","_id":"cjxbdklea004qbis6gzt693pt"},{"post_id":"cjxbdklds0036bis6109v3ji9","category_id":"cjxbdkle60044bis6fwb97wz7","_id":"cjxbdkleb004ubis68feukot1"},{"post_id":"cjxbdkldt0039bis66ir08ys3","category_id":"cjxbdkle9004ibis68m6dy99v","_id":"cjxbdkleb004vbis6niz6ti8b"},{"post_id":"cjxbdkldx003lbis6lzzhfuz4","category_id":"cjxbdkle60044bis6fwb97wz7","_id":"cjxbdklec004ybis6uzs74t7o"},{"post_id":"cjxbdkle0003sbis6rpjcz0zx","category_id":"cjxbdkle60044bis6fwb97wz7","_id":"cjxbdklec0050bis6wspiqmma"},{"post_id":"cjxbdkle2003ubis6nioz81hr","category_id":"cjxbdkle60044bis6fwb97wz7","_id":"cjxbdklec0053bis6b6bkwt5f"},{"post_id":"cjxbdklja0062bis6eeoz2vyj","category_id":"cjxbdkld7001bbis63twtbmut","_id":"cjxbdklje0064bis67wbqvtxk"}],"PostTag":[{"post_id":"cjxbdklch0002bis6aovoev8z","tag_id":"cjxbdklcn0006bis6t6g94ixp","_id":"cjxbdklcr000cbis6oqply0dw"},{"post_id":"cjxbdklck0004bis6fadrcrqb","tag_id":"cjxbdklcr000bbis6e1yurgp8","_id":"cjxbdklcv000jbis6tgspfd0w"},{"post_id":"cjxbdklcn0007bis69w9cjw1k","tag_id":"cjxbdklcu000hbis67froalv7","_id":"cjxbdkld0000pbis6jvw7t0u3"},{"post_id":"cjxbdklco0008bis6tokd7jf3","tag_id":"cjxbdklcy000nbis6oroq7w5b","_id":"cjxbdkld2000wbis6bq0f1aq6"},{"post_id":"cjxbdkld2000xbis63cjaaoc1","tag_id":"cjxbdklcu000hbis67froalv7","_id":"cjxbdkld40012bis6ey7pagvc"},{"post_id":"cjxbdklcp0009bis6lnnm1q6m","tag_id":"cjxbdkld1000tbis6wv3zwdvn","_id":"cjxbdkld50014bis65mxillba"},{"post_id":"cjxbdklcr000dbis6mu29ayn6","tag_id":"cjxbdkld40011bis6c9wmhtqr","_id":"cjxbdkld7001abis640ed3mu2"},{"post_id":"cjxbdklct000ebis6pl7xwy6o","tag_id":"cjxbdkld60018bis6steqmdm3","_id":"cjxbdkld9001gbis6zyp5cibp"},{"post_id":"cjxbdklcu000ibis6ll744d5u","tag_id":"cjxbdkld8001ebis61zf3ovrr","_id":"cjxbdkldb001mbis6oev9yxlw"},{"post_id":"cjxbdklcx000kbis65loumrdg","tag_id":"cjxbdklda001kbis6vhpcxpdk","_id":"cjxbdkldd001tbis6j20w8n5n"},{"post_id":"cjxbdklcz000obis6b4z0x9v3","tag_id":"cjxbdkldd001sbis6agmel7d8","_id":"cjxbdkldh0023bis6v69pduth"},{"post_id":"cjxbdkld0000qbis65nb867f4","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkldj002abis6nck77eq3"},{"post_id":"cjxbdkldi0027bis6z1uer00c","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkldk002dbis6vpuf1vdu"},{"post_id":"cjxbdkld1000ubis6iuatjni4","tag_id":"cjxbdkldi0026bis61num6acs","_id":"cjxbdkldl002ibis6ylx9r31q"},{"post_id":"cjxbdkldj002bbis6h0aekmya","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkldm002lbis65kr88xtk"},{"post_id":"cjxbdkld30010bis6imoxoktz","tag_id":"cjxbdkldk002ebis64ygca96l","_id":"cjxbdkldo002qbis6xyly7kjq"},{"post_id":"cjxbdkldm002mbis6iqbjx1pf","tag_id":"cjxbdklda001kbis6vhpcxpdk","_id":"cjxbdkldo002tbis68rkmg8ba"},{"post_id":"cjxbdkld40013bis6dsv4s3sa","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkldq002ybis6j2aozuzj"},{"post_id":"cjxbdkldq002zbis6mslmkeaj","tag_id":"cjxbdkldk002ebis64ygca96l","_id":"cjxbdklds0035bis6gsoijzmj"},{"post_id":"cjxbdkld50017bis6xoq8tvi7","tag_id":"cjxbdkldp002xbis6681xu7ex","_id":"cjxbdkldt0038bis6vvr1l31c"},{"post_id":"cjxbdklds0036bis6109v3ji9","tag_id":"cjxbdkldk002ebis64ygca96l","_id":"cjxbdkldu003dbis6kh2tpawt"},{"post_id":"cjxbdkld70019bis6bqkdm5a4","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkldv003gbis6m2fuo9mc"},{"post_id":"cjxbdkld8001dbis6qr6tf3ua","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkldy003nbis6kelrpgf6"},{"post_id":"cjxbdkld8001fbis6v64qg7bk","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkle60046bis6n78n1dik"},{"post_id":"cjxbdkld8001fbis6v64qg7bk","tag_id":"cjxbdkldz003qbis6r3hra6mv","_id":"cjxbdkle70049bis6ol7fa0jf"},{"post_id":"cjxbdkld8001fbis6v64qg7bk","tag_id":"cjxbdkle3003wbis6b8qe6wyt","_id":"cjxbdkle8004dbis6go07nshm"},{"post_id":"cjxbdkld9001ibis68tcxsou6","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkle9004fbis61o7m8q7z"},{"post_id":"cjxbdklda001lbis6mm6vhwa6","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdkle9004jbis66we8kzdt"},{"post_id":"cjxbdkldb001nbis6d19lbzv7","tag_id":"cjxbdkldf001zbis6hzooam1t","_id":"cjxbdklea004obis6qppmnt5c"},{"post_id":"cjxbdkldc001qbis6x7ji9xvh","tag_id":"cjxbdklea004lbis69vl7xmf4","_id":"cjxbdkleb004tbis6v3unxujr"},{"post_id":"cjxbdkldd001ubis6g19dirh3","tag_id":"cjxbdkleb004rbis6ag73r00s","_id":"cjxbdklec004zbis6zi1jjbhs"},{"post_id":"cjxbdklde001xbis6qxt785pk","tag_id":"cjxbdkleb004wbis6pk7hfnp9","_id":"cjxbdklec0052bis6t9s8pqzh"},{"post_id":"cjxbdkldg0020bis6ysamqcia","tag_id":"cjxbdklec0051bis6a31lmbmz","_id":"cjxbdklec0055bis6rdmkm7fw"},{"post_id":"cjxbdkldh0024bis6r32zare9","tag_id":"cjxbdklec0054bis62zrnpxnx","_id":"cjxbdkled0057bis6r4i8h77z"},{"post_id":"cjxbdkldk002fbis69wzbaj0w","tag_id":"cjxbdklec0056bis67spfxp9c","_id":"cjxbdkled0059bis61z50n3z5"},{"post_id":"cjxbdkldo002rbis6lov4vdhy","tag_id":"cjxbdkldp002xbis6681xu7ex","_id":"cjxbdkled005bbis641r6hys0"},{"post_id":"cjxbdkldp002ubis6r9ss008t","tag_id":"cjxbdkled005abis6zp5ntyn9","_id":"cjxbdkled005dbis6efzgfeq3"},{"post_id":"cjxbdkldr0031bis662fsqfdi","tag_id":"cjxbdkled005cbis6zzceduf7","_id":"cjxbdklee005fbis6gxpk1g74"},{"post_id":"cjxbdkldt0039bis66ir08ys3","tag_id":"cjxbdkled005ebis6mop8qoo7","_id":"cjxbdklee005hbis651qrj9tr"},{"post_id":"cjxbdkldu003ebis6dip3uhhh","tag_id":"cjxbdklee005gbis6nemi2cbd","_id":"cjxbdklee005jbis63jh9k1yb"},{"post_id":"cjxbdkldv003hbis6a8utahsl","tag_id":"cjxbdklee005gbis6nemi2cbd","_id":"cjxbdklee005lbis6wwbqvfnn"},{"post_id":"cjxbdkldx003lbis6lzzhfuz4","tag_id":"cjxbdklee005kbis6upa639ad","_id":"cjxbdklef005nbis61gu8n9vi"},{"post_id":"cjxbdkldy003obis63kykcad3","tag_id":"cjxbdklee005mbis67vo6hbms","_id":"cjxbdklef005pbis679qzvk4l"},{"post_id":"cjxbdkle0003sbis6rpjcz0zx","tag_id":"cjxbdklee005kbis6upa639ad","_id":"cjxbdkleg005rbis65c0fa5bq"},{"post_id":"cjxbdkle2003ubis6nioz81hr","tag_id":"cjxbdklee005kbis6upa639ad","_id":"cjxbdkleg005tbis61hix1xch"},{"post_id":"cjxbdkle3003ybis6nwpduq23","tag_id":"cjxbdklee005gbis6nemi2cbd","_id":"cjxbdkleg005vbis6f3sx265b"},{"post_id":"cjxbdkle40040bis6zlp8rtxn","tag_id":"cjxbdkleg005ubis6oufgueks","_id":"cjxbdkleh005xbis690w7yqwq"},{"post_id":"cjxbdkle50043bis6wt5oa0b4","tag_id":"cjxbdklee005gbis6nemi2cbd","_id":"cjxbdklei005zbis6q09r2lzz"},{"post_id":"cjxbdkle60047bis630w0a782","tag_id":"cjxbdkleh005ybis6h0ilyl7b","_id":"cjxbdklei0060bis6jkglzqel"},{"post_id":"cjxbdklja0062bis6eeoz2vyj","tag_id":"cjxbdklda001kbis6vhpcxpdk","_id":"cjxbdklje0063bis69rdl4fs1"}],"Tag":[{"name":"数字货币","_id":"cjxbdklcn0006bis6t6g94ixp"},{"name":"Domain","_id":"cjxbdklcr000bbis6e1yurgp8"},{"name":"Redis","_id":"cjxbdklcu000hbis67froalv7"},{"name":"String","_id":"cjxbdklcy000nbis6oroq7w5b"},{"name":"Machine Learning","_id":"cjxbdkld1000tbis6wv3zwdvn"},{"name":"Spring","_id":"cjxbdkld40011bis6c9wmhtqr"},{"name":"Apollo、Feign","_id":"cjxbdkld60018bis6steqmdm3"},{"name":"Brew","_id":"cjxbdkld8001ebis61zf3ovrr"},{"name":"Nginx","_id":"cjxbdklda001kbis6vhpcxpdk"},{"name":"app 分发","_id":"cjxbdkldd001sbis6agmel7d8"},{"name":"Docker","_id":"cjxbdkldf001zbis6hzooam1t"},{"name":"Git","_id":"cjxbdkldi0026bis61num6acs"},{"name":"Python","_id":"cjxbdkldk002ebis64ygca96l"},{"name":"Node","_id":"cjxbdkldp002xbis6681xu7ex"},{"name":"SpringBoot","_id":"cjxbdkldz003qbis6r3hra6mv"},{"name":"Maven","_id":"cjxbdkle3003wbis6b8qe6wyt"},{"name":"Feign","_id":"cjxbdklea004lbis69vl7xmf4"},{"name":"hexo","_id":"cjxbdkleb004rbis6ag73r00s"},{"name":"Linux","_id":"cjxbdkleb004wbis6pk7hfnp9"},{"name":"工作经历","_id":"cjxbdklec0051bis6a31lmbmz"},{"name":"concurrency","_id":"cjxbdklec0054bis62zrnpxnx"},{"name":"加密","_id":"cjxbdklec0056bis67spfxp9c"},{"name":"rabbitmq","_id":"cjxbdkled005abis6zp5ntyn9"},{"name":"okhttp","_id":"cjxbdkled005cbis6zzceduf7"},{"name":"Regular","_id":"cjxbdkled005ebis6mop8qoo7"},{"name":"Shell","_id":"cjxbdklee005gbis6nemi2cbd"},{"name":"pandas","_id":"cjxbdklee005kbis6upa639ad"},{"name":"Socks5","_id":"cjxbdklee005mbis67vo6hbms"},{"name":"Swagger2","_id":"cjxbdkleg005ubis6oufgueks"},{"name":"frp","_id":"cjxbdkleh005ybis6h0ilyl7b"}]}}