<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数字货币入门</title>
    <url>/2018/01/04/BTC-Tutorial/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近数字货币非常火，发现很多朋友都想入门，但是不知道怎么进行（入场当韭菜），我就随便写写。<a id="more"></a></p>
<h3 id="怎么入场"><a href="#怎么入场" class="headerlink" title="怎么入场"></a>怎么入场</h3><p>交易分为场外和场内，首先需要将手里的RMB，或者其他货币（即 法币），换成对应的数字货币，这样就需要<br>进行场外交易，付钱给有数字货币的朋友，然后从他们手中获取等值的数字货币，一般这样的交易需要交易所<br>平台做担保（避免被骗），建议用实时性比较强的到账方式，不管是买还是卖。<br>我主要是在火币进行兑换，也叫OTC（场外交易）</p>
<p><a href="https://www.huobipro.pro" target="_blank" rel="noopener">https://www.huobipro.pro</a><br>如果请求不到，可以使用<br><a href="https://www.huobi.br.com/zh-cn/" target="_blank" rel="noopener">https://www.huobi.br.com/zh-cn/</a></p>
<p>2018年04月20日11:38:10<br>市场一扫之前的低沉，开始变的活跃起来，现在还不能确定是否是向牛市开始转变，但是趋势在慢慢变好，场外的USDT 已经开始有溢价了，说明场外资金开始进入。</p>
]]></content>
      <categories>
        <category>数字货币</category>
      </categories>
      <tags>
        <tag>数字货币</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis连接池连接没有正常释放报错</title>
    <url>/2017/09/23/Could-not-get-a-resource-from-the-pool/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: redis.clients.jedis.exceptions.JedisException: Could not get a resource from the pool</span><br><span class="line">at redis.clients.util.Pool.getResource(Pool.java:51)</span><br><span class="line">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)</span><br><span class="line">at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)</span><br><span class="line">at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)</span><br><span class="line">... 71 common frames omitted</span><br></pre></td></tr></table></figure>

<p>前几天在线上碰到了一个奇怪的问题，jedis 突然无法从连接池取到资源，经过排查发现是因为使用分布式锁的时候,没有释放资源</p>
<h3 id="redisTemplate-和-jedis-不同"><a href="#redisTemplate-和-jedis-不同" class="headerlink" title="redisTemplate 和 jedis 不同"></a>redisTemplate 和 jedis 不同</h3><p>redisTemplate 自己实现了资源的释放，不需要像jedis一样手动释放</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setNX</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> <span class="keyword">throws</span> RedisException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> RedisCallback&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">doInRedis</span><span class="params">(RedisConnection redisConnection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> redisConnection.setNX(key.getBytes(), value.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>所以实现分布式锁的时候需要调用<code>redisTemplate.execute</code> 让 <code>redisTemplate</code> 帮我们释放资源，具体的可以看redisTemplate 的源码。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常量字符串过长</title>
    <url>/2019/04/29/Java-constant-string-is-too-long/</url>
    <content><![CDATA[<h3 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h3><p>  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示<code>java: 常量字符串过长</code>。使用javac 进行编译也会有类似的提示 <a id="more"></a></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="使用StringBuilder"><a href="#使用StringBuilder" class="headerlink" title="使用StringBuilder"></a>使用StringBuilder</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">"String"</span>);</span><br><span class="line">sb.append(<span class="string">"String"</span>);</span><br><span class="line">String str = sb.toString();</span><br><span class="line">String[] parts = str.split(<span class="string">","</span>);</span><br><span class="line">System.out.println(parts.length);</span><br></pre></td></tr></table></figure>
<p>创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制<br>通过使用StringBuilder解析大文本和大JSON</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Let‘s Encrypt创建免费SSL证书（官方文档自动获取泛域名证书还不完善）</title>
    <url>/2018/03/17/Lets-Encrypt-free-wildcard-domain-name/</url>
    <content><![CDATA[<p>网络安全越来越重要，很多的网站都开始使用https来增加网站的安全性，Let’s Encrypt 最近支持了泛域名SSL<br>证书，这样一个域名只需要一个SSL证书就搞定了，之前阿里云等云服务商提供了免费的SSL证书，但是只支持一个子域名一个证书，最多20个（一般人其实够用了），但是申请多个证书还是比较麻烦，而且很重要的一个原因，云服务商提供的通配符证书价格很贵，使用Let’s Encrypt费用就可以省了，唯一需要做的就是要进行证书续期。<a id="more"></a></p>
<h3 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h3><p>为了演示，需要申请一个免费域名,我是在freenom申请的，freenom自带的有免费的DNS解析，但是在国内的体验不是很好所以为了更好的体验，使用dnspod。</p>
<p>免费的域名和DNS服务商有很多，大家可以自己去选择，上面只是举个例子。</p>
<p>我申请的域名是<code>rubys.ml</code>,可以免费使用一年，续费的话不到10刀/年。</p>
<h3 id="配置Let’s-Encrypt-单域名"><a href="#配置Let’s-Encrypt-单域名" class="headerlink" title="配置Let’s Encrypt 单域名"></a>配置Let’s Encrypt 单域名</h3><p>首先访问<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Cncrypt官网</a>，<code>Get Started</code>，然后会提供两种方式，<code>With Shell Access</code>和<code>Without Shell Access</code>，</p>
<ul>
<li><p>With Shell Access(官方推荐通过shell进行部署)<br>使用<code>Certbot ACME</code>客户端进行部署，它可以自动执行证书颁发和安装，而不用停机，它很容易使用，适用于多种操作系统，并且具有出色的文档。<br><img src="Lets-Encrypt-free-wildcard-domain-name/WX20180318-120435@2x.png" alt="certbot"><br>访问<a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot</a>,选择自己使用的服务器和操作系统。有自动化和高级两种模式可以选择。这里选择自动化。</p>
</li>
<li><p>安装系统扩展包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">rpm -ivh epel-release-latest-7.noarch.rpm</span><br><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure></li>
<li><p>安装certbot</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure></li>
<li><p>运行certbot插件生成证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure>
<p><img src="Lets-Encrypt-free-wildcard-domain-name/WX20180318-122540@2x.png" alt="certbot"></p>
</li>
<li><p>重启nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p>访问<a href="www.rubys.ml">www.rubys.ml</a>,发现链接自动定向到<a href="https://www.rubys.ml" target="_blank" rel="noopener">https://www.rubys.ml</a></p>
</li>
</ul>
<p>增加自动续期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 0,12 * * * python -c <span class="string">'import random; import time; time.sleep(random.random() * 3600)'</span> &amp;&amp; certbot renew</span><br></pre></td></tr></table></figure>

<p>上面的方法是单域名证书的创建</p>
<h3 id="配置Let’s-Encrypt-泛域名"><a href="#配置Let’s-Encrypt-泛域名" class="headerlink" title="配置Let’s Encrypt 泛域名"></a>配置Let’s Encrypt 泛域名</h3><p>如果配置泛域名，还需要安装一个 <code>Certbot&#39;s DNS plugins</code> 插件<br>目前的代码还不够完善，目前根据文档，可以看到只支持，通过Docker 安装，可以一次性获取下面的服务商的支持</p>
<ul>
<li>certbot-dns-cloudflare</li>
<li>certbot-dns-cloudxns</li>
<li>certbot-dns-digitalocean</li>
<li>certbot-dns-dnsimple</li>
<li>certbot-dns-dnsmadeeasy</li>
<li>certbot-dns-google</li>
<li>certbot-dns-luadns</li>
<li>certbot-dns-nsone</li>
<li>certbot-dns-rfc2136</li>
<li>certbot-dns-route53</li>
</ul>
<p>目前支持的云服务商还不多<br>阿里云的话可以使用如下脚本<br><a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh</a><br>从云服务商那里获取对应的APIKey，APISecret，填入脚本,具体参考上面地址中的文档。</p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Domain</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine-Learning-in-Java-1</title>
    <url>/2017/11/20/Machine-Learning-in-Java-1/</url>
    <content><![CDATA[<h3 id="机器学习的主要方法"><a href="#机器学习的主要方法" class="headerlink" title="机器学习的主要方法"></a>机器学习的主要方法</h3><ul>
<li>监督学习</li>
<li>无监督学习</li>
<li>强化学习<a id="more"></a>
<h4 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h4>检测信用卡欺诈。学习算法会学习所有带有“正常” 或 “可疑”标记（向量Y）的信用卡交易（矩阵X），并最终产生一个决策模型（f函数），对未见过的交易打标记（“正常”或“可疑”）。<h4 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h4>无监督学习算法所学的数据没有给定的结果标签Y，它主要学习数据结构，比如将相似的输入数据归入某个聚类。可以用于推荐系统，学习算法会发现购物者一同购买的相似商品，比如购买了书A的人也购买了书B。<h4 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h4>强化学习从完全不同的角度处理学习过程。强化学习的目标是找到最优策略，即映射函数，指定每个状态要采取的行为动作，而没有指导者明确告诉这样做是否会实现目标状态。强化学习的一个例子就是汽车自动驾驶程序。</li>
</ul>
<h3 id="机器学习应用流程"><a href="#机器学习应用流程" class="headerlink" title="机器学习应用流程"></a>机器学习应用流程</h3><p>（1） 数据与问题定义<br>（2）数据收集<br>（3）数据预处理<br>（4）利用无监督学习与监督学习进行数据分析与建模<br>（5）模型评价</p>
<p>特性 | 称名 | 顺序 | 等距 | 等比 |</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="center">称名</th>
<th align="center">顺序</th>
<th align="center">等距</th>
<th align="center">等比</th>
</tr>
</thead>
<tbody><tr>
<td align="left">频率分布</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="left">中位数和众数</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="left">值顺序已知</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="left">每个值之间的不同可以量化</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="left">值可以加减</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="left">值可以乘除</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
</tr>
<tr>
<td align="left">拥有真0点</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">√</td>
</tr>
</tbody></table>
<h3 id="获取数据的方式"><a href="#获取数据的方式" class="headerlink" title="获取数据的方式"></a>获取数据的方式</h3><ul>
<li>维基百科</li>
<li>网页抓取</li>
<li>IMDb</li>
<li>Million Song Dataset</li>
</ul>
<h3 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h3><p>陷阱 幸存者偏差<br>数据清洗<br>填充缺失值<br>剔除异常值<br>数据转换</p>
<h2 id="数据归纳"><a href="#数据归纳" class="headerlink" title="数据归纳"></a>数据归纳</h2><p>奇异值分解（SVD）<br>主成分分析（PCA）<br>神经网络自动编码器（Neural nets auto encoders）</p>
<h3 id="无监督学习-1"><a href="#无监督学习-1" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>n维欧氏空间中，两个元素之间的距离基于元素在这个空间中的位置，常称为“p-范数距离”(p-norm distance)。常用的两个距离度量是L2与L1范数距离。</p>
<p>L2范数也叫欧氏距离，它是最常用的距离度量，用于度量二维空间中的两个元素相距多远。<br>它是两个元素在每个维度上差的平方和的平方根，计算公式如下:</p>
<p>注： 以上数据来自 Machine Learning in Java</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 504 Gateway Time-out</title>
    <url>/2017/09/22/Nginx-504-GateWay-Time-Out/</url>
    <content><![CDATA[<p>今天碰到了一个问题，生产环境用户报错，后台看日志都是正常的，最后经过debug 发现是nginx 设置 <a id="more"></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxy_connect_timeout = 3;</span><br></pre></td></tr></table></figure>
<p>时间过小导致的，最好用默认参数</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring单例和多例</title>
    <url>/2019/03/25/Spring-singleton-and-prototype/</url>
    <content><![CDATA[<p>在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是<code>singleton</code>。这篇文章主要讨论Spring 单例和多例。<a id="more"></a></p>
<h3 id="Spring-bean-的作用域-Spring-Bean-scopes"><a href="#Spring-bean-的作用域-Spring-Bean-scopes" class="headerlink" title="Spring bean 的作用域(Spring Bean scopes)"></a>Spring bean 的作用域(Spring Bean scopes)</h3><table>
<thead>
<tr>
<th align="center">作用域</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">singleton</td>
<td align="center">根据Spring IoC容器将单个bean定义范围限定为单个对象实例。</td>
</tr>
<tr>
<td align="center">prototype</td>
<td align="center">将单个bean定义范围限定为任意数量的对象实例。</td>
</tr>
<tr>
<td align="center">request</td>
<td align="center">将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。</td>
</tr>
<tr>
<td align="center">session</td>
<td align="center">将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。</td>
</tr>
<tr>
<td align="center">global-session</td>
<td align="center">将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。</td>
</tr>
<tr>
<td align="center"><code>&gt;</code> 具体可以查看Spring官方文档 <a href="https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html" target="_blank" rel="noopener">Spring Doc</a>,有更详细的说明。</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">####The singleton scope(单例作用域)</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">可以在Application中进行注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> TestBean <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TestBean(<span class="string">"Hello,singleton!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">测试</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestBean testBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(testBean.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">还可以使用 <code>@Component</code> 的方式，可以自行实践。</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="The-prototype-scope-多例作用域"><a href="#The-prototype-scope-多例作用域" class="headerlink" title="The prototype scope(多例作用域)"></a>The prototype scope(多例作用域)</h4><blockquote>
<p>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p>
</blockquote>
<p>描述了什么时候使用单例、什么时候使用多例。<br><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>
<p><code>@Autowired</code>为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>
<p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>
<p>最常用的是一个接口有多个实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPrintService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberPrintServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPrintService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringPrintServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPrintService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"String"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"numberPrintServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> IPrintService numPrintService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"stringPrintServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> IPrintService strPrintService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        numPrintService.print();</span><br><span class="line">        strPrintService.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过name来区分<code>IPrintService</code>,进行注入。<br>面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>apollo 配置提前加载</title>
    <url>/2019/05/18/apollo-eagerload/</url>
    <content><![CDATA[<h4 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h4><p>项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现<code>${}</code>没有生效。<br>导致请求调用的时候出错。<a id="more"></a></p>
<h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><p>首先是检查配置是否正确，请求的代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"xxx"</span>, url = <span class="string">"$&#123;xxx&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignClientService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实体列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xxx xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/xxx/xxx/xxx"</span>)</span><br><span class="line">    <span class="function">FeignResp&lt;EntityListVO&gt; <span class="title">getEntityList</span><span class="params">(@RequestParam(value = <span class="string">"xxx"</span>)</span> String xxx) <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
<p>当url使用固定时，可以正常的解析出请求的url，使用<code>${}</code>没有生效。<br>这个时候查询了Apollo的文档<a href=""https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90"">Java客户端使用指南3.2.1.3SpringBoot集成方式</a></p>
<blockquote>
<p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br>从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：<br>     # will inject ‘application’ namespace in bootstrap phase<br>     apollo.bootstrap.enabled = true<br>     # put apollo initialization before logging system initialization<br>     apollo.bootstrap.eagerLoad.enabled=true</p>
</blockquote>
<p>增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的<code>1.1.0</code>，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。</p>
<h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>没办法在Springboot启动前加载，可以尝试手动加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientUrlConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initSet(<span class="string">"此处写你需要提前初始化的key"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSet</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            String val = ConfigService.getAppConfig().getProperty(key, <span class="keyword">null</span>);</span><br><span class="line">            System.setProperty(key, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>SpringApplication.run()</code> 之前加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> ClientUrlConfig().init();</span><br><span class="line">       SpringApplication.run(Application.class, args);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>通过在启动前将配置注入，<code>${}</code> 就可以获取到正确的链接了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Apollo、Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>方舟服务器搭建 Ark-Server-Build</title>
    <url>/2020/04/14/ark-server/</url>
    <content><![CDATA[<p>最近被朋友拉着入了<code>方舟:进化生存</code>的坑，但是朋友家的网络有点炸裂，导致我疯狂掉线，所以查了一下教程，搭建一个非专用服务器，并做一下记录。<a id="more"></a></p>
<h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><p>因为玩的人不是很多，所以服务器选的是阿里云4C16G,200Mbps带宽按流量付费(根据这几天玩下来，流量一般稳定在100kb/s左右)，弹性ip，系统选择的是CentOS7.8 64 bit，基于LinuxGSM 方案，阿里云入网是不收费的，200Mbps 带宽有利于下载游戏。</p>
<h3 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h3><h4 id="增加Hosts"><a href="#增加Hosts" class="headerlink" title="增加Hosts"></a>增加Hosts</h4><p>因为国内的关系，服务器访问github拉取代码容易出现失败的情况，所以需要修改一下hosts。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">增加下面的配置，保存 这样可以避免脚本下载的时候失败</span></span><br><span class="line">199.232.4.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<h4 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h4><p>游戏需要用到几个端口，默认的阿里云服务器只开了80，443 ，打开服务器的安全组配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开对应的UDP端口, 0.0.0.0/0</span></span><br><span class="line">7777</span><br><span class="line">27015</span><br></pre></td></tr></table></figure>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> root 权限下执行,还可能会缺少，但是后面脚本会自行安装</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install mailx postfix curl wget tar bzip2 gzip unzip python3 binutils bc jq tmux glibc.i686 libstdc++ libstdc++.i686 -y</span><br></pre></td></tr></table></figure>
<h4 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h4><p>创建非root用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加用户</span></span><br><span class="line">adduser arkserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置密码，可以根据自己的需求设置</span></span><br><span class="line">passwd 1234546</span><br></pre></td></tr></table></figure>
<h4 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换用户、安装</span></span><br><span class="line">su - arkserver</span><br><span class="line">cd ~</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载linuxgsm.sh 脚本</span></span><br><span class="line">wget -O linuxgsm.sh https://linuxgsm.sh &amp;&amp; chmod +x linuxgsm.sh &amp;&amp; bash linuxgsm.sh arkserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装、如果下载失败，多执行几次</span></span><br><span class="line">./arkserver install</span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过键入找到命令的完整列表。</span></span><br><span class="line">./arkserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">./arkserver start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">./arkserver stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">./arkserver restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">./arkserver update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制更新</span></span><br><span class="line">./arkserver force-update</span><br></pre></td></tr></table></figure>


<h5 id="参考LinuxGSM"><a href="#参考LinuxGSM" class="headerlink" title="参考LinuxGSM"></a><a href="https://linuxgsm.com/lgsm/arkserver/" target="_blank" rel="noopener">参考LinuxGSM</a></h5>]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>Ark</tag>
      </tags>
  </entry>
  <entry>
    <title>brew 升级应用错误</title>
    <url>/2018/05/03/brew-upgrade-error/</url>
    <content><![CDATA[<p>定期升级电脑上的应用，是个好习惯，避免在需要使用的时候，出现各种莫名其妙的问题。<a id="more"></a></p>
<h3 id="brew-升级"><a href="#brew-升级" class="headerlink" title="brew 升级"></a>brew 升级</h3><p>最近在使用<code>brew upgrade</code> 的过程中，碰到了一个问题记录一下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: An unexpected error occurred during the `brew link` step</span><br><span class="line">The formula built, but is not symlinked into /usr/local</span><br><span class="line">Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br><span class="line">Error: Permission denied @ dir_s_mkdir - /usr/local/Frameworks</span><br></pre></td></tr></table></figure>
<p>如上所示，需要创建<code>/usr/local/Frameworks</code> 目录，但是没有对应的权限</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/local/Frameworks</span><br><span class="line">sudo chown $(whoami):admin /usr/local/Frameworks</span><br></pre></td></tr></table></figure>
<p>手动创建，赋权，之后就可以愉快的<code>brew upgrade</code> 了。</p>
<p>最后<code>brew cleanup</code> 清理废弃的文件，释放空间。</p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Brew</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个简单的app分发平台</title>
    <url>/2019/03/01/build-an-app-distribution-platform/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk<br>比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<a id="more"></a></p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li>企业签名过后的ipa包、apk</li>
<li>一个域名</li>
<li>一台服务器</li>
<li>一个https证书<h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><h3 id="搭建一个nginx-web-环境"><a href="#搭建一个nginx-web-环境" class="headerlink" title="搭建一个nginx web 环境"></a>搭建一个nginx web 环境</h3>首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。<br>大家一般都是使用微信的扫一扫<h3 id="获取apk、ipa、plist、iOS-app-icon文件公网地址"><a href="#获取apk、ipa、plist、iOS-app-icon文件公网地址" class="headerlink" title="获取apk、ipa、plist、iOS app icon文件公网地址"></a>获取apk、ipa、plist、iOS app icon文件公网地址</h3>配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。<br><code>https://xxxx.xxxx.com/xxx.apk</code><br><code>https://xxxx.xxxx.com/xxx.ipa</code><br><code>https://xxxx.xxxx.com/xxx.plist</code><br><code>https://xxxx.xxxx.com/xxx.png</code></li>
</ul>
<h3 id="配置plist文件的内容"><a href="#配置plist文件的内容" class="headerlink" title="配置plist文件的内容"></a>配置plist文件的内容</h3><figure class="highlight plist"><figcaption><span>文件</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://xxx.xxx.com/download/xxx.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://xxx.xxx.com/img/xxx.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>io.xxx.xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>subtitle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要修改<code>software-package</code>、<code>display-image</code> 、<code>subtitle</code>、<code>title</code><br><code>software-package</code> 使用 <code>https://xxxx.xxxx.com/xxx.ipa</code> 的地址</p>
<h3 id="配置地址"><a href="#配置地址" class="headerlink" title="配置地址"></a>配置地址</h3><p>在下载页面配置<code>apk</code>下载地址以及<code>plist</code>地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>app 分发</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装redis5.x</title>
    <url>/2018/12/14/centos-install-redis5-x/</url>
    <content><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote>
<p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<a id="more"></a></p>
</blockquote>
<p>我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，<br>第一件事就是安装Redis。</p>
<h4 id="安装Redis（默认CentOS-7）"><a href="#安装Redis（默认CentOS-7）" class="headerlink" title="安装Redis（默认CentOS 7）"></a>安装Redis（默认CentOS 7）</h4><ul>
<li>下载Redis<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>解压编译<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xzf redis-5.0.3.tar.gz</span><br><span class="line">cd redis-5.0.3</span><br><span class="line">make install</span><br><span class="line">#安装redis-server（默认配置）</span><br><span class="line">sh .&#x2F;utils&#x2F;install_server.sh</span><br><span class="line"></span><br><span class="line">Welcome to the redis service installer</span><br><span class="line">This script will help you easily set up a running redis server</span><br><span class="line"></span><br><span class="line">Please select the redis port for this instance: [6379]</span><br><span class="line">Selecting default: 6379</span><br><span class="line">Please select the redis config file name [&#x2F;etc&#x2F;redis&#x2F;6379.conf]</span><br><span class="line">Selected default - &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br><span class="line">Please select the redis log file name [&#x2F;var&#x2F;log&#x2F;redis_6379.log]</span><br><span class="line">Selected default - &#x2F;var&#x2F;log&#x2F;redis_6379.log</span><br><span class="line">Please select the data directory for this instance [&#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379]</span><br><span class="line">Selected default - &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379</span><br><span class="line">Please select the redis executable path [&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server]</span><br><span class="line">Selected config:</span><br><span class="line">Port           : 6379</span><br><span class="line">Config file    : &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br><span class="line">Log file       : &#x2F;var&#x2F;log&#x2F;redis_6379.log</span><br><span class="line">Data dir       : &#x2F;var&#x2F;lib&#x2F;redis&#x2F;6379</span><br><span class="line">Executable     : &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server</span><br><span class="line">Cli Executable : &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-cli</span><br><span class="line">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class="line">Copied &#x2F;tmp&#x2F;6379.conf &#x3D;&gt; &#x2F;etc&#x2F;init.d&#x2F;redis_6379</span><br><span class="line">Installing service...</span><br><span class="line">Successfully added to chkconfig!</span><br><span class="line">Successfully added to runlevels 345!</span><br><span class="line">Starting Redis server...</span><br><span class="line">Installation successful!</span><br></pre></td></tr></table></figure>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/redis/6379.config</span><br><span class="line"><span class="meta">#</span><span class="bash">设置后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash">设置数据持久化</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta">#</span><span class="bash">设置ip 默认最好不修改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass 123456</span></span><br></pre></td></tr></table></figure>
<h4 id="创建服务脚本"><a href="#创建服务脚本" class="headerlink" title="创建服务脚本"></a>创建服务脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动</span><br><span class="line">systemctl start &#x2F;etc&#x2F;init.d&#x2F;redis_6379</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装 git</title>
    <url>/2017/11/06/centos-install-git/</url>
    <content><![CDATA[<p>CentOS 7 上安装git 的几种方法。 <a id="more"></a></p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><ul>
<li>安装对应的依赖<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install -y gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li>
<li>下载源码编译安装<h4 id="确保系统git-已经被卸载"><a href="#确保系统git-已经被卸载" class="headerlink" title="确保系统git 已经被卸载"></a>确保系统git 已经被卸载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove -y git(先执行本选项，确保卸载掉git)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.9.3.tar.gz</span><br><span class="line">tar xzf git-2.9.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git-2.9.3</span><br><span class="line">make prefix=/usr/bin/git all</span><br><span class="line">make prefix=/usr/bin/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/bin/git/bin"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br><span class="line">git --version (查看是否安装完成)</span><br></pre></td></tr></table></figure>
<h3 id="rpm-安装（基于CentOS7）"><a href="#rpm-安装（基于CentOS7）" class="headerlink" title="rpm 安装（基于CentOS7）"></a>rpm 安装（基于CentOS7）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release （<span class="comment">#error: Failed dependencies:epel-release = 7 is needed by ius-release-1.0-15.ius.centos7.noarch）</span></span><br><span class="line">rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line">yum install git2u</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 安装Docker</title>
    <url>/2019/06/25/centos7-docker-install-tutorial/</url>
    <content><![CDATA[<p>Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker官方文档</a><a id="more"></a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="操作系统需求"><a href="#操作系统需求" class="headerlink" title="操作系统需求"></a>操作系统需求</h4><p>基于CentOS7发行版进行安装，需要启用<code>centos-extras</code>，默认是开启的，如果关闭了的话，需要打开</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ip-172-26-13-79 centos]# yum repolist                                                                              </span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos.usonyx.net</span><br><span class="line"> * epel: download.nus.edu.sg</span><br><span class="line"> * extras: centos.usonyx.net</span><br><span class="line"> * updates: centos.usonyx.net</span><br><span class="line">源标识                                     源名称                                                                  状态</span><br><span class="line">!base/7/x86_64                             CentOS-7 - Base                                                         10,019</span><br><span class="line">!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221</span><br><span class="line">!extras/7/x86_64                           CentOS-7 - Extras                                                          409</span><br><span class="line">!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982</span><br><span class="line">repolist: 25,631</span><br><span class="line">[root@ip-172-26-13-79 centos]#</span><br></pre></td></tr></table></figure>
<p>开启的话，可以执行下面的命令,<a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> on RHEL 7 it is recommended to also <span class="built_in">enable</span> the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie</span></span><br><span class="line">[root@ip-172-26-13-79 centos]# subscription-manager repos --enable "rhel-*-optional-rpms" --enable "rhel-*-extras-rpms"  --enable "rhel-ha-for-rhel-*-server-rpms"</span><br></pre></td></tr></table></figure>
<p>建议使用<code>overlay2</code> storage driver。</p>
<h4 id="卸载旧的版本"><a href="#卸载旧的版本" class="headerlink" title="卸载旧的版本"></a>卸载旧的版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<p>如果没有提示，说明上面的包没有被安装。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>可以通过多种方式安装Docker CE：</p>
<ul>
<li>大多数用户通过设置 <code>Dokcer&#39;s repositories</code> 的方式安装，方便安装和进行升级，这种方法比较推荐。</li>
<li>有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。</li>
<li>在开发和测试环境，使用自动脚本进行Dokcer安装</li>
</ul>
<h4 id="使用repository-进行安装"><a href="#使用repository-进行安装" class="headerlink" title="使用repository 进行安装"></a>使用repository 进行安装</h4><h5 id="设置-REPOSITORY"><a href="#设置-REPOSITORY" class="headerlink" title="设置 REPOSITORY"></a>设置 REPOSITORY</h5><p>1.安装所需要的包，提供对应的存储支持</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>
<p>2.使用下面推荐的稳定repository</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h5 id="可选：开启nightly或test-repositories"><a href="#可选：开启nightly或test-repositories" class="headerlink" title="可选：开启nightly或test repositories"></a>可选：开启nightly或test repositories</h5><p>1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure>
<p>2.开启test channel</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>
<p>3.关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --disable docker-ce-nightly</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">了解更多关于 nightly 和 test channels。</a></p>
<h5 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h5><p>安装最新版本，或者转到下一步安装特定版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>
<p>如果提示接受GPG key，请验证指纹是否匹配: <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code><br>``<br>需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。</p>
<h6 id="安装特定的版本"><a href="#安装特定的版本" class="headerlink" title="安装特定的版本"></a>安装特定的版本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>
<p>返回的列表取决于启动的repositories。安装特定的版本</p>
<ul>
<li>例子，<code>docker-ce-18.09.1</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>
Docker 已安装未启动，<code>docker</code> 组被创建，但是没有user添加进组。<h6 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>
<h6 id="通过运行hello-world-验证Docker-CE-安装正确"><a href="#通过运行hello-world-验证Docker-CE-安装正确" class="headerlink" title="通过运行hello-world 验证Docker CE 安装正确"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>
<h4 id="通过rpm包进行安装"><a href="#通过rpm包进行安装" class="headerlink" title="通过rpm包进行安装"></a>通过rpm包进行安装</h4>如果无法使用Docker’s repository 安装Docker ,可以使用<code>.rpm</code>进行安装<h5 id="下载rpm包"><a href="#下载rpm包" class="headerlink" title="下载rpm包"></a>下载rpm包</h5>可以到<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>下载<code>.rpm</code>文件选择版本进行安装。<blockquote>
<p>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。</p>
</blockquote>
</li>
</ul>
<h5 id="安装Docker-CE-1"><a href="#安装Docker-CE-1" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h5><p>切换到对应的目录进行下载和安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install /path/to/package.rpm</span></span><br></pre></td></tr></table></figure>
<h5 id="启动Docker-1"><a href="#启动Docker-1" class="headerlink" title="启动Docker"></a>启动Docker</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>
<h5 id="通过运行hello-world-验证Docker-CE-安装正确-1"><a href="#通过运行hello-world-验证Docker-CE-安装正确-1" class="headerlink" title="通过运行hello-world 验证Docker CE 安装正确"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>
<h4 id="通过使用便捷脚本安装"><a href="#通过使用便捷脚本安装" class="headerlink" title="通过使用便捷脚本安装"></a>通过使用便捷脚本安装</h4><p>Docker 提供了便捷脚本在<a href="https://get.docker.com/" target="_blank" rel="noopener">get.docker.com</a>和<a href="https://test.docker.com/" target="_blank" rel="noopener">test.docker.com</a>,使用脚本安装可能会存在安全风险，建议不要在生产环境中使用</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 安装 pyenv</title>
    <url>/2018/02/27/cnetos-install-pyenv/</url>
    <content><![CDATA[<blockquote>
<p>人生苦短，我用Python</p>
</blockquote>
<p>Python 短小精悍，在很多小地方使用Python，能提升效率，产生更大的价值。一般我们更多的是在本地使用，或者一个人使用，但是在服务器上，可能存在多人使用的情况，所以需要不同版本的Python，手动安装很容易冲突，所以采用环境管理来进行管理。<a id="more"></a></p>
<h3 id="安装Pyenv"><a href="#安装Pyenv" class="headerlink" title="安装Pyenv"></a>安装Pyenv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel  <span class="comment">#安装所需的包</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录、安装</span></span><br><span class="line">mkdir ~/.pyenv</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/yyuu/pyenv.git ~/.pyenv  </span><br><span class="line"><span class="comment">#配置环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.bashrc  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.bashrc  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.bashrc  </span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span> -l</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96; bash</span><br><span class="line">#列出所有版本</span><br><span class="line">pyenv install --list</span><br><span class="line"></span><br><span class="line">#安装python 3.5.2</span><br><span class="line">pyenv install 3.5.2</span><br><span class="line"></span><br><span class="line">#全局使用</span><br><span class="line">pyenv global 3.5.2</span><br><span class="line"></span><br><span class="line">#检查版本</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure>

<p>通过环境管理，一台服务器上可以存在多个环境，方便部署。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令(待完善)</title>
    <url>/2017/11/30/common-commonds/</url>
    <content><![CDATA[<h4 id="列出所有并删除已停止容器"><a href="#列出所有并删除已停止容器" class="headerlink" title="列出所有并删除已停止容器"></a>列出所有并删除已停止容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rm -v $(docker ps -aq -f status=exited)</span><br><span class="line">$ docker volume rm $(docker volume ls -qf dangling=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<h4 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume create --name data</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 更换源</title>
    <url>/2018/05/03/config-npm-registry/</url>
    <content><![CDATA[<p>由于npm的源在国外，所以有时候使用起来，会碰到速度极慢的情况，好在一些公司做了源的同步，可以使用这些源来达到加速下载，减少等待时间。<a id="more"></a></p>
<h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><ul>
<li>临时使用<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express --save</span><br></pre></td></tr></table></figure></li>
<li>持久使用<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>
<li>验证<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></li>
<li>官方源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="通过-nrm-更换源"><a href="#通过-nrm-更换源" class="headerlink" title="通过 nrm 更换源"></a>通过 nrm 更换源</h3><p>最近在工作的时候，发现淘宝的源，无法正常下载，于是需要换其他的源，在网上找源的过程中，发现了<code>nrm -- NPM registry manager</code>，它可以帮你快速的帮你在不同的源之间切换，现在包括<code>npm</code>、<code>cnpm</code>、<code>taobao</code>、<code>nj(nodejitsu)</code>、<code>rednpm</code>，还可以加入你自己的私有源。</p>
<ul>
<li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure></li>
<li>例子<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm ls</span><br><span class="line">* npm -----  https://registry.npmjs.org/</span><br><span class="line">  cnpm ----  http://r.cnpmjs.org/</span><br><span class="line">  taobao --  https://registry.npm.taobao.org/</span><br><span class="line">  nj ------  https://registry.nodejitsu.com/</span><br><span class="line">  rednpm -- http://registry.mirror.cqupt.edu.cn</span><br><span class="line">  skimdb -- https://skimdb.npmjs.com/registry</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">$ nrm use cnpm  <span class="comment">#switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>通过nrm换源，体验一下就提升了很多，工作更有效率了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps实践1:基本概念和环境配置</title>
    <url>/2018/02/26/devops-1-environmental-configuration/</url>
    <content><![CDATA[<h3 id="什么是DevOps"><a href="#什么是DevOps" class="headerlink" title="什么是DevOps"></a>什么是DevOps</h3><blockquote>
<p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。<a id="more"></a></p>
</blockquote>
<p><img src="devops-1-environmental-configuration/v2-1015dcf5e27561114bb64348fdd8da03_hd.jpg" alt=""><br>我认为DevOps更应该是一种工程师文化，促进研发、测试和运维之间的沟通和闭环协作，共同达成业务目标。同时需要相应的流程和工具去配合，并简化工作，提升效率。</p>
<h3 id="DevOps各个阶段"><a href="#DevOps各个阶段" class="headerlink" title="DevOps各个阶段"></a>DevOps各个阶段</h3><ol>
<li>第一阶段：流程化<br>基于Jenkins和Docker进行实施，能够初步将持续构建、持续部署、持续发布连接在一起，减少手工配置，提升效率（基于本地环境进行实践，尽可能测试出问题，为线上环境做准备）。</li>
<li>第二阶段：自动化服务（部分）<br>基于阿里云EDAS，基本生产环境的服务全部部署在阿里云，通过使用阿里云的服务为线上的应用提供运维、发布、回滚、监控、诊断等；此阶段准备将部分非核心服务进行DevOps化；同时引入自动化测试，UI自动化、接口自动化，提高测试效率。</li>
<li>第三阶段：智能化<br>根据实际的业务情况，通过DevOps提升开发、测试、运维效率</li>
</ol>
<p><img src="devops-1-environmental-configuration/191800078ffdfe660fb3.jpeg" alt="如何一步步实现DevOps"><br><img src="devops-1-environmental-configuration/191500078c0b39a29f95.jpeg" alt="CI/CD"><br><img src="devops-1-environmental-configuration/1916000764d774a3eee4.jpeg" alt="自动化测试"><br><img src="devops-1-environmental-configuration/191700078c8d4238617c.jpeg" alt="持续集成"><br><img src="devops-1-environmental-configuration/191b000762026287366b.jpeg" alt="微服务最佳实践"></p>
<h3 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h3><p>目前处于第一阶段，希望通过相应的工具链提升开发的效率，进行持续构建、持续部署（dev、test两个环境），同时在线下环境进行实验。<br>所需要用到的软件和工具:</p>
<ul>
<li>Jenkins</li>
<li>Dokcer</li>
<li>IDEA</li>
<li>Git<br>主要是上面几种工具，尽可能使用少量的工具，减少开发、测试、运维的学习压力，方便快速上手，同时需要使用的其他软件包会在文档里面列出。</li>
</ul>
<h3 id="Docker-环境配置"><a href="#Docker-环境配置" class="headerlink" title="Docker 环境配置"></a>Docker 环境配置</h3><p>因为众所周知的原因，Docker的下载速度在国内下载速度比较慢，所以采用镜像地址进行安装。</p>
<ul>
<li>Windows 环境</li>
</ul>
<p>Docker for Windows 在Windows上运行Docker。系统要求，Windows10x64位，支持Hyper-V。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/windows/InstallDocker.msi</code><br>参考’<a href="http://www.widuu.com/docker/installation/windows.html&#39;" target="_blank" rel="noopener">http://www.widuu.com/docker/installation/windows.html&#39;</a></p>
<ul>
<li>Mac 环境</li>
</ul>
<p>Docker for Mac 在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><code>https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</code><br>可参考：<code>http://blog.csdn.net/jiang_xinxing/article/details/58025417</code></p>
<ul>
<li>Linux 环境</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#执行以下脚本可以高速安装（适用于Ubuntu，Debian,Centos等大部分Linux）</span><br><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>

<p>如果您的电脑版本过旧，可以使用 Docker Toolbox 在Windows或者Mac上运行Docker。适用于Mac OS X 10.8+ 或者 Windows 7/8.1。<br><code>https://get.daocloud.io/toolbox/</code> (自行下载相应的版本，window的选exe文件，Mac 选pkg文件)</p>
<h3 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search XXX  #查询docker镜像</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull XXX #拉取docker 镜像</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images #查看已下载的docker镜像</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run XXX #运行docker容器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps #查看正在运行的docker容器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop XXX #停止正在运行的容器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm -f XXX #删除容器</span><br></pre></td></tr></table></figure>
<p>要想更好的使用Docker和各种技术需要不断充电和探索。</p>
<p>部分图片来自 <code>http://blog.csdn.net/ghostcloud2016/article/details/62426612</code></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps实践2:Spring Boot集成Docker环境</title>
    <url>/2018/02/27/devops-2-springboot-docker-integrated/</url>
    <content><![CDATA[<blockquote>
<p>知之愈明,则行之愈笃；行之愈笃,则知之益明.——朱熹（宋）</p>
</blockquote>
<p>我们在平常学习了很多的知识，但是如果没有深入去实践，知识掌握就不会牢固，所以需要通过实践来巩固。现在大多数的业务都切换到了Spring Boot，更加复杂和庞大的业务则使用Spring Cloud，当然也有用Dubbo，所以准备在Spring Boot中集成Docker，进行服务化。 <a id="more"></a></p>
<h3 id="创建项目进行集成"><a href="#创建项目进行集成" class="headerlink" title="创建项目进行集成"></a>创建项目进行集成</h3><p>创建一个Spring Boot 项目</p>
<p><img src="devops-2-springboot-docker-integrated/WX20180227-174110.png" alt="名称"></p>
<p><img src="devops-2-springboot-docker-integrated/WX20180227-174208.png" alt="web服务"></p>
<h3 id="增加项目对Docker的支持"><a href="#增加项目对Docker的支持" class="headerlink" title="增加项目对Docker的支持"></a>增加项目对Docker的支持</h3><ol>
<li><p>修改pom.xml配置，增加对应的插件，可以使用Maven进行打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Docker 镜像前缀，放在&lt;properties&gt; 标签中</span></span><br><span class="line"> &lt;docker.image.prefix&gt;devops&lt;/docker.image.prefix&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>添加视图模板支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增加对应的maven 插件，插件有多种，这里采用 <groupId>com.spotify</groupId></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>devops<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- docker打包 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-hosted<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- docker仓库地址，用于推送镜像 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">registryUrl</span>&gt;</span>$&#123;docker.repository&#125;<span class="tag">&lt;/<span class="name">registryUrl</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置为false，避免自动推送镜像 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>false<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- Dockerfile路径 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 构建的镜像名称 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改Maven settings 文件配置（主要的目的是为了方便后面我们将自己的服务推送到自己的私服，方便管理）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#本地私服的配置</span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">docker.repository</span>&gt;</span>http://192.168.100.77:8081/repository/docker<span class="tag">&lt;/<span class="name">docker.repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">#激活私服配置</span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>上面基本的pom配置就完成了，之后开始配置Docker相关的脚本</p>
<h3 id="Docker脚本配置"><a href="#Docker脚本配置" class="headerlink" title="Docker脚本配置"></a>Docker脚本配置</h3><p>在src/main 目录下创建docker 文件夹，刚刚上面的pom配置里声明了Dockerfile的路径<br>创建文件Dockerfile ，注意文件没有后缀，之后增加如下脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8  #基本镜像</span><br><span class="line">VOLUME /tmp  #挂载文件位置，/tmp 为临时目录</span><br><span class="line">ADD devops.jar app.jar  #添加对应的jar，使用maven打包后会自动到target目录找devops.jar 文件</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"] # 程序启动入口</span><br></pre></td></tr></table></figure>

<h3 id="打包、运行镜像"><a href="#打包、运行镜像" class="headerlink" title="打包、运行镜像"></a>打包、运行镜像</h3><p>创建对应的测试文件，打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package docker:build  # 一气呵成O(∩_∩)O~~</span><br></pre></td></tr></table></figure>
<p>在运行docker命令前，先确认电脑上的docker环境是否配置成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会有如下显示</span></span><br><span class="line">Client:</span><br><span class="line"> Version:	17.12.0-ce</span><br><span class="line"> API version:	1.35</span><br><span class="line"> Go version:	go1.9.2</span><br><span class="line"> Git commit:	c97c6d6</span><br><span class="line"> Built:	Wed Dec 27 20:03:51 2017</span><br><span class="line"> OS/Arch:	darwin/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:	17.12.0-ce</span><br><span class="line">  API version:	1.35 (minimum version 1.12)</span><br><span class="line">  Go version:	go1.9.2</span><br><span class="line">  Git commit:	c97c6d6</span><br><span class="line">  Built:	Wed Dec 27 20:12:29 2017</span><br><span class="line">  OS/Arch:	linux/amd64</span><br><span class="line">  Experimental:	true</span><br></pre></td></tr></table></figure>
<p>上面说明Docker是正常启动的</p>
<p>然后查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="devops-2-springboot-docker-integrated/WX20180227-203234.png" alt="web服务"><br>上图说明我们的镜像打包成功<br>然后运行一下，检查镜像是否能够正常启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动镜像 -d 表示后台运行，-p 端口进行映射 --name docker服务名称  devops/devops:latest 运行的镜像</span></span><br><span class="line">docker run -d  -p 8080:8080 --name devops devops/devops:latest</span><br><span class="line"><span class="meta">#</span><span class="bash">执行docker ps 查看镜像是否运行</span></span><br></pre></td></tr></table></figure>
<p><img src="devops-2-springboot-docker-integrated/WX20180227-203815.png" alt="web服务"><br>如果，说明服务是正常启动了，之后请求<br><a href="http://localhost:8080/index?name=World" target="_blank" rel="noopener">http://localhost:8080/index?name=World</a><br><img src="devops-2-springboot-docker-integrated/WX20180227-204116.png" alt="web服务"><br>能够请求成功，说明镜像部署成功</p>
<h3 id="停止释放镜像"><a href="#停止释放镜像" class="headerlink" title="停止释放镜像"></a>停止释放镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 养成好习惯，停止释放镜像</span></span><br><span class="line">docker stop 2026e45bc2ce</span><br><span class="line">docker rm 2026e45bc2ce</span><br></pre></td></tr></table></figure>

<p>代码可在<a href="https://github.com/junhuali/devops-springboot" target="_blank" rel="noopener">https://github.com/junhuali/devops-springboot</a> 下载</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 创建MySQL</title>
    <url>/2018/01/17/docker-create-mysql/</url>
    <content><![CDATA[<h3 id="不要在生产环境中使用，在开发和测试阶段使用比较方便"><a href="#不要在生产环境中使用，在开发和测试阶段使用比较方便" class="headerlink" title="不要在生产环境中使用，在开发和测试阶段使用比较方便"></a>不要在生产环境中使用，在开发和测试阶段使用比较方便<a id="more"></a></h3><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>
<h3 id="创建volume-（比较方便，用完方便删除）"><a href="#创建volume-（比较方便，用完方便删除）" class="headerlink" title="创建volume （比较方便，用完方便删除）"></a>创建volume （比较方便，用完方便删除）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create --name mysql-data</span><br></pre></td></tr></table></figure>
<h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart="always" -d \</span><br><span class="line">  -v mysql-data:/var/lib/mysql \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  -p 0.0.0.0:3306:3306 --name mysql \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=xxx mysql:latest \</span><br><span class="line">  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>
<p><code>restart=&quot;always&quot;</code> docker 重启后自动启动<br><code>/etc/localtime:/etc/localtime</code> 解决mysql 时区问题<br><code>MYSQL_ROOT_PASSWORD</code> 设置你自己的密码，默认用户名root<br><code>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code> 设置字符集，默认需要修改，根据官方文档，可以在创建的时候指定</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装MongoDB(Mongo3.x)</title>
    <url>/2017/09/23/docker-install-MongoDB/</url>
    <content><![CDATA[<h3 id="使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume"><a href="#使用Volume-Volume-比-普通的挂载磁盘有很多优势，这里采用Volume" class="headerlink" title="使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)"></a>使用Volume(Volume 比 普通的挂载磁盘有很多优势，这里采用Volume)<a id="more"></a></h3><h4 id="创建Volume-命名为mongo-data"><a href="#创建Volume-命名为mongo-data" class="headerlink" title="创建Volume 命名为mongo-data"></a>创建Volume 命名为mongo-data</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create --name mongo-data</span><br></pre></td></tr></table></figure>

<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --restart&#x3D;&quot;always&quot; \</span><br><span class="line">          -d \</span><br><span class="line">          --name mongo\</span><br><span class="line">          -p 17017:27017\</span><br><span class="line">          -v mongo-data:&#x2F;data&#x2F;db\</span><br><span class="line">          -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime\</span><br><span class="line">          mongo:latest --storageEngine wiredTiger -auth</span><br></pre></td></tr></table></figure>

<p><code>--storageEngine</code> MongoDB 的存储引擎，具体请查阅官方文档,此处采用wiredTiger，将数据存储到磁盘<br><code>-auth</code> 设置Mongo的权限</p>
<h4 id="进入mongo镜像"><a href="#进入mongo镜像" class="headerlink" title="进入mongo镜像"></a>进入mongo镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mongo mongo admin</span><br></pre></td></tr></table></figure>

<h3 id="创建用户-user123-密码-123456"><a href="#创建用户-user123-密码-123456" class="headerlink" title="创建用户 user123 密码:123456"></a>创建用户 user123 密码:123456</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;user: &quot;user123&quot;,pwd: &quot;123456&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br></pre></td></tr></table></figure>

<p>至此，MongDB 安装完成</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建Nexus 私服</title>
    <url>/2017/09/30/docker-install-nexus/</url>
    <content><![CDATA[<h3 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>
<h3 id="拉取Nexus-镜像"><a href="#拉取Nexus-镜像" class="headerlink" title="拉取Nexus 镜像"></a>拉取Nexus 镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull sonatype/nexus3 ( 国内建议使用daocloud，centos 可以使用dao pull sonatype/nexus3)</span><br></pre></td></tr></table></figure>
<h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart="always" -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>
<h3 id="访问网址打开-账号-密码-admin-admin123"><a href="#访问网址打开-账号-密码-admin-admin123" class="headerlink" title="访问网址打开(账号/密码   admin/admin123)"></a>访问网址打开(账号/密码   admin/admin123)</h3><p><a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></p>
<p>参考<a href="https://hub.docker.com/r/sonatype/nexus3/" target="_blank" rel="noopener">https://hub.docker.com/r/sonatype/nexus3/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装 RabbitMQ 集群</title>
    <url>/2017/12/04/docker-install-rabbitmq-cluster/</url>
    <content><![CDATA[<p>Docker 有个好处就是方便折腾，下面将使用bijukunjummen 提供的docker-rabbitmq-cluster 脚本进行安装。<a id="more"></a></p>
<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><ul>
<li>检查是否安装过docker-compose<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose -v <span class="comment">#出现docker-compose version 1.16.1, build 6d1ac21 类似，说明安装成功</span></span><br></pre></td></tr></table></figure></li>
<li>如果没有安装docker-compose，进行安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器安装</span></span><br><span class="line">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li>
<li>在windows 和 Mac 下载对应的安装包进行安装<br><a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">Windows下载地址</a><br><a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Mac下载地址</a></li>
</ul>
<h3 id="下载对应的脚本"><a href="#下载对应的脚本" class="headerlink" title="下载对应的脚本"></a>下载对应的脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/bijukunjummen/docker-rabbitmq-cluster.git</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> docker-rabbitmq-cluster/cluster/</span><br><span class="line">$ docker-compose up -d <span class="comment">#启动</span></span><br></pre></td></tr></table></figure>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>登录的账号密码（可以自行在脚本里面修改）<br>user: myuser<br>password: mypass<br>然后访问<code>localhost:15672</code>进行访问</li>
</ul>
<p>以上使用bijukunjummen 的脚本，可参见<a href="https://github.com/bijukunjummen/docker-rabbitmq-cluster" target="_blank" rel="noopener">github</a><br>以及<a href="http://get.daocloud.io/#install-docker" target="_blank" rel="noopener">daocloud</a> docker-compose脚本</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign表单提交</title>
    <url>/2019/06/12/feign-post-form-data/</url>
    <content><![CDATA[<p>Feign在正常调用的时候，一般都是基于<code>application/json</code>的方式进行传输数据的，但是有时候我们内部调用的服务是基于<code>表单提交</code>的，默认使用的<code>JSON</code>提交。所以就需要对请求进行改造。<a id="more"></a></p>
<h4 id="默认JSON-提交"><a href="#默认JSON-提交" class="headerlink" title="默认JSON 提交"></a>默认JSON 提交</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"xxx"</span>, url = <span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xxx</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value =<span class="string">"xxx"</span>)</span><br><span class="line">    <span class="function">Object <span class="title">getXxxInfo</span><span class="params">(@RequestBody xxxReq xxxReq)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的就是默认的方式</p>
<h4 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h4><p>使用表单的情况下，需要引入两个jar，使用maven 进行添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义表单解码器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> feign.codec.Encoder;</span><br><span class="line"><span class="keyword">import</span> feign.form.spring.SpringFormEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-11 15:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormSupportConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * new一个form编码器，实现支持form表单提交</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignFormEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启Feign的日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-25 19:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"ucd"</span>, url = <span class="string">"$&#123;xxx&#125;"</span>, configuration = FormSupportConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xxx</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/xxx/xxx"</span>, consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;, produces = &#123;MediaType.ALL_VALUE&#125;)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">Response <span class="title">payRequest</span><span class="params">(Map&lt;String, ?&gt; queryParam)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过<code>response.body().asReader()</code>方法取出body中的内容再进行处理。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个flutter</title>
    <url>/2019/07/11/first-flutter-app/</url>
    <content><![CDATA[<p><a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a> is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.<a id="more"></a></p>
<blockquote>
<p>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具</p>
</blockquote>
<p>最近看到很多的技术网站都在发Flutter相关的技术文章，所以自己也花时间了解了一下，写了个简单的HelloWorld体验了一下，感觉很不错。简单的记录一下。</p>
<p>###安装<br>安装环境基于MAC，Windows上也没有太大的区别。<br>####安装Xcode、Android Stuido<br>#####Xcode 安装<br>Xocde 的安装比较简单，直接去App Store搜索就可以了，<img src="first-flutter-app/WX20190711-203332@2x.png" alt="示例">之后需要打开，会自动的进行相应的配置。<br>#####Android Studio 安装<br><a href="https://developer.android.com/studio" target="_blank" rel="noopener">Android Studio官网下载</a><br><img src="first-flutter-app/WX20190711-203810@2x.png" alt="示例"><br>当前版本为3.4.2<br>配合相关的SDK，然后增加虚拟机<img src="first-flutter-app/WX20190711-204747@2x.png" alt="示例"><br>需要注意的是，建议使用API28,28的版本flutter会报错</p>
<h5 id="安装flutter"><a href="#安装flutter" class="headerlink" title="安装flutter"></a>安装flutter</h5><p>Flutter在国内访问的速度不太好，访问<a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noopener">Flutter</a>，进行下载配置，建议使用梯子，推荐使用喵帕斯，可以联系我获取邀请码。</p>
<ul>
<li>增加源站镜像环境变量(使用第三方的包的时候需要用到)</li>
</ul>
<p>Windows</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量，新建用户环境变量,增加下面两个变量</span></span><br><span class="line">PUB_HOSTED_URL https://pub.flutter-io.cn </span><br><span class="line">FLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>

<p>Mac OS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~ cd ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash">增加下面两个环境变量</span></span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn  </span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="meta">#</span><span class="bash">保存 ,激活生效</span></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>将下载的安装包解压，当前的版本为<code>1.7</code>，然后配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~ vi ~/.bash_profile</span><br><span class="line"><span class="comment">#增加如下,根据你实际的位置进行配置</span></span><br><span class="line"><span class="comment">#flutter</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/xxx/develop/flutter/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">flutter --version</span><br><span class="line">  ╔════════════════════════════════════════════════════════════════════════════╗</span><br><span class="line">  ║ A new version of Flutter is available!                                     ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ To update to the latest version, run <span class="string">"flutter upgrade"</span>.                    ║</span><br><span class="line">  ╚════════════════════════════════════════════════════════════════════════════╝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Flutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision 7a4c33425d (2 months ago) • 2019-04-29 11:05:24 -0700</span><br><span class="line">Engine • revision 52c7a1e849</span><br><span class="line">Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5)</span><br><span class="line"><span class="comment">#提示我更新，我当时安装的是1.5.4,更新完成再次验证，更新会花点时间，使用下面的命令行走代理，或者全局也可以，根据实际情况配置</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;</span><br><span class="line"><span class="built_in">export</span> all_proxy=socks5://127.0.0.1:1086</span><br><span class="line"><span class="comment">#运行doctor 检测配置，第一次安装需要安装额外的几个包，按照提示安装即可</span></span><br><span class="line">Running flutter doctor...</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.7.8+hotfix.3, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 28.0.3)</span><br><span class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br><span class="line">[!] Xcode - develop <span class="keyword">for</span> iOS and macOS (Xcode 10.2.1)</span><br><span class="line">    ! CocoaPods out of date (1.6.0 is recommended).</span><br><span class="line">        CocoaPods is used to retrieve the iOS and macOS platform side<span class="string">'s plugin code that responds to your plugin usage on the Dart side.</span></span><br><span class="line"><span class="string">        Without CocoaPods, plugins will not work on iOS or macOS.</span></span><br><span class="line"><span class="string">        For more info, see https://flutter.dev/platform-plugins</span></span><br><span class="line"><span class="string">      To upgrade:</span></span><br><span class="line"><span class="string">        brew upgrade cocoapods</span></span><br><span class="line"><span class="string">        pod setup</span></span><br><span class="line"><span class="string">[!] iOS tools - develop for iOS devices</span></span><br><span class="line"><span class="string">    ✗ ios-deploy not installed. To install:</span></span><br><span class="line"><span class="string">        brew install ios-deploy</span></span><br><span class="line"><span class="string">[✓] Android Studio (version 3.4)</span></span><br><span class="line"><span class="string">[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3)</span></span><br><span class="line"><span class="string">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span></span><br><span class="line"><span class="string">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span></span><br><span class="line"><span class="string">[!] VS Code (version 1.35.1)</span></span><br><span class="line"><span class="string">    ✗ Flutter extension not installed; install from</span></span><br><span class="line"><span class="string">      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter</span></span><br><span class="line"><span class="string">[!] Proxy Configuration</span></span><br><span class="line"><span class="string">    ! NO_PROXY is not set</span></span><br><span class="line"><span class="string">[!] Connected device</span></span><br><span class="line"><span class="string">    ! No devices available</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">! Doctor found issues in 7 categories.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#第一次安装，需要安装下面的包，brew 的使用可用搜我之前发的文章</span></span><br><span class="line"><span class="string">brew update</span></span><br><span class="line"><span class="string">brew install --HEAD usbmuxd</span></span><br><span class="line"><span class="string">brew link usbmuxd</span></span><br><span class="line"><span class="string">brew install --HEAD libimobiledevice</span></span><br><span class="line"><span class="string">brew install ideviceinstaller</span></span><br></pre></td></tr></table></figure>

<p>进入flutter的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~ tree -L 1 </span><br><span class="line">.</span><br><span class="line">├── AUTHORS</span><br><span class="line">├── CODE_OF_CONDUCT.md</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── PATENTS</span><br><span class="line">├── README.md</span><br><span class="line">├── analysis_options.yaml</span><br><span class="line">├── bin</span><br><span class="line">├── dartdoc_options.yaml</span><br><span class="line">├── dev</span><br><span class="line">├── examples</span><br><span class="line">├── flutter_console.bat</span><br><span class="line">├── flutter_root.iml</span><br><span class="line">├── packages</span><br><span class="line">└── version</span><br></pre></td></tr></table></figure>
<p>在目录中看到有个<code>examples-helloworld</code> 里面有对应的示例，使用Android Studio 打开：<br><img src="first-flutter-app/WX20190711-212257@2x.png" alt="示例">,选择对应的模拟器，Android 的和iOS 都可以，也可以使用真机，然后点击右上角运行即可<br>使用29的API会出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error connecting to the service protocol: HttpException: Connection closed before full header was received, uri &#x3D; http:&#x2F;&#x2F;127.0.0.1:53668&#x2F;CCQP0ed9oCM&#x3D;&#x2F;ws</span><br></pre></td></tr></table></figure>
<p>运行后的效果：<br><img src="first-flutter-app/WX20190711-212915@2x.png" alt="效果"></p>
<p>demo比较简单，但是感觉非常的方便，后面有空继续深入学习。</p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>gitee码云使用webhook</title>
    <url>/2018/02/25/gitee-with-webhook/</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>我们经常使用GitHub、GitLab、Gitee 之类的仓库，有时候需要频繁的发布代码打包，人工发布，工作量有时候会很大，有时候还容易出错，所以会使用Jenkins一类的工具进行辅助，但是如果是一个简单的项目或者是个人项目使用Jenkins就显得太重了，可以直接使用webhook，比较方便。<a id="more"></a></p>
<h3 id="什么是webhook"><a href="#什么是webhook" class="headerlink" title="什么是webhook"></a>什么是webhook</h3><blockquote>
<p>准确的说webhoo是一种web回调或者http的push API，是向APP或者其他应用提供实时信息的一种方式。Webhook在数据产生时立即发送数据，也就是你能实时收到数据。这一种不同于典型的API，需要用了实时性需要足够快的轮询。这无论是对生产还是对消费者都是高效的，唯一的缺点是初始建立困难。</p>
</blockquote>
<blockquote>
<p>Webhook有时也被称为反向API，因为他提供了API规则，你需要设计要使用的API。Webhook将向你的应用发起http请求，典型的是post请求，应用程序由请求驱动。</p>
</blockquote>
<h3 id="配置webhook"><a href="#配置webhook" class="headerlink" title="配置webhook"></a>配置webhook</h3><p>知道什么是webhook 后我们就要开始配置我们自己的项目了。<br>环境：<br>   CentOS7<br>   Gitee（网上GitHub的教程比较多，这个基于码云）</p>
<ul>
<li>配置项目公私钥</li>
</ul>
<ol>
<li>生产公钥<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxx@xxxxx.com"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Generating public/private rsa key pair...</span></span><br><span class="line"><span class="comment"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure></li>
<li>查看公钥<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure></li>
<li>添加公钥<br><img src="gitee-with-webhook/image-2018-153940@2x.png" alt="步骤"></li>
<li>测试<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">Welcome to Gitee.com, yourname! <span class="comment"># 返回，说明正常</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>配置服务器node环境</li>
</ul>
<ol>
<li>安装nvm，服务器上使用nvm 方便多版本node切换<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#加入下面的内容</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">nvm install stable <span class="comment"># 安装稳定版</span></span><br><span class="line">nvm current <span class="comment"># 查看当前的版本</span></span><br></pre></td></tr></table></figure></li>
<li>配置相关的脚本<br>安装gitee-webhook-handler(GitHub,GitLab,gitee 的包是不同的，不能混用)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /opt/webhook <span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/webhook</span><br><span class="line">npm init <span class="comment"># 初始化项目</span></span><br><span class="line">npm install  gitee-webhook-handler --save <span class="comment"># 当前的版本为v0.1.2</span></span><br></pre></td></tr></table></figure></li>
<li>创建对应的webhook服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim webhook.js</span><br><span class="line"></span><br><span class="line">var http = require(<span class="string">'http'</span>)</span><br><span class="line">var createHandler = require(<span class="string">'gitee-webhook-handler'</span>)</span><br><span class="line">var handler = createHandler(&#123; path: <span class="string">'/webhooks_push'</span>, secret: <span class="string">'123456'</span> &#125;)<span class="comment"># post 所需要用到的秘钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> run_cmd(cmd, args, callback) &#123;</span><br><span class="line">  var spawn = require(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">  var child = spawn(cmd, args);</span><br><span class="line">  var resp = <span class="string">""</span>;</span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="keyword">function</span>(buffer) &#123; resp += buffer.toString(); &#125;);</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="title">function</span></span>() &#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="keyword">function</span> (err) &#123;</span><br><span class="line">  console.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line">handler.on(<span class="string">'Push Hook'</span>, <span class="keyword">function</span> (event) &#123;  <span class="comment"># 这个地方就是GitHub 和 Gitee 不一样的地方，需要注意</span></span><br><span class="line">  console.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">    run_cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>], <span class="keyword">function</span>(text)&#123; console.log(text) &#125;);<span class="comment"># 需要执行的脚本位置</span></span><br><span class="line">&#125;)</span><br><span class="line">try &#123;</span><br><span class="line">  http.createServer(<span class="keyword">function</span> (req, res) &#123;</span><br><span class="line">    handler(req, res, <span class="keyword">function</span> (err) &#123;</span><br><span class="line">      res.statusCode = 404</span><br><span class="line">      res.end(<span class="string">'no such location'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).listen(6666) <span class="comment"># 服务监听的端口，可以自行修改</span></span><br><span class="line">&#125;catch(err)&#123;</span><br><span class="line">  console.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建需要执行的脚本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim deploy.sh</span><br><span class="line">git pull xxxxx  <span class="comment"># 根据自己的需要自行编写</span></span><br></pre></td></tr></table></figure></li>
<li>测试服务<br><img src="gitee-with-webhook/WX20180225-163439@2x.png" alt=""><br><img src="gitee-with-webhook/WX20180225-163748@2x.png" alt=""><br>显示ok，说明成功</li>
</ol>
<h3 id="使用pm2应用进程管理器"><a href="#使用pm2应用进程管理器" class="headerlink" title="使用pm2应用进程管理器"></a>使用pm2应用进程管理器</h3><p>使用node 启动服务不是很方便，推荐使用pm2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line">pm2 start webhook.js</span><br><span class="line">pm2 monit <span class="comment"># 可以通过此命令查看服务的状态</span></span><br></pre></td></tr></table></figure>
<p><img src="gitee-with-webhook/WX20180225-164721@2x.png" alt=""><br>上图显示了一些应用的基本信息，可以更好的观察到服务的状态</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>配置完成后，只要pull代码到仓库，就会触发webhook执行脚本，十分的方便，同时减少了工作量，相对采用轮询的方式消耗的资源更小。</p>
<p>参考：<a href="https://www.npmjs.com/package/gitee-webhook-handler" target="_blank" rel="noopener">https://www.npmjs.com/package/gitee-webhook-handler</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;</title>
    <url>/2017/09/30/hexo-can&#39;t-find-module/</url>
    <content><![CDATA[<p>有时候安装完hexo后， 执行命令的时候总是报错，但是不影响程序运行，但是。。。会逼死处女座，O(∩<em>∩)O哈哈~</em>) <a id="more"></a><br>报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; Error: Cannot find module &#39;.&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings&#39;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class="line">    at Function.Module._load (module.js:476:23)</span><br><span class="line">    at Module.require (module.js:568:17)</span><br><span class="line">    at require (internal&#x2F;module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;dtrace-provider&#x2F;dtrace-provider.js:18:23)</span><br><span class="line">    at Module._compile (module.js:624:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class="line">    at Module.load (module.js:545:32)</span><br><span class="line">    at tryModuleLoad (module.js:508:12)</span><br><span class="line">    at Function.Module._load (module.js:500:3)</span><br><span class="line">    at Module.require (module.js:568:17)</span><br><span class="line">    at require (internal&#x2F;module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;bunyan&#x2F;lib&#x2F;bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:624:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:635:10)</span><br><span class="line">    at Module.load (module.js:545:32)</span><br><span class="line">    at tryModuleLoad (module.js:508:12)</span><br><span class="line">    at Function.Module._load (module.js:500:3)</span><br><span class="line">    at Module.require (module.js:568:17)</span><br><span class="line">    at require (internal&#x2F;module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (&#x2F;Users&#x2F;xxx&#x2F;Dropbox&#x2F;hexo&#x2F;node_modules&#x2F;hexo-log&#x2F;lib&#x2F;log.js:3:14)</span><br><span class="line">    at Module._compile (module.js:624:30) code: &#39;MODULE_NOT_FOUND&#39; &#125;</span><br><span class="line">INFO  Deleted database.</span><br></pre></td></tr></table></figure>
<p>上面的错误看的非常的影响心情有木有？</p>
<p>找了网上的很多方法，最后选择了一种比较粗暴的方法<br>删除hexo目录下的<code>node_modules</code>目录，之后执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>然后执行hexo server，就会惊喜的发现错误没有了 O(∩<em>∩)O~~</em>)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结</title>
    <url>/2019/04/18/interview-experience/</url>
    <content><![CDATA[<p>最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<a id="more"></a></p>
<p>下面是一些常见的问题:</p>
<h4 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h4><ul>
<li>HashMap的数据结构、底层实现。</li>
<li>常用的集合类有哪些</li>
<li>session 和 cookie 的区别，cookie中有哪些键值对</li>
<li>Java 静态块 、构造块、构造函数执行顺序</li>
</ul>
<h4 id="锁、缓存、消息队列"><a href="#锁、缓存、消息队列" class="headerlink" title="锁、缓存、消息队列"></a>锁、缓存、消息队列</h4><ul>
<li>分布式锁实现</li>
<li>乐观锁、悲观锁的实现</li>
<li>Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决</li>
</ul>
<h4 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h4><ul>
<li>Spring 几种常用的单例模式</li>
<li>Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）</li>
<li>Dubbo 和 Spring Cloud 的区别以及优劣</li>
<li>消息队列的使用、消息幂等</li>
<li>Spring bean 的生命周期</li>
<li>@Autowired 和 @Resource 的区别</li>
</ul>
<h4 id="ORM、数据库"><a href="#ORM、数据库" class="headerlink" title="ORM、数据库"></a>ORM、数据库</h4><ul>
<li>MyBatis 中#和$的区别</li>
<li>左连接的时候,条件在where中和不在where中结果的区别</li>
</ul>
<h4 id="微服务、分布式"><a href="#微服务、分布式" class="headerlink" title="微服务、分布式"></a>微服务、分布式</h4><ul>
<li>Session 分布式方案</li>
<li>Spring Cloud 中的常用组件以及用途</li>
<li>分布式事务</li>
<li>限流、降级</li>
</ul>
<p>上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>工作经历</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发编程学习</title>
    <url>/2018/06/13/java-concurrency-study/</url>
    <content><![CDATA[<h3 id="关于并发"><a href="#关于并发" class="headerlink" title="关于并发"></a>关于并发</h3><p>并发在开发中广泛的应用，非常的重要，最近在读《Java并发编程的艺术》艺术，希望写一些东西来记录和巩固。<a id="more"></a></p>
<h3 id="上下文切换、死锁"><a href="#上下文切换、死锁" class="headerlink" title="上下文切换、死锁"></a>上下文切换、死锁</h3><h4 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h4><p>频繁的上下文切换不仅不能加快程序的运行，还会降低程序的性能。文中提到了一些方法减少上下文切换的方法：</p>
<ul>
<li>无锁并发编程<br>通过将数据分段，使用不同线程处理不同的数据。</li>
<li>CAS 算法<br>Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>
<li>使用最小线程<br>避免创建不需要的线程，避免线程处于等待状态。</li>
<li>使用协程<br>在单线程里实现多任务的调度，并在线程里维持多个任务间的切换</li>
</ul>
<h4 id="死锁、避免死锁的常见方法"><a href="#死锁、避免死锁的常见方法" class="headerlink" title="死锁、避免死锁的常见方法"></a>死锁、避免死锁的常见方法</h4><p>锁是一个非常有用的工具，但是出现死锁会导致系统不可用。<br>避免死锁的常见方法：</p>
<ul>
<li>避免一个线程同时获取多个锁</li>
<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>
<li>尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。</li>
<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>
</ul>
<h4 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h4><p>带宽，内存，硬盘IO等硬件资源不足的时候，需要根据不同的资源调整程序并发大小。</p>
<h3 id="Java并发底层相关实现"><a href="#Java并发底层相关实现" class="headerlink" title="Java并发底层相关实现"></a>Java并发底层相关实现</h3><h4 id="volatile-实现原则"><a href="#volatile-实现原则" class="headerlink" title="volatile 实现原则"></a>volatile 实现原则</h4><ul>
<li>Lock前缀指令会引起处理器缓存回写到内存。</li>
<li>一个处理器的缓存回写到内存会导致其他处理器缓存无效。</li>
</ul>
<h4 id="synchronized的实现原理与应用"><a href="#synchronized的实现原理与应用" class="headerlink" title="synchronized的实现原理与应用"></a>synchronized的实现原理与应用</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>使用kubeadm安装kubernetes集群(待续)</title>
    <url>/2017/12/02/kubeadm-install-kubernetes/</url>
    <content><![CDATA[<p>因为国内服务器无法访问google，所以服务器需要科学上网<br>可以看我之前的文章，服务器科学上网<a id="more"></a></p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>建议使用daocloud提供的脚本进行安装，速度很快</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -sSL https://get.daocloud.io/docker | sh <span class="comment">#适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker <span class="comment">#设置开机启动，启动docker</span></span><br></pre></td></tr></table></figure>
<h3 id="安装kubeadm-kubelet-and-kubectl"><a href="#安装kubeadm-kubelet-and-kubectl" class="headerlink" title="安装kubeadm, kubelet and kubectl"></a>安装kubeadm, kubelet and kubectl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">$ setenforce 0 <span class="comment">#关闭SELinux</span></span><br><span class="line">$ yum install -y kubelet kubeadm kubectl</span><br><span class="line">$ systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet <span class="comment"># 设置开机启动，启动</span></span><br></pre></td></tr></table></figure>
<p>安装的过程有失败，提示执行yum –enablerepo=kubernetes clean metadata</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum --enablerepo=kubernetes clean metadata <span class="comment"># 如果还是不行，需要先清理缓存</span></span><br><span class="line">$ yum clean metadata</span><br><span class="line">$ yum clean all</span><br><span class="line">$ rm -rf /var/cache/yum</span><br></pre></td></tr></table></figure>
<h3 id="使用-kubeadm-创建集群"><a href="#使用-kubeadm-创建集群" class="headerlink" title="使用 kubeadm 创建集群"></a>使用 kubeadm 创建集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm init <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure>
<p>待续。。。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>生活</title>
    <url>/2017/09/23/life/</url>
    <content><![CDATA[<h3 id="日常生活趣事记录"><a href="#日常生活趣事记录" class="headerlink" title="日常生活趣事记录"></a>日常生活趣事记录</h3>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>lightsail使用root用户登录</title>
    <url>/2019/11/22/lightsail-use-root-logn/</url>
    <content><![CDATA[<p>在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。<a id="more"></a><br>在创建服务器的时候，选择增加脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo root:123456 |sudo chpasswd root</span><br><span class="line">sudo sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;</span><br><span class="line">sudo sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>需要注意的：<br>   root: 后面的部分需要修改为你自己的密码，如果你的服务器已经创建，可以建一个<code>login.sh</code>文件，将上面的脚本粘贴进去，然后执行<code>chmod +x login.sh</code><br>   ,<code>sh login</code>,之后服务器会重启，然后就可以尝试使用密码登录了，之前使用普通用户ssh 登录，也可以将用户名改为root进行登录。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5、SALT加密浅析</title>
    <url>/2018/11/06/md5-and-salt-encryption/</url>
    <content><![CDATA[<p>密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，<br>通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<a id="more"></a></p>
<h3 id="什么是Salt盐"><a href="#什么是Salt盐" class="headerlink" title="什么是Salt盐"></a>什么是<code>Salt</code>盐</h3><blockquote>
<p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p>
</blockquote>
<blockquote>
<p>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。</p>
</blockquote>
<h3 id="Java-实现MD5加密"><a href="#Java-实现MD5加密" class="headerlink" title="Java 实现MD5加密"></a>Java 实现MD5加密</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaImplMD5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String numStr = <span class="string">"123456"</span>;</span><br><span class="line">        String result = getMD5(numStr);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建具有指定算法名称的摘要</span></span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">//使用指定的字节数组更新摘要</span></span><br><span class="line">            md.update(str.getBytes());</span><br><span class="line">            <span class="comment">//进行哈希计算并返回一个字节数组</span></span><br><span class="line">            <span class="keyword">byte</span> mdBytes[] = md.digest();</span><br><span class="line">            String hash = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">//循环字节数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mdBytes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="comment">//如果有小于0的字节,则转换为正数</span></span><br><span class="line">                <span class="keyword">if</span> (mdBytes[i] &lt; <span class="number">0</span>)</span><br><span class="line">                    temp = <span class="number">256</span> + mdBytes[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp = mdBytes[i];</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; <span class="number">16</span>)</span><br><span class="line">                    hash += <span class="string">"0"</span>;</span><br><span class="line">                <span class="comment">//将字节转换为16进制后，转换为字符串</span></span><br><span class="line">                hash += Integer.toString(temp, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hash;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure>
<p>去MD5解码网站，很容易得到加密的内容是<code>123456</code></p>
<h3 id="Guava-实现MD5加密"><a href="#Guava-实现MD5加密" class="headerlink" title="Guava 实现MD5加密"></a>Guava 实现MD5加密</h3><p>Guava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。<br>导入maven 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>bundle<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.HashCode;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.HashFunction;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaImplMD5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String numStr = <span class="string">"123456"</span>;</span><br><span class="line">        HashFunction hf = Hashing.md5();</span><br><span class="line">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class="line">        System.out.println(hc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果跟上面相同，但是<code>md5()</code> 的这个方法代码中标记弃用了。推荐使用新的方法<br>代码的量少了很多，不需要自己做过多的处理。</p>
<h3 id="加盐处理"><a href="#加盐处理" class="headerlink" title="加盐处理"></a>加盐处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.HashCode;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.HashFunction;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaImplMD5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SALT = <span class="string">"0fdfa5e5a88bedae440a9d8ae7c84708"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String numStr = <span class="string">"123456"</span>;</span><br><span class="line">        System.out.println(getMD5WithSalt(numStr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String numStr)</span> </span>&#123;</span><br><span class="line">        HashFunction hf = Hashing.md5();</span><br><span class="line">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class="line">        <span class="keyword">return</span> hc.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5WithSalt</span><span class="params">(String numStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMD5(getMD5(numStr) + SALT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty 学习记录</title>
    <url>/2018/04/11/netty-study/</url>
    <content><![CDATA[<h3 id="Netty-核心组件"><a href="#Netty-核心组件" class="headerlink" title="Netty 核心组件"></a>Netty 核心组件</h3><ul>
<li>Channel</li>
<li>回调</li>
<li>Future</li>
<li>事件和ChannelHandler<h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4>Channel 是Java NIO 的一个基本构造，是数据的载体，可以被打开或者关闭，连接或者断开连接。<h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4>一个回调就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。Netty 中使用回调来处理事件。<h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4>Future 提供了另一种在操作完成时通知应用程序的方式。<h4 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h4>ChannelHandler 是 Netty</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Nginx 负载均衡策略</title>
    <url>/2017/10/12/nginx-load-balance-strategy/</url>
    <content><![CDATA[<p>Nginx 作为高性能web服务器，负载均衡是其基本功能之一。 <code>注：负载均衡至少需要两台机器</code> <a id="more"></a></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡可以将请求前端的请求分担到后端多个节点上，提升系统的响应和处理能力。</p>
<h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p>负载均衡的策略可以大致分为两大类：<code>内置策略</code> 和<code>扩展策略</code><br>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接<br>扩展策略：fair、url hash等</p>
<h4 id="内置策略"><a href="#内置策略" class="headerlink" title="内置策略"></a>内置策略</h4><ul>
<li><p>轮询策略（轮询加权/round-robin）</br><br><code>到应用服务器的请求以round-robin/轮询的方式被分发</code></br><br><code>配置</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080 weight=1 fail_timeout=20s;</span><br><span class="line">        server 192.168.0.101:8080 weight=2 fail_timeout=20s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name www.searchinfogo.com</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ip hash </br><br><code>使用hash算法来决定下一个请求要选择哪个服务器(基于客户端IP地址)</code></br><br><code>配置</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        ip_hash;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name www.searchinfogo.com</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最少连接（least_conn) </br><br><code>下一个请求将被分派到活动连接数量最少的服务器</code></br><br><code>配置</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        least_conn;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name www.searchinfogo.com</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="扩展策略"><a href="#扩展策略" class="headerlink" title="扩展策略"></a>扩展策略</h4><ul>
<li><p>fair</br><br><code>配置</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        fair;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name www.searchinfogo.com</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>url hash</br><br><code>配置</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">    upstream tomcats &#123;</span><br><span class="line">        server 192.168.0.100:8080;</span><br><span class="line">        server 192.168.0.101:8080;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">        hash_method crc32;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name www.searchinfogo.com</span><br><span class="line">        listen 80;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 省略其它配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>weight=1; (weight 默认为1.weight越大，负载的权重就越大)<br>down; (down 表示单前的server暂时不参与负载)<br>backup; (其它所有的非backup机器down或者忙的时候，请求backup机器)<br>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误<br>fail_timeout:max_fails次失败后，暂停的时间</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload <span class="comment">#重启nginx</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 学习日志 1</title>
    <url>/2020/06/05/nginx-study-1/</url>
    <content><![CDATA[<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>之前的时候写过<code>Centos yum 安装nginx 后增加模块</code>,源码安装的时候一笔带过，最近在学习Nginx其中的一些知识点，所以记录一下手动安装的过程，以及相关的配置。<a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Nginx 一般可以去官网下载，<a href="https://www.nginx.org" target="_blank" rel="noopener">Nginx</a>,Nginx也有对应的商业版本<a href="https://www.nginx.com/" target="_blank" rel="noopener">Nginx Plus</a>, 还有一些其他的基于Nginx开发的版本，<a href="https://tengine.taobao.org/" target="_blank" rel="noopener">Tengine</a>和<a href="http://openresty.org/" target="_blank" rel="noopener">OpenResty</a>都是比较有名的。</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx下载</a>,如下图，进入到下载页面，使用<code>stable version</code>稳定版。<br><img src="WX20200605-151113@2x.png" alt="nginx"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -xzf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> nginx-1.18.0/</span><br><span class="line"></span><br><span class="line">tree -L 1 (查看1层目录，如果没有tree 命令 yum -y install tree 进行安装 )</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── auto         <span class="comment"># 编译、lib库、操作系统判断</span></span><br><span class="line">├── CHANGES      <span class="comment"># feature、版本变更、bugfix</span></span><br><span class="line">├── CHANGES.ru   <span class="comment"># 俄语changes</span></span><br><span class="line">├── conf         <span class="comment"># 示例文件</span></span><br><span class="line">├── configure    <span class="comment"># 生成中间文件</span></span><br><span class="line">├── contrib      <span class="comment"># vim等相关配置</span></span><br><span class="line">├── html         <span class="comment"># 标准文件页面50</span></span><br><span class="line">├── LICENSE      <span class="comment"># LICENSE</span></span><br><span class="line">├── man          <span class="comment"># 帮助文件</span></span><br><span class="line">├── README       <span class="comment">#</span></span><br><span class="line">└── src          <span class="comment"># 源码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制vim 配置，可以让nginx配置显示颜色，更加方便的配置</span></span><br><span class="line">cp -r contrib/vim/* ~/.vim/</span><br></pre></td></tr></table></figure>

<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看编译配置</span></span><br><span class="line">./configure --<span class="built_in">help</span> | cat</span><br><span class="line">  --<span class="built_in">help</span>                             <span class="built_in">print</span> this message</span><br><span class="line"></span><br><span class="line">  --prefix=PATH                      <span class="built_in">set</span> installation prefix</span><br><span class="line">  --sbin-path=PATH                   <span class="built_in">set</span> nginx binary pathname</span><br><span class="line">  --modules-path=PATH                <span class="built_in">set</span> modules path</span><br><span class="line">  --conf-path=PATH                   <span class="built_in">set</span> nginx.conf pathname</span><br><span class="line">  --error-log-path=PATH              <span class="built_in">set</span> error <span class="built_in">log</span> pathname</span><br><span class="line">  --pid-path=PATH                    <span class="built_in">set</span> nginx.pid pathname</span><br><span class="line">  --lock-path=PATH                   <span class="built_in">set</span> nginx.lock pathname</span><br><span class="line"></span><br><span class="line">  --user=USER                        <span class="built_in">set</span> non-privileged user <span class="keyword">for</span></span><br><span class="line">                                     worker processes</span><br><span class="line">  --group=GROUP                      <span class="built_in">set</span> non-privileged group <span class="keyword">for</span></span><br><span class="line">                                     worker processes</span><br><span class="line"></span><br><span class="line">  --build=NAME                       <span class="built_in">set</span> build name</span><br><span class="line">  --builddir=DIR                     <span class="built_in">set</span> build directory</span><br><span class="line"></span><br><span class="line">  --with-select_module               <span class="built_in">enable</span> select module</span><br><span class="line">  --without-select_module            <span class="built_in">disable</span> select module</span><br><span class="line">  --with-poll_module                 <span class="built_in">enable</span> poll module</span><br><span class="line">  --without-poll_module              <span class="built_in">disable</span> poll module</span><br><span class="line"></span><br><span class="line">  --with-threads                     <span class="built_in">enable</span> thread pool support</span><br><span class="line"></span><br><span class="line">  --with-file-aio                    <span class="built_in">enable</span> file AIO support</span><br><span class="line"></span><br><span class="line">  --with-http_ssl_module             <span class="built_in">enable</span> ngx_http_ssl_module</span><br><span class="line">  --with-http_v2_module              <span class="built_in">enable</span> ngx_http_v2_module</span><br><span class="line">  --with-http_realip_module          <span class="built_in">enable</span> ngx_http_realip_module</span><br><span class="line">  --with-http_addition_module        <span class="built_in">enable</span> ngx_http_addition_module</span><br><span class="line">  --with-http_xslt_module            <span class="built_in">enable</span> ngx_http_xslt_module</span><br><span class="line">  --with-http_xslt_module=dynamic    <span class="built_in">enable</span> dynamic ngx_http_xslt_module</span><br><span class="line">  --with-http_image_filter_module    <span class="built_in">enable</span> ngx_http_image_filter_module</span><br><span class="line">  --with-http_image_filter_module=dynamic</span><br><span class="line">                                     <span class="built_in">enable</span> dynamic ngx_http_image_filter_module</span><br><span class="line">  --with-http_geoip_module           <span class="built_in">enable</span> ngx_http_geoip_module</span><br><span class="line">  --with-http_geoip_module=dynamic   <span class="built_in">enable</span> dynamic ngx_http_geoip_module</span><br><span class="line">  --with-http_sub_module             <span class="built_in">enable</span> ngx_http_sub_module</span><br><span class="line">  --with-http_dav_module             <span class="built_in">enable</span> ngx_http_dav_module</span><br><span class="line">  --with-http_flv_module             <span class="built_in">enable</span> ngx_http_flv_module</span><br><span class="line">  --with-http_mp4_module             <span class="built_in">enable</span> ngx_http_mp4_module</span><br><span class="line">  --with-http_gunzip_module          <span class="built_in">enable</span> ngx_http_gunzip_module</span><br><span class="line">  --with-http_gzip_static_module     <span class="built_in">enable</span> ngx_http_gzip_static_module</span><br><span class="line">  --with-http_auth_request_module    <span class="built_in">enable</span> ngx_http_auth_request_module</span><br><span class="line">  --with-http_random_index_module    <span class="built_in">enable</span> ngx_http_random_index_module</span><br><span class="line">  --with-http_secure_link_module     <span class="built_in">enable</span> ngx_http_secure_link_module</span><br><span class="line">  --with-http_degradation_module     <span class="built_in">enable</span> ngx_http_degradation_module</span><br><span class="line">  --with-http_slice_module           <span class="built_in">enable</span> ngx_http_slice_module</span><br><span class="line">  --with-http_stub_status_module     <span class="built_in">enable</span> ngx_http_stub_status_module</span><br><span class="line"></span><br><span class="line">  --without-http_charset_module      <span class="built_in">disable</span> ngx_http_charset_module</span><br><span class="line">  --without-http_gzip_module         <span class="built_in">disable</span> ngx_http_gzip_module</span><br><span class="line">  --without-http_ssi_module          <span class="built_in">disable</span> ngx_http_ssi_module</span><br><span class="line">  --without-http_userid_module       <span class="built_in">disable</span> ngx_http_userid_module</span><br><span class="line">  --without-http_access_module       <span class="built_in">disable</span> ngx_http_access_module</span><br><span class="line">  --without-http_auth_basic_module   <span class="built_in">disable</span> ngx_http_auth_basic_module</span><br><span class="line">  --without-http_mirror_module       <span class="built_in">disable</span> ngx_http_mirror_module</span><br><span class="line">  --without-http_autoindex_module    <span class="built_in">disable</span> ngx_http_autoindex_module</span><br><span class="line">  --without-http_geo_module          <span class="built_in">disable</span> ngx_http_geo_module</span><br><span class="line">  --without-http_map_module          <span class="built_in">disable</span> ngx_http_map_module</span><br><span class="line">  --without-http_split_clients_module <span class="built_in">disable</span> ngx_http_split_clients_module</span><br><span class="line">  --without-http_referer_module      <span class="built_in">disable</span> ngx_http_referer_module</span><br><span class="line">  --without-http_rewrite_module      <span class="built_in">disable</span> ngx_http_rewrite_module</span><br><span class="line">  --without-http_proxy_module        <span class="built_in">disable</span> ngx_http_proxy_module</span><br><span class="line">  --without-http_fastcgi_module      <span class="built_in">disable</span> ngx_http_fastcgi_module</span><br><span class="line">  --without-http_uwsgi_module        <span class="built_in">disable</span> ngx_http_uwsgi_module</span><br><span class="line">  --without-http_scgi_module         <span class="built_in">disable</span> ngx_http_scgi_module</span><br><span class="line">  --without-http_grpc_module         <span class="built_in">disable</span> ngx_http_grpc_module</span><br><span class="line">  --without-http_memcached_module    <span class="built_in">disable</span> ngx_http_memcached_module</span><br><span class="line">  --without-http_limit_conn_module   <span class="built_in">disable</span> ngx_http_limit_conn_module</span><br><span class="line">  --without-http_limit_req_module    <span class="built_in">disable</span> ngx_http_limit_req_module</span><br><span class="line">  --without-http_empty_gif_module    <span class="built_in">disable</span> ngx_http_empty_gif_module</span><br><span class="line">  --without-http_browser_module      <span class="built_in">disable</span> ngx_http_browser_module</span><br><span class="line">  --without-http_upstream_hash_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_http_upstream_hash_module</span><br><span class="line">  --without-http_upstream_ip_hash_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_http_upstream_ip_hash_module</span><br><span class="line">  --without-http_upstream_least_conn_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_http_upstream_least_conn_module</span><br><span class="line">  --without-http_upstream_random_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_http_upstream_random_module</span><br><span class="line">  --without-http_upstream_keepalive_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_http_upstream_keepalive_module</span><br><span class="line">  --without-http_upstream_zone_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_http_upstream_zone_module</span><br><span class="line"></span><br><span class="line">  --with-http_perl_module            <span class="built_in">enable</span> ngx_http_perl_module</span><br><span class="line">  --with-http_perl_module=dynamic    <span class="built_in">enable</span> dynamic ngx_http_perl_module</span><br><span class="line">  --with-perl_modules_path=PATH      <span class="built_in">set</span> Perl modules path</span><br><span class="line">  --with-perl=PATH                   <span class="built_in">set</span> perl binary pathname</span><br><span class="line"></span><br><span class="line">  --http-log-path=PATH               <span class="built_in">set</span> http access <span class="built_in">log</span> pathname</span><br><span class="line">  --http-client-body-temp-path=PATH  <span class="built_in">set</span> path to store</span><br><span class="line">                                     http client request body temporary files</span><br><span class="line">  --http-proxy-temp-path=PATH        <span class="built_in">set</span> path to store</span><br><span class="line">                                     http proxy temporary files</span><br><span class="line">  --http-fastcgi-temp-path=PATH      <span class="built_in">set</span> path to store</span><br><span class="line">                                     http fastcgi temporary files</span><br><span class="line">  --http-uwsgi-temp-path=PATH        <span class="built_in">set</span> path to store</span><br><span class="line">                                     http uwsgi temporary files</span><br><span class="line">  --http-scgi-temp-path=PATH         <span class="built_in">set</span> path to store</span><br><span class="line">                                     http scgi temporary files</span><br><span class="line"></span><br><span class="line">  --without-http                     <span class="built_in">disable</span> HTTP server</span><br><span class="line">  --without-http-cache               <span class="built_in">disable</span> HTTP cache</span><br><span class="line"></span><br><span class="line">  --with-mail                        <span class="built_in">enable</span> POP3/IMAP4/SMTP proxy module</span><br><span class="line">  --with-mail=dynamic                <span class="built_in">enable</span> dynamic POP3/IMAP4/SMTP proxy module</span><br><span class="line">  --with-mail_ssl_module             <span class="built_in">enable</span> ngx_mail_ssl_module</span><br><span class="line">  --without-mail_pop3_module         <span class="built_in">disable</span> ngx_mail_pop3_module</span><br><span class="line">  --without-mail_imap_module         <span class="built_in">disable</span> ngx_mail_imap_module</span><br><span class="line">  --without-mail_smtp_module         <span class="built_in">disable</span> ngx_mail_smtp_module</span><br><span class="line"></span><br><span class="line">  --with-stream                      <span class="built_in">enable</span> TCP/UDP proxy module</span><br><span class="line">  --with-stream=dynamic              <span class="built_in">enable</span> dynamic TCP/UDP proxy module</span><br><span class="line">  --with-stream_ssl_module           <span class="built_in">enable</span> ngx_stream_ssl_module</span><br><span class="line">  --with-stream_realip_module        <span class="built_in">enable</span> ngx_stream_realip_module</span><br><span class="line">  --with-stream_geoip_module         <span class="built_in">enable</span> ngx_stream_geoip_module</span><br><span class="line">  --with-stream_geoip_module=dynamic <span class="built_in">enable</span> dynamic ngx_stream_geoip_module</span><br><span class="line">  --with-stream_ssl_preread_module   <span class="built_in">enable</span> ngx_stream_ssl_preread_module</span><br><span class="line">  --without-stream_limit_conn_module <span class="built_in">disable</span> ngx_stream_limit_conn_module</span><br><span class="line">  --without-stream_access_module     <span class="built_in">disable</span> ngx_stream_access_module</span><br><span class="line">  --without-stream_geo_module        <span class="built_in">disable</span> ngx_stream_geo_module</span><br><span class="line">  --without-stream_map_module        <span class="built_in">disable</span> ngx_stream_map_module</span><br><span class="line">  --without-stream_split_clients_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_stream_split_clients_module</span><br><span class="line">  --without-stream_return_module     <span class="built_in">disable</span> ngx_stream_return_module</span><br><span class="line">  --without-stream_upstream_hash_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_stream_upstream_hash_module</span><br><span class="line">  --without-stream_upstream_least_conn_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_stream_upstream_least_conn_module</span><br><span class="line">  --without-stream_upstream_random_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_stream_upstream_random_module</span><br><span class="line">  --without-stream_upstream_zone_module</span><br><span class="line">                                     <span class="built_in">disable</span> ngx_stream_upstream_zone_module</span><br><span class="line"></span><br><span class="line">  --with-google_perftools_module     <span class="built_in">enable</span> ngx_google_perftools_module</span><br><span class="line">  --with-cpp_test_module             <span class="built_in">enable</span> ngx_cpp_test_module</span><br><span class="line"></span><br><span class="line">  --add-module=PATH                  <span class="built_in">enable</span> external module</span><br><span class="line">  --add-dynamic-module=PATH          <span class="built_in">enable</span> dynamic external module</span><br><span class="line"></span><br><span class="line">  --with-compat                      dynamic modules compatibility</span><br><span class="line"></span><br><span class="line">  --with-cc=PATH                     <span class="built_in">set</span> C compiler pathname</span><br><span class="line">  --with-cpp=PATH                    <span class="built_in">set</span> C preprocessor pathname</span><br><span class="line">  --with-cc-opt=OPTIONS              <span class="built_in">set</span> additional C compiler options</span><br><span class="line">  --with-ld-opt=OPTIONS              <span class="built_in">set</span> additional linker options</span><br><span class="line">  --with-cpu-opt=CPU                 build <span class="keyword">for</span> the specified CPU, valid values:</span><br><span class="line">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class="line">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class="line"></span><br><span class="line">  --without-pcre                     <span class="built_in">disable</span> PCRE library usage</span><br><span class="line">  --with-pcre                        force PCRE library usage</span><br><span class="line">  --with-pcre=DIR                    <span class="built_in">set</span> path to PCRE library sources</span><br><span class="line">  --with-pcre-opt=OPTIONS            <span class="built_in">set</span> additional build options <span class="keyword">for</span> PCRE</span><br><span class="line">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class="line"></span><br><span class="line">  --with-zlib=DIR                    <span class="built_in">set</span> path to zlib library sources</span><br><span class="line">  --with-zlib-opt=OPTIONS            <span class="built_in">set</span> additional build options <span class="keyword">for</span> zlib</span><br><span class="line">  --with-zlib-asm=CPU                use zlib assembler sources optimized</span><br><span class="line">                                     <span class="keyword">for</span> the specified CPU, valid values:</span><br><span class="line">                                     pentium, pentiumpro</span><br><span class="line"></span><br><span class="line">  --with-libatomic                   force libatomic_ops library usage</span><br><span class="line">  --with-libatomic=DIR               <span class="built_in">set</span> path to libatomic_ops library sources</span><br><span class="line"></span><br><span class="line">  --with-openssl=DIR                 <span class="built_in">set</span> path to OpenSSL library sources</span><br><span class="line">  --with-openssl-opt=OPTIONS         <span class="built_in">set</span> additional build options <span class="keyword">for</span> OpenSSL</span><br><span class="line"></span><br><span class="line">  --with-debug                       <span class="built_in">enable</span> debug logging</span><br></pre></td></tr></table></figure>
<p>从上面的帮助可以看到，主要的编译配置分为3类</p>
<ul>
<li>配置文件位置指定</li>
<li>指定使用和不使用的模块with（增加编译）、without（移除编译）</li>
<li>优化参数、第三方模块，日志位置等</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译,指定位置</span></span><br><span class="line">./configure --prefix=/home/nginx</span><br></pre></td></tr></table></figure>
<p>可能会出现报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either <span class="built_in">disable</span> the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the <span class="built_in">source</span> with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>
<p>根据提示，可以安装对应的库，或者在编译的时候选择移除对应的模块，或者选择从源码编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装 pcre library</span></span><br><span class="line">yum -y install pcre-devel</span><br></pre></td></tr></table></figure>

<p>再次编译提示缺少 zlib</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class="line">You can either <span class="built_in">disable</span> the module by using --without-http_gzip_module</span><br><span class="line">option, or install the zlib library into the system, or build the zlib library</span><br><span class="line">statically from the <span class="built_in">source</span> with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装zlib library</span></span><br><span class="line">yum -y install zlib-devel</span><br></pre></td></tr></table></figure>

<p>再次编译以后，提示编译成功,以及nginx 相关的路径、模块等目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/home/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/home/nginx/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/home/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/home/nginx/conf"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/home/nginx/conf/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/home/nginx/logs/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/home/nginx/logs/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/home/nginx/logs/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"scgi_temp"</span></span><br></pre></td></tr></table></figure>
<p>编译生成了中间文件 <code>objs</code>,通过查看<code>ngx_modules.c</code>,可以知道nginx编译了哪些模块<br>执行<code>make</code>编译<code>make install</code> 安装<br>安装完成进入 <code>/home/nginx/</code>启动nginx以后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── client_body_temp</span><br><span class="line">├── conf</span><br><span class="line">├── fastcgi_temp</span><br><span class="line">├── html</span><br><span class="line">├── logs</span><br><span class="line">├── proxy_temp</span><br><span class="line">├── sbin</span><br><span class="line">├── scgi_temp</span><br><span class="line">└── uwsgi_temp</span><br></pre></td></tr></table></figure>
<p>就可以看到所有的目录以及文件了。</p>
<p>在生产环境中，要根据实际的情况增加第三方模块</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx学习日志 2</title>
    <url>/2020/06/10/nginx-study-2/</url>
    <content><![CDATA[<h3 id="Nginx-配置语法"><a href="#Nginx-配置语法" class="headerlink" title="Nginx 配置语法"></a>Nginx 配置语法</h3><ul>
<li>配置文件由指令与指令块组成</li>
<li>每条指令以 ; 结尾，指令与参数以空格符号分隔</li>
<li>指令块以{} 大括号将多条指令组合在一起</li>
<li>include 语句允许组合多个配置文件以提升可维护性</li>
<li>使用#符号添加注释，提高可读性</li>
<li>使用$符变量</li>
<li>部分指令的参数支持正则表达式<a id="more"></a>

</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>

<p>http配置指令块主要包含下面4个部分</p>
<ul>
<li>http</li>
<li>server</li>
<li>location</li>
<li>upstream</li>
</ul>
<h3 id="Nginx命令行"><a href="#Nginx命令行" class="headerlink" title="Nginx命令行"></a>Nginx命令行</h3><ul>
<li>格式 nginx -s reload</li>
<li>帮助 -? -h</li>
<li>使用指定的配置文件 -c</li>
<li>指定配置文件指定 -g</li>
<li>指定运行目录 -p</li>
<li>发送信号 -s(立刻停止 stop 优雅退出 quit 重载配置文件 reload 重新开始记录日志文件reopen)</li>
<li>测试配置文件是否有语法错误 -t -T</li>
<li>打印Nginx的版本信息、编译信息等 -v -V</li>
</ul>
<h3 id="Nginx-热部署"><a href="#Nginx-热部署" class="headerlink" title="Nginx 热部署"></a>Nginx 热部署</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>cp nginx nginx.old<br>用新编译好的nginx 替换</p>
<h4 id="部署切换"><a href="#部署切换" class="headerlink" title="部署切换"></a>部署切换</h4><figure class="highlight ps"><figcaption><span>-ef | grep nginx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#进程会平滑切换</span></span><br><span class="line">kill -USR2 pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#优雅退出</span></span><br><span class="line">kill -WNCH pid</span><br></pre></td></tr></table></figure>

<h3 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h3><p>移动日志 mv xxx.log xxx.bak 重新开始记录日志文件,更好的方式是通过脚本进行<br>./nginx -s reopen </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装 node</title>
    <url>/2018/02/09/node-install/</url>
    <content><![CDATA[<h3 id="下载node"><a href="#下载node" class="headerlink" title="下载node"></a>下载node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<h3 id="解压-amp-配置"><a href="#解压-amp-配置" class="headerlink" title="解压&amp;配置"></a>解压&amp;配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvJf node-v8.9.4-linux-x64.tar.xz</span><br><span class="line">mv node-v8.9.4-linux-x64 /opt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置node 环境变量</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/opt/node-v8.9.4-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>或者安装nvm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#加入下面的内容</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm、</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure>

<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install stable <span class="comment"># 安装稳定版</span></span><br><span class="line">nvm current <span class="comment"># 查看当前的版本</span></span><br><span class="line">nvm ls <span class="comment"># 列出所有版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 项目问题总结</title>
    <url>/2018/06/02/node-project-summary/</url>
    <content><![CDATA[<p>最近在写一个Node的项目，项目中碰到了不少问题，做一个记录。 <a id="more"></a></p>
<h3 id="RabbitMQ-virtual-hosts-问题"><a href="#RabbitMQ-virtual-hosts-问题" class="headerlink" title="RabbitMQ virtual hosts 问题"></a>RabbitMQ virtual hosts 问题</h3><p>项目中使用了RabbitMQ，按照官方demo编写，本地调试的时候没有问题（有种bug叫做本地是好的:-D,但是在链接公司的MQ的时候报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq typeerror cannot read property &#39;create channel&#39; of undefined</span><br></pre></td></tr></table></figure>
<p>会碰到上面类似的错误，创建channel的报错。<br>最开始的时候怀疑是自己代码有问题，毕竟第一次用Node(Node 菜鸡一个)；因为多环境，最开始的时候使用开发环境账号进行连接，后面<br>在尝试使用管理员账号登录的时候，发现可以正常连接，还以为是运维把权限配置的有问题（错的其实永远是别人，其实是自己的锅）。<br>最后发现是因为<code>virtual hosts</code>的原因</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">amqp.connect(<span class="string">'amqp://admin:123456@localhost'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>
<p>默认的配置如上图所示，其实这个配置会使用默认的<code>virtual hosts</code> <code>/</code>,但是如果配置了其他的<code>virtual hosts</code>，你没有配置就会导致你<br>无法正常的连接。<br>如果你配置的有其他的<code>virtual hosts</code>，那么配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">amqp.connect(<span class="string">'amqp://admin:123456@localhost/virtual_hosts_name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, conn</span>) </span>&#123; ......</span><br></pre></td></tr></table></figure>
<p>这个问题耗费了半天的时间找原因，Java中spring 做了封装，只用配置<code>virtual hosts</code>的name就可以了。</p>
<h3 id="RabbitMQ-message-信息消费问题"><a href="#RabbitMQ-message-信息消费问题" class="headerlink" title="RabbitMQ message 信息消费问题"></a>RabbitMQ message 信息消费问题</h3><p>项目采用node获取信息（主要是消息采集的库采用node开发，暂时还没有Java 的客），传入MQ，Java 服务端进行消费。<br>Java端的同事告诉我得到的都是数字(字节数组)，最后经过查找发现,如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ch.sendToQueue(q, <span class="keyword">new</span> Buffer.from(<span class="built_in">JSON</span>.stringify(orders)), &#123;<span class="attr">persistent</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>发送到队列的时候会转为Buffer，所以Java 代码获取的时候，不能直接获取字符串，应该用byte[] 去接收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Byte[] body = <span class="keyword">null</span>;</span><br><span class="line">String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>
<p>这样就能正常解析从node 传输过来的数据。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>okhttp3-proxy-auth (okhttp3 http 代理鉴权)</title>
    <url>/2018/08/30/okhttp3-proxy-auth/</url>
    <content><![CDATA[<p>因为种种原因，没有按时写博客，最近准备把博客重新拾起来。<br>最近在写一个项目，使用到了okhttp的代理，因为使用的代理是付费的，所以需要鉴权。在使用的过程中碰到了一些问题所以记录一下<a id="more"></a></p>
<p>默认的okhttp代理鉴权如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Authenticator;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> java.net.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        <span class="comment">//设置socks代理服务器ip端口</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(Proxy.Type.HTTP, <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">1086</span>));</span><br><span class="line">        Authenticator.setDefault(<span class="keyword">new</span> Authenticator()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> PasswordAuthentication authentication = <span class="keyword">new</span> PasswordAuthentication(<span class="string">"username"</span>, <span class="string">"password"</span>.toCharArray());</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> authentication;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient().newBuilder().</span><br><span class="line">                connectTimeout(<span class="number">120</span>, TimeUnit.SECONDS).readTimeout(<span class="number">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class="line">                <span class="comment">// 解决内存溢出问题</span></span><br><span class="line">                .connectionPool(<span class="keyword">new</span> ConnectionPool(<span class="number">5</span>, <span class="number">1</span>, TimeUnit.SECONDS)).build();</span><br><span class="line">        Request build = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Response response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        client.newCall(build).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!response.isSuccessful()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"服务器端错误: "</span> + response);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是试了一下发现会报错,代理鉴权失败</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.io.IOException: Failed to authenticate with proxy</span><br><span class="line">	at okhttp3.internal.connection.RealConnection.createTunnel(RealConnection.java:401)</span><br><span class="line">	at okhttp3.internal.connection.RealConnection.connectTunnel(RealConnection.java:218)</span><br><span class="line">	at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:159)</span><br><span class="line">	at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class="line">	at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class="line">	at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class="line">	at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class="line">	at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class="line">	at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">	at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br><span class="line">	at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)</span><br><span class="line">	at okhttp3.RealCall$AsyncCall.execute(RealCall.java:147)</span><br><span class="line">	at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>
<p>于是采用另外一种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        <span class="keyword">final</span> String username = <span class="string">"username"</span>;</span><br><span class="line">        <span class="keyword">final</span> String password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(Proxy.Type.HTTP, <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">1086</span>));</span><br><span class="line"></span><br><span class="line">        Authenticator proxyAuthenticator = <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Request <span class="title">authenticate</span><span class="params">(Route route, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String credential = Credentials.basic(username, password);</span><br><span class="line">                <span class="keyword">return</span> response.request().newBuilder()</span><br><span class="line">                        .header(<span class="string">"Proxy-Authorization"</span>, credential)</span><br><span class="line">                        .build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient().newBuilder().</span><br><span class="line">                connectTimeout(<span class="number">120</span>, TimeUnit.SECONDS).readTimeout(<span class="number">120</span>, TimeUnit.SECONDS).proxy(proxy)</span><br><span class="line">                .proxyAuthenticator(proxyAuthenticator)</span><br><span class="line">                <span class="comment">// 解决内存溢出问题</span></span><br><span class="line">                .connectionPool(<span class="keyword">new</span> ConnectionPool(<span class="number">5</span>, <span class="number">1</span>, TimeUnit.SECONDS)).build();</span><br><span class="line">        Request build = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Response response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        client.newCall(build).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!response.isSuccessful()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"服务器端错误: "</span> + response);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将用户名和密码增加到header中的这种方式解决,不过通过引入的包，还是能够看出第一种用的是java.net 包中的鉴权方式，应该是跟okhttp的鉴权方式有区别导致的</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>okhttp</tag>
      </tags>
  </entry>
  <entry>
    <title>python 入门</title>
    <url>/2018/03/07/pthon-tutorial/</url>
    <content><![CDATA[<blockquote>
<p>Life is short, you need Python.</p>
</blockquote>
<p>上面那句话可能大家耳熟能详的一句话了，形象的表达了Python。有时候一些简单的功能验证或者是文本处理等，用Java等语言实现需要很长的时间，这个时候用Python你会发现，短短几行就搞定了，剩下的时间你就可以去喝咖啡了。<a id="more"></a></p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>了解过几种语言后，会发现其实语言之间有很大的共通性。学习基本的数据类型之后，加上一些基本的语法，就能写起来了，慢慢的在写的过程中，熟悉语言的细节，用好每个语言的技巧，每个语言的出现都是为了解决一些其他语言没法解决的问题。</p>
<p>Python 基本数据类型（6个标注数据类型）</p>
<ul>
<li>Number (数字)</li>
<li>String (字符串)</li>
<li>List   (列表)</li>
<li>Tuple  (元组)</li>
<li>Sets   (集合)</li>
<li>Dictionary (字典)</li>
</ul>
<h3 id="待续。。。"><a href="#待续。。。" class="headerlink" title="待续。。。"></a>待续。。。</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python通过使用requirements.txt文件记录管理依赖包</title>
    <url>/2018/03/07/python-requirements/</url>
    <content><![CDATA[<p>python在本地使用的时候，不需要关心使用的依赖的问题，但是将代码上传到服务器以后，服务器上可能没有对应的包，这个时候程序运行就会报错，所以为了程序能够正常启动，就需要使用requirements.txt来记录版本依赖，有点类似Java中的Maven,管理Jar包。<a id="more"></a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录创建requirements.txt文件</span></span><br><span class="line">touch requirements.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将项目中使用的包冻结（freeze）到requirements.txt文件中</span></span><br><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>
<p>当把项目上传到服务器以后可以执行下面的命令安装对应的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过requirements.txt 文件中的记录安装依赖</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>通过上面的方法就能将本地的包安装在服务器上了，保证了两个环境中的依赖一致，一般情况是在虚拟环境中使用，保证环境的干净，避免发生冲突。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>提升国内服务器Github clone速度的方法</title>
    <url>/2018/04/18/raise-github-clone-speed/</url>
    <content><![CDATA[<h3 id="Github-速度慢"><a href="#Github-速度慢" class="headerlink" title="Github 速度慢"></a>Github 速度慢</h3><p>众所周知的原因，国内的vps 从Github 上clone 源码的速度感人。于是查了一下，发现有两种方法可以提升从GitHub clone 代码的速度。<a id="more"></a></p>
<h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><p>从<code>http://github.global.ssl.fastly.net.ipaddress.com/</code> 可以获取到速度比较快的ip，通过替换hosts ，达到加速的目的。</p>
<p><img src="raise-github-clone-speed/WX20180418-113942.png" alt="fastly"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub Start</span></span><br><span class="line">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>
<p>保存后自动生效</p>
<p><img src="raise-github-clone-speed/WX20180418-114759@2x.png" alt="fastly"><br>通过下载Spring Boot 的源码，见上图，速度还不错。</p>
<h3 id="通过代理提升本地的速度"><a href="#通过代理提升本地的速度" class="headerlink" title="通过代理提升本地的速度"></a>通过代理提升本地的速度</h3><p>一般我们都是使用ss的本地socks5代理，速度多快，取决于提供服务的vps的速度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class="line">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure>
<p><img src="raise-github-clone-speed/WX20180418-115544@2x.png" alt="socks5"></p>
<p>上面的配置需要注意自己的socks5 端口，Mac 和 Windows的一般是1080，Mac的根据自己设置的进行修改，比如我的是1086，所以需要改成<code>socks5://127.0.0.1:1086</code>。</p>
<p>通过上面的两个方法，可以大幅提升服务器和本地的GitHub代码clone 速度，解决漫长的等待，特别是比较大的仓库。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式基础知识总结</title>
    <url>/2017/12/07/regular-expression-basic/</url>
    <content><![CDATA[<p>最近项目需要爬取一些网站的数据，于是我开始了爬虫生涯。以前只是简单的玩过一些爬虫，了解过nutch<br>（分布式爬虫），Python下的scrapy等爬虫项目。因为公司的技术栈都是基于Java的，所以我简单的看了下<br>GitHub，选择了<a href="https://github.com/code4craft" target="_blank" rel="noopener">code4craft</a>的<a href="https://github.com/code4craft/webmagic" target="_blank" rel="noopener">webmagic</a><br>作为项目的基础组件。<a id="more"></a></p>
<p>对于爬虫来说，数据的获取是基本，获取到数据后需要进行数据清洗之后入库，XPath、正则表达式就是获取<br>这些数据的利器，所以我们只要掌握这些技能就能很好的获取到我们需要的数据。</p>
<p>[0-9]这种形式的正则表达式称作字符组、字符集。<br>\d 字符组简写。<br>(.) 匹配任意字符，通配符，一般不匹配行起始符。</p>
]]></content>
      <categories>
        <category>Regular</category>
      </categories>
      <tags>
        <tag>Regular</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器科学上网</title>
    <url>/2017/12/02/server-over-the-wall/</url>
    <content><![CDATA[<p>因为服务器使用的需要从google下载东西，但是在现在的环境下是无法下载的，所以就整理了一下下面的方法进行服务器科学上网。<a id="more"></a></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>两台vps（一台国内，一台国外），国外的可以开阿里云按时计费的，比较方便,此文档基于centos7.4</li>
<li>privoxy 包</li>
</ul>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>先用ssh 命令进行服务器socks5 连接接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -f -N -D bindaddress:port name@server</span><br><span class="line">$ ssh -f -N -D 0.0.0.0:1080 root@45.63.61.77</span><br></pre></td></tr></table></figure>
<ul>
<li>-f<br>输入密码后进入后台模式<br>(Requests ssh to go to background just before command execution.)</li>
<li>-N<br>不执行远程命令,用于端口转发<br>( Do not execute a remote command. This is useful for just for warding ports (protocol version 2 only).)</li>
<li>-D<br>socket5代理<br>(Specifies a local “dynamic” application-level port forwarding.Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.)</li>
<li>-L<br>tcp转发<br>(Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.)</li>
<li>-C<br>使用数据压缩,网速快时会影响速度<br>(Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks.The compression algorithm is the same used by gzip)</li>
</ul>
<p>bindaddress ：指定绑定ip地址<br>port ： 指定侦听端口<br>name： ssh服务器登录名<br>server： ssh服务器地址</p>
<p>运行完上面的命令就进行socks5连接了<br>可以执行下面的命令查看端口是否打开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -nltp</span><br></pre></td></tr></table></figure>
<p>如果能看到指定的端口打开(1080端口)就说明正常连接了。</p>
<h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装privoxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install privoxy  -y <span class="comment"># 使用yum 安装比较方便，也可以使用源码安装</span></span><br></pre></td></tr></table></figure>
<p>安装完成后需要进行配置，否则无法正常访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/privoxy/config</span><br><span class="line"><span class="comment"># :783: 找到 783行，去掉前面的注释符号，端口可以随便改</span></span><br><span class="line">$ listen-address 127.0.0.1:8118</span><br><span class="line"><span class="comment">#:1336: 找到 1336行，去掉前面的注释符号，后面的1080端口要对应ss服务里面的配置，要一致</span></span><br><span class="line">$ forward-socks5t / 127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h3 id="修改环境变量开启代理"><a href="#修改环境变量开启代理" class="headerlink" title="修改环境变量开启代理"></a>修改环境变量开启代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /ect/profile</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="comment"># 之后执行source /etc/profile 使配置生效</span></span><br></pre></td></tr></table></figure>

<h3 id="启动privoxy、测试"><a href="#启动privoxy、测试" class="headerlink" title="启动privoxy、测试"></a>启动privoxy、测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ privoxy /etc/privoxy/config  <span class="comment">#netstat -ntlp 查看8118端口</span></span><br><span class="line">$ wget www.google.com <span class="comment"># 如果能下载则说明成功</span></span><br></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>使用完后记得关闭代理，否则所有流量都会走代理，访问可能会变慢<br>注释掉<code>/etc/profile</code> 内的内容，刷新配置。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7搭建socks5 服务</title>
    <url>/2018/01/15/socks5-server/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>基于centsOS 7<br>ss5-3.8.9-8</p>
<h3 id="下载源文件"><a href="#下载源文件" class="headerlink" title="下载源文件"></a>下载源文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置编译环境及安装编译SS5依赖组件</span></span><br><span class="line">yum -y install gcc automake make</span><br><span class="line">yum install gcc openldap-devel pam-devel openssl-devel</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xf ss5-3.8.9-8.tar.gz</span><br><span class="line">mv ss5-3.8.9-8 ss5</span><br><span class="line">cd  ss5</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h3 id="启动脚本加执行权限"><a href="#启动脚本加执行权限" class="headerlink" title="启动脚本加执行权限"></a>启动脚本加执行权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/init.d/ss5</span><br></pre></td></tr></table></figure>
<h3 id="进行配置并启动"><a href="#进行配置并启动" class="headerlink" title="进行配置并启动"></a>进行配置并启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/ss5  </span><br><span class="line">SS5_OPTS=" -u root -b 0.0.0.0:18080" #绑定端口为18080</span><br><span class="line">systemctl start ss5 #启动服务</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">增加用户登录权限</span></span><br><span class="line">vi /etc/opt/ss5/ss5.conf  </span><br><span class="line">auth 0.0.0.0/0 - u  </span><br><span class="line">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置用户名和密码，一个用户和密码一行，用空格间隔</span></span><br><span class="line">vi /etc/opt/ss5/ss5.passwd  </span><br><span class="line">user1 123456</span><br><span class="line">user2 123456</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Socks5</tag>
      </tags>
  </entry>
  <entry>
    <title>几款常用的性能测试工具</title>
    <url>/2019/06/28/some-pressure-measuring-tools/</url>
    <content><![CDATA[<p>在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。<a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="CentOS7-下安装ad"><a href="#CentOS7-下安装ad" class="headerlink" title="CentOS7 下安装ad"></a>CentOS7 下安装ad</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>

<p>然后使用百度做个测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM_0_15_centos ~]#  ab -n 1000 -c 10 https://www.baidu.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            443</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        227 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   15.518 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      893000 bytes</span><br><span class="line">HTML transferred:       227000 bytes</span><br><span class="line">Requests per second:    64.44 [#/sec] (mean)</span><br><span class="line">Time per request:       155.176 [ms] (mean)</span><br><span class="line">Time per request:       15.518 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          56.20 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:      104  114   6.8    116     172</span><br><span class="line">Processing:    35   39   5.1     39     140</span><br><span class="line">Waiting:       35   38   5.1     39     140</span><br><span class="line">Total:        139  153   9.8    156     264</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">    156</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">    159</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">    160</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">    161</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">    163</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    164</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    165</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">    175</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">    264 (longest request)</span></span><br></pre></td></tr></table></figure>
<p>上面就是请求后的结果。注意请求的地址后面要加<code>/</code>否则会报无效的url。</p>
<h4 id="Mac-上使用"><a href="#Mac-上使用" class="headerlink" title="Mac 上使用"></a>Mac 上使用</h4><p>Mac 上好像有自带的ab 工具，请求效果如下<br><img src="some-pressure-measuring-tools/WX20190628-171039@2x.png" alt="Mac 请求效果"></p>
<h3 id="使用Jmeter"><a href="#使用Jmeter" class="headerlink" title="使用Jmeter"></a>使用Jmeter</h3><p>具体可以查看<a href="https://jmeter.apache.org/" target="_blank" rel="noopener">Jmeter</a>,后面会补充这一部分的内容</p>
<h3 id="使用阿里云PTS"><a href="#使用阿里云PTS" class="headerlink" title="使用阿里云PTS"></a>使用阿里云PTS</h3><p>具体可参考<a href="https://www.aliyun.com/product/pts" target="_blank" rel="noopener">PTS</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>性能测试工具</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud 引入链路跟踪Sleuth及Zipkin</title>
    <url>/2020/03/19/spring-seluth-zipkin/</url>
    <content><![CDATA[<p>Zipkin是一种分布式跟踪系统，它有助于收集解决微服务架构中得延迟问题所需的时序数据，它管理这些数据的收集和查找。<a id="more"></a></p>
<h3 id="下载-官方推荐直接下载打包好的应用，建议使用docker镜像或者jar"><a href="#下载-官方推荐直接下载打包好的应用，建议使用docker镜像或者jar" class="headerlink" title="下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar"></a>下载 官方推荐直接下载打包好的应用，建议使用docker镜像或者jar</h3><p>使用官方一键脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class="line">java -jar zipkin.jar</span><br></pre></td></tr></table></figure>
<p>docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure>
<p>访问<br>任一方式启动后，访问 <a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a> ，如下图<br><img src="WX20200319-113846.png" alt="zipkin"></p>
<h3 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h3><p>2.pom.xml 配置</p>
<p>增加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果项目中包含  aspectjweaver 这个jar ，需要指定jar包版本为1.8.10，否则项目启动会出错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置采样等参数"><a href="#配置采样等参数" class="headerlink" title="配置采样等参数"></a>配置采样等参数</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#zipkin配置 # 指定了 Zipkin 服务器的地址</span></span><br><span class="line"><span class="string">spring.zipkin.base-url</span> <span class="string">=</span> <span class="attr">http://localhost:9411/</span> </span><br><span class="line"><span class="comment">#采样率 1.0表示全部采样</span></span><br><span class="line"><span class="string">spring.sleuth.sampler.probability</span> <span class="string">=</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>服务调用以后，就可以看到具体的调用请求时间，但是在这个过程中也碰到了一些问题</p>
<ul>
<li>如果屏蔽一些接口记录，例如 健康检查会产生大量的无用数据，影响查询</li>
<li>如果使用mysql查询会有一定的影响，官方也不建议使用</li>
<li>使用官方的jar后，无法进行改造，满足不了一些额外的需求</li>
<li>存储数据安全规范等问题</li>
</ul>
<h3 id="如果使用ES进行存储（建议使用）"><a href="#如果使用ES进行存储（建议使用）" class="headerlink" title="如果使用ES进行存储（建议使用）"></a>如果使用ES进行存储（建议使用）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> STORAGE_TYPE 指定存储类型 ES_HOSTS es ip 通过逗号隔开，可以使用多个，ES_USERNAME ES用户名 ES_PASSWORD ES密码 ES_INDEX 自定义存储索引</span></span><br><span class="line">STORAGE_TYPE=elasticsearch ES_HOSTS=172.16.28.56:9200,172.16.28.57:9200  ES_USERNAME=admin ES_PASSWORD=123456 ES_INDEX=zipkin-trace  java -jar /zipkin.jar</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>调用链监控</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Dart(一)</title>
    <url>/2019/07/15/study-dart-1/</url>
    <content><![CDATA[<p>2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。<a id="more"></a></p>
<p>不过因为Node的出现，JavaScript得到了告诉的发展了，Dart并没有流行起来，不过因为Flutter的出现，Dart迎来了自己的第二春。</p>
<p>学习语言的第一件事情就是准备一个环境，在<a href="https://repl.it/languages/dart" target="_blank" rel="noopener">repl</a>新建一个<code>main.dart</code>文件</p>
<h3 id="范例，hello-world"><a href="#范例，hello-world" class="headerlink" title="范例，hello world"></a>范例，hello world</h3><figure class="highlight plain"><figcaption><span>dart</span></figcaption><table><tr><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">    print(&#39;Hello World!&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击<code>run</code><br>可以看到右边打印出来内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Dart VM version: 2.2.0 (Unknown timestamp) on "linux_x64"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> run-project</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<p>Dart 也是用main做函数的入口的，跟Java很像。</p>
<h3 id="Dart的变量与类型"><a href="#Dart的变量与类型" class="headerlink" title="Dart的变量与类型"></a>Dart的变量与类型</h3><h4 id="Dart的基本内置类型有："><a href="#Dart的基本内置类型有：" class="headerlink" title="Dart的基本内置类型有："></a>Dart的基本内置类型有：</h4><ul>
<li>Numbers</li>
<li>Strings</li>
<li>Booleans</li>
<li>Lists</li>
<li>Sets</li>
<li>Maps</li>
<li>Runes</li>
<li>Symbols</li>
</ul>
<p><code>Numbers</code>有两种子类（int 和 double）<br><code>Strings</code>跟我们平常用的String没有什么区别<br><code>Booleans</code>是类型安全的，意味着我们不能使用if (nonbooleanValue) or assert (nonbooleanValue) 这样的代码去判断，而应该显示的检查<br><code>Lists</code>在Dart中，数组是List对象，因此大多数人只是将它们称为列表。<br><code>Sets</code>无序集合<br><code>Maps</code>key和value可以是任何类型<br><code>Runes</code>UTF-32字符串<br><code>Symbols</code>开发中基本上用不上</p>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul>
<li>const 表示常量在编译期能确定的值</li>
<li>final 在运行时确定，一旦确定不可变更<br>还有一些流程控制语法，各个语言基本上大同小异，可以参考[官方文档}(<a href="https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。" target="_blank" rel="noopener">https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。</a></li>
</ul>
]]></content>
      <categories>
        <category>Dart</category>
      </categories>
      <tags>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Elastic Stack（一）</title>
    <url>/2019/06/26/study-elastic-stack-1/</url>
    <content><![CDATA[<p>前两天在<code>极客时间</code>买了<code>Elasticsearch核心技术与实战</code>的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。<a id="more"></a></p>
<p><img src="elk-stack-elkb-diagram.png" alt="Elastic Stack"></p>
<h3 id="Elastic-Stack概念"><a href="#Elastic-Stack概念" class="headerlink" title="Elastic Stack概念"></a>Elastic Stack概念</h3><p>首先需要了解一下，什么是<code>ELK</code>，<code>为什么是Elastic Stack</code>，<a href="https://www.elastic.co/cn/elk-stack" target="_blank" rel="noopener">What is the ELK Stack? Why, it’s the Elastic Stack.</a></p>
<blockquote>
<p>So, what is the ELK Stack? “ELK” is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a “stash” like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.<br>The Elastic Stack is the next evolution of the ELK Stack.</p>
</blockquote>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>因为是为了方便学习，所以使用docker进行环境的搭建，使用docker-compose 进行搭建，Elastic官方也提供了对应的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">脚本</a>，极客时间上的是基于7.1版本ES的，不过区别不是很大(增加了cerebro监控和kibana，可以自行添加)。</p>
<h4 id="运行-docker-compose-命令"><a href="#运行-docker-compose-命令" class="headerlink" title="运行 docker-compose 命令"></a>运行 docker-compose 命令</h4><p><code>docker-compose.yml</code> 文件内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: '2.2'</span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - discovery.seed_hosts=es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - discovery.seed_hosts=es01</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  esdata01:</span><br><span class="line">    driver: local</span><br><span class="line">  esdata02:</span><br><span class="line">    driver: local</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  esnet:</span><br></pre></td></tr></table></figure>
<p>启动、停止、销毁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta">#</span><span class="bash">停止</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta">#</span><span class="bash">销毁</span></span><br><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure>
<h4 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:9200/_cat/health</span><br><span class="line"><span class="meta">#</span><span class="bash">表示没有正常运行</span></span><br><span class="line">curl: (52) Empty reply from server</span><br><span class="line"><span class="meta">#</span><span class="bash">正常运行如下</span></span><br><span class="line">1561531623 06:47:03 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure>
<h4 id="Elasticsearch-Docker-配置修改"><a href="#Elasticsearch-Docker-配置修改" class="headerlink" title="Elasticsearch Docker 配置修改"></a>Elasticsearch Docker 配置修改</h4><p>Elasticsearch 从<code>/usr/share/elasticsearch/config/</code> 加载配置，这些配置包括 配置Elasticsearch和设置JVM选项。</p>
<p>更多的配置可以自行查看Elastic的官网，有更详细的介绍，上面的工作就可以完成最基本的配置了</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker、Elastic</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Elastic Stack（二）</title>
    <url>/2019/06/27/study-elastic-stack-2/</url>
    <content><![CDATA[<p>Elastic官方提供了Elastic Stack 和 相关产品的<a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">文档</a>，而且提供了中文的文档，<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener"><code>《Elasticsearch 权威指南》中文版</code></a>,不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作<code>CRUD</code>。 <a id="more"></a></p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Elasticsearch的主要用途是搜索和分析。</p>
<p>Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats有助于收集，聚合和丰富您的数据并将其存储在Elasticsearch中。Kibana使您能够以交互方式探索，可视化和分享数据洞察，并管理和监控堆栈。</p>
<p>Elasticsearch为所有类型的数据提供实时搜索和分析。无论是结构化文档还是非结构化文本，数字数据或地理空间数据，Elasticsearch都可以以支持快速搜索的方式有效地存储和索引它。远远超出简单的数据检索和聚合信息，以发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使你部署能够与其一起无缝地增长。</p>
<h3 id="数据输入：文档和索引"><a href="#数据输入：文档和索引" class="headerlink" title="数据输入：文档和索引"></a>数据输入：文档和索引</h3><p>Elasticsearch是一个分布式文档存储。Elasticsearch不是将信息存储为列数据行，而是存储已经序列化为JSON文档的复杂数据结构。当群集中有多个Elasticsearch节点时，存储的文档将分布在群集中，并且可以从任何节点立即访问。</p>
<p>存储文档时，它会在1秒内实时索引并完全可搜索。Elasticsearch使用称为倒排索引的数据结构，支持非常快速的全文搜索。倒排索引列出任何文档中出现的每个唯一单词，并标识每个单词出现的所有文档。</p>
<p>索引可以被视为优化的文档集合，每个文档都是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch会为每个字段中的所有数据编制索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在反向索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来汇编和返回搜索结果的能力使Elasticsearch如此之快。</p>
<p>Elasticsearch还具有无模式的能力，这意味着可以索引文档而无需显式指定如何处理文档中可能出现的每个不同字段。启用动态映射后，Elasticsearch会自动检测并向索引添加新字段。这种默认行为使您可以轻松索引和浏览数据 - 只需开始索引文档，Elasticsearch将检测并将布尔值，浮点和整数值，日期和字符串映射到相应的Elasticsearch数据类型。</p>
<p>但是，最终，您比Elasticsearch更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射，以完全控制字段的存储和索引方式。</p>
<p>定义自己的映射使您能够：</p>
<p>区分全文字符串字段和精确值字符串字段<br>执行特定于语言的文本分析<br>优化字段以进行部分匹配<br>使用自定义日期格式<br>使用诸如geo_point和geo_shape无法自动检测的数据类型<br>为不同目的以不同方式索引相同字段通常很有用。例如，您可能希望将字符串字段索引为全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。</p>
<p>在索引期间应用于全文字段的分析链也在搜索时使用。查询全文字段时，查询文本在索引中查找术语之前会进行相同的分析。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker、Elastic</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas学习笔记-2</title>
    <url>/2018/09/25/study-pandas-notes-2/</url>
    <content><![CDATA[<h4 id="3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py"><a href="#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py" class="headerlink" title="3.为什么pandas命令以括号结尾，其他的命令不呢？(源码见demo3.py)"></a>3.为什么pandas命令以括号结尾，其他的命令不呢？(<a href="https://github.com/junhuali/study-pandas/blob/master/demo3.py" target="_blank" rel="noopener">源码见demo3.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">movies = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class="line">head = movies.head()</span><br><span class="line">print(head)</span><br><span class="line"></span><br><span class="line">describe = movies.describe()</span><br><span class="line">print(describe)</span><br><span class="line"></span><br><span class="line">shape = movies.shape</span><br><span class="line">print(shape)</span><br><span class="line"></span><br><span class="line">dtypes = movies.dtypes</span><br><span class="line">print(dtypes)</span><br><span class="line"></span><br><span class="line">print(type(movies))</span><br><span class="line"></span><br><span class="line">movies.describe(include=[<span class="string">'object'</span>])</span><br></pre></td></tr></table></figure>

<h4 id="4-在pandas-DataFrame-中重命名列名-源码见demo4-py"><a href="#4-在pandas-DataFrame-中重命名列名-源码见demo4-py" class="headerlink" title="4. 在pandas DataFrame 中重命名列名(源码见demo4.py)"></a>4. 在pandas DataFrame 中重命名列名(<a href="https://github.com/junhuali/study-pandas/blob/master/demo4.py" target="_blank" rel="noopener">源码见demo4.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class="line"></span><br><span class="line">head = ufo.head()</span><br><span class="line"></span><br><span class="line">print(head)</span><br><span class="line"></span><br><span class="line">print(ufo.columns)</span><br><span class="line"></span><br><span class="line">ufo.rename(columns=&#123;<span class="string">'Colors Reported'</span>: <span class="string">'Colors_Reported'</span>, <span class="string">'Shape Reported'</span>: <span class="string">'Shape_Reported'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(ufo.columns)</span><br><span class="line"></span><br><span class="line">ufo_cols = &#123;<span class="string">'city'</span>, <span class="string">'colors reported'</span>, <span class="string">'shape reported'</span>, <span class="string">'state'</span>, <span class="string">'time'</span>&#125;</span><br><span class="line"></span><br><span class="line">ufo.columns = ufo_cols</span><br><span class="line"></span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>, names=ufo_cols, header=<span class="number">0</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">print(ufo.columns)</span><br><span class="line"></span><br><span class="line">ufo.columns = ufo.columns.str.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</span><br><span class="line">print(ufo.columns)</span><br></pre></td></tr></table></figure>
<h4 id="5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py"><a href="#5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py" class="headerlink" title="5.在pandas DataFrame 中移除指定的行和列(源码见demo5.py)"></a>5.在pandas DataFrame 中移除指定的行和列(<a href="https://github.com/junhuali/study-pandas/blob/master/demo5.py" target="_blank" rel="noopener">源码见demo5.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line">print(ufo.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0 按行 axi=1 按列</span></span><br><span class="line">ufo.drop(<span class="string">'Colors Reported'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">ufo.drop([<span class="string">'City'</span>, <span class="string">'State'</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">ufo.drop([<span class="number">0</span>, <span class="number">1</span>], axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line">print(ufo.shape)</span><br></pre></td></tr></table></figure>

<p>视频p4<br>讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上<code>shift+tab</code>键，<br>查看对应的说明。<br>视频p5<br>讲解了通过几种方法修改数据的列名<br>视频p6<br>讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas学习笔记-3</title>
    <url>/2018/09/26/study-pandas-notes-3/</url>
    <content><![CDATA[<h4 id="6-pandas数据排序-源码见demo6-py"><a href="#6-pandas数据排序-源码见demo6-py" class="headerlink" title="6.pandas数据排序(源码见demo6.py)"></a>6.pandas数据排序(<a href="https://github.com/junhuali/study-pandas/blob/master/demo6.py" target="_blank" rel="noopener">源码见demo6.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">movies = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class="line">print(movies.head())</span><br><span class="line"></span><br><span class="line">print(movies[<span class="string">'title'</span>].sort_values(ascending=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">print(movies[<span class="string">'title'</span>])</span><br><span class="line"></span><br><span class="line">print(movies.sort_values(<span class="string">'title'</span>))</span><br><span class="line"></span><br><span class="line">print(movies.sort_values(<span class="string">'duration'</span>, ascending=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">print(movies.head())</span><br><span class="line"></span><br><span class="line">print(movies.sort_values([<span class="string">'content_rating'</span>, <span class="string">'duration'</span>]))</span><br></pre></td></tr></table></figure>
<h4 id="7-pandas通过列名过滤行数据-源码见demo7-py"><a href="#7-pandas通过列名过滤行数据-源码见demo7-py" class="headerlink" title="7.pandas通过列名过滤行数据(源码见demo7.py)"></a>7.pandas通过列名过滤行数据(<a href="https://github.com/junhuali/study-pandas/blob/master/demo7.py" target="_blank" rel="noopener">源码见demo7.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">movies = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class="line">print(movies.head())</span><br><span class="line">print(movies.shape)</span><br><span class="line"></span><br><span class="line">print(type(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">booleans = []</span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> movies.duration:</span><br><span class="line">    <span class="keyword">if</span> length &gt;= <span class="number">20</span>:</span><br><span class="line">        booleans.append(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        booleans.append(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">booleans[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">len(booleans)</span><br><span class="line"></span><br><span class="line">is_long = pd.Series(booleans)</span><br><span class="line">is_long.head()</span><br><span class="line"></span><br><span class="line">is_long = movies.duration &gt;= <span class="number">200</span></span><br><span class="line">is_long.head()</span><br><span class="line">movies[<span class="string">'genre'</span>]</span><br><span class="line"></span><br><span class="line">movies[movies.duration &gt;= <span class="number">200</span>][<span class="string">'genre'</span>]</span><br><span class="line">movies[is_long]</span><br></pre></td></tr></table></figure>

<p>p7<br>讲解了使用sort_values() 方法对数据进行排序<br>p8<br>讲解了通过指定的条件对数据进行筛选</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas学习笔记</title>
    <url>/2018/09/21/study-pandas-notes/</url>
    <content><![CDATA[<p><img src="study-pandas-notes/pandas.png" alt="pandas"><br>最近在学python，正好看到一个讲解pandas的系列视频，正好做一下笔记,笔记会参考视频，同时也会参考pandas官方文档。</p>
<p>什么是pandas</p>
<blockquote>
<p>pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>
</blockquote>
<p>完整的文档可以查看pandas的<a href="http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook" target="_blank" rel="noopener">Cookbook</a></p>
<p>视频地址:<br><a href="https://www.bilibili.com/video/av6785636/" target="_blank" rel="noopener">bilibili-使用 pandas 进行数据分析：Data analysis in Python with pandas</a></p>
<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ul>
<li>安装python环境</li>
<li>安装pandas<br>python 环境的安装，可以看之前的文章，在centos7上安装python。</li>
</ul>
<p>pandas安装：<br>1.Mac上使用brew <code>brew cask install anaconda</code><br>2.python -m pip install pandas <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a><br>推荐使用第一种，anaconda的方式安装，比较方便<br>使用第二种的话，需要下载额外的一些包，需要根据实际情况进行下载，例如<code>matplotlib</code>;</p>
<h3 id="视频使用的资源"><a href="#视频使用的资源" class="headerlink" title="视频使用的资源"></a>视频使用的资源</h3><p>[百度网盘]](<a href="https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw" target="_blank" rel="noopener">https://pan.baidu.com/s/1UVT_S9BHJZS8ktjAc8Xpcw</a>) 密码：dr78 （来自bilibili用户）<br>视频中的网络资源无法使用，可以使用上面百度网盘中的资源，或者使用我提供的地址</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><h4 id="1-读取表格数据到pandas中-源码见demo1-py"><a href="#1-读取表格数据到pandas中-源码见demo1-py" class="headerlink" title="1.读取表格数据到pandas中(源码见demo1.py)"></a>1.读取表格数据到pandas中(<a href="https://github.com/junhuali/study-pandas/blob/master/demo1.py" target="_blank" rel="noopener">源码见demo1.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="string">''' 因为视频中的地址不可用，可以用网盘中的文件，或者用我提供的文件地址'''</span></span><br><span class="line"></span><br><span class="line">orders = pd.read_table(<span class="string">'https://blog.searchinfogo.com/download/data/data/chipotle.tsv'</span>)</span><br><span class="line"></span><br><span class="line">print(orders)</span><br><span class="line"></span><br><span class="line">head = orders.head()</span><br><span class="line">print(head)</span><br><span class="line"></span><br><span class="line">user_cols = [<span class="string">'user_id'</span>, <span class="string">'age'</span>, <span class="string">'gender'</span>, <span class="string">'occupation'</span>, <span class="string">'zip_code'</span>]</span><br><span class="line">users = pd.read_table(<span class="string">"https://blog.searchinfogo.com/download/data/data/u.user"</span>, sep=<span class="string">'|'</span>, header=<span class="literal">None</span>, names=user_cols)</span><br><span class="line">print(users)</span><br></pre></td></tr></table></figure>
<h4 id="2-从csv中读取数据-源码见demo2-py"><a href="#2-从csv中读取数据-源码见demo2-py" class="headerlink" title="2.从csv中读取数据(源码见demo2.py)"></a>2.从csv中读取数据(<a href="https://github.com/junhuali/study-pandas/blob/master/demo2.py" target="_blank" rel="noopener">源码见demo2.py</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class="line"></span><br><span class="line">type = type(ufo)</span><br><span class="line"></span><br><span class="line">print(type)</span><br><span class="line"></span><br><span class="line">ufo.head()</span><br><span class="line"></span><br><span class="line">type(ufo[<span class="string">'City'</span>])</span><br><span class="line"></span><br><span class="line">print(ufo[<span class="string">'City'</span>])</span><br><span class="line"></span><br><span class="line">ufo.shape</span><br><span class="line"></span><br><span class="line">ufo.City + ufo.State</span><br><span class="line"></span><br><span class="line">ufo[<span class="string">'Location'</span>] = ufo.City + <span class="string">','</span> + ufo.State</span><br><span class="line"></span><br><span class="line">print(ufo[<span class="string">'Location'</span>])</span><br></pre></td></tr></table></figure>
<p>总结：<br>上面的代码涉及视频p1-p3，讲解了pandas如何读取数据，从table、csv中读取数据，并在pandas中组合出一些数据，这些过程涉及<br>生产数据、获取数据、准备数据几个过程，在实际的使用过程中，用户的操作，或者是其他过程会产生大量的数据，然后获取数据读取到<br>pandas中，并对数据进行清洗，取出掉无效或者错误的数据，之后最数据进行更深入的分析。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Shell命令行总结</title>
    <url>/2018/04/02/study-shell/</url>
    <content><![CDATA[<h3 id="了解linux系统内核"><a href="#了解linux系统内核" class="headerlink" title="了解linux系统内核"></a>了解linux系统内核</h3><p>内核的主要作用</p>
<ul>
<li>系统内存管理</li>
<li>软件程序管理</li>
<li>硬件设备管理</li>
<li>文件系统管理</li>
</ul>
<p>什么是虚拟内存<br>内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间（swap space）。<br>平常使用的都是阿里云，发现阿里云把swap的空间为0。查看官方文档后发现如果使用普通云盘，不建议使用<br>swap分区，原因是因为<code>开启SWAP可能会因频繁换页操作，导致IO性能下降</code>，如果内存足够的情况下，建议关闭<br>swap 分区。</p>
<p>软件程序管理<br>Linux操作系统将运行中的程序称为进程。进程可以在前台运行，将输出显示在屏幕上，也可以在后台运行。<br>内核创建第一个进程称为<code>init进程</code>，来启动系统上其他进程，并将其加载到虚拟内存中。</p>
<p>一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程。在Linux系统上，这个表通常位于/etc/inittab中。<br>另外一些系统则采用/etc/init.d目录，将开机时启动或停止某个应用的脚本放在这个目录下。</p>
<p>Linux 操作系统的init系统采用了运行级。运行级决定了init进程运行/etc/inittab文件或者/etc/rcX.d目录中定义好<br>的某些特定类型的进程。Linux操作系统有5个启动运行级。（但是在使用centos7的时候发现有7个运行级别0-6）</p>
<p>CentOS系统有7个运行级别(runlevel)</p>
<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)<br>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11控制台，登陆后进入图形GUI模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>
<p>不过在centos7中使用Systemd 取代init，init 是串行的，启动速度比较慢。</p>
<p>硬件设备管理<br>内核的另外一个作用就是管理硬件设备。如果使用硬件，都需要在内核代码中加入其驱动程序代码。在Linux中有两种方法插入设备驱动</p>
<ul>
<li>编译进内核的设备驱动代码</li>
<li>可插入内核的设备驱动代码（这种方式比较方便，利于维护）</li>
</ul>
<p>文件系统管理<br>Linux 内核通过支持通过不同类型的文件系统从硬盘中读写数据。这样可以支持多种文件系统，需要内核在编译时就加入可能用到的文件系统的<br>支持。</p>
<p>Shell 的种类<br>在Linux系统上，通常由好几种Linux Shell 可用。不同的Shell有不同的特性，有些利于创建脚本，有些利于管理进程。</p>
<ul>
<li>ash 一种运行在内存受限环境中的简单轻量级shell，与bash shell完全兼容</li>
<li>korn 一种与Bourne shell 兼容的编程shell，支持如关联数组和浮点运算等一些高级的编程特性</li>
<li>tcsh 一种将C 语言中的一些元素引入到shell脚本中的shell</li>
<li>zsh 一种结合了bash、tcsh和korn的特性，同时提供高级编程特性、共享历史文件和主体话提示符的高级shell。在Mac 下面使用zsh 还是非常方便的。</li>
</ul>
<p>Linux 图形化桌面 基本上用不到，就略过了。</p>
<p>文件路径</p>
<ul>
<li>相对路径</li>
<li>绝对路劲<br><code>pwd</code> 命令查询当前所在的目录<br><code>ls -F</code> 显示出文件夹和普通文件<br><code>ls -F -R</code> -R 递归文件夹</li>
</ul>
<p>文件拷贝<br><code>copy -R</code> 拷贝整个目录和文件</p>
<p>链接文件</p>
<ul>
<li>符号链接</li>
<li>硬链接<br><code>ln -s</code><br><code>ln</code></li>
</ul>
<p>2018年07月11日11:20:39（更新）</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul>
<li>全局变量</li>
<li>局部变量</li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger2.9.2的NumberFormatException</title>
    <url>/2019/05/20/swagger-2.9.2-NumberFormatException/</url>
    <content><![CDATA[<p>SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[ WARN ] [<span class="number">2019</span>-<span class="number">05</span>-<span class="number">20</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">47</span>] [http-nio-<span class="number">8080</span>-exec-<span class="number">6</span>] i.s.m.p.AbstractSerializableParameter [<span class="number">421</span>]  - Illegal DefaultValue <span class="number">0</span> <span class="keyword">for</span> parameter type integer</span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">""</span></span><br><span class="line">	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">	at java.lang.Long.parseLong(Long.java:<span class="number">601</span>)</span><br><span class="line">	at java.lang.Long.valueOf(Long.java:<span class="number">803</span>)</span><br><span class="line">	at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class="number">412</span>)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure>
<p>可以看到是在<code>Long.parseLong()</code>转换的时候报错了</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>试了网上说的增加默认值，但是在我本地没有生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"id"</span>,example = <span class="string">"123"</span>)</span><br></pre></td></tr></table></figure>
<p>第二种方法<br>pom中增加新的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> # 默认的配置</span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"># 增加两个配置</span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>增加上面的配置后，就不再报错了。</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>1.5.20的源码，判断如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"x-example"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.example == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"integer"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                   <span class="keyword">return</span> Long.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"number"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                   <span class="keyword">return</span> Double.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"boolean"</span>.equals(<span class="keyword">this</span>.type) &amp;&amp; (<span class="string">"true"</span>.equalsIgnoreCase(<span class="keyword">this</span>.example) || <span class="string">"false"</span>.equalsIgnoreCase(<span class="keyword">this</span>.defaultValue))) &#123;</span><br><span class="line">                   <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (NumberFormatException var2) &#123;</span><br><span class="line">               LOGGER.warn(String.format(<span class="string">"Illegal DefaultValue %s for parameter type %s"</span>, <span class="keyword">this</span>.defaultValue, <span class="keyword">this</span>.type), var2);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.example;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>1.5.22 的源码，判断如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"x-example"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.example != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.example.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"integer"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Long.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"number"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Double.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"boolean"</span>.equals(<span class="keyword">this</span>.type) &amp;&amp; (<span class="string">"true"</span>.equalsIgnoreCase(<span class="keyword">this</span>.example) || <span class="string">"false"</span>.equalsIgnoreCase(<span class="keyword">this</span>.defaultValue))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException var2) &#123;</span><br><span class="line">                LOGGER.warn(String.format(<span class="string">"Illegal DefaultValue %s for parameter type %s"</span>, <span class="keyword">this</span>.defaultValue, <span class="keyword">this</span>.type), var2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.example;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.example;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装LAMP</title>
    <url>/2017/10/28/ubuntu-install-lamp/</url>
    <content><![CDATA[<h3 id="LAMP"><a href="#LAMP" class="headerlink" title="LAMP"></a>LAMP</h3><p> Linux+Apache+Mysql/MariaDB+Perl/PHP/Python一组常用来搭建动态网站或者服务器的开源软件，本身都是各自独立的程序，但是因为常被放在一起使用，拥有了越来越高的兼容度，共同组成了一个强大的Web应用程序平台。<a id="more"></a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>基于Ubuntu</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get update &amp;&amp; sudo apt-get upgrade <span class="comment">#更新软件包</span></span><br></pre></td></tr></table></figure>
<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y mysql-server</span><br><span class="line">$ sudo apt-get install -y mysql-client</span><br><span class="line">! 记得设置默认密码</span><br></pre></td></tr></table></figure>


 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo netstat -tap | grep mysql <span class="comment">#显示监听的端口即表示安装成功</span></span><br></pre></td></tr></table></figure>

<h4 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure>
<h4 id="远程访问赋权"><a href="#远程访问赋权" class="headerlink" title="远程访问赋权"></a>远程访问赋权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">$ grant all on *.* to root@<span class="string">'%'</span> identified by <span class="string">'root'</span>;</span><br><span class="line">$ flush privileges;  </span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ service mysql restart(or: $ /etc/init.d/mysql restart)<span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>
<p>####安装Apache2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y apache2</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改apache2.conf配置</span></span><br><span class="line">$ vi /etc/apache2/apache2.conf</span><br><span class="line">$ KeepAlive Off</span><br><span class="line"><span class="comment">#修改mpm_prefork.conf配置</span></span><br><span class="line">$ vim /etc/apache2/mods-available/mpm_prefork.conf</span><br><span class="line"> &lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">   StartServers            2</span><br><span class="line">   MinSpareServers         6</span><br><span class="line">   MaxSpareServers         12</span><br><span class="line">   MaxRequestWorkers       39</span><br><span class="line">   MaxConnectionsPerChild  3000</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用和启动模块</span></span><br><span class="line">$ sudo a2dismod mpm_event</span><br><span class="line">$ sudo a2enmod mpm_prefork</span><br><span class="line">$ sudo systemctl restart apache2 <span class="comment">#重启Apache</span></span><br></pre></td></tr></table></figure>
<h4 id="PHP-安装"><a href="#PHP-安装" class="headerlink" title="PHP 安装"></a>PHP 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装相关包</span></span><br><span class="line">$ sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql -y</span><br><span class="line"><span class="comment"># 安装组件支持</span></span><br><span class="line">apt-get install php7.0-curl php7.0-json php7.0-cgi graphviz aspell php7.0-pspell php7.0-curl php7.0-gd php7.0-intl php7.0-mysql php7.0-xml php7.0-xmlrpc php7.0-ldap php7.0-zip php7.0-soap php7.0-mbstring php-gettext -y</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">$ sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>

<h4 id="phpmyadmin-安装"><a href="#phpmyadmin-安装" class="headerlink" title="phpmyadmin 安装"></a>phpmyadmin 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo apt-get install -y phpmyadmin</span><br><span class="line"><span class="comment">#安装对应php包（如果没有安装对应的包）</span></span><br><span class="line">$ sudo apt-get install -y php-mbstring</span><br><span class="line">$ sudo apt-get install -y php-gettext</span><br><span class="line"><span class="comment">#安装时选择自动配置数据库，输入数据库root账号的密码</span></span><br><span class="line"><span class="comment">#如果不安装以上两个php软件包，则会报错或者白屏，提示找不到/usr/share/php/php-gettext/gettext.inc之类的错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立软连接</span></span><br><span class="line">$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin</span><br><span class="line"><span class="comment">#重启apache</span></span><br><span class="line">$ sudo /etc/init.d/apache2 restart</span><br><span class="line"><span class="comment">#访问http://localhost:127.0.0.1/phpmyadmin 输入之前创建mysql 时候的账号密码即可</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>使用模拟时间在Docker 中进行测试</title>
    <url>/2019/07/02/use-a-fake-system-clock-with-docker/</url>
    <content><![CDATA[<p>在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：</p>
<ul>
<li>它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序</li>
<li>反复更改系统时钟可能既费时又麻烦<a id="more"></a>
您可以为您的应用定义一个假系统时钟，而不是更改系统时钟。 在生产中，假系统时钟返回正常时间。 在测试过程中，伪造的系统时钟会在您需要有效测试覆盖时随时返回。</li>
</ul>
<p>为此，您需要定义各种不同的时钟实现，并能够轻松交换它们。 许多人会选择使用依赖注入工具，或者使用插件机制。<br>为此，您必须永远不要直接引用默认系统时钟和时区，避免使用以下方法：</p>
<ul>
<li>System.currentTimeMillis()</li>
<li>LocalDateTime.now() (或者类似的)</li>
<li>Date类的默认构造函数（后者又使用System.currentTimeMillis（））</li>
</ul>
<p>这需要一些规则，因为许多代码示例使用默认系统时钟（和时区），并且因为调用上述方法已成为习惯。<br>假时钟的可能行为包括：</p>
<ul>
<li>跳到未来</li>
<li>回到过去</li>
<li>使用固定日期和固定时间</li>
<li>使用固定日期，但仍然让时间变化</li>
<li>每次看到时钟时都会增加一秒钟</li>
<li>通过加速或减慢某个因素来改变时间的流逝率</li>
<li>使用正常的系统时钟而无需改动</li>
</ul>
<p>根据您的需要，您可能必须在部分或全部这些地方使用假系统时钟：</p>
<ul>
<li>应用代码</li>
<li>与数据库交互的代码</li>
<li>日志输出</li>
<li>框架类</li>
</ul>
<h3 id="例子-for-Java-8"><a href="#例子-for-Java-8" class="headerlink" title="例子 for Java 8"></a>例子 for Java 8</h3><p>java.time包的Clock类允许您创建一个假的系统时钟。 它的固定方法可以让您快速创建一个常见类型的假时钟，它只是在给定时区内返回一个固定值。 通常，您需要扩展抽象Clock类，并实现其抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Clock;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Increment by 1 second each time you look at the clock.</span></span><br><span class="line"><span class="comment"> Starts with the default system clock's instant and time-zone.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Example output:</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:12.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:13.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:14.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:15.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:16.778Z</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@since</span> Java 8.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockTicker</span> <span class="keyword">extends</span> <span class="title">Clock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Simple demo of the behaviour of this class. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    ClockTicker ticker = <span class="keyword">new</span> ClockTicker();</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object msg)</span></span>&#123;</span><br><span class="line">    System.out.println(Objects.toString(msg));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ZoneId <span class="title">getZone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DEFAULT_TZONE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Clock <span class="title">withZone</span><span class="params">(ZoneId zone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Clock.fixed(WHEN_STARTED, zone);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Instant <span class="title">instant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextInstant();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//PRIVATE</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Instant WHEN_STARTED = Instant.now();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ZoneId DEFAULT_TZONE = ZoneId.systemDefault();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Instant <span class="title">nextInstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ++count;</span><br><span class="line">    <span class="keyword">return</span> WHEN_STARTED.plusSeconds(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Clock;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Set the starting date-time and time-zone, but then</span></span><br><span class="line"><span class="comment"> let the time vary normally.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Example output:</span></span><br><span class="line"><span class="comment">  2018-12-25T05:00:00Z</span></span><br><span class="line"><span class="comment">  Sleep for 5 seconds...</span></span><br><span class="line"><span class="comment">  2018-12-25T05:00:05.005Z</span></span><br><span class="line"><span class="comment">  Done.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@since</span> Java 8.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockTimeTravel</span> <span class="keyword">extends</span> <span class="title">Clock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Simple demo of the behaviour of this class. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ClockTimeTravel timeTravel = <span class="keyword">new</span> ClockTimeTravel(</span><br><span class="line">      LocalDateTime.parse(<span class="string">"2018-12-25T00:00:00"</span>), ZoneOffset.of(<span class="string">"-05:00"</span>)</span><br><span class="line">    );</span><br><span class="line">    log(timeTravel.instant());</span><br><span class="line">    log(<span class="string">"Sleep for 5 seconds..."</span>);</span><br><span class="line">    Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">    log(timeTravel.instant());</span><br><span class="line">    log(<span class="string">"Done."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object msg)</span></span>&#123;</span><br><span class="line">    System.out.println(Objects.toString(msg));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClockTimeTravel</span><span class="params">(LocalDateTime t0, ZoneOffset zoneOffset)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.zoneOffset = zoneOffset;</span><br><span class="line">    <span class="keyword">this</span>.t0LocalDateTime = t0;</span><br><span class="line">    <span class="keyword">this</span>.t0Instant = t0.toInstant(zoneOffset);</span><br><span class="line">    <span class="keyword">this</span>.whenObjectCreatedInstant = Instant.now();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ZoneId <span class="title">getZone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zoneOffset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** The caller needs to actually pass a ZoneOffset object here. */</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Clock <span class="title">withZone</span><span class="params">(ZoneId zone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClockTimeTravel(t0LocalDateTime, (ZoneOffset)zone);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Instant <span class="title">instant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextInstant();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//PRIVATE</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** t0 is the moment this clock object was created in Java-land. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Instant t0Instant;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> LocalDateTime t0LocalDateTime;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ZoneOffset zoneOffset;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Instant whenObjectCreatedInstant;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   Figure out how much time has elapsed between the moment this</span></span><br><span class="line"><span class="comment">   object was created, and the moment when this method is being called.</span></span><br><span class="line"><span class="comment">   Then, apply that diff to t0.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Instant <span class="title">nextInstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Instant now = Instant.now();</span><br><span class="line">    <span class="keyword">long</span> diff = now.toEpochMilli() - whenObjectCreatedInstant.toEpochMilli();</span><br><span class="line">    <span class="keyword">return</span> t0Instant.plusMillis(diff);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子-小于-Java8"><a href="#例子-小于-Java8" class="headerlink" title="例子 小于 Java8"></a>例子 小于 Java8</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">The TimeSource interface allows you to define various implementations of a fake system clock:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Return the system time. */</span>  </span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">This implementation mimics a system clock running one day in advance:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeSrc</span> <span class="keyword">implements</span> <span class="title">TimeSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** One day in advance of the actual time.*/</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> System.currentTimeMillis() + ONE_DAY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ONE_DAY = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用各种TimeSource实现，您可以模拟系统时钟的任何所需行为。<br>配置JDK记录器以使用假系统时钟很简单。 一个简单的自定义Formatter可以使用TimeSource来改变LogRecord的时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFormatterTimeSource</span> <span class="keyword">extends</span> <span class="title">SimpleFormatter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(LogRecord aLogRecord)</span> </span>&#123;</span><br><span class="line">    aLogRecord.setMillis(fTimeSource.currentTimeMillis());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.format(aLogRecord);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> TimeSource fTimeSource = BuildImpl.forTimeSource();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的文章机翻<a href="http://www.javapractices.com/topic/TopicAction.do?Id=234" target="_blank" rel="noopener">Use a fake system clock</a></p>
<h3 id="Docker-中修改时间"><a href="#Docker-中修改时间" class="headerlink" title="Docker 中修改时间"></a>Docker 中修改时间</h3><p>Docker 是容器技术，不同于虚拟化技术是独立的系统，Docker是通过<a href="https://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">NameSpace上</a>、<a href="https://coolshell.cn/articles/17029.html" target="_blank" rel="noopener">NameSpace下</a> 和<a href="https://coolshell.cn/articles/17049.html" target="_blank" rel="noopener">CGroup</a>来虚拟的系统，可以参考上面的几篇文章，可以让你让你了解为什么修改时间后，Docker会崩溃了（Docker 的时间其实是使用的宿主机时间）。我们一般测试的时候，需要将时间修改成指定的时间，所以只是修改时区的话，是满足不了我们的要求的。</p>
<p>所以我们需要其他的解决方法。</p>
<p>解决方案是在容器中伪造它。 这个lib 拦截所有系统调用程序用于检索当前时间和日期。<br>实施很容易。根据需要为Dockerfile添加功能：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd WORKDIR /</span><br><span class="line">git clone https://github.com/wolfcw/libfaketime.git</span><br><span class="line">cd  /libfaketime/src</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>请记住设置环境变量 LD_PRELOAD 在运行应用程序之前，您需要应用伪造的时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMD [&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, &quot;LD_PRELOAD&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;faketime&#x2F;libfaketime.so.1 FAKETIME_NO_CACHE&#x3D;1 python &#x2F;srv&#x2F;intercept&#x2F;manage.py runserver 0.0.0.0:3000]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_time</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(datetime.today())</span><br><span class="line">    os.environ[<span class="string">"FAKETIME"</span>] = <span class="string">"2020-01-01"</span>  <span class="comment"># Note: time of type string must be in the format "YYYY-MM-DD hh:mm:ss" or "+15d"</span></span><br><span class="line">    print(datetime.today())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的文章引用于 <a href="http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian" target="_blank" rel="noopener">http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian</a></p>
</blockquote>
<p>后面会再单独写一篇使用Dockerfile 的详细示例。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用frp微信本地调试</title>
    <url>/2018/05/07/use-frp/</url>
    <content><![CDATA[<h3 id="frp-原理"><a href="#frp-原理" class="headerlink" title="frp 原理"></a>frp 原理</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。<a id="more"></a></p>
<h3 id="本地调试微信"><a href="#本地调试微信" class="headerlink" title="本地调试微信"></a>本地调试微信</h3><p>微信开发需要调试不少东西，本地都是没有办法进行的，需要有固定的ip才能进行正常调试，如果把代码发布到远程进行调试，效率很低，所以需要本地有个固定的ip。<br>早期的时候我是使用ngrok进行内网穿透,因为各种原因，到后期基本没法使用了，然后我就切换到frp上，frp的部署要比ngrok 简单很多。ngrok 需要编译很多东西。</p>
<h3 id="frp-服务端部署"><a href="#frp-服务端部署" class="headerlink" title="frp 服务端部署"></a>frp 服务端部署</h3><p>下载对应的包，客户端和服务端在一个包里面。系统centos7</p>
<ul>
<li><p>下载安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用64位的包</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.18.0/frp_0.18.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>域名解析<br>需要进行泛域名解析<br><code>A   *.frp.frpss.top  xx.xx.xx.xx</code></p>
</li>
<li><p>配置配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改服务端配置，frps_full.ini里面有所有的示例配置和说明</span></span><br><span class="line"><span class="comment">#这里使用泛域名解析，这样可以多用户同时使用</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8089</span><br><span class="line">subdomain_host=frp.frpss.top</span><br><span class="line">dashboard_port = 7500</span><br></pre></td></tr></table></figure>
<p>为了方便，可以使用nginx 进行代理，这样使用的时候就不需要配置端口号了</p>
</li>
</ul>
<h3 id="frp-客户端配置"><a href="#frp-客户端配置" class="headerlink" title="frp 客户端配置"></a>frp 客户端配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="comment">#服务端配置</span></span><br><span class="line">server_addr = 118.24.62.41</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要自己起别名，注意不要和其他人重复</span></span><br><span class="line">[server]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">local_port = 4000</span><br><span class="line"><span class="comment">#泛解析域名，自己定义 如：test,解析后为test.frp.frpss.top</span></span><br><span class="line">subdomain = <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mac 启动</span></span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"><span class="comment">#Windows</span></span><br><span class="line">./frpc.exe -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>上面的端口配置的是<code>4000</code>根据自己的项目配置端口，然后使用<code>test.frp.frpss.top</code>进行访问</p>
<p>安装包可以去github下载，也可以在<a href="http://share.frpss.top" target="_blank" rel="noopener">http://share.frpss.top</a> 下载</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Libra(天秤座)</title>
    <url>/2019/07/12/what-is-libra/</url>
    <content><![CDATA[<p>什么是<code>Libra</code>,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。<a id="more"></a></p>
<blockquote>
<p>Libra’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.</p>
</blockquote>
<p>上面的是Libra 对自己的描述，或者理解为定位，如果全球都使用同一种货币进行交易的话，里面会有多大的想象力以及前景，虽然现在Libra面临着各种各样的法律问题和风险，但是如果能慢慢解决的话，我还是非常看好它的前景的。</p>
<p><code>Libra</code> 使用Facebook开发的Move语言，接下来我们简单的来跑个demo，了解一下<code>Libra</code>，现在它只能在macOS和Linux 上运行</p>
<h3 id="Move-语言的三大用处"><a href="#Move-语言的三大用处" class="headerlink" title="Move 语言的三大用处"></a>Move 语言的三大用处</h3><ul>
<li>发行数字货币、Token、数字资产</li>
<li>灵活处理区块链交易</li>
<li>验证器（Validator）管理</li>
</ul>
<h3 id="Clone-Libra"><a href="#Clone-Libra" class="headerlink" title="Clone Libra"></a>Clone Libra</h3><p>下载代码到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/libra/libra.git &amp;&amp; cd libra</span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">Cloning into 'libra'...</span><br><span class="line">remote: Enumerating objects: 3799, done.</span><br><span class="line">remote: Total 3799 (delta 0), reused 0 (delta 0), pack-reused 3799</span><br><span class="line">Receiving objects: 100% (3799/3799), 3.47 MiB | 1.09 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1874/1874), done.</span><br></pre></td></tr></table></figure>

<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./scripts/dev_setup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">Installing Rust......</span><br><span class="line">info: downloading installer</span><br><span class="line">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class="line">info: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)</span><br><span class="line">info: downloading component 'rustc'</span><br><span class="line"> 82.2 MiB /  82.2 MiB (100 %)   8.8 MiB/s in 10s ETA:  0s</span><br><span class="line">info: downloading component 'rust-std'</span><br><span class="line"> 55.8 MiB /  55.8 MiB (100 %)   8.6 MiB/s in  6s ETA:  0s</span><br><span class="line">info: downloading component 'cargo'</span><br><span class="line">info: downloading component 'rust-docs'</span><br><span class="line"> 11.1 MiB /  11.1 MiB (100 %)   8.6 MiB/s in  1s ETA:  0s</span><br><span class="line">info: installing component 'rustc'</span><br><span class="line"> 82.2 MiB /  82.2 MiB (100 %)  12.6 MiB/s in  6s ETA:  0s</span><br><span class="line">info: installing component 'rust-std'</span><br><span class="line"> 55.8 MiB /  55.8 MiB (100 %)  16.2 MiB/s in  3s ETA:  0s</span><br><span class="line">info: installing component 'cargo'</span><br><span class="line">info: installing component 'rust-docs'</span><br><span class="line"> 11.1 MiB /  11.1 MiB (100 %)   2.2 MiB/s in  5s ETA:  0s</span><br><span class="line">info: default toolchain set to 'stable'</span><br><span class="line"></span><br><span class="line">  stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Rust is installed now. Great!</span><br><span class="line"></span><br><span class="line">To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH </span><br><span class="line">environment variable. Next time you log in this will be done automatically.</span><br><span class="line"></span><br><span class="line">To configure your current shell run source $HOME/.cargo/env</span><br><span class="line">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class="line">info: checking for self-updates</span><br><span class="line"></span><br><span class="line">  stable-x86_64-apple-darwin unchanged - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class="line"></span><br><span class="line">info: syncing channel updates for 'nightly-2019-07-08-x86_64-apple-darwin'</span><br><span class="line">info: latest update on 2019-07-08, rust version 1.38.0-nightly (6e310f2ab 2019-07-07)</span><br><span class="line">info: downloading component 'rustc'</span><br><span class="line"> 58.9 MiB /  58.9 MiB (100 %)   1.5 MiB/s in 57s ETA:  0s     </span><br><span class="line">info: downloading component 'rust-std'</span><br><span class="line">168.6 MiB / 168.6 MiB (100 %)   2.2 MiB/s in  1m  5s ETA:  0s</span><br><span class="line">info: downloading component 'cargo'</span><br><span class="line">  3.6 MiB /   3.6 MiB (100 %)   2.8 MiB/s in  1s ETA:  0s</span><br><span class="line">info: downloading component 'rust-docs'</span><br><span class="line"> 11.6 MiB /  11.6 MiB (100 %)   2.3 MiB/s in  5s ETA:  0s</span><br><span class="line">info: installing component 'rustc'</span><br><span class="line"> 58.9 MiB /  58.9 MiB (100 %)  12.7 MiB/s in  4s ETA:  0s</span><br><span class="line">info: installing component 'rust-std'</span><br><span class="line">168.6 MiB / 168.6 MiB (100 %)  26.8 MiB/s in  6s ETA:  0s</span><br><span class="line">info: installing component 'cargo'</span><br><span class="line">info: installing component 'rust-docs'</span><br><span class="line"> 11.6 MiB /  11.6 MiB (100 %)   2.2 MiB/s in  4s ETA:  0s</span><br><span class="line">info: downloading component 'rustfmt'</span><br><span class="line">  2.0 MiB /   2.0 MiB (100 %) 1005.6 KiB/s in  3s ETA:  0s</span><br><span class="line">info: installing component 'rustfmt'</span><br><span class="line">info: downloading component 'clippy'</span><br><span class="line">  1.3 MiB /   1.3 MiB (100 %) 383.7 KiB/s in  5s ETA:  0s</span><br><span class="line">info: installing component 'clippy'</span><br><span class="line">Installing CMake......</span><br><span class="line">Finished installing all dependencies.</span><br><span class="line"></span><br><span class="line">You should now be able to build the project by running:</span><br><span class="line">    source /Users/xxx/.cargo/env</span><br><span class="line">    cargo build</span><br><span class="line"><span class="meta">#</span><span class="bash">如果出现下面的错误，需要安装 protobuf</span></span><br><span class="line">error: failed to run custom build command for `network v0.1.0</span><br><span class="line">brew install protobuf</span><br></pre></td></tr></table></figure>

<p>出现错误可以查看 <a href="https://developers.libra.org/docs/my-first-transaction#setup-libra-core" target="_blank" rel="noopener">roubleshooting</a> 解决<br>上面的过程取决与你的网速，有可能会很慢，通过上面的一系列操作，基本的环境配置好了，接下来就可以在测试网络上开始交易了（现在还是测试网络，现在还没有办法支持10亿人的交易需求，后面会慢慢转向私有的联盟链）</p>
<h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./scripts/cli/start_cli_testnet.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">xxxxxxxx</span><br><span class="line"> Finished dev [unoptimized + debuginfo] target(s) in 3m 31s</span><br><span class="line">     Running `target/debug/client --host ac.testnet.libra.org --port 8000 -s ./scripts/cli/trusted_peers.config.toml`</span><br><span class="line">Connected to validator at: ac.testnet.libra.org:8000</span><br><span class="line">usage: &lt;command&gt; &lt;args&gt;</span><br><span class="line"></span><br><span class="line">Use the following commands:</span><br><span class="line"></span><br><span class="line">account | a</span><br><span class="line">    Account operations</span><br><span class="line">query | q</span><br><span class="line">    Query operations</span><br><span class="line">transfer | transferb | t | tb</span><br><span class="line">    &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;receiver_account_address&gt;|&lt;receiver_account_ref_id&gt; &lt;number_of_coins&gt; [gas_unit_price_in_micro_libras (default=0)] [max_gas_amount_in_micro_libras (default 10000)] Suffix 'b' is for blocking.</span><br><span class="line">    Transfer coins (in libra) from account to another.</span><br><span class="line">submit | submitb | s | sb</span><br><span class="line">    &lt;signer_account_address&gt;|&lt;signer_account_ref_id&gt; &lt;path_to_raw_transaction&gt; Suffix 'b' is for blocking. </span><br><span class="line">    Load a RawTransaction from file and submit to the network</span><br><span class="line">help | h</span><br><span class="line">    Prints this help</span><br><span class="line">quit | q!</span><br><span class="line">    Exit this client</span><br><span class="line">Please, input commands:</span><br></pre></td></tr></table></figure>

<p>使用上面的命令可以构建和运行客户端，并将客户端连接到<code>test</code>网络，并列出了常用的命令</p>
<h3 id="运行你第一笔交易"><a href="#运行你第一笔交易" class="headerlink" title="运行你第一笔交易"></a>运行你第一笔交易</h3><h4 id="创建两个账户"><a href="#创建两个账户" class="headerlink" title="创建两个账户"></a>创建两个账户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> account</span></span><br><span class="line">usage: account &lt;arg&gt;</span><br><span class="line"></span><br><span class="line">Use the following args for this command:</span><br><span class="line"></span><br><span class="line">create | c </span><br><span class="line">	Create an account. Returns reference ID to use in other operations</span><br><span class="line">list | la </span><br><span class="line">	Print all accounts that were created or loaded</span><br><span class="line">recover | r &lt;file_path&gt;</span><br><span class="line">	Recover Libra wallet from the file path</span><br><span class="line">write | w &lt;file_path&gt;</span><br><span class="line">	Save Libra wallet mnemonic recovery seed to disk</span><br><span class="line">mint | mintb | m | mb &lt;receiver_account_ref_id&gt;|&lt;receiver_account_address&gt; &lt;number_of_coins&gt;</span><br><span class="line">	Mint coins to the account. Suffix 'b' is for blocking</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> account create</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Creating/retrieving next account from wallet</span></span><br><span class="line">Created/retrieved account #0 address 4be45f015f45a2968d68a2ac56ebd1bfa05a43f87fefb2f5327bea292c354ece</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> account create</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Creating/retrieving next account from wallet</span></span><br><span class="line">Created/retrieved account #1 address b83ef4576f74faa787abc8233a501540dcbb9ede236ee967535051ac8c8f6fab</span><br></pre></td></tr></table></figure>

<p><code>#0</code>是账户索引，十六进制字符串是账号地址</p>
<h4 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> account mint 0 110</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Minting coins</span></span><br><span class="line">Mint request submitted</span><br></pre></td></tr></table></figure>

<ul>
<li>0 是账户索引</li>
<li>110 是往账户添加的金额</li>
</ul>
<p>第二个账户也进行相同的操作，需要注意的是，只是发出了命令进行增加，还需要确认账户中的金额</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 0</span></span><br><span class="line">Balance is: 110.000000</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 1</span></span><br><span class="line">Balance is: 52.000000</span><br></pre></td></tr></table></figure>

<p>可以看到对应的金额已经添加到账户</p>
<h4 id="提交交易"><a href="#提交交易" class="headerlink" title="提交交易"></a>提交交易</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> query sequence 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Getting current sequence number</span></span><br><span class="line">Sequence number is: 0</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query sequence 1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Getting current sequence number</span></span><br><span class="line">Sequence number is: 0</span><br><span class="line"></span><br><span class="line"><span class="meta">libra%</span><span class="bash"> transfer 0 1 10</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Transferring</span></span><br><span class="line">Transaction submitted to validator</span><br><span class="line">To query for transaction status, run: query txn_acc_seq 0 0 &lt;fetch_events=true|false&gt;</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query sequence 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Getting current sequence number</span></span><br><span class="line">Sequence number is: 1</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 0</span></span><br><span class="line">Balance is: 100.000000</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 1</span></span><br><span class="line">Balance is: 62.000000</span><br></pre></td></tr></table></figure>

<ul>
<li>0 是第一个账户</li>
<li>1是第二个账户</li>
<li>10是要从第一个转账到第二个账户的金额</li>
</ul>
<p>通过查询账户，可以看到对应的金额已经变更</p>
<p>整个过程非常的简单，试想一下，如果全球都支持使用<code>Libra</code>进行支付，支付将会变的更加便捷，当然支付宝也可以完成类似的操作，但是背后所涉及的交易结算是非常复杂的，还需要支付额外的手续费。那<code>Libra</code>是如何维持生存呢，看了一下，靠发币是抵押的法币产生的利息支付运营成本，不过这玩意要是真的流行，那就是全球羊毛收割机了，未来谁知道呢。</p>
]]></content>
      <categories>
        <category>Cryptocurrency</category>
      </categories>
      <tags>
        <tag>Libra</tag>
      </tags>
  </entry>
  <entry>
    <title>centos yum 安装nginx 后增加模块</title>
    <url>/2017/10/01/yum-install-nginx-add-modules/</url>
    <content><![CDATA[<h3 id="yum-和-源码安装的区别"><a href="#yum-和-源码安装的区别" class="headerlink" title="yum 和 源码安装的区别"></a>yum 和 源码安装的区别</h3><p>yum 安装是在线安装，优点：安装方式简单，快捷；</p>
<p>源码安装是将源码进行编译，生成可执行文件，优点：方便的添加模块等<a id="more"></a></p>
<h3 id="yum安装nginx"><a href="#yum安装nginx" class="headerlink" title="yum安装nginx"></a>yum安装nginx</h3><p>系统版本：CentOS Linux release 7.4.1708 (Core)</p>
<h4 id="1-增加对应的源"><a href="#1-增加对应的源" class="headerlink" title="1.增加对应的源"></a>1.增加对应的源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="2-查看nginx信息"><a href="#2-查看nginx信息" class="headerlink" title="2.查看nginx信息"></a>2.查看nginx信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum info nginx  (查看nginx 版本方便后面下载对应版本)</span><br></pre></td></tr></table></figure>
<h4 id="3-yum安装nginx"><a href="#3-yum安装nginx" class="headerlink" title="3.yum安装nginx"></a>3.yum安装nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>

<h3 id="nginx-相关的命令"><a href="#nginx-相关的命令" class="headerlink" title="nginx 相关的命令"></a>nginx 相关的命令</h3><h4 id="1-查看安装路径"><a href="#1-查看安装路径" class="headerlink" title="1.查看安装路径"></a>1.查看安装路径</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ql nginx</span><br></pre></td></tr></table></figure>
<h4 id="2-查看编译参数"><a href="#2-查看编译参数" class="headerlink" title="2.查看编译参数"></a>2.查看编译参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure>
<h4 id="3-nginx-启动、停止、重启"><a href="#3-nginx-启动、停止、重启" class="headerlink" title="3.nginx 启动、停止、重启"></a>3.nginx 启动、停止、重启</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx #启动 nginx 服务</span><br><span class="line">systemctl stop nginx #停止 nginx 服务</span><br><span class="line">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>

<h3 id="启动检查是否启动成功"><a href="#启动检查是否启动成功" class="headerlink" title="启动检查是否启动成功"></a>启动检查是否启动成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -i localhost</span><br></pre></td></tr></table></figure>

<h4 id="如下显示说明正常启动："><a href="#如下显示说明正常启动：" class="headerlink" title="如下显示说明正常启动："></a>如下显示说明正常启动：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><p>其实<code>yum</code>安装<code>nginx</code> 后想要添加第三方模块，只需对<code>yum</code>安装的<code>nginx</code>相同版本的源码进行编译后替换</p>
<h4 id="1-安装源码安装需要的第三方包"><a href="#1-安装源码安装需要的第三方包" class="headerlink" title="1.安装源码安装需要的第三方包"></a>1.安装源码安装需要的第三方包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>
<h4 id="2-下载对应的源码"><a href="#2-下载对应的源码" class="headerlink" title="2.下载对应的源码"></a>2.下载对应的源码</h4><p>通过<code>nginx -V</code> 可以知道yum 安装nginx 的版本为1.12.1,下载对应的源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="3-查看对应configure"><a href="#3-查看对应configure" class="headerlink" title="3.查看对应configure"></a>3.查看对应configure</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xf nginx-1.12.1.tar.gz</span><br><span class="line">cd nginx-1.12.1</span><br><span class="line">nginx -V</span><br><span class="line">configure arguments:  --prefix=/etc/nginx \</span><br><span class="line">            --sbin-path=/usr/sbin/nginx \</span><br><span class="line">            --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
<h4 id="4-增加对应的模块"><a href="#4-增加对应的模块" class="headerlink" title="4.增加对应的模块"></a>4.增加对应的模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/etc/nginx \</span><br><span class="line">            --sbin-path=/usr/sbin/nginx \</span><br><span class="line">            --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">            ...</span><br><span class="line">            --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure>
<h4 id="5-编译"><a href="#5-编译" class="headerlink" title="5.编译"></a>5.编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="6-对可执行文件进行备份替换"><a href="#6-对可执行文件进行备份替换" class="headerlink" title="6.对可执行文件进行备份替换"></a>6.对可执行文件进行备份替换</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/sbin/nginx /usr/sbin/nginx.bak #备份</span><br><span class="line">cp /opt/nginx-1.12.1/objs/nginx /usr/sbin/nginx #替换</span><br><span class="line">systemctl restart nginx #重启 nginx 服务</span><br></pre></td></tr></table></figure>
<p>大功告成</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
</search>
