<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junhua&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.searchinfogo.com/"/>
  <updated>2019-11-22T02:48:29.880Z</updated>
  <id>https://blog.searchinfogo.com/</id>
  
  <author>
    <name>Junhua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lightsail使用root用户登录</title>
    <link href="https://blog.searchinfogo.com/2019/11/22/lightsail-use-root-logn/"/>
    <id>https://blog.searchinfogo.com/2019/11/22/lightsail-use-root-logn/</id>
    <published>2019-11-22T02:29:26.137Z</published>
    <updated>2019-11-22T02:48:29.880Z</updated>
    
    <content type="html"><![CDATA[<p>在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。<a id="more"></a><br>在创建服务器的时候，选择增加脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo root:123456 |sudo chpasswd root</span><br><span class="line">sudo sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;</span><br><span class="line">sudo sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>需要注意的：<br>   root: 后面的部分需要修改为你自己的密码，如果你的服务器已经创建，可以建一个<code>login.sh</code>文件，将上面的脚本粘贴进去，然后执行<code>chmod +x login.sh</code><br>   ,<code>sh login</code>,之后服务器会重启，然后就可以尝试使用密码登录了，之前使用普通用户ssh 登录，也可以将用户名改为root进行登录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用AWS云的时候，使用私钥登录，但是登录的用户权限是普通用户，个人使用的时候有很多的不变，通过下面的方法可以修改为root权限登录。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>初识Dart(一)</title>
    <link href="https://blog.searchinfogo.com/2019/07/15/study-dart-1/"/>
    <id>https://blog.searchinfogo.com/2019/07/15/study-dart-1/</id>
    <published>2019-07-15T12:06:52.000Z</published>
    <updated>2019-10-20T04:54:47.416Z</updated>
    
    <content type="html"><![CDATA[<p>2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。<a id="more"></a></p><p>不过因为Node的出现，JavaScript得到了告诉的发展了，Dart并没有流行起来，不过因为Flutter的出现，Dart迎来了自己的第二春。</p><p>学习语言的第一件事情就是准备一个环境，在<a href="https://repl.it/languages/dart" target="_blank" rel="noopener">repl</a>新建一个<code>main.dart</code>文件</p><h3 id="范例，hello-world"><a href="#范例，hello-world" class="headerlink" title="范例，hello world"></a>范例，hello world</h3><figure class="highlight plain"><figcaption><span>dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">    print(&apos;Hello World!&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>run</code><br>可以看到右边打印出来内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dart VM version: 2.2.0 (Unknown timestamp) on "linux_x64"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> run-project</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>Dart 也是用main做函数的入口的，跟Java很像。</p><h3 id="Dart的变量与类型"><a href="#Dart的变量与类型" class="headerlink" title="Dart的变量与类型"></a>Dart的变量与类型</h3><h4 id="Dart的基本内置类型有："><a href="#Dart的基本内置类型有：" class="headerlink" title="Dart的基本内置类型有："></a>Dart的基本内置类型有：</h4><ul><li>Numbers</li><li>Strings</li><li>Booleans</li><li>Lists</li><li>Sets</li><li>Maps</li><li>Runes</li><li>Symbols</li></ul><p><code>Numbers</code>有两种子类（int 和 double）<br><code>Strings</code>跟我们平常用的String没有什么区别<br><code>Booleans</code>是类型安全的，意味着我们不能使用if (nonbooleanValue) or assert (nonbooleanValue) 这样的代码去判断，而应该显示的检查<br><code>Lists</code>在Dart中，数组是List对象，因此大多数人只是将它们称为列表。<br><code>Sets</code>无序集合<br><code>Maps</code>key和value可以是任何类型<br><code>Runes</code>UTF-32字符串<br><code>Symbols</code>开发中基本上用不上</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li>const 表示常量在编译期能确定的值</li><li>final 在运行时确定，一旦确定不可变更<br>还有一些流程控制语法，各个语言基本上大同小异，可以参考[官方文档}(<a href="https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。" target="_blank" rel="noopener">https://dart.dev/guides/language),学习语言的过程比较重要的就是练习，多写，多思考，就会有进步。</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2011 年 10 月，在丹麦召开的 GOTO 大会上，Google 发布了一种新的编程语言 Dart。如同 Kotlin 和 Swift 的出现，分别是为了解决 Java 和 Objective-C 在编写应用程序的一些实际问题一样，Dart 的诞生正是要解决 JavaScript 存在的、在语言本质上无法改进的缺陷。
    
    </summary>
    
      <category term="Dart" scheme="https://blog.searchinfogo.com/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://blog.searchinfogo.com/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>什么是Libra(天秤座)</title>
    <link href="https://blog.searchinfogo.com/2019/07/12/what-is-libra/"/>
    <id>https://blog.searchinfogo.com/2019/07/12/what-is-libra/</id>
    <published>2019-07-12T13:45:20.000Z</published>
    <updated>2019-10-20T04:54:47.426Z</updated>
    
    <content type="html"><![CDATA[<p>什么是<code>Libra</code>,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。<a id="more"></a></p><blockquote><p>Libra’s mission is to enable a simple global currency and financial infrastructure that empowers billions of people.</p></blockquote><p>上面的是Libra 对自己的描述，或者理解为定位，如果全球都使用同一种货币进行交易的话，里面会有多大的想象力以及前景，虽然现在Libra面临着各种各样的法律问题和风险，但是如果能慢慢解决的话，我还是非常看好它的前景的。</p><p><code>Libra</code> 使用Facebook开发的Move语言，接下来我们简单的来跑个demo，了解一下<code>Libra</code>，现在它只能在macOS和Linux 上运行</p><h3 id="Move-语言的三大用处"><a href="#Move-语言的三大用处" class="headerlink" title="Move 语言的三大用处"></a>Move 语言的三大用处</h3><ul><li>发行数字货币、Token、数字资产</li><li>灵活处理区块链交易</li><li>验证器（Validator）管理</li></ul><h3 id="Clone-Libra"><a href="#Clone-Libra" class="headerlink" title="Clone Libra"></a>Clone Libra</h3><p>下载代码到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/libra/libra.git &amp;&amp; cd libra</span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">Cloning into 'libra'...</span><br><span class="line">remote: Enumerating objects: 3799, done.</span><br><span class="line">remote: Total 3799 (delta 0), reused 0 (delta 0), pack-reused 3799</span><br><span class="line">Receiving objects: 100% (3799/3799), 3.47 MiB | 1.09 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1874/1874), done.</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">./scripts/dev_setup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">Installing Rust......</span><br><span class="line">info: downloading installer</span><br><span class="line">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class="line">info: latest update on 2019-07-04, rust version 1.36.0 (a53f9df32 2019-07-03)</span><br><span class="line">info: downloading component 'rustc'</span><br><span class="line"> 82.2 MiB /  82.2 MiB (100 %)   8.8 MiB/s in 10s ETA:  0s</span><br><span class="line">info: downloading component 'rust-std'</span><br><span class="line"> 55.8 MiB /  55.8 MiB (100 %)   8.6 MiB/s in  6s ETA:  0s</span><br><span class="line">info: downloading component 'cargo'</span><br><span class="line">info: downloading component 'rust-docs'</span><br><span class="line"> 11.1 MiB /  11.1 MiB (100 %)   8.6 MiB/s in  1s ETA:  0s</span><br><span class="line">info: installing component 'rustc'</span><br><span class="line"> 82.2 MiB /  82.2 MiB (100 %)  12.6 MiB/s in  6s ETA:  0s</span><br><span class="line">info: installing component 'rust-std'</span><br><span class="line"> 55.8 MiB /  55.8 MiB (100 %)  16.2 MiB/s in  3s ETA:  0s</span><br><span class="line">info: installing component 'cargo'</span><br><span class="line">info: installing component 'rust-docs'</span><br><span class="line"> 11.1 MiB /  11.1 MiB (100 %)   2.2 MiB/s in  5s ETA:  0s</span><br><span class="line">info: default toolchain set to 'stable'</span><br><span class="line"></span><br><span class="line">  stable installed - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Rust is installed now. Great!</span><br><span class="line"></span><br><span class="line">To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH </span><br><span class="line">environment variable. Next time you log in this will be done automatically.</span><br><span class="line"></span><br><span class="line">To configure your current shell run source $HOME/.cargo/env</span><br><span class="line">info: syncing channel updates for 'stable-x86_64-apple-darwin'</span><br><span class="line">info: checking for self-updates</span><br><span class="line"></span><br><span class="line">  stable-x86_64-apple-darwin unchanged - rustc 1.36.0 (a53f9df32 2019-07-03)</span><br><span class="line"></span><br><span class="line">info: syncing channel updates for 'nightly-2019-07-08-x86_64-apple-darwin'</span><br><span class="line">info: latest update on 2019-07-08, rust version 1.38.0-nightly (6e310f2ab 2019-07-07)</span><br><span class="line">info: downloading component 'rustc'</span><br><span class="line"> 58.9 MiB /  58.9 MiB (100 %)   1.5 MiB/s in 57s ETA:  0s     </span><br><span class="line">info: downloading component 'rust-std'</span><br><span class="line">168.6 MiB / 168.6 MiB (100 %)   2.2 MiB/s in  1m  5s ETA:  0s</span><br><span class="line">info: downloading component 'cargo'</span><br><span class="line">  3.6 MiB /   3.6 MiB (100 %)   2.8 MiB/s in  1s ETA:  0s</span><br><span class="line">info: downloading component 'rust-docs'</span><br><span class="line"> 11.6 MiB /  11.6 MiB (100 %)   2.3 MiB/s in  5s ETA:  0s</span><br><span class="line">info: installing component 'rustc'</span><br><span class="line"> 58.9 MiB /  58.9 MiB (100 %)  12.7 MiB/s in  4s ETA:  0s</span><br><span class="line">info: installing component 'rust-std'</span><br><span class="line">168.6 MiB / 168.6 MiB (100 %)  26.8 MiB/s in  6s ETA:  0s</span><br><span class="line">info: installing component 'cargo'</span><br><span class="line">info: installing component 'rust-docs'</span><br><span class="line"> 11.6 MiB /  11.6 MiB (100 %)   2.2 MiB/s in  4s ETA:  0s</span><br><span class="line">info: downloading component 'rustfmt'</span><br><span class="line">  2.0 MiB /   2.0 MiB (100 %) 1005.6 KiB/s in  3s ETA:  0s</span><br><span class="line">info: installing component 'rustfmt'</span><br><span class="line">info: downloading component 'clippy'</span><br><span class="line">  1.3 MiB /   1.3 MiB (100 %) 383.7 KiB/s in  5s ETA:  0s</span><br><span class="line">info: installing component 'clippy'</span><br><span class="line">Installing CMake......</span><br><span class="line">Finished installing all dependencies.</span><br><span class="line"></span><br><span class="line">You should now be able to build the project by running:</span><br><span class="line">    source /Users/xxx/.cargo/env</span><br><span class="line">    cargo build</span><br><span class="line"><span class="meta">#</span><span class="bash">如果出现下面的错误，需要安装 protobuf</span></span><br><span class="line">error: failed to run custom build command for `network v0.1.0</span><br><span class="line">brew install protobuf</span><br></pre></td></tr></table></figure><p>出现错误可以查看 <a href="https://developers.libra.org/docs/my-first-transaction#setup-libra-core" target="_blank" rel="noopener">roubleshooting</a> 解决<br>上面的过程取决与你的网速，有可能会很慢，通过上面的一系列操作，基本的环境配置好了，接下来就可以在测试网络上开始交易了（现在还是测试网络，现在还没有办法支持10亿人的交易需求，后面会慢慢转向私有的联盟链）</p><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">./scripts/cli/start_cli_testnet.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">结果</span></span><br><span class="line">xxxxxxxx</span><br><span class="line"> Finished dev [unoptimized + debuginfo] target(s) in 3m 31s</span><br><span class="line">     Running `target/debug/client --host ac.testnet.libra.org --port 8000 -s ./scripts/cli/trusted_peers.config.toml`</span><br><span class="line">Connected to validator at: ac.testnet.libra.org:8000</span><br><span class="line">usage: &lt;command&gt; &lt;args&gt;</span><br><span class="line"></span><br><span class="line">Use the following commands:</span><br><span class="line"></span><br><span class="line">account | a</span><br><span class="line">    Account operations</span><br><span class="line">query | q</span><br><span class="line">    Query operations</span><br><span class="line">transfer | transferb | t | tb</span><br><span class="line">    &lt;sender_account_address&gt;|&lt;sender_account_ref_id&gt; &lt;receiver_account_address&gt;|&lt;receiver_account_ref_id&gt; &lt;number_of_coins&gt; [gas_unit_price_in_micro_libras (default=0)] [max_gas_amount_in_micro_libras (default 10000)] Suffix 'b' is for blocking.</span><br><span class="line">    Transfer coins (in libra) from account to another.</span><br><span class="line">submit | submitb | s | sb</span><br><span class="line">    &lt;signer_account_address&gt;|&lt;signer_account_ref_id&gt; &lt;path_to_raw_transaction&gt; Suffix 'b' is for blocking. </span><br><span class="line">    Load a RawTransaction from file and submit to the network</span><br><span class="line">help | h</span><br><span class="line">    Prints this help</span><br><span class="line">quit | q!</span><br><span class="line">    Exit this client</span><br><span class="line">Please, input commands:</span><br></pre></td></tr></table></figure><p>使用上面的命令可以构建和运行客户端，并将客户端连接到<code>test</code>网络，并列出了常用的命令</p><h3 id="运行你第一笔交易"><a href="#运行你第一笔交易" class="headerlink" title="运行你第一笔交易"></a>运行你第一笔交易</h3><h4 id="创建两个账户"><a href="#创建两个账户" class="headerlink" title="创建两个账户"></a>创建两个账户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> account</span></span><br><span class="line">usage: account &lt;arg&gt;</span><br><span class="line"></span><br><span class="line">Use the following args for this command:</span><br><span class="line"></span><br><span class="line">create | c </span><br><span class="line">Create an account. Returns reference ID to use in other operations</span><br><span class="line">list | la </span><br><span class="line">Print all accounts that were created or loaded</span><br><span class="line">recover | r &lt;file_path&gt;</span><br><span class="line">Recover Libra wallet from the file path</span><br><span class="line">write | w &lt;file_path&gt;</span><br><span class="line">Save Libra wallet mnemonic recovery seed to disk</span><br><span class="line">mint | mintb | m | mb &lt;receiver_account_ref_id&gt;|&lt;receiver_account_address&gt; &lt;number_of_coins&gt;</span><br><span class="line">Mint coins to the account. Suffix 'b' is for blocking</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> account create</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Creating/retrieving next account from wallet</span></span><br><span class="line">Created/retrieved account #0 address 4be45f015f45a2968d68a2ac56ebd1bfa05a43f87fefb2f5327bea292c354ece</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> account create</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Creating/retrieving next account from wallet</span></span><br><span class="line">Created/retrieved account #1 address b83ef4576f74faa787abc8233a501540dcbb9ede236ee967535051ac8c8f6fab</span><br></pre></td></tr></table></figure><p><code>#0</code>是账户索引，十六进制字符串是账号地址</p><h4 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> account mint 0 110</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Minting coins</span></span><br><span class="line">Mint request submitted</span><br></pre></td></tr></table></figure><ul><li>0 是账户索引</li><li>110 是往账户添加的金额</li></ul><p>第二个账户也进行相同的操作，需要注意的是，只是发出了命令进行增加，还需要确认账户中的金额</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 0</span></span><br><span class="line">Balance is: 110.000000</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 1</span></span><br><span class="line">Balance is: 52.000000</span><br></pre></td></tr></table></figure><p>可以看到对应的金额已经添加到账户</p><h4 id="提交交易"><a href="#提交交易" class="headerlink" title="提交交易"></a>提交交易</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">libra%</span><span class="bash"> query sequence 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Getting current sequence number</span></span><br><span class="line">Sequence number is: 0</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query sequence 1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Getting current sequence number</span></span><br><span class="line">Sequence number is: 0</span><br><span class="line"></span><br><span class="line"><span class="meta">libra%</span><span class="bash"> transfer 0 1 10</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Transferring</span></span><br><span class="line">Transaction submitted to validator</span><br><span class="line">To query for transaction status, run: query txn_acc_seq 0 0 &lt;fetch_events=true|false&gt;</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query sequence 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Getting current sequence number</span></span><br><span class="line">Sequence number is: 1</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 0</span></span><br><span class="line">Balance is: 100.000000</span><br><span class="line"><span class="meta">libra%</span><span class="bash"> query balance 1</span></span><br><span class="line">Balance is: 62.000000</span><br></pre></td></tr></table></figure><ul><li>0 是第一个账户</li><li>1是第二个账户</li><li>10是要从第一个转账到第二个账户的金额</li></ul><p>通过查询账户，可以看到对应的金额已经变更</p><p>整个过程非常的简单，试想一下，如果全球都支持使用<code>Libra</code>进行支付，支付将会变的更加便捷，当然支付宝也可以完成类似的操作，但是背后所涉及的交易结算是非常复杂的，还需要支付额外的手续费。那<code>Libra</code>是如何维持生存呢，看了一下，靠发币是抵押的法币产生的利息支付运营成本，不过这玩意要是真的流行，那就是全球羊毛收割机了，未来谁知道呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是&lt;code&gt;Libra&lt;/code&gt;,Libra是有Facebook主导发行的一种数字货币。数字货币在最近几年的时间中，因为比特币的暴涨和暴跌走入人们的视野中，饱受各种争议。有人赚钱、有人亏钱，但是我们更应该关心的是区块链技术能给人们的生活带来什么改变。
    
    </summary>
    
      <category term="Cryptocurrency" scheme="https://blog.searchinfogo.com/categories/Cryptocurrency/"/>
    
    
      <category term="Libra" scheme="https://blog.searchinfogo.com/tags/Libra/"/>
    
  </entry>
  
  <entry>
    <title>第一个flutter</title>
    <link href="https://blog.searchinfogo.com/2019/07/11/first-flutter-app/"/>
    <id>https://blog.searchinfogo.com/2019/07/11/first-flutter-app/</id>
    <published>2019-07-11T12:16:53.000Z</published>
    <updated>2019-10-20T04:54:47.390Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a> is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.<a id="more"></a></p><blockquote><p>Flutter是一个由谷歌开发的开源移动应用软件开发工具包，用于为Android和iOS开发应用，同时也将是Google Fuchsia下开发应用的主要工具</p></blockquote><p>最近看到很多的技术网站都在发Flutter相关的技术文章，所以自己也花时间了解了一下，写了个简单的HelloWorld体验了一下，感觉很不错。简单的记录一下。</p><p>###安装<br>安装环境基于MAC，Windows上也没有太大的区别。<br>####安装Xcode、Android Stuido<br>#####Xcode 安装<br>Xocde 的安装比较简单，直接去App Store搜索就可以了，<img src="first-flutter-app/WX20190711-203332@2x.png" alt="示例">之后需要打开，会自动的进行相应的配置。<br>#####Android Studio 安装<br><a href="https://developer.android.com/studio" target="_blank" rel="noopener">Android Studio官网下载</a><br><img src="first-flutter-app/WX20190711-203810@2x.png" alt="示例"><br>当前版本为3.4.2<br>配合相关的SDK，然后增加虚拟机<img src="first-flutter-app/WX20190711-204747@2x.png" alt="示例"><br>需要注意的是，建议使用API28,28的版本flutter会报错</p><h5 id="安装flutter"><a href="#安装flutter" class="headerlink" title="安装flutter"></a>安装flutter</h5><p>Flutter在国内访问的速度不太好，访问<a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noopener">Flutter</a>，进行下载配置，建议使用梯子，推荐使用喵帕斯，可以联系我获取邀请码。</p><ul><li>增加源站镜像环境变量(使用第三方的包的时候需要用到)</li></ul><p>Windows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量，新建用户环境变量,增加下面两个变量</span></span><br><span class="line">PUB_HOSTED_URL https://pub.flutter-io.cn </span><br><span class="line">FLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>Mac OS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ cd ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash">增加下面两个环境变量</span></span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn  </span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="meta">#</span><span class="bash">保存 ,激活生效</span></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>将下载的安装包解压，当前的版本为<code>1.7</code>，然后配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">~ vi ~/.bash_profile</span><br><span class="line"><span class="comment">#增加如下,根据你实际的位置进行配置</span></span><br><span class="line"><span class="comment">#flutter</span></span><br><span class="line"><span class="built_in">export</span> PATH=/Users/xxx/develop/flutter/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">flutter --version</span><br><span class="line">  ╔════════════════════════════════════════════════════════════════════════════╗</span><br><span class="line">  ║ A new version of Flutter is available!                                     ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ To update to the latest version, run <span class="string">"flutter upgrade"</span>.                    ║</span><br><span class="line">  ╚════════════════════════════════════════════════════════════════════════════╝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Flutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision 7a4c33425d (2 months ago) • 2019-04-29 11:05:24 -0700</span><br><span class="line">Engine • revision 52c7a1e849</span><br><span class="line">Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5)</span><br><span class="line"><span class="comment">#提示我更新，我当时安装的是1.5.4,更新完成再次验证，更新会花点时间，使用下面的命令行走代理，或者全局也可以，根据实际情况配置</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;</span><br><span class="line"><span class="built_in">export</span> all_proxy=socks5://127.0.0.1:1086</span><br><span class="line"><span class="comment">#运行doctor 检测配置，第一次安装需要安装额外的几个包，按照提示安装即可</span></span><br><span class="line">Running flutter doctor...</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.7.8+hotfix.3, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 28.0.3)</span><br><span class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor --android-licenses</span><br><span class="line">[!] Xcode - develop <span class="keyword">for</span> iOS and macOS (Xcode 10.2.1)</span><br><span class="line">    ! CocoaPods out of date (1.6.0 is recommended).</span><br><span class="line">        CocoaPods is used to retrieve the iOS and macOS platform side<span class="string">'s plugin code that responds to your plugin usage on the Dart side.</span></span><br><span class="line"><span class="string">        Without CocoaPods, plugins will not work on iOS or macOS.</span></span><br><span class="line"><span class="string">        For more info, see https://flutter.dev/platform-plugins</span></span><br><span class="line"><span class="string">      To upgrade:</span></span><br><span class="line"><span class="string">        brew upgrade cocoapods</span></span><br><span class="line"><span class="string">        pod setup</span></span><br><span class="line"><span class="string">[!] iOS tools - develop for iOS devices</span></span><br><span class="line"><span class="string">    ✗ ios-deploy not installed. To install:</span></span><br><span class="line"><span class="string">        brew install ios-deploy</span></span><br><span class="line"><span class="string">[✓] Android Studio (version 3.4)</span></span><br><span class="line"><span class="string">[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3)</span></span><br><span class="line"><span class="string">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span></span><br><span class="line"><span class="string">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span></span><br><span class="line"><span class="string">[!] VS Code (version 1.35.1)</span></span><br><span class="line"><span class="string">    ✗ Flutter extension not installed; install from</span></span><br><span class="line"><span class="string">      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter</span></span><br><span class="line"><span class="string">[!] Proxy Configuration</span></span><br><span class="line"><span class="string">    ! NO_PROXY is not set</span></span><br><span class="line"><span class="string">[!] Connected device</span></span><br><span class="line"><span class="string">    ! No devices available</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">! Doctor found issues in 7 categories.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#第一次安装，需要安装下面的包，brew 的使用可用搜我之前发的文章</span></span><br><span class="line"><span class="string">brew update</span></span><br><span class="line"><span class="string">brew install --HEAD usbmuxd</span></span><br><span class="line"><span class="string">brew link usbmuxd</span></span><br><span class="line"><span class="string">brew install --HEAD libimobiledevice</span></span><br><span class="line"><span class="string">brew install ideviceinstaller</span></span><br></pre></td></tr></table></figure><p>进入flutter的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~ tree -L 1 </span><br><span class="line">.</span><br><span class="line">├── AUTHORS</span><br><span class="line">├── CODE_OF_CONDUCT.md</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── PATENTS</span><br><span class="line">├── README.md</span><br><span class="line">├── analysis_options.yaml</span><br><span class="line">├── bin</span><br><span class="line">├── dartdoc_options.yaml</span><br><span class="line">├── dev</span><br><span class="line">├── examples</span><br><span class="line">├── flutter_console.bat</span><br><span class="line">├── flutter_root.iml</span><br><span class="line">├── packages</span><br><span class="line">└── version</span><br></pre></td></tr></table></figure><p>在目录中看到有个<code>examples-helloworld</code> 里面有对应的示例，使用Android Studio 打开：<br><img src="first-flutter-app/WX20190711-212257@2x.png" alt="示例">,选择对应的模拟器，Android 的和iOS 都可以，也可以使用真机，然后点击右上角运行即可<br>使用29的API会出现如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error connecting to the service protocol: HttpException: Connection closed before full header was received, uri = http://127.0.0.1:53668/CCQP0ed9oCM=/ws</span><br></pre></td></tr></table></figure><p>运行后的效果：<br><img src="first-flutter-app/WX20190711-212915@2x.png" alt="效果"></p><p>demo比较简单，但是感觉非常的方便，后面有空继续深入学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://flutter.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter&lt;/a&gt; is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase.
    
    </summary>
    
      <category term="flutter" scheme="https://blog.searchinfogo.com/categories/flutter/"/>
    
    
      <category term="flutter" scheme="https://blog.searchinfogo.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>使用模拟时间在Docker 中进行测试</title>
    <link href="https://blog.searchinfogo.com/2019/07/02/use-a-fake-system-clock-with-docker/"/>
    <id>https://blog.searchinfogo.com/2019/07/02/use-a-fake-system-clock-with-docker/</id>
    <published>2019-07-02T12:49:48.000Z</published>
    <updated>2019-10-20T04:54:47.424Z</updated>
    
    <content type="html"><![CDATA[<p>在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：</p><ul><li>它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序</li><li>反复更改系统时钟可能既费时又麻烦<a id="more"></a>您可以为您的应用定义一个假系统时钟，而不是更改系统时钟。 在生产中，假系统时钟返回正常时间。 在测试过程中，伪造的系统时钟会在您需要有效测试覆盖时随时返回。</li></ul><p>为此，您需要定义各种不同的时钟实现，并能够轻松交换它们。 许多人会选择使用依赖注入工具，或者使用插件机制。<br>为此，您必须永远不要直接引用默认系统时钟和时区，避免使用以下方法：</p><ul><li>System.currentTimeMillis()</li><li>LocalDateTime.now() (或者类似的)</li><li>Date类的默认构造函数（后者又使用System.currentTimeMillis（））</li></ul><p>这需要一些规则，因为许多代码示例使用默认系统时钟（和时区），并且因为调用上述方法已成为习惯。<br>假时钟的可能行为包括：</p><ul><li>跳到未来</li><li>回到过去</li><li>使用固定日期和固定时间</li><li>使用固定日期，但仍然让时间变化</li><li>每次看到时钟时都会增加一秒钟</li><li>通过加速或减慢某个因素来改变时间的流逝率</li><li>使用正常的系统时钟而无需改动</li></ul><p>根据您的需要，您可能必须在部分或全部这些地方使用假系统时钟：</p><ul><li>应用代码</li><li>与数据库交互的代码</li><li>日志输出</li><li>框架类</li></ul><h3 id="例子-for-Java-8"><a href="#例子-for-Java-8" class="headerlink" title="例子 for Java 8"></a>例子 for Java 8</h3><p>java.time包的Clock类允许您创建一个假的系统时钟。 它的固定方法可以让您快速创建一个常见类型的假时钟，它只是在给定时区内返回一个固定值。 通常，您需要扩展抽象Clock类，并实现其抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Clock;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Increment by 1 second each time you look at the clock.</span></span><br><span class="line"><span class="comment"> Starts with the default system clock's instant and time-zone.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Example output:</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:12.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:13.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:14.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:15.778Z</span></span><br><span class="line"><span class="comment">  2018-05-26T14:00:16.778Z</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@since</span> Java 8.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockTicker</span> <span class="keyword">extends</span> <span class="title">Clock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Simple demo of the behaviour of this class. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    ClockTicker ticker = <span class="keyword">new</span> ClockTicker();</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">    log(ticker.instant());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object msg)</span></span>&#123;</span><br><span class="line">    System.out.println(Objects.toString(msg));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ZoneId <span class="title">getZone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DEFAULT_TZONE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Clock <span class="title">withZone</span><span class="params">(ZoneId zone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Clock.fixed(WHEN_STARTED, zone);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Instant <span class="title">instant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextInstant();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//PRIVATE</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Instant WHEN_STARTED = Instant.now();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ZoneId DEFAULT_TZONE = ZoneId.systemDefault();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Instant <span class="title">nextInstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ++count;</span><br><span class="line">    <span class="keyword">return</span> WHEN_STARTED.plusSeconds(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Clock;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Set the starting date-time and time-zone, but then</span></span><br><span class="line"><span class="comment"> let the time vary normally.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Example output:</span></span><br><span class="line"><span class="comment">  2018-12-25T05:00:00Z</span></span><br><span class="line"><span class="comment">  Sleep for 5 seconds...</span></span><br><span class="line"><span class="comment">  2018-12-25T05:00:05.005Z</span></span><br><span class="line"><span class="comment">  Done.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> <span class="doctag">@since</span> Java 8.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockTimeTravel</span> <span class="keyword">extends</span> <span class="title">Clock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Simple demo of the behaviour of this class. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ClockTimeTravel timeTravel = <span class="keyword">new</span> ClockTimeTravel(</span><br><span class="line">      LocalDateTime.parse(<span class="string">"2018-12-25T00:00:00"</span>), ZoneOffset.of(<span class="string">"-05:00"</span>)</span><br><span class="line">    );</span><br><span class="line">    log(timeTravel.instant());</span><br><span class="line">    log(<span class="string">"Sleep for 5 seconds..."</span>);</span><br><span class="line">    Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">    log(timeTravel.instant());</span><br><span class="line">    log(<span class="string">"Done."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object msg)</span></span>&#123;</span><br><span class="line">    System.out.println(Objects.toString(msg));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClockTimeTravel</span><span class="params">(LocalDateTime t0, ZoneOffset zoneOffset)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.zoneOffset = zoneOffset;</span><br><span class="line">    <span class="keyword">this</span>.t0LocalDateTime = t0;</span><br><span class="line">    <span class="keyword">this</span>.t0Instant = t0.toInstant(zoneOffset);</span><br><span class="line">    <span class="keyword">this</span>.whenObjectCreatedInstant = Instant.now();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> ZoneId <span class="title">getZone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zoneOffset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** The caller needs to actually pass a ZoneOffset object here. */</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Clock <span class="title">withZone</span><span class="params">(ZoneId zone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClockTimeTravel(t0LocalDateTime, (ZoneOffset)zone);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Instant <span class="title">instant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextInstant();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//PRIVATE</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** t0 is the moment this clock object was created in Java-land. */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Instant t0Instant;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> LocalDateTime t0LocalDateTime;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ZoneOffset zoneOffset;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Instant whenObjectCreatedInstant;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   Figure out how much time has elapsed between the moment this</span></span><br><span class="line"><span class="comment">   object was created, and the moment when this method is being called.</span></span><br><span class="line"><span class="comment">   Then, apply that diff to t0.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Instant <span class="title">nextInstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Instant now = Instant.now();</span><br><span class="line">    <span class="keyword">long</span> diff = now.toEpochMilli() - whenObjectCreatedInstant.toEpochMilli();</span><br><span class="line">    <span class="keyword">return</span> t0Instant.plusMillis(diff);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子-小于-Java8"><a href="#例子-小于-Java8" class="headerlink" title="例子 小于 Java8"></a>例子 小于 Java8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">The TimeSource interface allows you to define various implementations of a fake system clock:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Return the system time. */</span>  </span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">This implementation mimics a system clock running one day in advance:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeSrc</span> <span class="keyword">implements</span> <span class="title">TimeSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** One day in advance of the actual time.*/</span></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> System.currentTimeMillis() + ONE_DAY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ONE_DAY = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用各种TimeSource实现，您可以模拟系统时钟的任何所需行为。<br>配置JDK记录器以使用假系统时钟很简单。 一个简单的自定义Formatter可以使用TimeSource来改变LogRecord的时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFormatterTimeSource</span> <span class="keyword">extends</span> <span class="title">SimpleFormatter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(LogRecord aLogRecord)</span> </span>&#123;</span><br><span class="line">    aLogRecord.setMillis(fTimeSource.currentTimeMillis());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.format(aLogRecord);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> TimeSource fTimeSource = BuildImpl.forTimeSource();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的文章机翻<a href="http://www.javapractices.com/topic/TopicAction.do?Id=234" target="_blank" rel="noopener">Use a fake system clock</a></p><h3 id="Docker-中修改时间"><a href="#Docker-中修改时间" class="headerlink" title="Docker 中修改时间"></a>Docker 中修改时间</h3><p>Docker 是容器技术，不同于虚拟化技术是独立的系统，Docker是通过<a href="https://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">NameSpace上</a>、<a href="https://coolshell.cn/articles/17029.html" target="_blank" rel="noopener">NameSpace下</a> 和<a href="https://coolshell.cn/articles/17049.html" target="_blank" rel="noopener">CGroup</a>来虚拟的系统，可以参考上面的几篇文章，可以让你让你了解为什么修改时间后，Docker会崩溃了（Docker 的时间其实是使用的宿主机时间）。我们一般测试的时候，需要将时间修改成指定的时间，所以只是修改时区的话，是满足不了我们的要求的。</p><p>所以我们需要其他的解决方法。</p><p>解决方案是在容器中伪造它。 这个lib 拦截所有系统调用程序用于检索当前时间和日期。<br>实施很容易。根据需要为Dockerfile添加功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd WORKDIR /</span><br><span class="line">git clone https://github.com/wolfcw/libfaketime.git</span><br><span class="line">cd  /libfaketime/src</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>请记住设置环境变量 LD_PRELOAD 在运行应用程序之前，您需要应用伪造的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 FAKETIME_NO_CACHE=1 python /srv/intercept/manage.py runserver 0.0.0.0:3000]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_time</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(datetime.today())</span><br><span class="line">    os.environ[<span class="string">"FAKETIME"</span>] = <span class="string">"2020-01-01"</span>  <span class="comment"># Note: time of type string must be in the format "YYYY-MM-DD hh:mm:ss" or "+15d"</span></span><br><span class="line">    print(datetime.today())</span><br></pre></td></tr></table></figure><blockquote><p>上面的文章引用于 <a href="http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian" target="_blank" rel="noopener">http://webmotociclismo.com/questions/277/ru-he-zai-dockerrong-qi-zhong-dong-tai-she-zhi-xi-tong-shi-jian</a></p></blockquote><p>后面会再单独写一篇使用Dockerfile 的详细示例。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在测试应用程序时，定义假系统时钟以执行使用日期和时间的代码通常很有用。虽然总是可以直接更改系统时钟，但许多人认为这种风格是不受欢迎的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它会影响计算机上运行的所有程序，而不仅仅是正在测试的应用程序&lt;/li&gt;
&lt;li&gt;反复更改系统时钟可能既费时又麻烦
    
    </summary>
    
      <category term="Java" scheme="https://blog.searchinfogo.com/categories/Java/"/>
    
    
      <category term="Docker" scheme="https://blog.searchinfogo.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>几款常用的性能测试工具</title>
    <link href="https://blog.searchinfogo.com/2019/06/28/some-pressure-measuring-tools/"/>
    <id>https://blog.searchinfogo.com/2019/06/28/some-pressure-measuring-tools/</id>
    <published>2019-06-28T07:08:55.000Z</published>
    <updated>2019-10-20T04:54:47.415Z</updated>
    
    <content type="html"><![CDATA[<p>在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。<a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="CentOS7-下安装ad"><a href="#CentOS7-下安装ad" class="headerlink" title="CentOS7 下安装ad"></a>CentOS7 下安装ad</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure><p>然后使用百度做个测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_15_centos ~]#  ab -n 1000 -c 10 https://www.baidu.com/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            443</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        227 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   15.518 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      893000 bytes</span><br><span class="line">HTML transferred:       227000 bytes</span><br><span class="line">Requests per second:    64.44 [#/sec] (mean)</span><br><span class="line">Time per request:       155.176 [ms] (mean)</span><br><span class="line">Time per request:       15.518 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          56.20 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:      104  114   6.8    116     172</span><br><span class="line">Processing:    35   39   5.1     39     140</span><br><span class="line">Waiting:       35   38   5.1     39     140</span><br><span class="line">Total:        139  153   9.8    156     264</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">    156</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">    159</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">    160</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">    161</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">    163</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    164</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    165</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">    175</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">    264 (longest request)</span></span><br></pre></td></tr></table></figure><p>上面就是请求后的结果。注意请求的地址后面要加<code>/</code>否则会报无效的url。</p><h4 id="Mac-上使用"><a href="#Mac-上使用" class="headerlink" title="Mac 上使用"></a>Mac 上使用</h4><p>Mac 上好像有自带的ab 工具，请求效果如下<br><img src="some-pressure-measuring-tools/WX20190628-171039@2x.png" alt="Mac 请求效果"></p><h3 id="使用Jmeter"><a href="#使用Jmeter" class="headerlink" title="使用Jmeter"></a>使用Jmeter</h3><p>具体可以查看<a href="https://jmeter.apache.org/" target="_blank" rel="noopener">Jmeter</a>,后面会补充这一部分的内容</p><h3 id="使用阿里云PTS"><a href="#使用阿里云PTS" class="headerlink" title="使用阿里云PTS"></a>使用阿里云PTS</h3><p>具体可参考<a href="https://www.aliyun.com/product/pts" target="_blank" rel="noopener">PTS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们开发的过程中，我们难免需要对我们的接口进行压测，这样上线以后才更有信心。常用的性能测试工具：ab、Jmeter、Postman、阿里云PTS等。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="性能测试工具" scheme="https://blog.searchinfogo.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>学习Elastic Stack（二）</title>
    <link href="https://blog.searchinfogo.com/2019/06/27/study-elastic-stack-2/"/>
    <id>https://blog.searchinfogo.com/2019/06/27/study-elastic-stack-2/</id>
    <published>2019-06-27T01:01:53.000Z</published>
    <updated>2019-10-20T05:19:44.007Z</updated>
    
    <content type="html"><![CDATA[<p>Elastic官方提供了Elastic Stack 和 相关产品的<a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">文档</a>，而且提供了中文的文档，<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener"><code>《Elasticsearch 权威指南》中文版</code></a>,不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作<code>CRUD</code>。 <a id="more"></a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Elasticsearch的主要用途是搜索和分析。</p><p>Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats有助于收集，聚合和丰富您的数据并将其存储在Elasticsearch中。Kibana使您能够以交互方式探索，可视化和分享数据洞察，并管理和监控堆栈。</p><p>Elasticsearch为所有类型的数据提供实时搜索和分析。无论是结构化文档还是非结构化文本，数字数据或地理空间数据，Elasticsearch都可以以支持快速搜索的方式有效地存储和索引它。远远超出简单的数据检索和聚合信息，以发现数据中的趋势和模式。随着数据和查询量的增长，Elasticsearch的分布式特性使你部署能够与其一起无缝地增长。</p><h3 id="数据输入：文档和索引"><a href="#数据输入：文档和索引" class="headerlink" title="数据输入：文档和索引"></a>数据输入：文档和索引</h3><p>Elasticsearch是一个分布式文档存储。Elasticsearch不是将信息存储为列数据行，而是存储已经序列化为JSON文档的复杂数据结构。当群集中有多个Elasticsearch节点时，存储的文档将分布在群集中，并且可以从任何节点立即访问。</p><p>存储文档时，它会在1秒内实时索引并完全可搜索。Elasticsearch使用称为倒排索引的数据结构，支持非常快速的全文搜索。倒排索引列出任何文档中出现的每个唯一单词，并标识每个单词出现的所有文档。</p><p>索引可以被视为优化的文档集合，每个文档都是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch会为每个字段中的所有数据编制索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在反向索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来汇编和返回搜索结果的能力使Elasticsearch如此之快。</p><p>Elasticsearch还具有无模式的能力，这意味着可以索引文档而无需显式指定如何处理文档中可能出现的每个不同字段。启用动态映射后，Elasticsearch会自动检测并向索引添加新字段。这种默认行为使您可以轻松索引和浏览数据 - 只需开始索引文档，Elasticsearch将检测并将布尔值，浮点和整数值，日期和字符串映射到相应的Elasticsearch数据类型。</p><p>但是，最终，您比Elasticsearch更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射，以完全控制字段的存储和索引方式。</p><p>定义自己的映射使您能够：</p><p>区分全文字符串字段和精确值字符串字段<br>执行特定于语言的文本分析<br>优化字段以进行部分匹配<br>使用自定义日期格式<br>使用诸如geo_point和geo_shape无法自动检测的数据类型<br>为不同目的以不同方式索引相同字段通常很有用。例如，您可能希望将字符串字段索引为全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。</p><p>在索引期间应用于全文字段的分析链也在搜索时使用。查询全文字段时，查询文本在索引中查找术语之前会进行相同的分析。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Elastic官方提供了Elastic Stack 和 相关产品的&lt;a href=&quot;https://www.elastic.co/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;，而且提供了中文的文档，&lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;《Elasticsearch 权威指南》中文版&lt;/code&gt;&lt;/a&gt;,不过这边书是基于Elasticsearch 2.x版本的，可能有些过时。Elasticsearch需要先了解基本概念一些常规操作&lt;code&gt;CRUD&lt;/code&gt;。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="Docker、Elastic" scheme="https://blog.searchinfogo.com/tags/Docker%E3%80%81Elastic/"/>
    
  </entry>
  
  <entry>
    <title>学习Elastic Stack（一）</title>
    <link href="https://blog.searchinfogo.com/2019/06/26/study-elastic-stack-1/"/>
    <id>https://blog.searchinfogo.com/2019/06/26/study-elastic-stack-1/</id>
    <published>2019-06-26T05:35:14.000Z</published>
    <updated>2019-10-20T04:54:47.418Z</updated>
    
    <content type="html"><![CDATA[<p>前两天在<code>极客时间</code>买了<code>Elasticsearch核心技术与实战</code>的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。<a id="more"></a></p><p><img src="elk-stack-elkb-diagram.png" alt="Elastic Stack"></p><h3 id="Elastic-Stack概念"><a href="#Elastic-Stack概念" class="headerlink" title="Elastic Stack概念"></a>Elastic Stack概念</h3><p>首先需要了解一下，什么是<code>ELK</code>，<code>为什么是Elastic Stack</code>，<a href="https://www.elastic.co/cn/elk-stack" target="_blank" rel="noopener">What is the ELK Stack? Why, it’s the Elastic Stack.</a></p><blockquote><p>So, what is the ELK Stack? “ELK” is the acronym for three open source projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a search and analytics engine. Logstash is a server‑side data processing pipeline that ingests data from multiple sources simultaneously, transforms it, and then sends it to a “stash” like Elasticsearch. Kibana lets users visualize data with charts and graphs in Elasticsearch.<br>The Elastic Stack is the next evolution of the ELK Stack.</p></blockquote><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>因为是为了方便学习，所以使用docker进行环境的搭建，使用docker-compose 进行搭建，Elastic官方也提供了对应的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">脚本</a>，极客时间上的是基于7.1版本ES的，不过区别不是很大(增加了cerebro监控和kibana，可以自行添加)。</p><h4 id="运行-docker-compose-命令"><a href="#运行-docker-compose-命令" class="headerlink" title="运行 docker-compose 命令"></a>运行 docker-compose 命令</h4><p><code>docker-compose.yml</code> 文件内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">version: '2.2'</span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - discovery.seed_hosts=es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - discovery.seed_hosts=es01</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02</span><br><span class="line">      - cluster.name=docker-cluster</span><br><span class="line">      - bootstrap.memory_lock=true</span><br><span class="line">      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - esnet</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  esdata01:</span><br><span class="line">    driver: local</span><br><span class="line">  esdata02:</span><br><span class="line">    driver: local</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  esnet:</span><br></pre></td></tr></table></figure><p>启动、停止、销毁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta">#</span><span class="bash">停止</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta">#</span><span class="bash">销毁</span></span><br><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure><h4 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:9200/_cat/health</span><br><span class="line"><span class="meta">#</span><span class="bash">表示没有正常运行</span></span><br><span class="line">curl: (52) Empty reply from server</span><br><span class="line"><span class="meta">#</span><span class="bash">正常运行如下</span></span><br><span class="line">1561531623 06:47:03 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure><h4 id="Elasticsearch-Docker-配置修改"><a href="#Elasticsearch-Docker-配置修改" class="headerlink" title="Elasticsearch Docker 配置修改"></a>Elasticsearch Docker 配置修改</h4><p>Elasticsearch 从<code>/usr/share/elasticsearch/config/</code> 加载配置，这些配置包括 配置Elasticsearch和设置JVM选项。</p><p>更多的配置可以自行查看Elastic的官网，有更详细的介绍，上面的工作就可以完成最基本的配置了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天在&lt;code&gt;极客时间&lt;/code&gt;买了&lt;code&gt;Elasticsearch核心技术与实战&lt;/code&gt;的视频课程，希望加深对Elastic Stack的了解，提升自己的能力。实际的工作中也用到了 ELK进行生产环境的日志查询与分析，只是简单的使用，了解一些基本的原理，但是更高阶的内容并不了解。学习一个东西最后的方法就是去实践，同时做一些记录进行输出。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="Docker、Elastic" scheme="https://blog.searchinfogo.com/tags/Docker%E3%80%81Elastic/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装Docker</title>
    <link href="https://blog.searchinfogo.com/2019/06/25/centos7-docker-install-tutorial/"/>
    <id>https://blog.searchinfogo.com/2019/06/25/centos7-docker-install-tutorial/</id>
    <published>2019-06-25T01:42:40.000Z</published>
    <updated>2019-10-20T04:54:47.366Z</updated>
    
    <content type="html"><![CDATA[<p>Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker官方文档</a><a id="more"></a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="操作系统需求"><a href="#操作系统需求" class="headerlink" title="操作系统需求"></a>操作系统需求</h4><p>基于CentOS7发行版进行安装，需要启用<code>centos-extras</code>，默认是开启的，如果关闭了的话，需要打开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-172-26-13-79 centos]# yum repolist                                                                              </span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos.usonyx.net</span><br><span class="line"> * epel: download.nus.edu.sg</span><br><span class="line"> * extras: centos.usonyx.net</span><br><span class="line"> * updates: centos.usonyx.net</span><br><span class="line">源标识                                     源名称                                                                  状态</span><br><span class="line">!base/7/x86_64                             CentOS-7 - Base                                                         10,019</span><br><span class="line">!epel/x86_64                               Extra Packages for Enterprise Linux 7 - x86_64                          13,221</span><br><span class="line">!extras/7/x86_64                           CentOS-7 - Extras                                                          409</span><br><span class="line">!updates/7/x86_64                          CentOS-7 - Updates                                                       1,982</span><br><span class="line">repolist: 25,631</span><br><span class="line">[root@ip-172-26-13-79 centos]#</span><br></pre></td></tr></table></figure><p>开启的话，可以执行下面的命令,<a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-172-26-13-79 centos]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> on RHEL 7 it is recommended to also <span class="built_in">enable</span> the optional, extras, and HA repositories since EPEL packages may depend on packages from these repositorie</span></span><br><span class="line">[root@ip-172-26-13-79 centos]# subscription-manager repos --enable "rhel-*-optional-rpms" --enable "rhel-*-extras-rpms"  --enable "rhel-ha-for-rhel-*-server-rpms"</span><br></pre></td></tr></table></figure><p>建议使用<code>overlay2</code> storage driver。</p><h4 id="卸载旧的版本"><a href="#卸载旧的版本" class="headerlink" title="卸载旧的版本"></a>卸载旧的版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>如果没有提示，说明上面的包没有被安装。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>可以通过多种方式安装Docker CE：</p><ul><li>大多数用户通过设置 <code>Dokcer&#39;s repositories</code> 的方式安装，方便安装和进行升级，这种方法比较推荐。</li><li>有些用过通过下载RPM 包的方式安装，这种方式适合没有办法连接到网络的时候使用。</li><li>在开发和测试环境，使用自动脚本进行Dokcer安装</li></ul><h4 id="使用repository-进行安装"><a href="#使用repository-进行安装" class="headerlink" title="使用repository 进行安装"></a>使用repository 进行安装</h4><h5 id="设置-REPOSITORY"><a href="#设置-REPOSITORY" class="headerlink" title="设置 REPOSITORY"></a>设置 REPOSITORY</h5><p>1.安装所需要的包，提供对应的存储支持</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><p>2.使用下面推荐的稳定repository</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h5 id="可选：开启nightly或test-repositories"><a href="#可选：开启nightly或test-repositories" class="headerlink" title="可选：开启nightly或test repositories"></a>可选：开启nightly或test repositories</h5><p>1.这些库包含在docker.repo 中，默认是关闭的，可以开启他们</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span></span><br></pre></td></tr></table></figure><p>2.开启test channel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure><p>3.关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --disable docker-ce-nightly</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">了解更多关于 nightly 和 test channels。</a></p><h5 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h5><p>安装最新版本，或者转到下一步安装特定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure><p>如果提示接受GPG key，请验证指纹是否匹配: <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code><br>``<br>需要注意：如果存在多个Docker repositories 可能会导致安装最新的docker 而不是稳定版。</p><h6 id="安装特定的版本"><a href="#安装特定的版本" class="headerlink" title="安装特定的版本"></a>安装特定的版本</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line"></span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><p>返回的列表取决于启动的repositories。安装特定的版本</p><ul><li>例子，<code>docker-ce-18.09.1</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>Docker 已安装未启动，<code>docker</code> 组被创建，但是没有user添加进组。<h6 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><h6 id="通过运行hello-world-验证Docker-CE-安装正确"><a href="#通过运行hello-world-验证Docker-CE-安装正确" class="headerlink" title="通过运行hello-world 验证Docker CE 安装正确"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><h4 id="通过rpm包进行安装"><a href="#通过rpm包进行安装" class="headerlink" title="通过rpm包进行安装"></a>通过rpm包进行安装</h4>如果无法使用Docker’s repository 安装Docker ,可以使用<code>.rpm</code>进行安装<h5 id="下载rpm包"><a href="#下载rpm包" class="headerlink" title="下载rpm包"></a>下载rpm包</h5>可以到<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>下载<code>.rpm</code>文件选择版本进行安装。<blockquote><p>注意：如果安装nightly 或者 test包，需要把链接中的stable 换成对应的单词。</p></blockquote></li></ul><h5 id="安装Docker-CE-1"><a href="#安装Docker-CE-1" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h5><p>切换到对应的目录进行下载和安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install /path/to/package.rpm</span></span><br></pre></td></tr></table></figure><h5 id="启动Docker-1"><a href="#启动Docker-1" class="headerlink" title="启动Docker"></a>启动Docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><h5 id="通过运行hello-world-验证Docker-CE-安装正确-1"><a href="#通过运行hello-world-验证Docker-CE-安装正确-1" class="headerlink" title="通过运行hello-world 验证Docker CE 安装正确"></a>通过运行<code>hello-world</code> 验证Docker CE 安装正确</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><h4 id="通过使用便捷脚本安装"><a href="#通过使用便捷脚本安装" class="headerlink" title="通过使用便捷脚本安装"></a>通过使用便捷脚本安装</h4><p>Docker 提供了便捷脚本在<a href="https://get.docker.com/" target="_blank" rel="noopener">get.docker.com</a>和<a href="https://test.docker.com/" target="_blank" rel="noopener">test.docker.com</a>,使用脚本安装可能会存在安全风险，建议不要在生产环境中使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker在越来越多的项目中使用，快捷、高效的部署，为我们提供了一个统一的环境，方便部署，当然还有其他很多的优点，就不一一列举了。安装基于&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker官方文档&lt;/a&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="Docker" scheme="https://blog.searchinfogo.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Feign表单提交</title>
    <link href="https://blog.searchinfogo.com/2019/06/12/feign-post-form-data/"/>
    <id>https://blog.searchinfogo.com/2019/06/12/feign-post-form-data/</id>
    <published>2019-06-12T08:29:26.000Z</published>
    <updated>2019-10-20T04:54:47.381Z</updated>
    
    <content type="html"><![CDATA[<p>Feign在正常调用的时候，一般都是基于<code>application/json</code>的方式进行传输数据的，但是有时候我们内部调用的服务是基于<code>表单提交</code>的，默认使用的<code>JSON</code>提交。所以就需要对请求进行改造。<a id="more"></a></p><h4 id="默认JSON-提交"><a href="#默认JSON-提交" class="headerlink" title="默认JSON 提交"></a>默认JSON 提交</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"xxx"</span>, url = <span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xxx</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value =<span class="string">"xxx"</span>)</span><br><span class="line">    <span class="function">Object <span class="title">getXxxInfo</span><span class="params">(@RequestBody xxxReq xxxReq)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的就是默认的方式</p><h4 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h4><p>使用表单的情况下，需要引入两个jar，使用maven 进行添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义表单解码器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> feign.codec.Encoder;</span><br><span class="line"><span class="keyword">import</span> feign.form.spring.SpringFormEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-11 15:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormSupportConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * new一个form编码器，实现支持form表单提交</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignFormEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启Feign的日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-25 19:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"ucd"</span>, url = <span class="string">"$&#123;xxx&#125;"</span>, configuration = FormSupportConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xxx</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/xxx/xxx"</span>, consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;, produces = &#123;MediaType.ALL_VALUE&#125;)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">Response <span class="title">payRequest</span><span class="params">(Map&lt;String, ?&gt; queryParam)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义的接收使用Response，有时候我们需要验证签名的时候，sign一般在header中，如果直接使用对象接收，就没有办法进行签名验证，使用Response进行接收,通过<code>response.body().asReader()</code>方法取出body中的内容再进行处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Feign在正常调用的时候，一般都是基于&lt;code&gt;application/json&lt;/code&gt;的方式进行传输数据的，但是有时候我们内部调用的服务是基于&lt;code&gt;表单提交&lt;/code&gt;的，默认使用的&lt;code&gt;JSON&lt;/code&gt;提交。所以就需要对请求进行改造。
    
    </summary>
    
      <category term="Java" scheme="https://blog.searchinfogo.com/categories/Java/"/>
    
    
      <category term="Feign" scheme="https://blog.searchinfogo.com/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>swagger2.9.2的NumberFormatException</title>
    <link href="https://blog.searchinfogo.com/2019/05/20/swagger-2.9.2-NumberFormatException/"/>
    <id>https://blog.searchinfogo.com/2019/05/20/swagger-2.9.2-NumberFormatException/</id>
    <published>2019-05-20T08:00:45.000Z</published>
    <updated>2019-10-20T04:54:47.423Z</updated>
    
    <content type="html"><![CDATA[<p>SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ WARN ] [<span class="number">2019</span>-<span class="number">05</span>-<span class="number">20</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">47</span>] [http-nio-<span class="number">8080</span>-exec-<span class="number">6</span>] i.s.m.p.AbstractSerializableParameter [<span class="number">421</span>]  - Illegal DefaultValue <span class="number">0</span> <span class="keyword">for</span> parameter type integer</span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">""</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>)</span><br><span class="line">at java.lang.Long.valueOf(Long.java:<span class="number">803</span>)</span><br><span class="line">at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class="number">412</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure><p>可以看到是在<code>Long.parseLong()</code>转换的时候报错了</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>试了网上说的增加默认值，但是在我本地没有生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"id"</span>,example = <span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><p>第二种方法<br>pom中增加新的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> # 默认的配置</span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"># 增加两个配置</span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加上面的配置后，就不再报错了。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>1.5.20的源码，判断如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"x-example"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.example == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"integer"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                   <span class="keyword">return</span> Long.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"number"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                   <span class="keyword">return</span> Double.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (<span class="string">"boolean"</span>.equals(<span class="keyword">this</span>.type) &amp;&amp; (<span class="string">"true"</span>.equalsIgnoreCase(<span class="keyword">this</span>.example) || <span class="string">"false"</span>.equalsIgnoreCase(<span class="keyword">this</span>.defaultValue))) &#123;</span><br><span class="line">                   <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (NumberFormatException var2) &#123;</span><br><span class="line">               LOGGER.warn(String.format(<span class="string">"Illegal DefaultValue %s for parameter type %s"</span>, <span class="keyword">this</span>.defaultValue, <span class="keyword">this</span>.type), var2);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.example;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>1.5.22 的源码，判断如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"x-example"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.example != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.example.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"integer"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Long.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"number"</span>.equals(<span class="keyword">this</span>.type)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Double.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"boolean"</span>.equals(<span class="keyword">this</span>.type) &amp;&amp; (<span class="string">"true"</span>.equalsIgnoreCase(<span class="keyword">this</span>.example) || <span class="string">"false"</span>.equalsIgnoreCase(<span class="keyword">this</span>.defaultValue))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">this</span>.example);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException var2) &#123;</span><br><span class="line">                LOGGER.warn(String.format(<span class="string">"Illegal DefaultValue %s for parameter type %s"</span>, <span class="keyword">this</span>.defaultValue, <span class="keyword">this</span>.type), var2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.example;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.example;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出对example的判断是不同的，增加了当example为空的时候，直接返回example，所以不会再报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringCloud、Swagger2.9.2版本,在访问swagger首页的时候，控制台报错。具体错误如下:
    
    </summary>
    
      <category term="Java" scheme="https://blog.searchinfogo.com/categories/Java/"/>
    
    
      <category term="Swagger2" scheme="https://blog.searchinfogo.com/tags/Swagger2/"/>
    
  </entry>
  
  <entry>
    <title>apollo 配置提前加载</title>
    <link href="https://blog.searchinfogo.com/2019/05/18/apollo-eagerload/"/>
    <id>https://blog.searchinfogo.com/2019/05/18/apollo-eagerload/</id>
    <published>2019-05-18T02:00:11.000Z</published>
    <updated>2019-10-20T04:54:47.361Z</updated>
    
    <content type="html"><![CDATA[<h4 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h4><p>项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现<code>${}</code>没有生效。<br>导致请求调用的时候出错。<a id="more"></a></p><h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><p>首先是检查配置是否正确，请求的代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"xxx"</span>, url = <span class="string">"$&#123;xxx&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignClientService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实体列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xxx xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/xxx/xxx/xxx"</span>)</span><br><span class="line">    <span class="function">FeignResp&lt;EntityListVO&gt; <span class="title">getEntityList</span><span class="params">(@RequestParam(value = <span class="string">"xxx"</span>)</span> String xxx) <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>当url使用固定时，可以正常的解析出请求的url，使用<code>${}</code>没有生效。<br>这个时候查询了Apollo的文档<a href=""https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#3213-spring-boot%E9%9B%86%E6%88%90%E6%96%B9%E5%BC%8F%E6%8E%A8%E8%8D%90"">Java客户端使用指南3.2.1.3SpringBoot集成方式</a></p><blockquote><p>Spring Boot除了支持上述两种集成方式以外，还支持通过application.properties/bootstrap.properties来配置，该方式能使配置在更早的阶段注入，比如使用@ConditionalOnProperty的场景或者是有一些spring-boot-starter在启动阶段就需要读取配置做一些事情（如dubbo-spring-boot-project），所以对于Spring Boot环境建议通过以下方式来接入Apollo(需要0.10.0及以上版本）。<br>从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)，更多信息可以参考PR 1614。参考配置示例如下：<br>     # will inject ‘application’ namespace in bootstrap phase<br>     apollo.bootstrap.enabled = true<br>     # put apollo initialization before logging system initialization<br>     apollo.bootstrap.eagerLoad.enabled=true</p></blockquote><p>增加了如上的配置后，发现仍然没有作用，然后检查了Apollo的版本，发现版本的<code>1.1.0</code>，这个时候内心是崩溃的，因为配置中心是公司统一使用的，所以没有办法随便升级，只能自己想办法了。</p><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>没办法在Springboot启动前加载，可以尝试手动加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ctrip.framework.apollo.ConfigService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientUrlConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initSet(<span class="string">"此处写你需要提前初始化的key"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSet</span><span class="params">(String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            String val = ConfigService.getAppConfig().getProperty(key, <span class="keyword">null</span>);</span><br><span class="line">            System.setProperty(key, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>SpringApplication.run()</code> 之前加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> ClientUrlConfig().init();</span><br><span class="line">       SpringApplication.run(Application.class, args);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过在启动前将配置注入，<code>${}</code> 就可以获取到正确的链接了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;碰到的问题&quot;&gt;&lt;a href=&quot;#碰到的问题&quot; class=&quot;headerlink&quot; title=&quot;碰到的问题&quot;&gt;&lt;/a&gt;碰到的问题&lt;/h4&gt;&lt;p&gt;项目基于SpringCloud+Apollo配置中心，在开发阶段，Feign远程调用的时候url是写死的，但是提测后，需要进行灵活配置，所以使用了占位符，发现&lt;code&gt;${}&lt;/code&gt;没有生效。&lt;br&gt;导致请求调用的时候出错。
    
    </summary>
    
      <category term="Java" scheme="https://blog.searchinfogo.com/categories/Java/"/>
    
    
      <category term="Apollo、Feign" scheme="https://blog.searchinfogo.com/tags/Apollo%E3%80%81Feign/"/>
    
  </entry>
  
  <entry>
    <title>Java 常量字符串过长</title>
    <link href="https://blog.searchinfogo.com/2019/04/29/Java-constant-string-is-too-long/"/>
    <id>https://blog.searchinfogo.com/2019/04/29/Java-constant-string-is-too-long/</id>
    <published>2019-04-29T12:44:56.000Z</published>
    <updated>2019-10-20T04:54:47.355Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h3><p>  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示<code>java: 常量字符串过长</code>。使用javac 进行编译也会有类似的提示 <a id="more"></a></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="使用StringBuilder"><a href="#使用StringBuilder" class="headerlink" title="使用StringBuilder"></a>使用StringBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">"String"</span>);</span><br><span class="line">sb.append(<span class="string">"String"</span>);</span><br><span class="line">String str = sb.toString();</span><br><span class="line">String[] parts = str.split(<span class="string">","</span>);</span><br><span class="line">System.out.println(parts.length);</span><br></pre></td></tr></table></figure><p>创建了一个对象，会根据实际的存储的内容分配内存，不会受到String在常量池中最大长度的限制<br>通过使用StringBuilder解析大文本和大JSON</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题出现&quot;&gt;&lt;a href=&quot;#问题出现&quot; class=&quot;headerlink&quot; title=&quot;问题出现&quot;&gt;&lt;/a&gt;问题出现&lt;/h3&gt;&lt;p&gt;  在IDEA中，字符串长度超过65535，进行打印，IDEA会提示&lt;code&gt;java: 常量字符串过长&lt;/code&gt;。使用javac 进行编译也会有类似的提示
    
    </summary>
    
      <category term="Java" scheme="https://blog.searchinfogo.com/categories/Java/"/>
    
    
      <category term="String" scheme="https://blog.searchinfogo.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="https://blog.searchinfogo.com/2019/04/18/interview-experience/"/>
    <id>https://blog.searchinfogo.com/2019/04/18/interview-experience/</id>
    <published>2019-04-18T13:24:20.000Z</published>
    <updated>2019-10-20T04:54:47.395Z</updated>
    
    <content type="html"><![CDATA[<p>最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。<a id="more"></a></p><p>下面是一些常见的问题:</p><h4 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h4><ul><li>HashMap的数据结构、底层实现。</li><li>常用的集合类有哪些</li><li>session 和 cookie 的区别，cookie中有哪些键值对</li><li>Java 静态块 、构造块、构造函数执行顺序</li></ul><h4 id="锁、缓存、消息队列"><a href="#锁、缓存、消息队列" class="headerlink" title="锁、缓存、消息队列"></a>锁、缓存、消息队列</h4><ul><li>分布式锁实现</li><li>乐观锁、悲观锁的实现</li><li>Redis 常用的数据结构、谈谈对缓存穿透、缓存雪崩的理解以及如何解决</li></ul><h4 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h4><ul><li>Spring 几种常用的单例模式</li><li>Spring 事务（隔离级别、传播行为、回滚策略、是否只读、超时）</li><li>Dubbo 和 Spring Cloud 的区别以及优劣</li><li>消息队列的使用、消息幂等</li><li>Spring bean 的生命周期</li><li>@Autowired 和 @Resource 的区别</li></ul><h4 id="ORM、数据库"><a href="#ORM、数据库" class="headerlink" title="ORM、数据库"></a>ORM、数据库</h4><ul><li>MyBatis 中#和$的区别</li><li>左连接的时候,条件在where中和不在where中结果的区别</li></ul><h4 id="微服务、分布式"><a href="#微服务、分布式" class="headerlink" title="微服务、分布式"></a>微服务、分布式</h4><ul><li>Session 分布式方案</li><li>Spring Cloud 中的常用组件以及用途</li><li>分布式事务</li><li>限流、降级</li></ul><p>上面是根据记忆进行的整理，还有一些遗漏，想起来后会慢慢补上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近参加了一些面试，面试中碰到了各种各样的问题，想通过简单的记录进行回顾、总结。后期会花一些时间，对立面的部分问题进行深入了解、并进行记录。
    
    </summary>
    
      <category term="面试" scheme="https://blog.searchinfogo.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="工作经历" scheme="https://blog.searchinfogo.com/tags/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring单例和多例</title>
    <link href="https://blog.searchinfogo.com/2019/03/25/Spring-singleton-and-prototype/"/>
    <id>https://blog.searchinfogo.com/2019/03/25/Spring-singleton-and-prototype/</id>
    <published>2019-03-25T03:10:00.000Z</published>
    <updated>2019-10-20T04:54:47.360Z</updated>
    
    <content type="html"><![CDATA[<p>在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是<code>singleton</code>。这篇文章主要讨论Spring 单例和多例。<a id="more"></a></p><h3 id="Spring-bean-的作用域-Spring-Bean-scopes"><a href="#Spring-bean-的作用域-Spring-Bean-scopes" class="headerlink" title="Spring bean 的作用域(Spring Bean scopes)"></a>Spring bean 的作用域(Spring Bean scopes)</h3><table><thead><tr><th align="center">作用域</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">singleton</td><td align="center">根据Spring IoC容器将单个bean定义范围限定为单个对象实例。</td></tr><tr><td align="center">prototype</td><td align="center">将单个bean定义范围限定为任意数量的对象实例。</td></tr><tr><td align="center">request</td><td align="center">将单个bean定义范围限定为单个HTTP请求的生命周期;也就是说，每个HTTP请求都有自己的bean实例，它是在单个bean定义的后面创建的。仅在Web-aware的 Spring ApplicationContext的上下文中有效。</td></tr><tr><td align="center">session</td><td align="center">将单个bean定义范围限定为HTTP会话的生命周期。仅在Web-aware的Spring ApplicationContext的上下文中有效。</td></tr><tr><td align="center">global-session</td><td align="center">将单个bean定义范围限定为全局HTTP会话的生命周期。通常仅在portlet上下文中使用时有效。仅在Web-aware 的Spring ApplicationContext的上下文中有效。</td></tr><tr><td align="center"><code>&gt;</code> 具体可以查看Spring官方文档 <a href="https://docs.spring.io/spring/docs/3.0.0.RC2/spring-framework-reference/html/ch03s05.html" target="_blank" rel="noopener">Spring Doc</a>,有更详细的说明。</td><td align="center"></td></tr><tr><td align="center">####The singleton scope(单例作用域)</td><td align="center"></td></tr><tr><td align="center">默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作用域的属性。</td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td></tr><tr><td align="center">可以在Application中进行注入</td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> TestBean <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TestBean(<span class="string">"Hello,singleton!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td></tr><tr><td align="center">测试</td><td align="center"></td></tr><tr><td align="center"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestBean testBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(testBean.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td align="center"></td></tr><tr><td align="center">还可以使用 <code>@Component</code> 的方式，可以自行实践。</td><td align="center"></td></tr></tbody></table><h4 id="The-prototype-scope-多例作用域"><a href="#The-prototype-scope-多例作用域" class="headerlink" title="The prototype scope(多例作用域)"></a>The prototype scope(多例作用域)</h4><blockquote><p>The non-singleton, prototype scope of bean deployment results in the creation of a new bean instance every time a request for that specific bean is made. That is, the bean is injected into another bean or you request it through a getBean() method call on the container. As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.</p></blockquote><p>描述了什么时候使用单例、什么时候使用多例。<br><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p><p><code>@Autowired</code>为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p><p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><p>最常用的是一个接口有多个实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPrintService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberPrintServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPrintService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringPrintServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPrintService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"String"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"numberPrintServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> IPrintService numPrintService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"stringPrintServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> IPrintService strPrintService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        numPrintService.print();</span><br><span class="line">        strPrintService.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过name来区分<code>IPrintService</code>,进行注入。<br>面试的时候还会考察单例模式的实现，最常见的是懒汉式式、饿汉模式和双重锁等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在面试的时候经常被问到Spring的单例、多例之类的问题，实际上是Bean的作用域问题。当在Spring中声明一个bean时，需要声明bean的作用域。默认是&lt;code&gt;singleton&lt;/code&gt;。这篇文章主要讨论Spring 单例和多例。
    
    </summary>
    
      <category term="Java" scheme="https://blog.searchinfogo.com/categories/Java/"/>
    
    
      <category term="Spring" scheme="https://blog.searchinfogo.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个简单的app分发平台</title>
    <link href="https://blog.searchinfogo.com/2019/03/01/build-an-app-distribution-platform/"/>
    <id>https://blog.searchinfogo.com/2019/03/01/build-an-app-distribution-platform/</id>
    <published>2019-03-01T05:39:58.000Z</published>
    <updated>2019-10-20T04:54:47.363Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk<br>比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。<a id="more"></a></p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>企业签名过后的ipa包、apk</li><li>一个域名</li><li>一台服务器</li><li>一个https证书<h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><h3 id="搭建一个nginx-web-环境"><a href="#搭建一个nginx-web-环境" class="headerlink" title="搭建一个nginx web 环境"></a>搭建一个nginx web 环境</h3>首先使用nignx搭建一个web环境，web的页面可以自己写，或者抓取第三方的(页面的内容其实简单，主要包括判断是否在微信，如果在微信，提示使用浏览器打开)。<br>大家一般都是使用微信的扫一扫<h3 id="获取apk、ipa、plist、iOS-app-icon文件公网地址"><a href="#获取apk、ipa、plist、iOS-app-icon文件公网地址" class="headerlink" title="获取apk、ipa、plist、iOS app icon文件公网地址"></a>获取apk、ipa、plist、iOS app icon文件公网地址</h3>配置好域名解析、对应的nginx文件配置后，得到apk、ipa、plist、icon四个文件的下载地址。<br><code>https://xxxx.xxxx.com/xxx.apk</code><br><code>https://xxxx.xxxx.com/xxx.ipa</code><br><code>https://xxxx.xxxx.com/xxx.plist</code><br><code>https://xxxx.xxxx.com/xxx.png</code></li></ul><h3 id="配置plist文件的内容"><a href="#配置plist文件的内容" class="headerlink" title="配置plist文件的内容"></a>配置plist文件的内容</h3><figure class="highlight plist"><figcaption><span>文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://xxx.xxx.com/download/xxx.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>needs-shine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://xxx.xxx.com/img/xxx.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>io.xxx.xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>subtitle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要修改<code>software-package</code>、<code>display-image</code> 、<code>subtitle</code>、<code>title</code><br><code>software-package</code> 使用 <code>https://xxxx.xxxx.com/xxx.ipa</code> 的地址</p><h3 id="配置地址"><a href="#配置地址" class="headerlink" title="配置地址"></a>配置地址</h3><p>在下载页面配置<code>apk</code>下载地址以及<code>plist</code>地址，这里需要注意，由于iOS 的安全机制，plist文件需要使用https地址，否则会导致ipa 文件无法正常安装。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要配置的其实就是iOS 的下载所需的plist文件，以及https访问，如果这两个地方出错，会导致ipa 下载正常，确无法正常安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h4&gt;&lt;p&gt;   app开发的时候需要进行测试，每次频繁的拷贝发送；iOS 的企业包上传到分发平台无法通过，有限制等等，这个时候就需要我们自己有自己的分发平台。Android的apk&lt;br&gt;比较好解决，比较麻烦的是iOS的分发(主要针对企业包，或者加了uuid的测试包)。第三方分发平台也有第三方的好处，但是自己搭建的更自由。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="app 分发" scheme="https://blog.searchinfogo.com/tags/app-%E5%88%86%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>centos安装redis5.x</title>
    <link href="https://blog.searchinfogo.com/2018/12/14/centos-install-redis5-x/"/>
    <id>https://blog.searchinfogo.com/2018/12/14/centos-install-redis5-x/</id>
    <published>2018-12-14T02:35:35.000Z</published>
    <updated>2019-10-20T04:54:47.364Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。<a id="more"></a></p></blockquote><p>我们在项目的开发中很多地方都会用到reids，用户信息缓存、分布式锁、定时器、简单的队列等等，要想使用Redis，<br>第一件事就是安装Redis。</p><h4 id="安装Redis（默认CentOS-7）"><a href="#安装Redis（默认CentOS-7）" class="headerlink" title="安装Redis（默认CentOS 7）"></a>安装Redis（默认CentOS 7）</h4><ul><li>下载Redis<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></li><li>解压编译<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-5.0.3.tar.gz</span><br><span class="line">cd redis-5.0.3</span><br><span class="line">make install</span><br><span class="line">#安装redis-server（默认配置）</span><br><span class="line">sh ./utils/install_server.sh</span><br><span class="line"></span><br><span class="line">Welcome to the redis service installer</span><br><span class="line">This script will help you easily set up a running redis server</span><br><span class="line"></span><br><span class="line">Please select the redis port for this instance: [6379]</span><br><span class="line">Selecting default: 6379</span><br><span class="line">Please select the redis config file name [/etc/redis/6379.conf]</span><br><span class="line">Selected default - /etc/redis/6379.conf</span><br><span class="line">Please select the redis log file name [/var/log/redis_6379.log]</span><br><span class="line">Selected default - /var/log/redis_6379.log</span><br><span class="line">Please select the data directory for this instance [/var/lib/redis/6379]</span><br><span class="line">Selected default - /var/lib/redis/6379</span><br><span class="line">Please select the redis executable path [/usr/local/bin/redis-server]</span><br><span class="line">Selected config:</span><br><span class="line">Port           : 6379</span><br><span class="line">Config file    : /etc/redis/6379.conf</span><br><span class="line">Log file       : /var/log/redis_6379.log</span><br><span class="line">Data dir       : /var/lib/redis/6379</span><br><span class="line">Executable     : /usr/local/bin/redis-server</span><br><span class="line">Cli Executable : /usr/local/bin/redis-cli</span><br><span class="line">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class="line">Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379</span><br><span class="line">Installing service...</span><br><span class="line">Successfully added to chkconfig!</span><br><span class="line">Successfully added to runlevels 345!</span><br><span class="line">Starting Redis server...</span><br><span class="line">Installation successful!</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/redis/6379.config</span><br><span class="line"><span class="meta">#</span><span class="bash">设置后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash">设置数据持久化</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta">#</span><span class="bash">设置ip 默认最好不修改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass 123456</span></span><br></pre></td></tr></table></figure><h4 id="创建服务脚本"><a href="#创建服务脚本" class="headerlink" title="创建服务脚本"></a>创建服务脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">systemctl start /etc/init.d/redis_6379</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。[3]在2013年5月之前，其开发由VMware赞助。[4根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="Redis" scheme="https://blog.searchinfogo.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MD5、SALT加密浅析</title>
    <link href="https://blog.searchinfogo.com/2018/11/06/md5-and-salt-encryption/"/>
    <id>https://blog.searchinfogo.com/2018/11/06/md5-and-salt-encryption/</id>
    <published>2018-11-06T03:35:06.000Z</published>
    <updated>2019-10-20T04:54:47.398Z</updated>
    
    <content type="html"><![CDATA[<p>密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，<br>通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。<a id="more"></a></p><h3 id="什么是Salt盐"><a href="#什么是Salt盐" class="headerlink" title="什么是Salt盐"></a>什么是<code>Salt</code>盐</h3><blockquote><p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p></blockquote><blockquote><p>在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。</p></blockquote><h3 id="Java-实现MD5加密"><a href="#Java-实现MD5加密" class="headerlink" title="Java 实现MD5加密"></a>Java 实现MD5加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaImplMD5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String numStr = <span class="string">"123456"</span>;</span><br><span class="line">        String result = getMD5(numStr);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建具有指定算法名称的摘要</span></span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">//使用指定的字节数组更新摘要</span></span><br><span class="line">            md.update(str.getBytes());</span><br><span class="line">            <span class="comment">//进行哈希计算并返回一个字节数组</span></span><br><span class="line">            <span class="keyword">byte</span> mdBytes[] = md.digest();</span><br><span class="line">            String hash = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">//循环字节数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mdBytes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="comment">//如果有小于0的字节,则转换为正数</span></span><br><span class="line">                <span class="keyword">if</span> (mdBytes[i] &lt; <span class="number">0</span>)</span><br><span class="line">                    temp = <span class="number">256</span> + mdBytes[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp = mdBytes[i];</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; <span class="number">16</span>)</span><br><span class="line">                    hash += <span class="string">"0"</span>;</span><br><span class="line">                <span class="comment">//将字节转换为16进制后，转换为字符串</span></span><br><span class="line">                hash += Integer.toString(temp, <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hash;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e10adc3949ba59abbe56e057f20f883e</span><br></pre></td></tr></table></figure><p>去MD5解码网站，很容易得到加密的内容是<code>123456</code></p><h3 id="Guava-实现MD5加密"><a href="#Guava-实现MD5加密" class="headerlink" title="Guava 实现MD5加密"></a>Guava 实现MD5加密</h3><p>Guava 工程包含了若干被Google的 Java项目广泛依赖 的核心库，包含了一些常用工具类的实现。<br>导入maven 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>27.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>bundle<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.HashCode;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.HashFunction;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaImplMD5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String numStr = <span class="string">"123456"</span>;</span><br><span class="line">        HashFunction hf = Hashing.md5();</span><br><span class="line">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class="line">        System.out.println(hc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果跟上面相同，但是<code>md5()</code> 的这个方法代码中标记弃用了。推荐使用新的方法<br>代码的量少了很多，不需要自己做过多的处理。</p><h3 id="加盐处理"><a href="#加盐处理" class="headerlink" title="加盐处理"></a>加盐处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.HashCode;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.HashFunction;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaImplMD5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SALT = <span class="string">"0fdfa5e5a88bedae440a9d8ae7c84708"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String numStr = <span class="string">"123456"</span>;</span><br><span class="line">        System.out.println(getMD5WithSalt(numStr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5</span><span class="params">(String numStr)</span> </span>&#123;</span><br><span class="line">        HashFunction hf = Hashing.md5();</span><br><span class="line">        HashCode hc = hf.newHasher().putString(numStr, Charset.defaultCharset()).hash();</span><br><span class="line">        <span class="keyword">return</span> hc.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5WithSalt</span><span class="params">(String numStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMD5(getMD5(numStr) + SALT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会得到不一样的MD5值，不太容易破解密码，但是使用了同样的salt，还是会出现一样的MD5结果，所以最好每个人都能有不同的salt，提高安全性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密码的保存是开发的过程中必不可少的一部分，通常我们一般使用MD5加密，来对密码安全进行简单的加强，但是只是使用MD5进行加密，如果密码相同，MD5值就会一样，&lt;br&gt;通过一些在线的MD5解析网站的解析，密码大概率就会被解析出来，使用相同密码的人，也会受到影响。通过“加盐” ，可以提高密码被破解的难度。
    
    </summary>
    
      <category term="Linux" scheme="https://blog.searchinfogo.com/categories/Linux/"/>
    
    
      <category term="加密" scheme="https://blog.searchinfogo.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>pandas学习笔记-3</title>
    <link href="https://blog.searchinfogo.com/2018/09/26/study-pandas-notes-3/"/>
    <id>https://blog.searchinfogo.com/2018/09/26/study-pandas-notes-3/</id>
    <published>2018-09-26T08:19:09.000Z</published>
    <updated>2019-10-20T04:54:47.421Z</updated>
    
    <content type="html"><![CDATA[<h4 id="6-pandas数据排序-源码见demo6-py"><a href="#6-pandas数据排序-源码见demo6-py" class="headerlink" title="6.pandas数据排序(源码见demo6.py)"></a>6.pandas数据排序(<a href="https://github.com/junhuali/study-pandas/blob/master/demo6.py" target="_blank" rel="noopener">源码见demo6.py</a>)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">movies = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class="line">print(movies.head())</span><br><span class="line"></span><br><span class="line">print(movies[<span class="string">'title'</span>].sort_values(ascending=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">print(movies[<span class="string">'title'</span>])</span><br><span class="line"></span><br><span class="line">print(movies.sort_values(<span class="string">'title'</span>))</span><br><span class="line"></span><br><span class="line">print(movies.sort_values(<span class="string">'duration'</span>, ascending=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line">print(movies.head())</span><br><span class="line"></span><br><span class="line">print(movies.sort_values([<span class="string">'content_rating'</span>, <span class="string">'duration'</span>]))</span><br></pre></td></tr></table></figure><h4 id="7-pandas通过列名过滤行数据-源码见demo7-py"><a href="#7-pandas通过列名过滤行数据-源码见demo7-py" class="headerlink" title="7.pandas通过列名过滤行数据(源码见demo7.py)"></a>7.pandas通过列名过滤行数据(<a href="https://github.com/junhuali/study-pandas/blob/master/demo7.py" target="_blank" rel="noopener">源码见demo7.py</a>)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">movies = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class="line">print(movies.head())</span><br><span class="line">print(movies.shape)</span><br><span class="line"></span><br><span class="line">print(type(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">booleans = []</span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> movies.duration:</span><br><span class="line">    <span class="keyword">if</span> length &gt;= <span class="number">20</span>:</span><br><span class="line">        booleans.append(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        booleans.append(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">booleans[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">len(booleans)</span><br><span class="line"></span><br><span class="line">is_long = pd.Series(booleans)</span><br><span class="line">is_long.head()</span><br><span class="line"></span><br><span class="line">is_long = movies.duration &gt;= <span class="number">200</span></span><br><span class="line">is_long.head()</span><br><span class="line">movies[<span class="string">'genre'</span>]</span><br><span class="line"></span><br><span class="line">movies[movies.duration &gt;= <span class="number">200</span>][<span class="string">'genre'</span>]</span><br><span class="line">movies[is_long]</span><br></pre></td></tr></table></figure><p>p7<br>讲解了使用sort_values() 方法对数据进行排序<br>p8<br>讲解了通过指定的条件对数据进行筛选</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;6-pandas数据排序-源码见demo6-py&quot;&gt;&lt;a href=&quot;#6-pandas数据排序-源码见demo6-py&quot; class=&quot;headerlink&quot; title=&quot;6.pandas数据排序(源码见demo6.py)&quot;&gt;&lt;/a&gt;6.pandas数据排序(
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.searchinfogo.com/categories/Python/"/>
    
    
      <category term="pandas" scheme="https://blog.searchinfogo.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>pandas学习笔记-2</title>
    <link href="https://blog.searchinfogo.com/2018/09/25/study-pandas-notes-2/"/>
    <id>https://blog.searchinfogo.com/2018/09/25/study-pandas-notes-2/</id>
    <published>2018-09-25T15:10:01.000Z</published>
    <updated>2019-10-20T04:54:47.420Z</updated>
    
    <content type="html"><![CDATA[<h4 id="3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py"><a href="#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py" class="headerlink" title="3.为什么pandas命令以括号结尾，其他的命令不呢？(源码见demo3.py)"></a>3.为什么pandas命令以括号结尾，其他的命令不呢？(<a href="https://github.com/junhuali/study-pandas/blob/master/demo3.py" target="_blank" rel="noopener">源码见demo3.py</a>)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">movies = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/imdb_1000.csv'</span>)</span><br><span class="line">head = movies.head()</span><br><span class="line">print(head)</span><br><span class="line"></span><br><span class="line">describe = movies.describe()</span><br><span class="line">print(describe)</span><br><span class="line"></span><br><span class="line">shape = movies.shape</span><br><span class="line">print(shape)</span><br><span class="line"></span><br><span class="line">dtypes = movies.dtypes</span><br><span class="line">print(dtypes)</span><br><span class="line"></span><br><span class="line">print(type(movies))</span><br><span class="line"></span><br><span class="line">movies.describe(include=[<span class="string">'object'</span>])</span><br></pre></td></tr></table></figure><h4 id="4-在pandas-DataFrame-中重命名列名-源码见demo4-py"><a href="#4-在pandas-DataFrame-中重命名列名-源码见demo4-py" class="headerlink" title="4. 在pandas DataFrame 中重命名列名(源码见demo4.py)"></a>4. 在pandas DataFrame 中重命名列名(<a href="https://github.com/junhuali/study-pandas/blob/master/demo4.py" target="_blank" rel="noopener">源码见demo4.py</a>)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class="line"></span><br><span class="line">head = ufo.head()</span><br><span class="line"></span><br><span class="line">print(head)</span><br><span class="line"></span><br><span class="line">print(ufo.columns)</span><br><span class="line"></span><br><span class="line">ufo.rename(columns=&#123;<span class="string">'Colors Reported'</span>: <span class="string">'Colors_Reported'</span>, <span class="string">'Shape Reported'</span>: <span class="string">'Shape_Reported'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(ufo.columns)</span><br><span class="line"></span><br><span class="line">ufo_cols = &#123;<span class="string">'city'</span>, <span class="string">'colors reported'</span>, <span class="string">'shape reported'</span>, <span class="string">'state'</span>, <span class="string">'time'</span>&#125;</span><br><span class="line"></span><br><span class="line">ufo.columns = ufo_cols</span><br><span class="line"></span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>, names=ufo_cols, header=<span class="number">0</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">print(ufo.columns)</span><br><span class="line"></span><br><span class="line">ufo.columns = ufo.columns.str.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</span><br><span class="line">print(ufo.columns)</span><br></pre></td></tr></table></figure><h4 id="5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py"><a href="#5-在pandas-DataFrame-中移除指定的行和列-源码见demo5-py" class="headerlink" title="5.在pandas DataFrame 中移除指定的行和列(源码见demo5.py)"></a>5.在pandas DataFrame 中移除指定的行和列(<a href="https://github.com/junhuali/study-pandas/blob/master/demo5.py" target="_blank" rel="noopener">源码见demo5.py</a>)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ufo = pd.read_csv(<span class="string">'https://blog.searchinfogo.com/download/data/data/ufo.csv'</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line">print(ufo.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0 按行 axi=1 按列</span></span><br><span class="line">ufo.drop(<span class="string">'Colors Reported'</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">ufo.drop([<span class="string">'City'</span>, <span class="string">'State'</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line"></span><br><span class="line">ufo.drop([<span class="number">0</span>, <span class="number">1</span>], axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(ufo.head())</span><br><span class="line">print(ufo.shape)</span><br></pre></td></tr></table></figure><p>视频p4<br>讲解了怎么通过使用ipython notebook ，调出对应pandas的方法或者函数的说明，在使用的时候可以通过点击对应方法，然后加上<code>shift+tab</code>键，<br>查看对应的说明。<br>视频p5<br>讲解了通过几种方法修改数据的列名<br>视频p6<br>讲解了通过drop 方法，移除对应的行列，通过这个方法，可以将数据中不需要的部分或者是无效数据进行清洗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py&quot;&gt;&lt;a href=&quot;#3-为什么pandas命令以括号结尾，其他的命令不呢？-源码见demo3-py&quot; class=&quot;headerlink&quot; title=&quot;3.为什么pandas命令以
      
    
    </summary>
    
      <category term="Python" scheme="https://blog.searchinfogo.com/categories/Python/"/>
    
    
      <category term="pandas" scheme="https://blog.searchinfogo.com/tags/pandas/"/>
    
  </entry>
  
</feed>
